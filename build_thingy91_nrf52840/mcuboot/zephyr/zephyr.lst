
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	200081c0 	.word	0x200081c0
}
   4:	00004aad 	.word	0x00004aad
   8:	0000abe9 	.word	0x0000abe9
   c:	00004b01 	.word	0x00004b01
  10:	00004b01 	.word	0x00004b01
  14:	00004b01 	.word	0x00004b01
  18:	00004b01 	.word	0x00004b01
	...
  2c:	000048a5 	.word	0x000048a5
  30:	00004b01 	.word	0x00004b01
  34:	00000000 	.word	0x00000000
  38:	00004851 	.word	0x00004851
  3c:	0000a985 	.word	0x0000a985

00000040 <_irq_vector_table>:
  40:	00004a6d 00004a6d 00004a6d 00004a6d     mJ..mJ..mJ..mJ..
  50:	00004a6d 00004a6d 00004a6d 00004a6d     mJ..mJ..mJ..mJ..
  60:	00004a6d 00004a6d 00004a6d 00004a6d     mJ..mJ..mJ..mJ..
  70:	00004a6d 00004a6d 00004a6d 00004a6d     mJ..mJ..mJ..mJ..
  80:	00004a6d 00004a6d 00004a6d 00004a6d     mJ..mJ..mJ..mJ..
  90:	00004a6d 00004a6d 00004a6d 00004a6d     mJ..mJ..mJ..mJ..
  a0:	00004a6d 00004a6d 00004a6d 00004a6d     mJ..mJ..mJ..mJ..
  b0:	00004a6d 00004a6d 00004a6d 00004a6d     mJ..mJ..mJ..mJ..
  c0:	00004a6d 00004a6d 00004a6d 00004a6d     mJ..mJ..mJ..mJ..
  d0:	00004a6d 00004a6d 00004a6d 00004a6d     mJ..mJ..mJ..mJ..
  e0:	00004a6d 00004a6d 00004a6d 00004a6d     mJ..mJ..mJ..mJ..
  f0:	00004a6d 00004a6d 00004a6d 00004a6d     mJ..mJ..mJ..mJ..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b96c 	b.w	3f0 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f806 	bl	130 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__udivmoddi4>:
     130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     134:	9e08      	ldr	r6, [sp, #32]
     136:	460d      	mov	r5, r1
     138:	4604      	mov	r4, r0
     13a:	468e      	mov	lr, r1
     13c:	2b00      	cmp	r3, #0
     13e:	f040 8082 	bne.w	246 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x46>
     142:	428a      	cmp	r2, r1
     144:	4617      	mov	r7, r2
     146:	d946      	bls.n	1d6 <CONFIG_IDLE_STACK_SIZE+0x96>
     148:	fab2 f282 	clz	r2, r2
     14c:	b14a      	cbz	r2, 162 <CONFIG_IDLE_STACK_SIZE+0x22>
     14e:	f1c2 0120 	rsb	r1, r2, #32
     152:	fa05 f302 	lsl.w	r3, r5, r2
     156:	fa20 f101 	lsr.w	r1, r0, r1
     15a:	4097      	lsls	r7, r2
     15c:	ea41 0e03 	orr.w	lr, r1, r3
     160:	4094      	lsls	r4, r2
     162:	ea4f 4817 	mov.w	r8, r7, lsr #16
     166:	0c23      	lsrs	r3, r4, #16
     168:	fbbe fcf8 	udiv	ip, lr, r8
     16c:	b2b9      	uxth	r1, r7
     16e:	fb08 ee1c 	mls	lr, r8, ip, lr
     172:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     176:	fb0c f001 	mul.w	r0, ip, r1
     17a:	4298      	cmp	r0, r3
     17c:	d90a      	bls.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     17e:	18fb      	adds	r3, r7, r3
     180:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
     184:	f080 8116 	bcs.w	3b4 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x1b4>
     188:	4298      	cmp	r0, r3
     18a:	f240 8113 	bls.w	3b4 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x1b4>
     18e:	f1ac 0c02 	sub.w	ip, ip, #2
     192:	443b      	add	r3, r7
     194:	1a1b      	subs	r3, r3, r0
     196:	b2a4      	uxth	r4, r4
     198:	fbb3 f0f8 	udiv	r0, r3, r8
     19c:	fb08 3310 	mls	r3, r8, r0, r3
     1a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1a4:	fb00 f101 	mul.w	r1, r0, r1
     1a8:	42a1      	cmp	r1, r4
     1aa:	d909      	bls.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     1ac:	193c      	adds	r4, r7, r4
     1ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     1b2:	f080 8101 	bcs.w	3b8 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x1b8>
     1b6:	42a1      	cmp	r1, r4
     1b8:	f240 80fe 	bls.w	3b8 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x1b8>
     1bc:	3802      	subs	r0, #2
     1be:	443c      	add	r4, r7
     1c0:	1a64      	subs	r4, r4, r1
     1c2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     1c6:	2100      	movs	r1, #0
     1c8:	b11e      	cbz	r6, 1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     1ca:	40d4      	lsrs	r4, r2
     1cc:	2300      	movs	r3, #0
     1ce:	e9c6 4300 	strd	r4, r3, [r6]
     1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d6:	b902      	cbnz	r2, 1da <CONFIG_IDLE_STACK_SIZE+0x9a>
     1d8:	deff      	udf	#255	; 0xff
     1da:	fab2 f282 	clz	r2, r2
     1de:	2a00      	cmp	r2, #0
     1e0:	d14f      	bne.n	282 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x82>
     1e2:	1bcb      	subs	r3, r1, r7
     1e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1e8:	fa1f f887 	uxth.w	r8, r7
     1ec:	2101      	movs	r1, #1
     1ee:	fbb3 fcfe 	udiv	ip, r3, lr
     1f2:	0c25      	lsrs	r5, r4, #16
     1f4:	fb0e 331c 	mls	r3, lr, ip, r3
     1f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     1fc:	fb08 f30c 	mul.w	r3, r8, ip
     200:	42ab      	cmp	r3, r5
     202:	d907      	bls.n	214 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x14>
     204:	197d      	adds	r5, r7, r5
     206:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     20a:	d202      	bcs.n	212 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x12>
     20c:	42ab      	cmp	r3, r5
     20e:	f200 80e7 	bhi.w	3e0 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x1e0>
     212:	4684      	mov	ip, r0
     214:	1aed      	subs	r5, r5, r3
     216:	b2a3      	uxth	r3, r4
     218:	fbb5 f0fe 	udiv	r0, r5, lr
     21c:	fb0e 5510 	mls	r5, lr, r0, r5
     220:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     224:	fb08 f800 	mul.w	r8, r8, r0
     228:	45a0      	cmp	r8, r4
     22a:	d907      	bls.n	23c <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x3c>
     22c:	193c      	adds	r4, r7, r4
     22e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     232:	d202      	bcs.n	23a <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x3a>
     234:	45a0      	cmp	r8, r4
     236:	f200 80d7 	bhi.w	3e8 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x1e8>
     23a:	4618      	mov	r0, r3
     23c:	eba4 0408 	sub.w	r4, r4, r8
     240:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     244:	e7c0      	b.n	1c8 <CONFIG_IDLE_STACK_SIZE+0x88>
     246:	428b      	cmp	r3, r1
     248:	d908      	bls.n	25c <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x5c>
     24a:	2e00      	cmp	r6, #0
     24c:	f000 80af 	beq.w	3ae <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x1ae>
     250:	2100      	movs	r1, #0
     252:	e9c6 0500 	strd	r0, r5, [r6]
     256:	4608      	mov	r0, r1
     258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     25c:	fab3 f183 	clz	r1, r3
     260:	2900      	cmp	r1, #0
     262:	d14b      	bne.n	2fc <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0xfc>
     264:	42ab      	cmp	r3, r5
     266:	d302      	bcc.n	26e <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x6e>
     268:	4282      	cmp	r2, r0
     26a:	f200 80b7 	bhi.w	3dc <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x1dc>
     26e:	1a84      	subs	r4, r0, r2
     270:	eb65 0303 	sbc.w	r3, r5, r3
     274:	2001      	movs	r0, #1
     276:	469e      	mov	lr, r3
     278:	2e00      	cmp	r6, #0
     27a:	d0aa      	beq.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     27c:	e9c6 4e00 	strd	r4, lr, [r6]
     280:	e7a7      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     282:	f1c2 0c20 	rsb	ip, r2, #32
     286:	fa01 f302 	lsl.w	r3, r1, r2
     28a:	4097      	lsls	r7, r2
     28c:	fa20 f00c 	lsr.w	r0, r0, ip
     290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     294:	fa21 fc0c 	lsr.w	ip, r1, ip
     298:	4318      	orrs	r0, r3
     29a:	fbbc f1fe 	udiv	r1, ip, lr
     29e:	0c05      	lsrs	r5, r0, #16
     2a0:	fb0e cc11 	mls	ip, lr, r1, ip
     2a4:	fa1f f887 	uxth.w	r8, r7
     2a8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ac:	fb01 f308 	mul.w	r3, r1, r8
     2b0:	42ab      	cmp	r3, r5
     2b2:	fa04 f402 	lsl.w	r4, r4, r2
     2b6:	d909      	bls.n	2cc <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0xcc>
     2b8:	197d      	adds	r5, r7, r5
     2ba:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
     2be:	f080 808b 	bcs.w	3d8 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x1d8>
     2c2:	42ab      	cmp	r3, r5
     2c4:	f240 8088 	bls.w	3d8 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x1d8>
     2c8:	3902      	subs	r1, #2
     2ca:	443d      	add	r5, r7
     2cc:	1aeb      	subs	r3, r5, r3
     2ce:	b285      	uxth	r5, r0
     2d0:	fbb3 f0fe 	udiv	r0, r3, lr
     2d4:	fb0e 3310 	mls	r3, lr, r0, r3
     2d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     2dc:	fb00 f308 	mul.w	r3, r0, r8
     2e0:	42ab      	cmp	r3, r5
     2e2:	d907      	bls.n	2f4 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0xf4>
     2e4:	197d      	adds	r5, r7, r5
     2e6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     2ea:	d271      	bcs.n	3d0 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x1d0>
     2ec:	42ab      	cmp	r3, r5
     2ee:	d96f      	bls.n	3d0 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x1d0>
     2f0:	3802      	subs	r0, #2
     2f2:	443d      	add	r5, r7
     2f4:	1aeb      	subs	r3, r5, r3
     2f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2fa:	e778      	b.n	1ee <CONFIG_IDLE_STACK_SIZE+0xae>
     2fc:	f1c1 0c20 	rsb	ip, r1, #32
     300:	408b      	lsls	r3, r1
     302:	fa22 f70c 	lsr.w	r7, r2, ip
     306:	431f      	orrs	r7, r3
     308:	fa20 f40c 	lsr.w	r4, r0, ip
     30c:	fa05 f301 	lsl.w	r3, r5, r1
     310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     314:	fa25 f50c 	lsr.w	r5, r5, ip
     318:	431c      	orrs	r4, r3
     31a:	0c23      	lsrs	r3, r4, #16
     31c:	fbb5 f9fe 	udiv	r9, r5, lr
     320:	fa1f f887 	uxth.w	r8, r7
     324:	fb0e 5519 	mls	r5, lr, r9, r5
     328:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     32c:	fb09 fa08 	mul.w	sl, r9, r8
     330:	45aa      	cmp	sl, r5
     332:	fa02 f201 	lsl.w	r2, r2, r1
     336:	fa00 f301 	lsl.w	r3, r0, r1
     33a:	d908      	bls.n	34e <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x14e>
     33c:	197d      	adds	r5, r7, r5
     33e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     342:	d247      	bcs.n	3d4 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x1d4>
     344:	45aa      	cmp	sl, r5
     346:	d945      	bls.n	3d4 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x1d4>
     348:	f1a9 0902 	sub.w	r9, r9, #2
     34c:	443d      	add	r5, r7
     34e:	eba5 050a 	sub.w	r5, r5, sl
     352:	b2a4      	uxth	r4, r4
     354:	fbb5 f0fe 	udiv	r0, r5, lr
     358:	fb0e 5510 	mls	r5, lr, r0, r5
     35c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     360:	fb00 f808 	mul.w	r8, r0, r8
     364:	45a0      	cmp	r8, r4
     366:	d907      	bls.n	378 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x178>
     368:	193c      	adds	r4, r7, r4
     36a:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     36e:	d22d      	bcs.n	3cc <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x1cc>
     370:	45a0      	cmp	r8, r4
     372:	d92b      	bls.n	3cc <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x1cc>
     374:	3802      	subs	r0, #2
     376:	443c      	add	r4, r7
     378:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     37c:	eba4 0408 	sub.w	r4, r4, r8
     380:	fba0 8902 	umull	r8, r9, r0, r2
     384:	454c      	cmp	r4, r9
     386:	46c6      	mov	lr, r8
     388:	464d      	mov	r5, r9
     38a:	d319      	bcc.n	3c0 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x1c0>
     38c:	d016      	beq.n	3bc <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x1bc>
     38e:	b15e      	cbz	r6, 3a8 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x1a8>
     390:	ebb3 020e 	subs.w	r2, r3, lr
     394:	eb64 0405 	sbc.w	r4, r4, r5
     398:	fa04 fc0c 	lsl.w	ip, r4, ip
     39c:	40ca      	lsrs	r2, r1
     39e:	ea4c 0202 	orr.w	r2, ip, r2
     3a2:	40cc      	lsrs	r4, r1
     3a4:	e9c6 2400 	strd	r2, r4, [r6]
     3a8:	2100      	movs	r1, #0
     3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3ae:	4631      	mov	r1, r6
     3b0:	4630      	mov	r0, r6
     3b2:	e70e      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     3b4:	46ac      	mov	ip, r5
     3b6:	e6ed      	b.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     3b8:	4618      	mov	r0, r3
     3ba:	e701      	b.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     3bc:	4543      	cmp	r3, r8
     3be:	d2e6      	bcs.n	38e <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x18e>
     3c0:	ebb8 0e02 	subs.w	lr, r8, r2
     3c4:	eb69 0507 	sbc.w	r5, r9, r7
     3c8:	3801      	subs	r0, #1
     3ca:	e7e0      	b.n	38e <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x18e>
     3cc:	4628      	mov	r0, r5
     3ce:	e7d3      	b.n	378 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x178>
     3d0:	4660      	mov	r0, ip
     3d2:	e78f      	b.n	2f4 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0xf4>
     3d4:	4681      	mov	r9, r0
     3d6:	e7ba      	b.n	34e <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x14e>
     3d8:	4661      	mov	r1, ip
     3da:	e777      	b.n	2cc <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0xcc>
     3dc:	4608      	mov	r0, r1
     3de:	e74b      	b.n	278 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x78>
     3e0:	f1ac 0c02 	sub.w	ip, ip, #2
     3e4:	443d      	add	r5, r7
     3e6:	e715      	b.n	214 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x14>
     3e8:	3802      	subs	r0, #2
     3ea:	443c      	add	r4, r7
     3ec:	e726      	b.n	23c <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x3c>
     3ee:	bf00      	nop

000003f0 <__aeabi_idiv0>:
     3f0:	4770      	bx	lr
     3f2:	bf00      	nop

000003f4 <main>:
    return detect_value == expected;
}
#endif

void main(void)
{
     3f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_set(NRF_WDT_Type *        p_reg,
                                                  nrf_wdt_rr_register_t rr_register)
{
    p_reg->RR[rr_register] = NRF_WDT_RR_VALUE;
     3f6:	4b35      	ldr	r3, [pc, #212]	; (4cc <FIH_LABEL_FIH_CALL_END_442+0x56>)
     3f8:	4a35      	ldr	r2, [pc, #212]	; (4d0 <FIH_LABEL_FIH_CALL_END_442+0x5a>)
     3fa:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
     3fe:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
     402:	f8c3 2608 	str.w	r2, [r3, #1544]	; 0x608
     406:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
     40a:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
     40e:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
     412:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
     416:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
#ifdef CONFIG_MCUBOOT_INDICATION_LED
    /* LED init */
    led_init();
#endif

    os_heap_init();
     41a:	f000 f881 	bl	520 <os_heap_init>
    ZEPHYR_BOOT_LOG_START();

    (void)rc;

#if (!defined(CONFIG_XTENSA) && defined(DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL))
    if (!flash_device_get_binding(DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL)) {
     41e:	482d      	ldr	r0, [pc, #180]	; (4d4 <FIH_LABEL_FIH_CALL_END_442+0x5e>)
     420:	f000 f860 	bl	4e4 <flash_device_get_binding>
     424:	b900      	cbnz	r0, 428 <CONFIG_CBOR_PARSER_MAX_RECURSIONS+0x28>
        BOOT_LOG_ERR("Flash device %s not found",
		     DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL);
        while (1)
     426:	e7fe      	b.n	426 <CONFIG_CBOR_PARSER_MAX_RECURSIONS+0x26>
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     428:	482b      	ldr	r0, [pc, #172]	; (4d8 <FIH_LABEL_FIH_CALL_END_442+0x62>)
     42a:	f007 fc85 	bl	7d38 <z_impl_device_get_binding>
     42e:	4604      	mov	r4, r0
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
     430:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
     432:	6881      	ldr	r1, [r0, #8]
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
     434:	6813      	ldr	r3, [r2, #0]
     436:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
     43a:	6013      	str	r3, [r2, #0]
	}

	return api->pin_configure(port, pin, flags);
     43c:	680b      	ldr	r3, [r1, #0]
     43e:	f44f 7288 	mov.w	r2, #272	; 0x110
     442:	210d      	movs	r1, #13
     444:	4798      	blx	r3
					   gpio_port_value_t *value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	return api->port_get_raw(port, value);
     446:	68a3      	ldr	r3, [r4, #8]
     448:	a901      	add	r1, sp, #4
     44a:	685b      	ldr	r3, [r3, #4]
     44c:	4620      	mov	r0, r4
     44e:	4798      	blx	r3
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_port_get_raw(port, &value);
	if (ret == 0) {
     450:	b970      	cbnz	r0, 470 <FIH_LABEL_FIH_CALL_START_429>
            ;
    }
#endif

#ifdef CONFIG_MCUBOOT_SERIAL
    if (detect_pin(CONFIG_BOOT_SERIAL_DETECT_PORT,
     452:	9b01      	ldr	r3, [sp, #4]
     454:	049a      	lsls	r2, r3, #18
     456:	d40b      	bmi.n	470 <FIH_LABEL_FIH_CALL_START_429>
#endif // defined(DPPI_PRESENT)

#if NRF_POWER_HAS_RESETREAS
NRF_STATIC_INLINE uint32_t nrf_power_resetreas_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->RESETREAS;
     458:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     45c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    return !(rr == 0 || (rr & NRF_POWER_RESETREAS_RESETPIN_MASK));
     460:	b10b      	cbz	r3, 466 <CONFIG_CBOR_PARSER_MAX_RECURSIONS+0x66>
     462:	07db      	lsls	r3, r3, #31
     464:	d504      	bpl.n	470 <FIH_LABEL_FIH_CALL_START_429>
#ifdef CONFIG_MCUBOOT_INDICATION_LED
        gpio_pin_set(led, LED0_GPIO_PIN, 1);
#endif

        BOOT_LOG_INF("Enter the serial recovery mode");
        rc = boot_console_init();
     466:	f003 fd8f 	bl	3f88 <boot_console_init>
        __ASSERT(rc == 0, "Error initializing boot console.\n");
        boot_serial_start(&boot_funcs);
     46a:	481c      	ldr	r0, [pc, #112]	; (4dc <FIH_LABEL_FIH_CALL_END_442+0x66>)
     46c:	f004 f8d8 	bl	4620 <boot_serial_start>

00000470 <FIH_LABEL_FIH_CALL_START_429>:
        wait_for_usb_dfu(K_MSEC(CONFIG_BOOT_USB_DFU_WAIT_DELAY_MS));
        BOOT_LOG_INF("USB DFU wait time elapsed");
    }
#endif

    FIH_CALL(boot_go, fih_rc, &rsp);
     470:	a801      	add	r0, sp, #4
     472:	f000 fc75 	bl	d60 <boot_go>

00000476 <FIH_LABEL_FIH_CALL_END_442>:
    if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     476:	4b1a      	ldr	r3, [pc, #104]	; (4e0 <FIH_LABEL_FIH_CALL_END_442+0x6a>)
     478:	681b      	ldr	r3, [r3, #0]
     47a:	4283      	cmp	r3, r0
     47c:	d000      	beq.n	480 <FIH_LABEL_FIH_CALL_END_442+0xa>
        BOOT_LOG_ERR("Unable to find bootable image");
        FIH_PANIC;
     47e:	e7fe      	b.n	47e <FIH_LABEL_FIH_CALL_END_442+0x8>
/* There is only one instance of MCUBoot */
#define PROTECT_SIZE (PM_MCUBOOT_PRIMARY_ADDRESS - PM_MCUBOOT_ADDRESS)
#define PROTECT_ADDR PM_MCUBOOT_ADDRESS
#endif

    rc = fprotect_area(PROTECT_ADDR, PROTECT_SIZE);
     480:	f44f 3190 	mov.w	r1, #73728	; 0x12000
     484:	2000      	movs	r0, #0
     486:	f00a fee7 	bl	b258 <fprotect_area>

    if (rc != 0) {
     48a:	b100      	cbz	r0, 48e <FIH_LABEL_FIH_CALL_END_442+0x18>
        BOOT_LOG_ERR("Protect mcuboot flash failed, cancel startup.");
        while (1)
     48c:	e7fe      	b.n	48c <FIH_LABEL_FIH_CALL_END_442+0x16>
    rc = flash_device_base(rsp->br_flash_dev_id, &flash_base);
     48e:	f89d 0008 	ldrb.w	r0, [sp, #8]
     492:	4669      	mov	r1, sp
     494:	f008 ffb6 	bl	9404 <flash_device_base>
    vt = (struct arm_vector_table *)(flash_base +
     498:	9b00      	ldr	r3, [sp, #0]
     49a:	9c03      	ldr	r4, [sp, #12]
     49c:	441c      	add	r4, r3
                                     rsp->br_hdr->ih_hdr_size);
     49e:	9b01      	ldr	r3, [sp, #4]
     4a0:	891d      	ldrh	r5, [r3, #8]
                                     rsp->br_image_off +
     4a2:	1966      	adds	r6, r4, r5
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     4a4:	f04f 0220 	mov.w	r2, #32
     4a8:	f3ef 8311 	mrs	r3, BASEPRI
     4ac:	f382 8811 	msr	BASEPRI, r2
     4b0:	f3bf 8f6f 	isb	sy
    sys_clock_disable();
     4b4:	f00a fa68 	bl	a988 <sys_clock_disable>
    usb_disable();
     4b8:	f001 fcea 	bl	1e90 <usb_disable>
    nrf_cleanup_peripheral();
     4bc:	f000 fdc4 	bl	1048 <nrf_cleanup_peripheral>
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
     4c0:	5963      	ldr	r3, [r4, r5]
     4c2:	f383 8808 	msr	MSP, r3
    ((void (*)(void))vt->reset)();
     4c6:	6873      	ldr	r3, [r6, #4]
     4c8:	4798      	blx	r3
    ZEPHYR_BOOT_LOG_STOP();

    do_boot(&rsp);

    BOOT_LOG_ERR("Never should get here");
    while (1)
     4ca:	e7fe      	b.n	4ca <FIH_LABEL_FIH_CALL_END_442+0x54>
     4cc:	40010000 	.word	0x40010000
     4d0:	6e524635 	.word	0x6e524635
     4d4:	0000dcac 	.word	0x0000dcac
     4d8:	0000dcbf 	.word	0x0000dcbf
     4dc:	0000d848 	.word	0x0000d848
     4e0:	2000071c 	.word	0x2000071c

000004e4 <flash_device_get_binding>:
#endif

static const struct device *flash_dev;

const struct device *flash_device_get_binding(char *dev_name)
{
     4e4:	b510      	push	{r4, lr}
    if (!flash_dev) {
     4e6:	4c04      	ldr	r4, [pc, #16]	; (4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>)
     4e8:	6823      	ldr	r3, [r4, #0]
     4ea:	b913      	cbnz	r3, 4f2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa>
     4ec:	f007 fc24 	bl	7d38 <z_impl_device_get_binding>
        flash_dev = device_get_binding(dev_name);
     4f0:	6020      	str	r0, [r4, #0]
    }
    return flash_dev;
}
     4f2:	6820      	ldr	r0, [r4, #0]
     4f4:	bd10      	pop	{r4, pc}
     4f6:	bf00      	nop
     4f8:	20000718 	.word	0x20000718

000004fc <flash_area_sector_from_off>:
{
    return flash_area_id_to_multi_image_slot(0, area_id);
}

int flash_area_sector_from_off(off_t off, struct flash_sector *sector)
{
     4fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int rc;
    struct flash_pages_info page;

    rc = flash_get_page_info_by_offs(flash_dev, off, &page);
     4fe:	4a07      	ldr	r2, [pc, #28]	; (51c <flash_area_sector_from_off+0x20>)
{
     500:	4603      	mov	r3, r0
     502:	460c      	mov	r4, r1
    rc = flash_get_page_info_by_offs(flash_dev, off, &page);
     504:	6810      	ldr	r0, [r2, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
     506:	aa01      	add	r2, sp, #4
     508:	4619      	mov	r1, r3
     50a:	f00a fcfe 	bl	af0a <z_impl_flash_get_page_info_by_offs>
    if (rc) {
     50e:	b918      	cbnz	r0, 518 <flash_area_sector_from_off+0x1c>
        return rc;
    }

    sector->fs_off = page.start_offset;
     510:	9b01      	ldr	r3, [sp, #4]
     512:	6023      	str	r3, [r4, #0]
    sector->fs_size = page.size;
     514:	9b02      	ldr	r3, [sp, #8]
     516:	6063      	str	r3, [r4, #4]

    return rc;
}
     518:	b004      	add	sp, #16
     51a:	bd10      	pop	{r4, pc}
     51c:	20000718 	.word	0x20000718

00000520 <os_heap_init>:
/*
 * Initialize mbedtls to be able to use the local heap.
 */
void os_heap_init(void)
{
    mbedtls_memory_buffer_alloc_init(mempool, sizeof(mempool));
     520:	4802      	ldr	r0, [pc, #8]	; (52c <os_heap_init+0xc>)
     522:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
     526:	f006 bf0f 	b.w	7348 <mbedtls_memory_buffer_alloc_init>
     52a:	bf00      	nop
     52c:	2000278e 	.word	0x2000278e

00000530 <bootutil_img_validate>:
fih_int
bootutil_img_validate(struct enc_key_data *enc_state, int image_index,
                      struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *seed,
                      int seed_len, uint8_t *out_hash)
{
     530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     534:	b0f9      	sub	sp, #484	; 0x1e4
    uint32_t off;
    uint16_t len;
    uint16_t type;
    int sha256_valid = 0;
#ifdef EXPECTED_SIG_TLV
    fih_int valid_signature = FIH_FAILURE;
     536:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 730 <FIH_LABEL_FIH_CALL_END_644+0x34>
{
     53a:	f8dd b208 	ldr.w	fp, [sp, #520]	; 0x208
    fih_int valid_signature = FIH_FAILURE;
     53e:	f8d9 6000 	ldr.w	r6, [r9]
{
     542:	e9dd 4884 	ldrd	r4, r8, [sp, #528]	; 0x210
#if defined(MCUBOOT_USE_MBED_TLS)
typedef mbedtls_sha256_context bootutil_sha256_context;

static inline void bootutil_sha256_init(bootutil_sha256_context *ctx)
{
    mbedtls_sha256_init(ctx);
     546:	a838      	add	r0, sp, #224	; 0xe0
     548:	4617      	mov	r7, r2
     54a:	461d      	mov	r5, r3
     54c:	f00c fba8 	bl	cca0 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     550:	2100      	movs	r1, #0
     552:	a838      	add	r0, sp, #224	; 0xe0
     554:	f007 f808 	bl	7568 <mbedtls_sha256_starts_ret>
    if (seed && (seed_len > 0)) {
     558:	f8cd 900c 	str.w	r9, [sp, #12]
     55c:	b13c      	cbz	r4, 56e <bootutil_img_validate+0x3e>
     55e:	f1b8 0f00 	cmp.w	r8, #0
     562:	dd04      	ble.n	56e <bootutil_img_validate+0x3e>

static inline int bootutil_sha256_update(bootutil_sha256_context *ctx,
                                         const void *data,
                                         uint32_t data_len)
{
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     564:	4642      	mov	r2, r8
     566:	4621      	mov	r1, r4
     568:	a838      	add	r0, sp, #224	; 0xe0
     56a:	f00c fb9d 	bl	cca8 <mbedtls_sha256_update_ret>
    size += hdr->ih_protect_tlv_size;
     56e:	897b      	ldrh	r3, [r7, #10]
    size = hdr_size = hdr->ih_hdr_size;
     570:	f8b7 8008 	ldrh.w	r8, [r7, #8]
     574:	4498      	add	r8, r3
    size += hdr->ih_protect_tlv_size;
     576:	68fb      	ldr	r3, [r7, #12]
    for (off = 0; off < size; off += blk_sz) {
     578:	f04f 0900 	mov.w	r9, #0
    size += hdr->ih_protect_tlv_size;
     57c:	4498      	add	r8, r3
    for (off = 0; off < size; off += blk_sz) {
     57e:	45c8      	cmp	r8, r9
     580:	d84b      	bhi.n	61a <FIH_LABEL_FIH_CALL_END_310+0x10>
}

static inline int bootutil_sha256_finish(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    return mbedtls_sha256_finish_ret(ctx, output);
     582:	a90d      	add	r1, sp, #52	; 0x34
     584:	a838      	add	r0, sp, #224	; 0xe0
     586:	f00c fbcc 	bl	cd22 <mbedtls_sha256_finish_ret>
            tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
        goto out;
    }

    if (out_hash) {
     58a:	9b86      	ldr	r3, [sp, #536]	; 0x218
     58c:	b123      	cbz	r3, 598 <bootutil_img_validate+0x68>
        memcpy(out_hash, hash, 32);
     58e:	2220      	movs	r2, #32
     590:	a90d      	add	r1, sp, #52	; 0x34
     592:	4618      	mov	r0, r3
     594:	f00a fb52 	bl	ac3c <memcpy>
    }

    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
     598:	2300      	movs	r3, #0
     59a:	9300      	str	r3, [sp, #0]
     59c:	462a      	mov	r2, r5
     59e:	f64f 73ff 	movw	r3, #65535	; 0xffff
     5a2:	4639      	mov	r1, r7
     5a4:	a807      	add	r0, sp, #28
     5a6:	f008 ff3c 	bl	9422 <bootutil_tlv_iter_begin>
    if (rc) {
     5aa:	4604      	mov	r4, r0
     5ac:	2800      	cmp	r0, #0
     5ae:	f040 80b5 	bne.w	71c <FIH_LABEL_FIH_CALL_END_644+0x20>
             * can be multiple signatures, each preceded by a key.
             */
#endif /* !MCUBOOT_HW_KEY */
        } else if (type == EXPECTED_SIG_TLV) {
            /* Ignore this signature if it is out of bounds. */
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     5b2:	f8df 9180 	ldr.w	r9, [pc, #384]	; 734 <FIH_LABEL_FIH_CALL_END_644+0x38>
    int sha256_valid = 0;
     5b6:	4680      	mov	r8, r0
    int key_id = -1;
     5b8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
     5bc:	f10d 0316 	add.w	r3, sp, #22
     5c0:	aa05      	add	r2, sp, #20
     5c2:	a906      	add	r1, sp, #24
     5c4:	a807      	add	r0, sp, #28
     5c6:	f008 ff78 	bl	94ba <bootutil_tlv_iter_next>
        if (rc < 0) {
     5ca:	1e04      	subs	r4, r0, #0
     5cc:	f2c0 80a6 	blt.w	71c <FIH_LABEL_FIH_CALL_END_644+0x20>
        } else if (rc > 0) {
     5d0:	f040 8097 	bne.w	702 <FIH_LABEL_FIH_CALL_END_644+0x6>
        if (type == IMAGE_TLV_SHA256) {
     5d4:	f8bd a016 	ldrh.w	sl, [sp, #22]
     5d8:	f1ba 0f10 	cmp.w	sl, #16
     5dc:	d134      	bne.n	648 <FIH_LABEL_FIH_CALL_END_310+0x3e>
            if (len != sizeof(hash)) {
     5de:	f8bd 8014 	ldrh.w	r8, [sp, #20]
     5e2:	f1b8 0f20 	cmp.w	r8, #32
     5e6:	f040 8097 	bne.w	718 <FIH_LABEL_FIH_CALL_END_644+0x1c>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, sizeof(hash));
     5ea:	9906      	ldr	r1, [sp, #24]
     5ec:	4643      	mov	r3, r8
     5ee:	aa38      	add	r2, sp, #224	; 0xe0
     5f0:	4628      	mov	r0, r5
     5f2:	f00a f82b 	bl	a64c <flash_area_read>
            if (rc) {
     5f6:	4604      	mov	r4, r0
     5f8:	2800      	cmp	r0, #0
     5fa:	f040 808f 	bne.w	71c <FIH_LABEL_FIH_CALL_END_644+0x20>

000005fe <FIH_LABEL_FIH_CALL_START_291>:
            FIH_CALL(boot_fih_memequal, fih_rc, hash, buf, sizeof(hash));
     5fe:	4642      	mov	r2, r8
     600:	a938      	add	r1, sp, #224	; 0xe0
     602:	a80d      	add	r0, sp, #52	; 0x34
     604:	f008 ffa4 	bl	9550 <boot_fih_memequal>
     608:	4604      	mov	r4, r0

0000060a <FIH_LABEL_FIH_CALL_END_310>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     60a:	4b47      	ldr	r3, [pc, #284]	; (728 <FIH_LABEL_FIH_CALL_END_644+0x2c>)
     60c:	681b      	ldr	r3, [r3, #0]
     60e:	4283      	cmp	r3, r0
     610:	f040 8084 	bne.w	71c <FIH_LABEL_FIH_CALL_END_644+0x20>
            sha256_valid = 1;
     614:	f04f 0801 	mov.w	r8, #1
     618:	e7d0      	b.n	5bc <bootutil_img_validate+0x8c>
        blk_sz = size - off;
     61a:	9a83      	ldr	r2, [sp, #524]	; 0x20c
     61c:	eba8 0309 	sub.w	r3, r8, r9
        if (blk_sz > tmp_buf_sz) {
     620:	429a      	cmp	r2, r3
     622:	bf28      	it	cs
     624:	461a      	movcs	r2, r3
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
     626:	4613      	mov	r3, r2
     628:	4692      	mov	sl, r2
     62a:	4649      	mov	r1, r9
     62c:	465a      	mov	r2, fp
     62e:	4628      	mov	r0, r5
     630:	f00a f80c 	bl	a64c <flash_area_read>
        if (rc) {
     634:	4604      	mov	r4, r0
     636:	2800      	cmp	r0, #0
     638:	d170      	bne.n	71c <FIH_LABEL_FIH_CALL_END_644+0x20>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     63a:	4652      	mov	r2, sl
     63c:	4659      	mov	r1, fp
     63e:	a838      	add	r0, sp, #224	; 0xe0
     640:	f00c fb32 	bl	cca8 <mbedtls_sha256_update_ret>
    for (off = 0; off < size; off += blk_sz) {
     644:	44d1      	add	r9, sl
     646:	e79a      	b.n	57e <bootutil_img_validate+0x4e>
        } else if (type == IMAGE_TLV_KEYHASH) {
     648:	f1ba 0f01 	cmp.w	sl, #1
     64c:	d136      	bne.n	6bc <FIH_LABEL_FIH_CALL_END_310+0xb2>
            if (len > 32) {
     64e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     652:	2b20      	cmp	r3, #32
     654:	d860      	bhi.n	718 <FIH_LABEL_FIH_CALL_END_644+0x1c>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     656:	9906      	ldr	r1, [sp, #24]
     658:	aa38      	add	r2, sp, #224	; 0xe0
     65a:	4628      	mov	r0, r5
     65c:	f009 fff6 	bl	a64c <flash_area_read>
            if (rc) {
     660:	4604      	mov	r4, r0
     662:	2800      	cmp	r0, #0
     664:	d15a      	bne.n	71c <FIH_LABEL_FIH_CALL_END_644+0x20>
            key_id = bootutil_find_key(buf, len);
     666:	f89d a014 	ldrb.w	sl, [sp, #20]
    if (keyhash_len > 32) {
     66a:	f1ba 0f20 	cmp.w	sl, #32
     66e:	d903      	bls.n	678 <FIH_LABEL_FIH_CALL_END_310+0x6e>
        return -1;
     670:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
            key_id = bootutil_find_key(buf, len);
     674:	4627      	mov	r7, r4
     676:	e7a1      	b.n	5bc <bootutil_img_validate+0x8c>
    for (i = 0; i < bootutil_key_cnt; i++) {
     678:	f8d9 3000 	ldr.w	r3, [r9]
     67c:	4f2b      	ldr	r7, [pc, #172]	; (72c <FIH_LABEL_FIH_CALL_END_644+0x30>)
     67e:	9302      	str	r3, [sp, #8]
     680:	9b02      	ldr	r3, [sp, #8]
     682:	429c      	cmp	r4, r3
     684:	daf4      	bge.n	670 <FIH_LABEL_FIH_CALL_END_310+0x66>
    mbedtls_sha256_init(ctx);
     686:	a81d      	add	r0, sp, #116	; 0x74
     688:	f00c fb0a 	bl	cca0 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     68c:	2100      	movs	r1, #0
     68e:	a81d      	add	r0, sp, #116	; 0x74
     690:	f006 ff6a 	bl	7568 <mbedtls_sha256_starts_ret>
        bootutil_sha256_update(&sha256_ctx, key->key, *key->len);
     694:	687b      	ldr	r3, [r7, #4]
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     696:	f857 1b08 	ldr.w	r1, [r7], #8
     69a:	681a      	ldr	r2, [r3, #0]
     69c:	a81d      	add	r0, sp, #116	; 0x74
     69e:	f00c fb03 	bl	cca8 <mbedtls_sha256_update_ret>
    return mbedtls_sha256_finish_ret(ctx, output);
     6a2:	a915      	add	r1, sp, #84	; 0x54
     6a4:	a81d      	add	r0, sp, #116	; 0x74
     6a6:	f00c fb3c 	bl	cd22 <mbedtls_sha256_finish_ret>
        if (!memcmp(hash, keyhash, keyhash_len)) {
     6aa:	4652      	mov	r2, sl
     6ac:	a938      	add	r1, sp, #224	; 0xe0
     6ae:	a815      	add	r0, sp, #84	; 0x54
     6b0:	f00a fab4 	bl	ac1c <memcmp>
     6b4:	2800      	cmp	r0, #0
     6b6:	d0dd      	beq.n	674 <FIH_LABEL_FIH_CALL_END_310+0x6a>
    for (i = 0; i < bootutil_key_cnt; i++) {
     6b8:	3401      	adds	r4, #1
     6ba:	e7e1      	b.n	680 <FIH_LABEL_FIH_CALL_END_310+0x76>
        } else if (type == EXPECTED_SIG_TLV) {
     6bc:	f1ba 0f20 	cmp.w	sl, #32
     6c0:	f47f af7c 	bne.w	5bc <bootutil_img_validate+0x8c>
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     6c4:	2f00      	cmp	r7, #0
     6c6:	db19      	blt.n	6fc <FIH_LABEL_FIH_CALL_END_644>
     6c8:	f8d9 3000 	ldr.w	r3, [r9]
     6cc:	42bb      	cmp	r3, r7
     6ce:	dd15      	ble.n	6fc <FIH_LABEL_FIH_CALL_END_644>
                key_id = -1;
                continue;
            }
            if (!EXPECTED_SIG_LEN(len) || len > sizeof(buf)) {
     6d0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     6d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
     6d8:	d11e      	bne.n	718 <FIH_LABEL_FIH_CALL_END_644+0x1c>
                rc = -1;
                goto out;
            }
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     6da:	9906      	ldr	r1, [sp, #24]
     6dc:	aa38      	add	r2, sp, #224	; 0xe0
     6de:	4628      	mov	r0, r5
     6e0:	f009 ffb4 	bl	a64c <flash_area_read>
            if (rc) {
     6e4:	4604      	mov	r4, r0
     6e6:	b9c8      	cbnz	r0, 71c <FIH_LABEL_FIH_CALL_END_644+0x20>

000006e8 <FIH_LABEL_FIH_CALL_START_622>:
                goto out;
            }
            FIH_CALL(bootutil_verify_sig, valid_signature, hash, sizeof(hash),
     6e8:	b2ff      	uxtb	r7, r7
     6ea:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     6ee:	9700      	str	r7, [sp, #0]
     6f0:	aa38      	add	r2, sp, #224	; 0xe0
     6f2:	4651      	mov	r1, sl
     6f4:	a80d      	add	r0, sp, #52	; 0x34
     6f6:	f000 f81f 	bl	738 <bootutil_verify_sig>
     6fa:	4606      	mov	r6, r0

000006fc <FIH_LABEL_FIH_CALL_END_644>:
                key_id = -1;
     6fc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
     700:	e75c      	b.n	5bc <bootutil_img_validate+0x8c>
#endif /* MCUBOOT_HW_ROLLBACK_PROT */
        }
    }

    rc = !sha256_valid;
    if (rc) {
     702:	f1b8 0f00 	cmp.w	r8, #0
     706:	d00d      	beq.n	724 <FIH_LABEL_FIH_CALL_END_644+0x28>
        goto out;
    }
#ifdef EXPECTED_SIG_TLV
    fih_rc = fih_int_encode_zero_equality(fih_not_eq(valid_signature,
     708:	4b07      	ldr	r3, [pc, #28]	; (728 <FIH_LABEL_FIH_CALL_END_644+0x2c>)
 * value that is not FIH_SUCCESS
 */
__attribute__((always_inline)) inline
fih_int fih_int_encode_zero_equality(int x)
{
    if (x) {
     70a:	681b      	ldr	r3, [r3, #0]
     70c:	42b3      	cmp	r3, r6
     70e:	d001      	beq.n	714 <FIH_LABEL_FIH_CALL_END_644+0x18>
        return FIH_FAILURE;
     710:	9b03      	ldr	r3, [sp, #12]
     712:	681e      	ldr	r6, [r3, #0]
                rc = -1;
     714:	4634      	mov	r4, r6
     716:	e001      	b.n	71c <FIH_LABEL_FIH_CALL_END_644+0x20>
     718:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     71c:	4620      	mov	r0, r4
     71e:	b079      	add	sp, #484	; 0x1e4
     720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     724:	2401      	movs	r4, #1
    FIH_RET(fih_rc);
     726:	e7f9      	b.n	71c <FIH_LABEL_FIH_CALL_END_644+0x20>
     728:	2000071c 	.word	0x2000071c
     72c:	0000d854 	.word	0x0000d854
     730:	20000000 	.word	0x20000000
     734:	0000d850 	.word	0x0000d850

00000738 <bootutil_verify_sig>:
}

fih_int
bootutil_verify_sig(uint8_t *hash, uint32_t hlen, uint8_t *sig, size_t slen,
  uint8_t key_id)
{
     738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     73c:	4691      	mov	r9, r2
     73e:	f5ad 7d4b 	sub.w	sp, sp, #812	; 0x32c
    int rc;
    fih_int fih_rc = FIH_FAILURE;
    uint8_t *cp;
    uint8_t *end;

    mbedtls_rsa_init(&ctx, 0, 0);
     742:	2200      	movs	r2, #0
{
     744:	4698      	mov	r8, r3
    fih_int fih_rc = FIH_FAILURE;
     746:	4b6b      	ldr	r3, [pc, #428]	; (8f4 <FIH_LABEL_FIH_CALL_END_685+0x4>)
{
     748:	f89d 6350 	ldrb.w	r6, [sp, #848]	; 0x350
    fih_int fih_rc = FIH_FAILURE;
     74c:	681d      	ldr	r5, [r3, #0]
{
     74e:	4607      	mov	r7, r0
     750:	468a      	mov	sl, r1
    mbedtls_rsa_init(&ctx, 0, 0);
     752:	a827      	add	r0, sp, #156	; 0x9c
     754:	4611      	mov	r1, r2
     756:	f00c fa5f 	bl	cc18 <mbedtls_rsa_init>

    cp = (uint8_t *)bootutil_keys[key_id].key;
     75a:	4b67      	ldr	r3, [pc, #412]	; (8f8 <FIH_LABEL_FIH_CALL_END_685+0x8>)
     75c:	f853 4036 	ldr.w	r4, [r3, r6, lsl #3]
     760:	9402      	str	r4, [sp, #8]
    end = cp + *bootutil_keys[key_id].len;
     762:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
     766:	aa8a      	add	r2, sp, #552	; 0x228
    end = cp + *bootutil_keys[key_id].len;
     768:	685b      	ldr	r3, [r3, #4]
     76a:	6819      	ldr	r1, [r3, #0]
     76c:	440c      	add	r4, r1
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
     76e:	2330      	movs	r3, #48	; 0x30
     770:	4621      	mov	r1, r4
     772:	a802      	add	r0, sp, #8
     774:	f00a ff50 	bl	b618 <mbedtls_asn1_get_tag>
     778:	bb68      	cbnz	r0, 7d6 <bootutil_verify_sig+0x9e>
    if (*p + len != end) {
     77a:	9b02      	ldr	r3, [sp, #8]
     77c:	9a8a      	ldr	r2, [sp, #552]	; 0x228
     77e:	4413      	add	r3, r2
     780:	429c      	cmp	r4, r3
     782:	d128      	bne.n	7d6 <bootutil_verify_sig+0x9e>
    if ((rc = mbedtls_asn1_get_mpi(p, end, &ctx->N)) != 0 ||
     784:	aa29      	add	r2, sp, #164	; 0xa4
     786:	4621      	mov	r1, r4
     788:	a802      	add	r0, sp, #8
     78a:	f00a ff59 	bl	b640 <mbedtls_asn1_get_mpi>
     78e:	bb10      	cbnz	r0, 7d6 <bootutil_verify_sig+0x9e>
      (rc = mbedtls_asn1_get_mpi(p, end, &ctx->E)) != 0) {
     790:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
     794:	465a      	mov	r2, fp
     796:	4621      	mov	r1, r4
     798:	a802      	add	r0, sp, #8
     79a:	f00a ff51 	bl	b640 <mbedtls_asn1_get_mpi>
    if ((rc = mbedtls_asn1_get_mpi(p, end, &ctx->N)) != 0 ||
     79e:	4606      	mov	r6, r0
     7a0:	b9c8      	cbnz	r0, 7d6 <bootutil_verify_sig+0x9e>
    ctx->len = mbedtls_mpi_size(&ctx->N);
     7a2:	a829      	add	r0, sp, #164	; 0xa4
     7a4:	f00b fb26 	bl	bdf4 <mbedtls_mpi_size>
    if (*p != end) {
     7a8:	9b02      	ldr	r3, [sp, #8]
    ctx->len = mbedtls_mpi_size(&ctx->N);
     7aa:	9028      	str	r0, [sp, #160]	; 0xa0
    if (*p != end) {
     7ac:	429c      	cmp	r4, r3
     7ae:	d112      	bne.n	7d6 <bootutil_verify_sig+0x9e>
    rc = mbedtls_rsa_import(ctx, &ctx->N, NULL, NULL, NULL, &ctx->E);
     7b0:	e9cd 6b00 	strd	r6, fp, [sp]
     7b4:	4633      	mov	r3, r6
     7b6:	4632      	mov	r2, r6
     7b8:	a929      	add	r1, sp, #164	; 0xa4
     7ba:	a827      	add	r0, sp, #156	; 0x9c
     7bc:	f00c f9e8 	bl	cb90 <mbedtls_rsa_import>
    if (rc != 0) {
     7c0:	b948      	cbnz	r0, 7d6 <bootutil_verify_sig+0x9e>
    rc = mbedtls_rsa_check_pubkey(ctx);
     7c2:	a827      	add	r0, sp, #156	; 0x9c
     7c4:	f006 fe6e 	bl	74a4 <mbedtls_rsa_check_pubkey>
    if (rc != 0) {
     7c8:	b928      	cbnz	r0, 7d6 <bootutil_verify_sig+0x9e>
    ctx->len = mbedtls_mpi_size(&ctx->N);
     7ca:	a829      	add	r0, sp, #164	; 0xa4
     7cc:	f00b fb12 	bl	bdf4 <mbedtls_mpi_size>

    rc = bootutil_parse_rsakey(&ctx, &cp, end);
    if (rc || slen != ctx.len) {
     7d0:	4580      	cmp	r8, r0
    ctx->len = mbedtls_mpi_size(&ctx->N);
     7d2:	9028      	str	r0, [sp, #160]	; 0xa0
    if (rc || slen != ctx.len) {
     7d4:	d00a      	beq.n	7ec <FIH_LABEL_FIH_CALL_START_228>
        mbedtls_rsa_free(&ctx);
     7d6:	a827      	add	r0, sp, #156	; 0x9c
     7d8:	f00c fa29 	bl	cc2e <mbedtls_rsa_free>
        goto out;
    }
    FIH_CALL(bootutil_cmp_rsasig, fih_rc, &ctx, hash, hlen, sig);

out:
    mbedtls_rsa_free(&ctx);
     7dc:	a827      	add	r0, sp, #156	; 0x9c
     7de:	f00c fa26 	bl	cc2e <mbedtls_rsa_free>

    FIH_RET(fih_rc);
}
     7e2:	4628      	mov	r0, r5
     7e4:	f50d 7d4b 	add.w	sp, sp, #812	; 0x32c
     7e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000007ec <FIH_LABEL_FIH_CALL_START_228>:
    if (ctx->len != PSS_EMLEN || PSS_EMLEN > MBEDTLS_MPI_MAX_SIZE) {
     7ec:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
     7f0:	d002      	beq.n	7f8 <FIH_LABEL_FIH_CALL_END_289+0x2>
     7f2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff

000007f6 <FIH_LABEL_FIH_CALL_END_289>:
    FIH_CALL(bootutil_cmp_rsasig, fih_rc, &ctx, hash, hlen, sig);
     7f6:	e7f1      	b.n	7dc <bootutil_verify_sig+0xa4>
    if (hlen != PSS_HLEN) {
     7f8:	f1ba 0f20 	cmp.w	sl, #32
     7fc:	d1f9      	bne.n	7f2 <FIH_LABEL_FIH_CALL_START_228+0x6>
    if (mbedtls_rsa_public(ctx, sig, em)) {
     7fe:	aa8a      	add	r2, sp, #552	; 0x228
     800:	4649      	mov	r1, r9
     802:	a827      	add	r0, sp, #156	; 0x9c
     804:	f006 fe72 	bl	74ec <mbedtls_rsa_public>
     808:	4604      	mov	r4, r0
     80a:	2800      	cmp	r0, #0
     80c:	d1f1      	bne.n	7f2 <FIH_LABEL_FIH_CALL_START_228+0x6>
    if (em[PSS_EMLEN - 1] != 0xbc) {
     80e:	f89d 3327 	ldrb.w	r3, [sp, #807]	; 0x327
     812:	2bbc      	cmp	r3, #188	; 0xbc
     814:	d1ed      	bne.n	7f2 <FIH_LABEL_FIH_CALL_START_228+0x6>
    uint8_t counter[4] = { 0, 0, 0, 0 };
     816:	f50d 78a4 	add.w	r8, sp, #328	; 0x148
     81a:	9003      	str	r0, [sp, #12]
    int count = PSS_MASK_LEN;
     81c:	26df      	movs	r6, #223	; 0xdf
     81e:	4645      	mov	r5, r8
    mbedtls_sha256_init(ctx);
     820:	a80c      	add	r0, sp, #48	; 0x30
     822:	f00c fa3d 	bl	cca0 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     826:	2100      	movs	r1, #0
     828:	a80c      	add	r0, sp, #48	; 0x30
     82a:	f006 fe9d 	bl	7568 <mbedtls_sha256_starts_ret>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     82e:	2220      	movs	r2, #32
     830:	f20d 3107 	addw	r1, sp, #775	; 0x307
     834:	a80c      	add	r0, sp, #48	; 0x30
     836:	f00c fa37 	bl	cca8 <mbedtls_sha256_update_ret>
     83a:	2204      	movs	r2, #4
     83c:	a903      	add	r1, sp, #12
     83e:	a80c      	add	r0, sp, #48	; 0x30
     840:	f00c fa32 	bl	cca8 <mbedtls_sha256_update_ret>
    return mbedtls_sha256_finish_ret(ctx, output);
     844:	a904      	add	r1, sp, #16
     846:	a80c      	add	r0, sp, #48	; 0x30
     848:	f00c fa6b 	bl	cd22 <mbedtls_sha256_finish_ret>
        if (bytes > count)
     84c:	2e1f      	cmp	r6, #31
        counter[3]++;
     84e:	f89d 300f 	ldrb.w	r3, [sp, #15]
        if (bytes > count)
     852:	bfd4      	ite	le
     854:	46b1      	movle	r9, r6
     856:	f04f 0920 	movgt.w	r9, #32
        counter[3]++;
     85a:	3301      	adds	r3, #1
        memcpy(mask, htmp, bytes);
     85c:	4640      	mov	r0, r8
     85e:	464a      	mov	r2, r9
     860:	a904      	add	r1, sp, #16
        count -= bytes;
     862:	eba6 0609 	sub.w	r6, r6, r9
        counter[3]++;
     866:	f88d 300f 	strb.w	r3, [sp, #15]
        memcpy(mask, htmp, bytes);
     86a:	f00a f9e7 	bl	ac3c <memcpy>
    while (count > 0) {
     86e:	2e00      	cmp	r6, #0
        mask += bytes;
     870:	44c8      	add	r8, r9
    while (count > 0) {
     872:	dcd5      	bgt.n	820 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x20>
    for (i = 0; i < PSS_MASK_LEN; i++) {
     874:	4628      	mov	r0, r5
     876:	ae8a      	add	r6, sp, #552	; 0x228
     878:	462a      	mov	r2, r5
     87a:	23df      	movs	r3, #223	; 0xdf
        db_mask[i] ^= em[i];
     87c:	7811      	ldrb	r1, [r2, #0]
     87e:	f816 cb01 	ldrb.w	ip, [r6], #1
    for (i = 0; i < PSS_MASK_LEN; i++) {
     882:	3b01      	subs	r3, #1
        db_mask[i] ^= em[i];
     884:	ea81 010c 	eor.w	r1, r1, ip
     888:	f802 1b01 	strb.w	r1, [r2], #1
    for (i = 0; i < PSS_MASK_LEN; i++) {
     88c:	d1f6      	bne.n	87c <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x7c>
    db_mask[0] &= 0x7F;
     88e:	782b      	ldrb	r3, [r5, #0]
     890:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     894:	702b      	strb	r3, [r5, #0]
        if (db_mask[i] != 0) {
     896:	f810 6b01 	ldrb.w	r6, [r0], #1
     89a:	2e00      	cmp	r6, #0
     89c:	d1a9      	bne.n	7f2 <FIH_LABEL_FIH_CALL_START_228+0x6>
    for (i = 0; i < PSS_MASK_ZERO_COUNT; i++) {
     89e:	3401      	adds	r4, #1
     8a0:	2cbe      	cmp	r4, #190	; 0xbe
     8a2:	d1f8      	bne.n	896 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x96>
    if (db_mask[PSS_MASK_ONE_POS] != 1) {
     8a4:	f895 30be 	ldrb.w	r3, [r5, #190]	; 0xbe
     8a8:	2b01      	cmp	r3, #1
     8aa:	d1a2      	bne.n	7f2 <FIH_LABEL_FIH_CALL_START_228+0x6>
    mbedtls_sha256_init(ctx);
     8ac:	a80c      	add	r0, sp, #48	; 0x30
     8ae:	f00c f9f7 	bl	cca0 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     8b2:	4631      	mov	r1, r6
     8b4:	a80c      	add	r0, sp, #48	; 0x30
     8b6:	f006 fe57 	bl	7568 <mbedtls_sha256_starts_ret>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     8ba:	4910      	ldr	r1, [pc, #64]	; (8fc <FIH_LABEL_FIH_CALL_END_685+0xc>)
     8bc:	2208      	movs	r2, #8
     8be:	a80c      	add	r0, sp, #48	; 0x30
     8c0:	f00c f9f2 	bl	cca8 <mbedtls_sha256_update_ret>
     8c4:	4639      	mov	r1, r7
     8c6:	2220      	movs	r2, #32
     8c8:	a80c      	add	r0, sp, #48	; 0x30
     8ca:	f00c f9ed 	bl	cca8 <mbedtls_sha256_update_ret>
     8ce:	2220      	movs	r2, #32
     8d0:	f20d 2107 	addw	r1, sp, #519	; 0x207
     8d4:	a80c      	add	r0, sp, #48	; 0x30
     8d6:	f00c f9e7 	bl	cca8 <mbedtls_sha256_update_ret>
    return mbedtls_sha256_finish_ret(ctx, output);
     8da:	a904      	add	r1, sp, #16
     8dc:	a80c      	add	r0, sp, #48	; 0x30
     8de:	f00c fa20 	bl	cd22 <mbedtls_sha256_finish_ret>

000008e2 <FIH_LABEL_FIH_CALL_START_664>:
    FIH_CALL(boot_fih_memequal, fih_rc, h2, &em[PSS_HASH_OFFSET], PSS_HLEN);
     8e2:	2220      	movs	r2, #32
     8e4:	f20d 3107 	addw	r1, sp, #775	; 0x307
     8e8:	a804      	add	r0, sp, #16
     8ea:	f008 fe31 	bl	9550 <boot_fih_memequal>
     8ee:	4605      	mov	r5, r0

000008f0 <FIH_LABEL_FIH_CALL_END_685>:
    if (rc) {
     8f0:	e781      	b.n	7f6 <FIH_LABEL_FIH_CALL_END_289>
     8f2:	bf00      	nop
     8f4:	20000000 	.word	0x20000000
     8f8:	0000d854 	.word	0x0000d854
     8fc:	0000dcc6 	.word	0x0000dcc6

00000900 <boot_read_swap_size>:
    return -1;
}

int
boot_read_swap_size(int image_index, uint32_t *swap_size)
{
     900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     904:	b086      	sub	sp, #24
    uint8_t areas[2] = {
     906:	2302      	movs	r3, #2
        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
     908:	f8df 8070 	ldr.w	r8, [pc, #112]	; 97c <boot_read_swap_size+0x7c>
    uint8_t areas[2] = {
     90c:	f8ad 3000 	strh.w	r3, [sp]
{
     910:	460d      	mov	r5, r1
     912:	466f      	mov	r7, sp
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     914:	2600      	movs	r6, #0
        rc = flash_area_open(areas[i], fap);
     916:	f817 0b01 	ldrb.w	r0, [r7], #1
     91a:	a901      	add	r1, sp, #4
     91c:	f002 f890 	bl	2a40 <flash_area_open>
        if (rc != 0) {
     920:	4604      	mov	r4, r0
     922:	b9d8      	cbnz	r0, 95c <boot_read_swap_size+0x5c>
        off = boot_magic_off(*fap);
     924:	9801      	ldr	r0, [sp, #4]
    return fap->fa_size - BOOT_MAGIC_SZ;
     926:	6881      	ldr	r1, [r0, #8]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
     928:	2310      	movs	r3, #16
     92a:	aa02      	add	r2, sp, #8
     92c:	3910      	subs	r1, #16
     92e:	f009 fe8d 	bl	a64c <flash_area_read>
        if (rc != 0) {
     932:	4604      	mov	r4, r0
     934:	b128      	cbz	r0, 942 <boot_read_swap_size+0x42>

    rc = boot_find_status(image_index, &fap);
    if (rc == 0) {
        off = boot_swap_size_off(fap);
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
        flash_area_close(fap);
     936:	9801      	ldr	r0, [sp, #4]
     938:	f009 fe87 	bl	a64a <flash_area_close>
     93c:	e00e      	b.n	95c <boot_read_swap_size+0x5c>
     93e:	2601      	movs	r6, #1
     940:	e7e9      	b.n	916 <boot_read_swap_size+0x16>
        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
     942:	2210      	movs	r2, #16
     944:	4641      	mov	r1, r8
     946:	a802      	add	r0, sp, #8
     948:	f00a f968 	bl	ac1c <memcmp>
     94c:	b150      	cbz	r0, 964 <boot_read_swap_size+0x64>
        flash_area_close(*fap);
     94e:	9801      	ldr	r0, [sp, #4]
     950:	f009 fe7b 	bl	a64a <flash_area_close>
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     954:	2e00      	cmp	r6, #0
     956:	d0f2      	beq.n	93e <boot_read_swap_size+0x3e>
    return -1;
     958:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    }

    return rc;
}
     95c:	4620      	mov	r0, r4
     95e:	b006      	add	sp, #24
     960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
     964:	9801      	ldr	r0, [sp, #4]
     966:	f00a fc9a 	bl	b29e <boot_swap_info_off>
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
     96a:	2304      	movs	r3, #4
     96c:	f1a0 0108 	sub.w	r1, r0, #8
     970:	462a      	mov	r2, r5
     972:	9801      	ldr	r0, [sp, #4]
     974:	f009 fe6a 	bl	a64c <flash_area_read>
     978:	4604      	mov	r4, r0
     97a:	e7dc      	b.n	936 <boot_read_swap_size+0x36>
     97c:	0000da74 	.word	0x0000da74

00000980 <boot_validate_slot.isra.0>:
 *         FIH_SUCCESS                      if image was successfully validated
 *         1 (or its fih_int encoded form)  if no bootloable image was found
 *         FIH_FAILURE                      on any errors
 */
static fih_int
boot_validate_slot(struct boot_loader_state *state, int slot,
     980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                   struct boot_status *bs)
{
    const struct flash_area *fap;
    struct image_header *hdr;
    int area_id;
    fih_int fih_rc = FIH_FAILURE;
     984:	4b34      	ldr	r3, [pc, #208]	; (a58 <FIH_LABEL_FIH_CALL_END_453+0x70>)
boot_validate_slot(struct boot_loader_state *state, int slot,
     986:	b088      	sub	sp, #32
     988:	4606      	mov	r6, r0
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     98a:	2000      	movs	r0, #0
boot_validate_slot(struct boot_loader_state *state, int slot,
     98c:	460c      	mov	r4, r1
    fih_int fih_rc = FIH_FAILURE;
     98e:	681d      	ldr	r5, [r3, #0]
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     990:	f008 fd3e 	bl	9410 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     994:	a906      	add	r1, sp, #24
     996:	b2c0      	uxtb	r0, r0
     998:	f002 f852 	bl	2a40 <flash_area_open>
    if (rc != 0) {
     99c:	2800      	cmp	r0, #0
     99e:	d14c      	bne.n	a3a <FIH_LABEL_FIH_CALL_END_453+0x52>
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     9a0:	4621      	mov	r1, r4
     9a2:	f008 fd35 	bl	9410 <flash_area_id_from_multi_image_slot>
     ((swap_type) == BOOT_SWAP_TYPE_PERM))

static inline struct image_header*
boot_img_hdr(struct boot_loader_state *state, size_t slot)
{
    return &BOOT_IMG(state, slot).hdr;
     9a6:	252c      	movs	r5, #44	; 0x2c
    rc = flash_area_open(area_id, &fap);
     9a8:	a907      	add	r1, sp, #28
     9aa:	b2c0      	uxtb	r0, r0
     9ac:	fb05 6504 	mla	r5, r5, r4, r6
     9b0:	f002 f846 	bl	2a40 <flash_area_open>
    if (rc != 0) {
     9b4:	2800      	cmp	r0, #0
     9b6:	d030      	beq.n	a1a <FIH_LABEL_FIH_CALL_END_453+0x32>
        FIH_RET(fih_rc);
    }

    hdr = boot_img_hdr(state, slot);
    if (boot_check_header_erased(state, slot) == 0 ||
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
     9b8:	f04f 082c 	mov.w	r8, #44	; 0x2c
     9bc:	fb08 f804 	mul.w	r8, r8, r4
     9c0:	eb06 0708 	add.w	r7, r6, r8
     9c4:	6939      	ldr	r1, [r7, #16]
    if (boot_check_header_erased(state, slot) == 0 ||
     9c6:	f011 0110 	ands.w	r1, r1, #16
     9ca:	d131      	bne.n	a30 <FIH_LABEL_FIH_CALL_END_453+0x48>

000009cc <FIH_LABEL_FIH_CALL_START_397>:
    FIH_CALL(bootutil_img_validate, fih_rc, BOOT_CURR_ENC(state), image_index,
     9cc:	f44f 7380 	mov.w	r3, #256	; 0x100
     9d0:	9301      	str	r3, [sp, #4]
     9d2:	4b22      	ldr	r3, [pc, #136]	; (a5c <FIH_LABEL_FIH_CALL_END_453+0x74>)
     9d4:	9300      	str	r3, [sp, #0]
     9d6:	462a      	mov	r2, r5
     9d8:	e9cd 1103 	strd	r1, r1, [sp, #12]
     9dc:	9b06      	ldr	r3, [sp, #24]
     9de:	9102      	str	r1, [sp, #8]
     9e0:	4608      	mov	r0, r1
     9e2:	f7ff fda5 	bl	530 <bootutil_img_validate>
     9e6:	4605      	mov	r5, r0

000009e8 <FIH_LABEL_FIH_CALL_END_453>:
    if (hdr->ih_magic != IMAGE_MAGIC) {
     9e8:	4b1d      	ldr	r3, [pc, #116]	; (a60 <FIH_LABEL_FIH_CALL_END_453+0x78>)
     9ea:	f856 2008 	ldr.w	r2, [r6, r8]
        }
    }
#endif

    FIH_CALL(boot_image_check, fih_rc, state, hdr, fap, bs);
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     9ee:	9806      	ldr	r0, [sp, #24]
    if (hdr->ih_magic != IMAGE_MAGIC) {
     9f0:	429a      	cmp	r2, r3
     9f2:	d10c      	bne.n	a0e <FIH_LABEL_FIH_CALL_END_453+0x26>
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
     9f4:	893a      	ldrh	r2, [r7, #8]
     9f6:	68fb      	ldr	r3, [r7, #12]
    if (a > UINT32_MAX - b) {
     9f8:	43d1      	mvns	r1, r2
     9fa:	428b      	cmp	r3, r1
     9fc:	d807      	bhi.n	a0e <FIH_LABEL_FIH_CALL_END_453+0x26>
        *dest = a + b;
     9fe:	4413      	add	r3, r2
    if (size >= fap->fa_size) {
     a00:	6882      	ldr	r2, [r0, #8]
     a02:	4293      	cmp	r3, r2
     a04:	d203      	bcs.n	a0e <FIH_LABEL_FIH_CALL_END_453+0x26>
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     a06:	4b17      	ldr	r3, [pc, #92]	; (a64 <FIH_LABEL_FIH_CALL_END_453+0x7c>)
     a08:	681b      	ldr	r3, [r3, #0]
     a0a:	42ab      	cmp	r3, r5
     a0c:	d012      	beq.n	a34 <FIH_LABEL_FIH_CALL_END_453+0x4c>
        if ((slot != BOOT_PRIMARY_SLOT) || ARE_SLOTS_EQUIVALENT()) {
     a0e:	b184      	cbz	r4, a32 <FIH_LABEL_FIH_CALL_END_453+0x4a>
            flash_area_erase(fap, 0, fap->fa_size);
     a10:	6882      	ldr	r2, [r0, #8]
     a12:	2100      	movs	r1, #0
     a14:	f009 fe66 	bl	a6e4 <flash_area_erase>
     a18:	e01c      	b.n	a54 <FIH_LABEL_FIH_CALL_END_453+0x6c>
    erased_val = flash_area_erased_val(fap);
     a1a:	9807      	ldr	r0, [sp, #28]
     a1c:	f009 fe9b 	bl	a756 <flash_area_erased_val>
     a20:	4607      	mov	r7, r0
    flash_area_close(fap);
     a22:	9807      	ldr	r0, [sp, #28]
     a24:	f009 fe11 	bl	a64a <flash_area_close>
boot_data_is_set_to(uint8_t val, void *data, size_t len)
     a28:	1e6b      	subs	r3, r5, #1
     a2a:	1cea      	adds	r2, r5, #3
    for (i = 0; i < len; i++) {
     a2c:	4293      	cmp	r3, r2
     a2e:	d108      	bne.n	a42 <FIH_LABEL_FIH_CALL_END_453+0x5a>
        if (slot != BOOT_PRIMARY_SLOT) {
     a30:	b964      	cbnz	r4, a4c <FIH_LABEL_FIH_CALL_END_453+0x64>
        fih_rc = fih_int_encode(1);
     a32:	2501      	movs	r5, #1
        fih_rc = fih_int_encode(1);
        goto out;
    }

out:
    flash_area_close(fap);
     a34:	9806      	ldr	r0, [sp, #24]
     a36:	f009 fe08 	bl	a64a <flash_area_close>

    FIH_RET(fih_rc);
}
     a3a:	4628      	mov	r0, r5
     a3c:	b008      	add	sp, #32
     a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (val != p[i]) {
     a42:	f813 1f01 	ldrb.w	r1, [r3, #1]!
     a46:	42b9      	cmp	r1, r7
     a48:	d0f0      	beq.n	a2c <FIH_LABEL_FIH_CALL_END_453+0x44>
     a4a:	e7b5      	b.n	9b8 <boot_validate_slot.isra.0+0x38>
            swap_erase_trailer_sectors(state, fap);
     a4c:	9906      	ldr	r1, [sp, #24]
     a4e:	4630      	mov	r0, r6
     a50:	f008 fe7a 	bl	9748 <swap_erase_trailer_sectors>
        fih_rc = fih_int_encode(1);
     a54:	4625      	mov	r5, r4
     a56:	e7ed      	b.n	a34 <FIH_LABEL_FIH_CALL_END_453+0x4c>
     a58:	20000000 	.word	0x20000000
     a5c:	2000438e 	.word	0x2000438e
     a60:	96f3b83d 	.word	0x96f3b83d
     a64:	2000071c 	.word	0x2000071c

00000a68 <boot_swap_image>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
boot_swap_image(struct boot_loader_state *state, struct boot_status *bs)
{
     a68:	b573      	push	{r0, r1, r4, r5, r6, lr}
     a6a:	460d      	mov	r5, r1
     a6c:	4604      	mov	r4, r0
    uint8_t image_index;
    int rc;

    /* FIXME: just do this if asked by user? */

    size = copy_size = 0;
     a6e:	2100      	movs	r1, #0
    image_index = BOOT_CURR_IMG(state);

    if (boot_status_is_reset(bs)) {
     a70:	4628      	mov	r0, r5
    size = copy_size = 0;
     a72:	e9cd 1100 	strd	r1, r1, [sp]
    if (boot_status_is_reset(bs)) {
     a76:	f008 fe26 	bl	96c6 <boot_status_is_reset>
     a7a:	b1f0      	cbz	r0, aba <boot_swap_image+0x52>
        /*
         * No swap ever happened, so need to find the largest image which
         * will be used to determine the amount of sectors to swap.
         */
        hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     a7c:	4e12      	ldr	r6, [pc, #72]	; (ac8 <boot_swap_image+0x60>)
     a7e:	6822      	ldr	r2, [r4, #0]
     a80:	42b2      	cmp	r2, r6
     a82:	d103      	bne.n	a8c <boot_swap_image+0x24>
            rc = boot_read_image_size(state, BOOT_PRIMARY_SLOT, &copy_size);
     a84:	aa01      	add	r2, sp, #4
     a86:	4620      	mov	r0, r4
     a88:	f008 fd95 	bl	95b6 <boot_read_image_size>
            memset(bs->enckey[0], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        hdr = boot_img_hdr(state, BOOT_SECONDARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     a8c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     a8e:	42b3      	cmp	r3, r6
     a90:	d104      	bne.n	a9c <boot_swap_image+0x34>
            rc = boot_read_image_size(state, BOOT_SECONDARY_SLOT, &size);
     a92:	466a      	mov	r2, sp
     a94:	2101      	movs	r1, #1
     a96:	4620      	mov	r0, r4
     a98:	f008 fd8d 	bl	95b6 <boot_read_image_size>
        } else {
            memset(bs->enckey[1], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        if (size > copy_size) {
     a9c:	e9dd 3200 	ldrd	r3, r2, [sp]
     aa0:	4293      	cmp	r3, r2
            copy_size = size;
     aa2:	bf88      	it	hi
     aa4:	9301      	strhi	r3, [sp, #4]
        }

        bs->swap_size = copy_size;
     aa6:	9b01      	ldr	r3, [sp, #4]
     aa8:	60ab      	str	r3, [r5, #8]
            }
        }
#endif
    }

    swap_run(state, bs, copy_size);
     aaa:	4620      	mov	r0, r4
     aac:	9a01      	ldr	r2, [sp, #4]
     aae:	4629      	mov	r1, r5
     ab0:	f000 f9d4 	bl	e5c <swap_run>
                     boot_status_fails);
    }
#endif

    return 0;
}
     ab4:	2000      	movs	r0, #0
     ab6:	b002      	add	sp, #8
     ab8:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_read_swap_size(image_index, &bs->swap_size);
     aba:	f105 0108 	add.w	r1, r5, #8
     abe:	f7ff ff1f 	bl	900 <boot_read_swap_size>
        copy_size = bs->swap_size;
     ac2:	68ab      	ldr	r3, [r5, #8]
     ac4:	9301      	str	r3, [sp, #4]
     ac6:	e7f0      	b.n	aaa <boot_swap_image+0x42>
     ac8:	96f3b83d 	.word	0x96f3b83d

00000acc <boot_copy_region>:
{
     acc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     ad0:	f8df b078 	ldr.w	fp, [pc, #120]	; b4c <boot_copy_region+0x80>
     ad4:	4c1b      	ldr	r4, [pc, #108]	; (b44 <boot_copy_region+0x78>)
     ad6:	4d1c      	ldr	r5, [pc, #112]	; (b48 <boot_copy_region+0x7c>)
{
     ad8:	4688      	mov	r8, r1
     ada:	4691      	mov	r9, r2
     adc:	469a      	mov	sl, r3
    bytes_copied = 0;
     ade:	2600      	movs	r6, #0
    while (bytes_copied < sz) {
     ae0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     ae2:	429e      	cmp	r6, r3
     ae4:	d301      	bcc.n	aea <boot_copy_region+0x1e>
    return 0;
     ae6:	2000      	movs	r0, #0
     ae8:	e00f      	b.n	b0a <boot_copy_region+0x3e>
        if (sz - bytes_copied > sizeof buf) {
     aea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     aec:	4a17      	ldr	r2, [pc, #92]	; (b4c <boot_copy_region+0x80>)
        if (sz - bytes_copied > sizeof buf) {
     aee:	1b9f      	subs	r7, r3, r6
     af0:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
     af4:	bf28      	it	cs
     af6:	f44f 6780 	movcs.w	r7, #1024	; 0x400
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     afa:	463b      	mov	r3, r7
     afc:	eb06 010a 	add.w	r1, r6, sl
     b00:	4640      	mov	r0, r8
     b02:	f009 fda3 	bl	a64c <flash_area_read>
        if (rc != 0) {
     b06:	b110      	cbz	r0, b0e <boot_copy_region+0x42>
            return BOOT_EFLASH;
     b08:	2001      	movs	r0, #1
}
     b0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
     b0e:	990a      	ldr	r1, [sp, #40]	; 0x28
     b10:	463b      	mov	r3, r7
     b12:	465a      	mov	r2, fp
     b14:	1871      	adds	r1, r6, r1
     b16:	4648      	mov	r0, r9
     b18:	f009 fdb5 	bl	a686 <flash_area_write>
        if (rc != 0) {
     b1c:	2800      	cmp	r0, #0
     b1e:	d1f3      	bne.n	b08 <boot_copy_region+0x3c>
     b20:	f8c4 5600 	str.w	r5, [r4, #1536]	; 0x600
        bytes_copied += chunk_sz;
     b24:	443e      	add	r6, r7
     b26:	f8c4 5604 	str.w	r5, [r4, #1540]	; 0x604
     b2a:	f8c4 5608 	str.w	r5, [r4, #1544]	; 0x608
     b2e:	f8c4 560c 	str.w	r5, [r4, #1548]	; 0x60c
     b32:	f8c4 5610 	str.w	r5, [r4, #1552]	; 0x610
     b36:	f8c4 5614 	str.w	r5, [r4, #1556]	; 0x614
     b3a:	f8c4 5618 	str.w	r5, [r4, #1560]	; 0x618
     b3e:	f8c4 561c 	str.w	r5, [r4, #1564]	; 0x61c
        MCUBOOT_WATCHDOG_FEED();
     b42:	e7cd      	b.n	ae0 <boot_copy_region+0x14>
     b44:	40010000 	.word	0x40010000
     b48:	6e524635 	.word	0x6e524635
     b4c:	20003f8e 	.word	0x20003f8e

00000b50 <context_boot_go>:
    }
}

fih_int
context_boot_go(struct boot_loader_state *state, struct boot_rsp *rsp)
{
     b50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    size_t slot;
    struct boot_status bs;
    int rc = -1;
    fih_int fih_rc = FIH_FAILURE;
     b54:	4b7e      	ldr	r3, [pc, #504]	; (d50 <FIH_LABEL_FIH_CALL_END_2187+0x40>)
    TARGET_STATIC boot_sector_t secondary_slot_sectors[BOOT_IMAGE_NUMBER][BOOT_MAX_IMG_SECTORS];
#if MCUBOOT_SWAP_USING_SCRATCH
    TARGET_STATIC boot_sector_t scratch_sectors[BOOT_MAX_IMG_SECTORS];
#endif

    memset(state, 0, sizeof(struct boot_loader_state));
     b56:	2260      	movs	r2, #96	; 0x60
{
     b58:	b085      	sub	sp, #20
     b5a:	4604      	mov	r4, r0
     b5c:	460f      	mov	r7, r1
    memset(state, 0, sizeof(struct boot_loader_state));
     b5e:	2100      	movs	r1, #0
    fih_int fih_rc = FIH_FAILURE;
     b60:	681e      	ldr	r6, [r3, #0]
    memset(state, 0, sizeof(struct boot_loader_state));
     b62:	f00a f896 	bl	ac92 <memset>
        boot_enc_zeroize(BOOT_CURR_ENC(state));
#endif

        image_index = BOOT_CURR_IMG(state);

        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     b66:	4b7b      	ldr	r3, [pc, #492]	; (d54 <FIH_LABEL_FIH_CALL_END_2187+0x44>)
     b68:	6263      	str	r3, [r4, #36]	; 0x24

        /* Open primary and secondary image areas for the duration
         * of this call.
         */
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     b6a:	2100      	movs	r1, #0
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
     b6c:	4b7a      	ldr	r3, [pc, #488]	; (d58 <FIH_LABEL_FIH_CALL_END_2187+0x48>)
     b6e:	6523      	str	r3, [r4, #80]	; 0x50
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     b70:	4608      	mov	r0, r1
     b72:	f008 fc4d 	bl	9410 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     b76:	f104 0120 	add.w	r1, r4, #32
     b7a:	b2c0      	uxtb	r0, r0
     b7c:	f001 ff60 	bl	2a40 <flash_area_open>
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     b80:	2101      	movs	r1, #1
     b82:	2000      	movs	r0, #0
     b84:	f008 fc44 	bl	9410 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     b88:	f104 014c 	add.w	r1, r4, #76	; 0x4c
     b8c:	b2c0      	uxtb	r0, r0
     b8e:	f001 ff57 	bl	2a40 <flash_area_open>
     b92:	4605      	mov	r5, r0
    rc = boot_read_sectors(state);
     b94:	4620      	mov	r0, r4
     b96:	f008 fd6e 	bl	9676 <boot_read_sectors>
    if (rc != 0) {
     b9a:	4602      	mov	r2, r0
     b9c:	b118      	cbz	r0, ba6 <context_boot_go+0x56>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     b9e:	2301      	movs	r3, #1
                    BOOT_SWAP_TYPE(state) = bs->swap_type;
     ba0:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     ba4:	e06a      	b.n	c7c <FIH_LABEL_FIH_CALL_END_1874+0x18>
    rc = boot_read_image_headers(state, false, NULL);
     ba6:	4601      	mov	r1, r0
     ba8:	4620      	mov	r0, r4
     baa:	f008 fd4c 	bl	9646 <boot_read_image_headers>
    if (rc != 0) {
     bae:	2800      	cmp	r0, #0
     bb0:	d1f5      	bne.n	b9e <context_boot_go+0x4e>
    if (boot_slots_compatible(state)) {
     bb2:	4620      	mov	r0, r4
     bb4:	f008 feed 	bl	9992 <boot_slots_compatible>
     bb8:	2800      	cmp	r0, #0
     bba:	d0f0      	beq.n	b9e <context_boot_go+0x4e>
        boot_status_reset(bs);
     bbc:	4668      	mov	r0, sp
     bbe:	f008 fd79 	bl	96b4 <boot_status_reset>
        rc = swap_read_status(state, bs);
     bc2:	4669      	mov	r1, sp
     bc4:	4620      	mov	r0, r4
     bc6:	f008 fe13 	bl	97f0 <swap_read_status>
        if (rc != 0) {
     bca:	2800      	cmp	r0, #0
     bcc:	d1e7      	bne.n	b9e <context_boot_go+0x4e>
        rc = boot_read_image_headers(state, !boot_status_is_reset(bs), bs);
     bce:	4668      	mov	r0, sp
     bd0:	f008 fd79 	bl	96c6 <boot_status_is_reset>
     bd4:	f080 0101 	eor.w	r1, r0, #1
     bd8:	466a      	mov	r2, sp
     bda:	b2c9      	uxtb	r1, r1
     bdc:	4620      	mov	r0, r4
     bde:	f008 fd32 	bl	9646 <boot_read_image_headers>
        if (rc != 0) {
     be2:	4602      	mov	r2, r0
     be4:	2800      	cmp	r0, #0
     be6:	d1da      	bne.n	b9e <context_boot_go+0x4e>
        if (!boot_status_is_reset(bs)) {
     be8:	4668      	mov	r0, sp
     bea:	f008 fd6c 	bl	96c6 <boot_status_is_reset>
     bee:	4680      	mov	r8, r0
     bf0:	bb40      	cbnz	r0, c44 <context_boot_go+0xf4>
    rc = boot_swap_image(state, bs);
     bf2:	4669      	mov	r1, sp
     bf4:	4620      	mov	r0, r4
     bf6:	f7ff ff37 	bl	a68 <boot_swap_image>
    BOOT_SWAP_TYPE(state) = bs->swap_type;
     bfa:	f89d 3007 	ldrb.w	r3, [sp, #7]
     bfe:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (bs->swap_type == BOOT_SWAP_TYPE_REVERT ||
     c02:	3b03      	subs	r3, #3
     c04:	2b01      	cmp	r3, #1
     c06:	d806      	bhi.n	c16 <context_boot_go+0xc6>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     c08:	4640      	mov	r0, r8
     c0a:	f008 fe3e 	bl	988a <swap_set_image_ok>
        if (rc != 0) {
     c0e:	b110      	cbz	r0, c16 <context_boot_go+0xc6>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     c10:	23ff      	movs	r3, #255	; 0xff
     c12:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (BOOT_IS_UPGRADE(bs->swap_type)) {
     c16:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c1a:	3b02      	subs	r3, #2
     c1c:	2b02      	cmp	r3, #2
     c1e:	d806      	bhi.n	c2e <context_boot_go+0xde>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     c20:	2000      	movs	r0, #0
     c22:	f008 fe20 	bl	9866 <swap_set_copy_done>
        if (rc != 0) {
     c26:	b110      	cbz	r0, c2e <context_boot_go+0xde>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     c28:	23ff      	movs	r3, #255	; 0xff
     c2a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     c2e:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     c32:	2bff      	cmp	r3, #255	; 0xff
     c34:	d100      	bne.n	c38 <context_boot_go+0xe8>
        while (1) {}
     c36:	e7fe      	b.n	c36 <context_boot_go+0xe6>
            rc = boot_read_image_headers(state, false, bs);
     c38:	466a      	mov	r2, sp
     c3a:	2100      	movs	r1, #0
     c3c:	4620      	mov	r0, r4
     c3e:	f008 fd02 	bl	9646 <boot_read_image_headers>
     c42:	e7ac      	b.n	b9e <context_boot_go+0x4e>
            if (bs->swap_type == BOOT_SWAP_TYPE_NONE) {
     c44:	f89d 9007 	ldrb.w	r9, [sp, #7]
     c48:	f1b9 0f01 	cmp.w	r9, #1
     c4c:	d123      	bne.n	c96 <FIH_LABEL_FIH_CALL_START_1974>
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     c4e:	4610      	mov	r0, r2
     c50:	f004 ff48 	bl	5ae4 <boot_swap_type_multi>
    if (BOOT_IS_UPGRADE(swap_type)) {
     c54:	1e83      	subs	r3, r0, #2
     c56:	2b02      	cmp	r3, #2
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     c58:	4680      	mov	r8, r0
    if (BOOT_IS_UPGRADE(swap_type)) {
     c5a:	d80d      	bhi.n	c78 <FIH_LABEL_FIH_CALL_END_1874+0x14>

00000c5c <FIH_LABEL_FIH_CALL_START_1850>:
        FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_SECONDARY_SLOT, bs);
     c5c:	4649      	mov	r1, r9
     c5e:	4620      	mov	r0, r4
     c60:	f7ff fe8e 	bl	980 <boot_validate_slot.isra.0>

00000c64 <FIH_LABEL_FIH_CALL_END_1874>:
        if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     c64:	4b3d      	ldr	r3, [pc, #244]	; (d5c <FIH_LABEL_FIH_CALL_END_2187+0x4c>)
     c66:	681b      	ldr	r3, [r3, #0]
     c68:	4298      	cmp	r0, r3
     c6a:	d005      	beq.n	c78 <FIH_LABEL_FIH_CALL_END_1874+0x14>
                swap_type = BOOT_SWAP_TYPE_FAIL;
     c6c:	2801      	cmp	r0, #1
     c6e:	bf0c      	ite	eq
     c70:	f04f 0801 	moveq.w	r8, #1
     c74:	f04f 0805 	movne.w	r8, #5
                BOOT_SWAP_TYPE(state) = boot_validated_swap_type(state, bs);
     c78:	f884 8058 	strb.w	r8, [r4, #88]	; 0x58
#endif

        /* Determine swap type and complete swap if it has been aborted. */
        boot_prepare_image_for_update(state, &bs);

        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
     c7c:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
        /* Indicate that swap is not aborted */
        boot_status_reset(&bs);
#endif /* (BOOT_IMAGE_NUMBER > 1) */

        /* Set the previously determined swap type */
        bs.swap_type = BOOT_SWAP_TYPE(state);
     c80:	f88d 3007 	strb.w	r3, [sp, #7]

        switch (BOOT_SWAP_TYPE(state)) {
     c84:	2b04      	cmp	r3, #4
     c86:	d812      	bhi.n	cae <FIH_LABEL_FIH_CALL_END_1994+0x10>
     c88:	2b01      	cmp	r3, #1
     c8a:	d816      	bhi.n	cba <FIH_LABEL_FIH_CALL_END_1994+0x1c>
     c8c:	d02d      	beq.n	cea <FIH_LABEL_FIH_CALL_END_1994+0x4c>
            }
#endif /* !MCUBOOT_OVERWRITE_ONLY */
            break;

        default:
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     c8e:	23ff      	movs	r3, #255	; 0xff
     c90:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     c94:	e029      	b.n	cea <FIH_LABEL_FIH_CALL_END_1994+0x4c>

00000c96 <FIH_LABEL_FIH_CALL_START_1974>:
                FIH_CALL(boot_validate_slot, fih_rc,
     c96:	2101      	movs	r1, #1
     c98:	4620      	mov	r0, r4
     c9a:	f7ff fe71 	bl	980 <boot_validate_slot.isra.0>

00000c9e <FIH_LABEL_FIH_CALL_END_1994>:
                if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     c9e:	4b2f      	ldr	r3, [pc, #188]	; (d5c <FIH_LABEL_FIH_CALL_END_2187+0x4c>)
     ca0:	681b      	ldr	r3, [r3, #0]
     ca2:	4298      	cmp	r0, r3
                    BOOT_SWAP_TYPE(state) = bs->swap_type;
     ca4:	bf0c      	ite	eq
     ca6:	f89d 3007 	ldrbeq.w	r3, [sp, #7]
                    BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
     caa:	2305      	movne	r3, #5
                    BOOT_SWAP_TYPE(state) = bs->swap_type;
     cac:	e778      	b.n	ba0 <context_boot_go+0x50>
        switch (BOOT_SWAP_TYPE(state)) {
     cae:	2b05      	cmp	r3, #5
     cb0:	d1ed      	bne.n	c8e <FIH_LABEL_FIH_CALL_END_1874+0x2a>
            rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     cb2:	2000      	movs	r0, #0
     cb4:	f008 fde9 	bl	988a <swap_set_image_ok>
     cb8:	e012      	b.n	ce0 <FIH_LABEL_FIH_CALL_END_1994+0x42>
        rc = boot_swap_image(state, bs);
     cba:	4669      	mov	r1, sp
     cbc:	4620      	mov	r0, r4
     cbe:	f7ff fed3 	bl	a68 <boot_swap_image>
    swap_type = BOOT_SWAP_TYPE(state);
     cc2:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
     cc6:	1eda      	subs	r2, r3, #3
     cc8:	2a01      	cmp	r2, #1
        rc = boot_swap_image(state, bs);
     cca:	4605      	mov	r5, r0
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
     ccc:	d80b      	bhi.n	ce6 <FIH_LABEL_FIH_CALL_END_1994+0x48>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     cce:	2000      	movs	r0, #0
     cd0:	f008 fddb 	bl	988a <swap_set_image_ok>
        if (rc != 0) {
     cd4:	4605      	mov	r5, r0
     cd6:	2800      	cmp	r0, #0
     cd8:	d1d9      	bne.n	c8e <FIH_LABEL_FIH_CALL_END_1874+0x2a>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     cda:	2000      	movs	r0, #0
     cdc:	f008 fdc3 	bl	9866 <swap_set_copy_done>
            if (rc != 0) {
     ce0:	4605      	mov	r5, r0
     ce2:	b110      	cbz	r0, cea <FIH_LABEL_FIH_CALL_END_1994+0x4c>
     ce4:	e7d3      	b.n	c8e <FIH_LABEL_FIH_CALL_END_1874+0x2a>
    if (BOOT_IS_UPGRADE(swap_type)) {
     ce6:	2b02      	cmp	r3, #2
     ce8:	d0f7      	beq.n	cda <FIH_LABEL_FIH_CALL_END_1994+0x3c>
        }

        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     cea:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     cee:	2bff      	cmp	r3, #255	; 0xff
     cf0:	d100      	bne.n	cf4 <FIH_LABEL_FIH_CALL_END_1994+0x56>
            BOOT_LOG_ERR("panic!");
            assert(0);

            /* Loop forever... */
            FIH_PANIC;
     cf2:	e7fe      	b.n	cf2 <FIH_LABEL_FIH_CALL_END_1994+0x54>
    /* Iterate over all the images. At this point all required update operations
     * have finished. By the end of the loop each image in the primary slot will
     * have been re-validated.
     */
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
     cf4:	2b01      	cmp	r3, #1
     cf6:	d006      	beq.n	d06 <FIH_LABEL_FIH_CALL_START_2171>
            /* Attempt to read an image header from each slot. Ensure that image
             * headers in slots are aligned with headers in boot_data.
             */
            rc = boot_read_image_headers(state, false, &bs);
     cf8:	466a      	mov	r2, sp
     cfa:	2100      	movs	r1, #0
     cfc:	4620      	mov	r0, r4
     cfe:	f008 fca2 	bl	9646 <boot_read_image_headers>
            if (rc != 0) {
     d02:	4605      	mov	r5, r0
     d04:	b9b8      	cbnz	r0, d36 <FIH_LABEL_FIH_CALL_END_2187+0x26>

00000d06 <FIH_LABEL_FIH_CALL_START_2171>:
	 * primary.
	 */
	if (BOOT_CURR_IMG(state) == 0)
#endif
	{
            FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_PRIMARY_SLOT, NULL);
     d06:	2100      	movs	r1, #0
     d08:	4620      	mov	r0, r4
     d0a:	f7ff fe39 	bl	980 <boot_validate_slot.isra.0>
     d0e:	4606      	mov	r6, r0

00000d10 <FIH_LABEL_FIH_CALL_END_2187>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     d10:	f8df 8048 	ldr.w	r8, [pc, #72]	; d5c <FIH_LABEL_FIH_CALL_END_2187+0x4c>
     d14:	f8d8 3000 	ldr.w	r3, [r8]
     d18:	4283      	cmp	r3, r0
     d1a:	d10c      	bne.n	d36 <FIH_LABEL_FIH_CALL_END_2187+0x26>
    /*
     * Since the boot_status struct stores plaintext encryption keys, reset
     * them here to avoid the possibility of jumping into an image that could
     * easily recover them.
     */
    memset(&bs, 0, sizeof(struct boot_status));
     d1c:	2210      	movs	r2, #16
     d1e:	2100      	movs	r1, #0
     d20:	4668      	mov	r0, sp
     d22:	f009 ffb6 	bl	ac92 <memset>

    rsp->br_flash_dev_id = BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT)->fa_device_id;
     d26:	6a23      	ldr	r3, [r4, #32]
    rsp->br_image_off = boot_img_slot_off(state, BOOT_PRIMARY_SLOT);
    rsp->br_hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);

    fih_rc = FIH_SUCCESS;
     d28:	f8d8 6000 	ldr.w	r6, [r8]
    rsp->br_flash_dev_id = BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT)->fa_device_id;
     d2c:	785a      	ldrb	r2, [r3, #1]
     d2e:	713a      	strb	r2, [r7, #4]
    rsp->br_image_off = boot_img_slot_off(state, BOOT_PRIMARY_SLOT);
     d30:	685b      	ldr	r3, [r3, #4]
     d32:	60bb      	str	r3, [r7, #8]
    rsp->br_hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
     d34:	603c      	str	r4, [r7, #0]
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
#if MCUBOOT_SWAP_USING_SCRATCH
        flash_area_close(BOOT_SCRATCH_AREA(state));
#endif
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
     d36:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
     d38:	f009 fc87 	bl	a64a <flash_area_close>
     d3c:	6a20      	ldr	r0, [r4, #32]
     d3e:	f009 fc84 	bl	a64a <flash_area_close>
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     d42:	2d00      	cmp	r5, #0
     d44:	bf14      	ite	ne
     d46:	4628      	movne	r0, r5
     d48:	4630      	moveq	r0, r6
     d4a:	b005      	add	sp, #20
     d4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     d50:	20000000 	.word	0x20000000
     d54:	20000780 	.word	0x20000780
     d58:	20000b80 	.word	0x20000b80
     d5c:	2000071c 	.word	0x2000071c

00000d60 <boot_go>:
 *
 * @return                      FIH_SUCCESS on success; nonzero on failure.
 */
fih_int
boot_go(struct boot_rsp *rsp)
{
     d60:	b508      	push	{r3, lr}
     d62:	4601      	mov	r1, r0

00000d64 <FIH_LABEL_FIH_CALL_START_2744>:
    fih_int fih_rc = FIH_FAILURE;
    FIH_CALL(context_boot_go, fih_rc, &boot_data, rsp);
     d64:	4801      	ldr	r0, [pc, #4]	; (d6c <FIH_LABEL_FIH_CALL_END_2760+0x2>)
     d66:	f7ff fef3 	bl	b50 <context_boot_go>

00000d6a <FIH_LABEL_FIH_CALL_END_2760>:
    FIH_RET(fih_rc);
}
     d6a:	bd08      	pop	{r3, pc}
     d6c:	20000720 	.word	0x20000720

00000d70 <boot_read_image_header>:
static uint32_t g_last_idx = UINT32_MAX;

int
boot_read_image_header(struct boot_loader_state *state, int slot,
                       struct image_header *out_hdr, struct boot_status *bs)
{
     d70:	b573      	push	{r0, r1, r4, r5, r6, lr}
     d72:	4616      	mov	r6, r2
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    off = 0;
    if (bs) {
     d74:	461c      	mov	r4, r3
     d76:	b333      	cbz	r3, dc6 <boot_read_image_header+0x56>

static inline size_t
boot_img_sector_size(const struct boot_loader_state *state,
                     size_t slot, size_t sector)
{
    return BOOT_IMG(state, slot).sectors[sector].fs_size;
     d78:	6a43      	ldr	r3, [r0, #36]	; 0x24
     d7a:	685d      	ldr	r5, [r3, #4]
        sz = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, 0);
        if (bs->op == BOOT_STATUS_OP_MOVE) {
     d7c:	7963      	ldrb	r3, [r4, #5]
     d7e:	2b01      	cmp	r3, #1
     d80:	d115      	bne.n	dae <boot_read_image_header+0x3e>
            if (slot == 0 && bs->idx > g_last_idx) {
     d82:	bb01      	cbnz	r1, dc6 <boot_read_image_header+0x56>
     d84:	4b1f      	ldr	r3, [pc, #124]	; (e04 <boot_read_image_header+0x94>)
     d86:	6822      	ldr	r2, [r4, #0]
     d88:	681b      	ldr	r3, [r3, #0]
    off = 0;
     d8a:	429a      	cmp	r2, r3
     d8c:	bf98      	it	ls
     d8e:	2500      	movls	r5, #0
                }
            }
        }
    }

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     d90:	2000      	movs	r0, #0
     d92:	f008 fb3d 	bl	9410 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     d96:	a901      	add	r1, sp, #4
     d98:	b2c0      	uxtb	r0, r0
     d9a:	f001 fe51 	bl	2a40 <flash_area_open>
    if (rc != 0) {
     d9e:	b1f0      	cbz	r0, dde <boot_read_image_header+0x6e>
        rc = BOOT_EFLASH;
     da0:	2501      	movs	r5, #1
    }

    rc = 0;

done:
    flash_area_close(fap);
     da2:	9801      	ldr	r0, [sp, #4]
     da4:	f009 fc51 	bl	a64a <flash_area_close>
    return rc;
}
     da8:	4628      	mov	r0, r5
     daa:	b002      	add	sp, #8
     dac:	bd70      	pop	{r4, r5, r6, pc}
        } else if (bs->op == BOOT_STATUS_OP_SWAP) {
     dae:	2b02      	cmp	r3, #2
     db0:	d109      	bne.n	dc6 <boot_read_image_header+0x56>
            if (bs->idx > 1 && bs->idx <= g_last_idx) {
     db2:	6823      	ldr	r3, [r4, #0]
     db4:	2b01      	cmp	r3, #1
     db6:	d908      	bls.n	dca <boot_read_image_header+0x5a>
     db8:	4a12      	ldr	r2, [pc, #72]	; (e04 <boot_read_image_header+0x94>)
     dba:	6812      	ldr	r2, [r2, #0]
     dbc:	4293      	cmp	r3, r2
     dbe:	d802      	bhi.n	dc6 <boot_read_image_header+0x56>
                if (slot == 0) {
     dc0:	fab1 f181 	clz	r1, r1
     dc4:	0949      	lsrs	r1, r1, #5
    off = 0;
     dc6:	2500      	movs	r5, #0
     dc8:	e7e2      	b.n	d90 <boot_read_image_header+0x20>
            } else if (bs->idx == 1) {
     dca:	d1fc      	bne.n	dc6 <boot_read_image_header+0x56>
                if (slot == 0) {
     dcc:	2900      	cmp	r1, #0
     dce:	d0df      	beq.n	d90 <boot_read_image_header+0x20>
                if (slot == 1 && bs->state == 2) {
     dd0:	2901      	cmp	r1, #1
     dd2:	d1f8      	bne.n	dc6 <boot_read_image_header+0x56>
     dd4:	7921      	ldrb	r1, [r4, #4]
     dd6:	3902      	subs	r1, #2
     dd8:	bf18      	it	ne
     dda:	2101      	movne	r1, #1
     ddc:	e7f3      	b.n	dc6 <boot_read_image_header+0x56>
    rc = flash_area_read(fap, off, out_hdr, sizeof *out_hdr);
     dde:	4629      	mov	r1, r5
     de0:	9801      	ldr	r0, [sp, #4]
     de2:	2320      	movs	r3, #32
     de4:	4632      	mov	r2, r6
     de6:	f009 fc31 	bl	a64c <flash_area_read>
    if (rc != 0) {
     dea:	4605      	mov	r5, r0
     dec:	2800      	cmp	r0, #0
     dee:	d1d7      	bne.n	da0 <boot_read_image_header+0x30>
    if (bs != NULL && out_hdr->ih_magic != IMAGE_MAGIC) {
     df0:	2c00      	cmp	r4, #0
     df2:	d0d6      	beq.n	da2 <boot_read_image_header+0x32>
     df4:	6835      	ldr	r5, [r6, #0]
     df6:	4804      	ldr	r0, [pc, #16]	; (e08 <boot_read_image_header+0x98>)
     df8:	1a2d      	subs	r5, r5, r0
     dfa:	bf18      	it	ne
     dfc:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
     e00:	e7cf      	b.n	da2 <boot_read_image_header+0x32>
     e02:	bf00      	nop
     e04:	20000004 	.word	0x20000004
     e08:	96f3b83d 	.word	0x96f3b83d

00000e0c <fixup_revert>:
 * upgrade (by initializing the secondary slot).
 */
void
fixup_revert(const struct boot_loader_state *state, struct boot_status *bs,
        const struct flash_area *fap_sec, uint8_t sec_id)
{
     e0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
     e0e:	4606      	mov	r6, r0
     e10:	4618      	mov	r0, r3
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    /* No fixup required */
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
     e12:	684b      	ldr	r3, [r1, #4]
{
     e14:	4614      	mov	r4, r2
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
     e16:	4a10      	ldr	r2, [pc, #64]	; (e58 <fixup_revert+0x4c>)
     e18:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
     e1c:	4293      	cmp	r3, r2
{
     e1e:	460d      	mov	r5, r1
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
     e20:	d117      	bne.n	e52 <fixup_revert+0x46>
        bs->op != BOOT_STATUS_OP_MOVE ||
     e22:	680b      	ldr	r3, [r1, #0]
     e24:	2b01      	cmp	r3, #1
     e26:	d114      	bne.n	e52 <fixup_revert+0x46>
        bs->idx != BOOT_STATUS_IDX_0) {
        return;
    }

    rc = boot_read_swap_state_by_id(sec_id, &swap_state);
     e28:	4669      	mov	r1, sp
     e2a:	f00a faac 	bl	b386 <boot_read_swap_state_by_id>
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);

    if (swap_state.magic == BOOT_MAGIC_UNSET) {
     e2e:	f89d 3000 	ldrb.w	r3, [sp]
     e32:	2b03      	cmp	r3, #3
     e34:	d10d      	bne.n	e52 <fixup_revert+0x46>
        rc = swap_erase_trailer_sectors(state, fap_sec);
     e36:	4621      	mov	r1, r4
     e38:	4630      	mov	r0, r6
     e3a:	f008 fc85 	bl	9748 <swap_erase_trailer_sectors>
        assert(rc == 0);

        rc = boot_write_image_ok(fap_sec);
     e3e:	4620      	mov	r0, r4
     e40:	f00a fa98 	bl	b374 <boot_write_image_ok>
        assert(rc == 0);

        rc = boot_write_swap_size(fap_sec, bs->swap_size);
     e44:	68a9      	ldr	r1, [r5, #8]
     e46:	4620      	mov	r0, r4
     e48:	f008 fba6 	bl	9598 <boot_write_swap_size>
        assert(rc == 0);

        rc = boot_write_magic(fap_sec);
     e4c:	4620      	mov	r0, r4
     e4e:	f004 fdeb 	bl	5a28 <boot_write_magic>
        assert(rc == 0);
    }
}
     e52:	b002      	add	sp, #8
     e54:	bd70      	pop	{r4, r5, r6, pc}
     e56:	bf00      	nop
     e58:	04000100 	.word	0x04000100

00000e5c <swap_run>:

void
swap_run(struct boot_loader_state *state, struct boot_status *bs,
         uint32_t copy_size)
{
     e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e60:	6a43      	ldr	r3, [r0, #36]	; 0x24
     e62:	460c      	mov	r4, r1
     e64:	685e      	ldr	r6, [r3, #4]
     e66:	b08b      	sub	sp, #44	; 0x2c
     e68:	4605      	mov	r5, r0
     e6a:	2101      	movs	r1, #1
    uint8_t image_index;
    const struct flash_area *fap_pri;
    const struct flash_area *fap_sec;
    int rc;

    sz = 0;
     e6c:	2300      	movs	r3, #0
    g_last_idx = 0;

    sector_sz = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, 0);
    while (1) {
        sz += sector_sz;
     e6e:	4433      	add	r3, r6
        /* Skip to next sector because all sectors will be moved up. */
        g_last_idx++;
        if (sz >= copy_size) {
     e70:	4293      	cmp	r3, r2
     e72:	4608      	mov	r0, r1
     e74:	f101 0101 	add.w	r1, r1, #1
     e78:	d3f9      	bcc.n	e6e <swap_run+0x12>
     e7a:	4f71      	ldr	r7, [pc, #452]	; (1040 <CONFIG_FPROTECT_BLOCK_SIZE+0x40>)
     e7c:	6038      	str	r0, [r7, #0]
    }

    /*
     * When starting a new swap upgrade, check that there is enough space.
     */
    if (boot_status_is_reset(bs)) {
     e7e:	4620      	mov	r0, r4
     e80:	f008 fc21 	bl	96c6 <boot_status_is_reset>
     e84:	9703      	str	r7, [sp, #12]
     e86:	b198      	cbz	r0, eb0 <swap_run+0x54>
        sz = 0;
        trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
     e88:	6de8      	ldr	r0, [r5, #92]	; 0x5c
     e8a:	f008 fb63 	bl	9554 <boot_trailer_sz>
        first_trailer_idx = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
     e8e:	6aab      	ldr	r3, [r5, #40]	; 0x28
        sz = 0;
     e90:	2200      	movs	r2, #0
        first_trailer_idx = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
     e92:	3b01      	subs	r3, #1

        while (1) {
            sz += sector_sz;
     e94:	4432      	add	r2, r6
            if  (sz >= trailer_sz) {
     e96:	4290      	cmp	r0, r2
     e98:	d901      	bls.n	e9e <swap_run+0x42>
                break;
            }
            first_trailer_idx--;
     e9a:	3b01      	subs	r3, #1
            sz += sector_sz;
     e9c:	e7fa      	b.n	e94 <swap_run+0x38>
        }

        if (g_last_idx >= first_trailer_idx) {
     e9e:	9a03      	ldr	r2, [sp, #12]
     ea0:	6812      	ldr	r2, [r2, #0]
     ea2:	429a      	cmp	r2, r3
     ea4:	d304      	bcc.n	eb0 <swap_run+0x54>
            BOOT_LOG_WRN("Not enough free space to run swap upgrade");
            bs->swap_type = BOOT_SWAP_TYPE_NONE;
     ea6:	2301      	movs	r3, #1
     ea8:	71e3      	strb	r3, [r4, #7]
        idx++;
    }

    flash_area_close(fap_pri);
    flash_area_close(fap_sec);
}
     eaa:	b00b      	add	sp, #44	; 0x2c
     eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap_pri);
     eb0:	a908      	add	r1, sp, #32
     eb2:	2002      	movs	r0, #2
     eb4:	f001 fdc4 	bl	2a40 <flash_area_open>
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index), &fap_sec);
     eb8:	a909      	add	r1, sp, #36	; 0x24
     eba:	2005      	movs	r0, #5
     ebc:	f001 fdc0 	bl	2a40 <flash_area_open>
    fixup_revert(state, bs, fap_sec, FLASH_AREA_IMAGE_SECONDARY(image_index));
     ec0:	2305      	movs	r3, #5
     ec2:	9a09      	ldr	r2, [sp, #36]	; 0x24
     ec4:	4621      	mov	r1, r4
     ec6:	4628      	mov	r0, r5
     ec8:	f7ff ffa0 	bl	e0c <fixup_revert>
    if (bs->op == BOOT_STATUS_OP_MOVE) {
     ecc:	7963      	ldrb	r3, [r4, #5]
     ece:	2b01      	cmp	r3, #1
     ed0:	d108      	bne.n	ee4 <swap_run+0x88>
        idx = g_last_idx;
     ed2:	9b03      	ldr	r3, [sp, #12]
    BOOT_STATUS_ASSERT(rc == 0);
     ed4:	f8df b16c 	ldr.w	fp, [pc, #364]	; 1044 <CONFIG_FPROTECT_BLOCK_SIZE+0x44>
        idx = g_last_idx;
     ed8:	681f      	ldr	r7, [r3, #0]
        while (idx > 0) {
     eda:	9b03      	ldr	r3, [sp, #12]
     edc:	681b      	ldr	r3, [r3, #0]
     ede:	b9a7      	cbnz	r7, f0a <swap_run+0xae>
        bs->idx = BOOT_STATUS_IDX_0;
     ee0:	2301      	movs	r3, #1
     ee2:	6023      	str	r3, [r4, #0]
    bs->op = BOOT_STATUS_OP_SWAP;
     ee4:	2302      	movs	r3, #2
        BOOT_STATUS_ASSERT(rc == 0);
     ee6:	f8df 815c 	ldr.w	r8, [pc, #348]	; 1044 <CONFIG_FPROTECT_BLOCK_SIZE+0x44>
    bs->op = BOOT_STATUS_OP_SWAP;
     eea:	7163      	strb	r3, [r4, #5]
    idx = 1;
     eec:	2701      	movs	r7, #1
        bs->state = BOOT_STATUS_STATE_1;
     eee:	9306      	str	r3, [sp, #24]
    while (idx <= g_last_idx) {
     ef0:	9b03      	ldr	r3, [sp, #12]
     ef2:	f8dd 9020 	ldr.w	r9, [sp, #32]
     ef6:	681b      	ldr	r3, [r3, #0]
     ef8:	42bb      	cmp	r3, r7
     efa:	d24a      	bcs.n	f92 <swap_run+0x136>
    flash_area_close(fap_pri);
     efc:	4648      	mov	r0, r9
     efe:	f009 fba4 	bl	a64a <flash_area_close>
    flash_area_close(fap_sec);
     f02:	9809      	ldr	r0, [sp, #36]	; 0x24
     f04:	f009 fba1 	bl	a64a <flash_area_close>
     f08:	e7cf      	b.n	eaa <swap_run+0x4e>
            if (idx <= (g_last_idx - bs->idx + 1)) {
     f0a:	6822      	ldr	r2, [r4, #0]
     f0c:	3301      	adds	r3, #1
     f0e:	1a9b      	subs	r3, r3, r2
     f10:	42bb      	cmp	r3, r7
     f12:	d33c      	bcc.n	f8e <swap_run+0x132>

static inline uint32_t
boot_img_sector_off(const struct boot_loader_state *state, size_t slot,
                    size_t sector)
{
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
     f14:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     f16:	f8dd 8020 	ldr.w	r8, [sp, #32]
           BOOT_IMG(state, slot).sectors[0].fs_off;
     f1a:	6819      	ldr	r1, [r3, #0]
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
     f1c:	f853 0037 	ldr.w	r0, [r3, r7, lsl #3]
     f20:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    if (bs->idx == BOOT_STATUS_IDX_0) {
     f24:	2a01      	cmp	r2, #1
     f26:	f853 3c08 	ldr.w	r3, [r3, #-8]
     f2a:	eba0 0901 	sub.w	r9, r0, r1
     f2e:	eba3 0a01 	sub.w	sl, r3, r1
     f32:	d112      	bne.n	f5a <swap_run+0xfe>
        if (bs->source != BOOT_STATUS_SOURCE_PRIMARY_SLOT) {
     f34:	68e2      	ldr	r2, [r4, #12]
                boot_move_sector_up(idx, sector_sz, state, bs, fap_pri, fap_sec);
     f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
        if (bs->source != BOOT_STATUS_SOURCE_PRIMARY_SLOT) {
     f38:	2a02      	cmp	r2, #2
     f3a:	d00a      	beq.n	f52 <swap_run+0xf6>
            rc = swap_erase_trailer_sectors(state, fap_pri);
     f3c:	4641      	mov	r1, r8
     f3e:	4628      	mov	r0, r5
     f40:	9304      	str	r3, [sp, #16]
     f42:	f008 fc01 	bl	9748 <swap_erase_trailer_sectors>
            rc = swap_status_init(state, fap_pri, bs);
     f46:	4622      	mov	r2, r4
     f48:	4641      	mov	r1, r8
     f4a:	4628      	mov	r0, r5
     f4c:	f008 fc31 	bl	97b2 <swap_status_init>
     f50:	9b04      	ldr	r3, [sp, #16]
        rc = swap_erase_trailer_sectors(state, fap_sec);
     f52:	4619      	mov	r1, r3
     f54:	4628      	mov	r0, r5
     f56:	f008 fbf7 	bl	9748 <swap_erase_trailer_sectors>
    rc = boot_erase_region(fap_pri, new_off, sz);
     f5a:	4632      	mov	r2, r6
     f5c:	4649      	mov	r1, r9
     f5e:	4640      	mov	r0, r8
     f60:	f008 fbf0 	bl	9744 <boot_erase_region>
    rc = boot_copy_region(state, fap_pri, fap_pri, old_off, new_off, sz);
     f64:	4653      	mov	r3, sl
     f66:	4642      	mov	r2, r8
     f68:	4641      	mov	r1, r8
     f6a:	e9cd 9600 	strd	r9, r6, [sp]
     f6e:	4628      	mov	r0, r5
     f70:	f7ff fdac 	bl	acc <boot_copy_region>
    rc = boot_write_status(state, bs);
     f74:	4621      	mov	r1, r4
     f76:	4628      	mov	r0, r5
     f78:	f008 fbb2 	bl	96e0 <boot_write_status>
    bs->idx++;
     f7c:	6823      	ldr	r3, [r4, #0]
     f7e:	3301      	adds	r3, #1
     f80:	6023      	str	r3, [r4, #0]
    BOOT_STATUS_ASSERT(rc == 0);
     f82:	b120      	cbz	r0, f8e <swap_run+0x132>
     f84:	f8db 3000 	ldr.w	r3, [fp]
     f88:	3301      	adds	r3, #1
     f8a:	f8cb 3000 	str.w	r3, [fp]
            idx--;
     f8e:	3f01      	subs	r7, #1
     f90:	e7a3      	b.n	eda <swap_run+0x7e>
        if (idx >= bs->idx) {
     f92:	6823      	ldr	r3, [r4, #0]
     f94:	42bb      	cmp	r3, r7
     f96:	d850      	bhi.n	103a <CONFIG_FPROTECT_BLOCK_SIZE+0x3a>
     f98:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            boot_swap_sectors(idx, sector_sz, state, bs, fap_pri, fap_sec);
     f9a:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
     f9e:	f852 1037 	ldr.w	r1, [r2, r7, lsl #3]
     fa2:	9105      	str	r1, [sp, #20]
     fa4:	00fb      	lsls	r3, r7, #3
           BOOT_IMG(state, slot).sectors[0].fs_off;
     fa6:	6811      	ldr	r1, [r2, #0]
     fa8:	9104      	str	r1, [sp, #16]
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
     faa:	3b08      	subs	r3, #8
     fac:	6d29      	ldr	r1, [r5, #80]	; 0x50
     fae:	58c8      	ldr	r0, [r1, r3]
     fb0:	6809      	ldr	r1, [r1, #0]
     fb2:	eba0 0b01 	sub.w	fp, r0, r1
    if (bs->state == BOOT_STATUS_STATE_0) {
     fb6:	7921      	ldrb	r1, [r4, #4]
     fb8:	2901      	cmp	r1, #1
     fba:	d13c      	bne.n	1036 <CONFIG_FPROTECT_BLOCK_SIZE+0x36>
     fbc:	58d1      	ldr	r1, [r2, r3]
     fbe:	9b04      	ldr	r3, [sp, #16]
        rc = boot_erase_region(fap_pri, pri_off, sz);
     fc0:	4632      	mov	r2, r6
     fc2:	1ac9      	subs	r1, r1, r3
     fc4:	4648      	mov	r0, r9
     fc6:	9107      	str	r1, [sp, #28]
     fc8:	f008 fbbc 	bl	9744 <boot_erase_region>
        rc = boot_copy_region(state, fap_sec, fap_pri, sec_off, pri_off, sz);
     fcc:	9907      	ldr	r1, [sp, #28]
     fce:	9100      	str	r1, [sp, #0]
     fd0:	465b      	mov	r3, fp
     fd2:	464a      	mov	r2, r9
     fd4:	4651      	mov	r1, sl
     fd6:	9601      	str	r6, [sp, #4]
     fd8:	4628      	mov	r0, r5
     fda:	f7ff fd77 	bl	acc <boot_copy_region>
        rc = boot_write_status(state, bs);
     fde:	4621      	mov	r1, r4
     fe0:	4628      	mov	r0, r5
     fe2:	f008 fb7d 	bl	96e0 <boot_write_status>
        bs->state = BOOT_STATUS_STATE_1;
     fe6:	9b06      	ldr	r3, [sp, #24]
     fe8:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
     fea:	b120      	cbz	r0, ff6 <swap_run+0x19a>
     fec:	f8d8 3000 	ldr.w	r3, [r8]
     ff0:	3301      	adds	r3, #1
     ff2:	f8c8 3000 	str.w	r3, [r8]
        rc = boot_erase_region(fap_sec, sec_off, sz);
     ff6:	4632      	mov	r2, r6
     ff8:	4659      	mov	r1, fp
     ffa:	4650      	mov	r0, sl
     ffc:	f008 fba2 	bl	9744 <boot_erase_region>
        rc = boot_copy_region(state, fap_pri, fap_sec, pri_up_off, sec_off, sz);
    1000:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    1004:	4649      	mov	r1, r9
    1006:	1a9b      	subs	r3, r3, r2
    1008:	e9cd b600 	strd	fp, r6, [sp]
    100c:	4652      	mov	r2, sl
    100e:	4628      	mov	r0, r5
    1010:	f7ff fd5c 	bl	acc <boot_copy_region>
        rc = boot_write_status(state, bs);
    1014:	4621      	mov	r1, r4
    1016:	4628      	mov	r0, r5
    1018:	f008 fb62 	bl	96e0 <boot_write_status>
        bs->idx++;
    101c:	6823      	ldr	r3, [r4, #0]
    101e:	3301      	adds	r3, #1
    1020:	6023      	str	r3, [r4, #0]
        bs->state = BOOT_STATUS_STATE_0;
    1022:	f04f 0301 	mov.w	r3, #1
    1026:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    1028:	b138      	cbz	r0, 103a <CONFIG_FPROTECT_BLOCK_SIZE+0x3a>
    102a:	f8d8 3000 	ldr.w	r3, [r8]
    102e:	3301      	adds	r3, #1
    1030:	f8c8 3000 	str.w	r3, [r8]
    1034:	e001      	b.n	103a <CONFIG_FPROTECT_BLOCK_SIZE+0x3a>
    if (bs->state == BOOT_STATUS_STATE_1) {
    1036:	2902      	cmp	r1, #2
    1038:	d0dd      	beq.n	ff6 <swap_run+0x19a>
        idx++;
    103a:	3701      	adds	r7, #1
    103c:	e758      	b.n	ef0 <swap_run+0x94>
    103e:	bf00      	nop
    1040:	20000004 	.word	0x20000004
    1044:	20000f80 	.word	0x20000f80

00001048 <nrf_cleanup_peripheral>:
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1048:	4b15      	ldr	r3, [pc, #84]	; (10a0 <nrf_cleanup_peripheral+0x58>)
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    104a:	4916      	ldr	r1, [pc, #88]	; (10a4 <nrf_cleanup_peripheral+0x5c>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    104c:	2201      	movs	r2, #1
    104e:	601a      	str	r2, [r3, #0]
    p_reg->EVTENCLR = mask;
    1050:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1054:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    p_reg->INTENCLR = mask;
    1058:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    105c:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    1060:	3104      	adds	r1, #4
    1062:	600a      	str	r2, [r1, #0]
    p_reg->EVTENCLR = mask;
    1064:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
    p_reg->INTENCLR = mask;
    1068:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    106c:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
    1070:	600a      	str	r2, [r1, #0]
    p_reg->EVTENCLR = mask;
    1072:	4a0d      	ldr	r2, [pc, #52]	; (10a8 <nrf_cleanup_peripheral+0x60>)
    1074:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    p_reg->INTENCLR = mask;
    1078:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
}

NRF_STATIC_INLINE void nrf_uarte_disable(NRF_UARTE_Type * p_reg)
{
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    107c:	f5a2 3208 	sub.w	r2, r2, #139264	; 0x22000
    1080:	2100      	movs	r1, #0
    1082:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    1086:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    108a:	f502 3218 	add.w	r2, r2, #155648	; 0x26000
    108e:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    1092:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    1096:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    109a:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
#if defined(NRF_UARTE1)
    nrf_uarte_disable(NRF_UARTE1);
    nrf_uarte_int_disable(NRF_UARTE1, 0xFFFFFFFF);
#endif
    nrf_cleanup_clock();
}
    109e:	4770      	bx	lr
    10a0:	4000b004 	.word	0x4000b004
    10a4:	4000b000 	.word	0x4000b000
    10a8:	40024000 	.word	0x40024000

000010ac <base64_encode>:
/*
 * Encode a buffer into base64 format
 */
int base64_encode(uint8_t *dst, size_t dlen, size_t *olen, const uint8_t *src,
		  size_t slen)
{
    10ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    10b0:	4605      	mov	r5, r0
    10b2:	9807      	ldr	r0, [sp, #28]
	size_t i, n;
	int C1, C2, C3;
	uint8_t *p;

	if (slen == 0) {
    10b4:	b910      	cbnz	r0, 10bc <base64_encode+0x10>
		*olen = 0;
    10b6:	6010      	str	r0, [r2, #0]

	*olen = p - dst;
	*p = 0U;

	return 0;
}
    10b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	n = slen / 3 + (slen % 3 != 0);
    10bc:	2403      	movs	r4, #3
    10be:	fbb0 f4f4 	udiv	r4, r0, r4
    10c2:	eb04 0744 	add.w	r7, r4, r4, lsl #1
    10c6:	42b8      	cmp	r0, r7
    10c8:	bf18      	it	ne
    10ca:	3401      	addne	r4, #1
	if (n > (BASE64_SIZE_T_MAX - 1) / 4) {
    10cc:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
    10d0:	d305      	bcc.n	10de <base64_encode+0x32>
		*olen = BASE64_SIZE_T_MAX;
    10d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    10d6:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
    10d8:	f06f 000b 	mvn.w	r0, #11
    10dc:	e7ec      	b.n	10b8 <base64_encode+0xc>
	n *= 4;
    10de:	00a4      	lsls	r4, r4, #2
	if ((dlen < n + 1) || (!dst)) {
    10e0:	3401      	adds	r4, #1
    10e2:	428c      	cmp	r4, r1
    10e4:	d800      	bhi.n	10e8 <base64_encode+0x3c>
    10e6:	b90d      	cbnz	r5, 10ec <base64_encode+0x40>
		*olen = n + 1;
    10e8:	6014      	str	r4, [r2, #0]
    10ea:	e7f5      	b.n	10d8 <base64_encode+0x2c>
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    10ec:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 11ac <base64_encode+0x100>
    10f0:	462e      	mov	r6, r5
	for (i = 0, p = dst; i < n; i += 3) {
    10f2:	2400      	movs	r4, #0
    10f4:	42bc      	cmp	r4, r7
    10f6:	4631      	mov	r1, r6
    10f8:	469c      	mov	ip, r3
    10fa:	f106 0604 	add.w	r6, r6, #4
    10fe:	f103 0303 	add.w	r3, r3, #3
    1102:	d32c      	bcc.n	115e <base64_encode+0xb2>
	if (i < slen) {
    1104:	4284      	cmp	r4, r0
    1106:	d225      	bcs.n	1154 <base64_encode+0xa8>
		C1 = *src++;
    1108:	f89c 6000 	ldrb.w	r6, [ip]
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    110c:	4f27      	ldr	r7, [pc, #156]	; (11ac <base64_encode+0x100>)
		C2 = ((i + 1) < slen) ? *src++ : 0;
    110e:	3401      	adds	r4, #1
    1110:	4284      	cmp	r4, r0
    1112:	bf38      	it	cc
    1114:	f89c 3001 	ldrbcc.w	r3, [ip, #1]
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    1118:	ea4f 0ca6 	mov.w	ip, r6, asr #2
		C2 = ((i + 1) < slen) ? *src++ : 0;
    111c:	bf28      	it	cs
    111e:	2300      	movcs	r3, #0
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    1120:	f817 c00c 	ldrb.w	ip, [r7, ip]
    1124:	f881 c000 	strb.w	ip, [r1]
		if ((i + 1) < slen) {
    1128:	4284      	cmp	r4, r0
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    112a:	eb07 1c13 	add.w	ip, r7, r3, lsr #4
			*p++ = base64_enc_map[((C2 & 15) << 2) & 0x3F];
    112e:	bf3c      	itt	cc
    1130:	009b      	lslcc	r3, r3, #2
    1132:	f003 033c 	andcc.w	r3, r3, #60	; 0x3c
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    1136:	ea4f 1606 	mov.w	r6, r6, lsl #4
    113a:	f006 0630 	and.w	r6, r6, #48	; 0x30
			*p++ = base64_enc_map[((C2 & 15) << 2) & 0x3F];
    113e:	bf38      	it	cc
    1140:	5cfb      	ldrbcc	r3, [r7, r3]
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    1142:	f81c 6006 	ldrb.w	r6, [ip, r6]
    1146:	704e      	strb	r6, [r1, #1]
			*p++ = '=';
    1148:	bf28      	it	cs
    114a:	233d      	movcs	r3, #61	; 0x3d
    114c:	708b      	strb	r3, [r1, #2]
		*p++ = '=';
    114e:	233d      	movs	r3, #61	; 0x3d
    1150:	70cb      	strb	r3, [r1, #3]
    1152:	3104      	adds	r1, #4
	*olen = p - dst;
    1154:	1b4d      	subs	r5, r1, r5
	*p = 0U;
    1156:	2000      	movs	r0, #0
	*olen = p - dst;
    1158:	6015      	str	r5, [r2, #0]
	*p = 0U;
    115a:	7008      	strb	r0, [r1, #0]
	return 0;
    115c:	e7ac      	b.n	10b8 <base64_encode+0xc>
		C1 = *src++;
    115e:	f813 cc03 	ldrb.w	ip, [r3, #-3]
		C2 = *src++;
    1162:	f813 1c02 	ldrb.w	r1, [r3, #-2]
		C3 = *src++;
    1166:	f813 8c01 	ldrb.w	r8, [r3, #-1]
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    116a:	ea4f 09ac 	mov.w	r9, ip, asr #2
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    116e:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    1172:	f81e 9009 	ldrb.w	r9, [lr, r9]
    1176:	f806 9c04 	strb.w	r9, [r6, #-4]
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    117a:	f00c 0c30 	and.w	ip, ip, #48	; 0x30
    117e:	eb0e 1911 	add.w	r9, lr, r1, lsr #4
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    1182:	0089      	lsls	r1, r1, #2
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    1184:	f819 c00c 	ldrb.w	ip, [r9, ip]
    1188:	f806 cc03 	strb.w	ip, [r6, #-3]
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    118c:	f001 013c 	and.w	r1, r1, #60	; 0x3c
    1190:	eb0e 1c98 	add.w	ip, lr, r8, lsr #6
		*p++ = base64_enc_map[C3 & 0x3F];
    1194:	f008 083f 	and.w	r8, r8, #63	; 0x3f
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    1198:	f81c 1001 	ldrb.w	r1, [ip, r1]
    119c:	f806 1c02 	strb.w	r1, [r6, #-2]
		*p++ = base64_enc_map[C3 & 0x3F];
    11a0:	f81e 1008 	ldrb.w	r1, [lr, r8]
    11a4:	f806 1c01 	strb.w	r1, [r6, #-1]
	for (i = 0, p = dst; i < n; i += 3) {
    11a8:	3403      	adds	r4, #3
    11aa:	e7a3      	b.n	10f4 <base64_encode+0x48>
    11ac:	0000de5c 	.word	0x0000de5c

000011b0 <base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int base64_decode(uint8_t *dst, size_t dlen, size_t *olen, const uint8_t *src,
		  size_t slen)
{
    11b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	size_t i, n;
	uint32_t j, x;
	uint8_t *p;

	/* First pass: check for validity and get output length */
	for (i = n = j = 0U; i < slen; i++) {
    11b4:	f04f 0c00 	mov.w	ip, #0
{
    11b8:	9e07      	ldr	r6, [sp, #28]

		if (src[i] == '=' && ++j > 2) {
			return -EINVAL;
		}

		if (src[i] > 127 || base64_dec_map[src[i]] == 127U) {
    11ba:	f8df 8128 	ldr.w	r8, [pc, #296]	; 12e4 <base64_decode+0x134>
{
    11be:	4607      	mov	r7, r0
	for (i = n = j = 0U; i < slen; i++) {
    11c0:	4665      	mov	r5, ip
    11c2:	4660      	mov	r0, ip
    11c4:	42b5      	cmp	r5, r6
    11c6:	d30a      	bcc.n	11de <base64_decode+0x2e>
    11c8:	462e      	mov	r6, r5
    11ca:	e004      	b.n	11d6 <base64_decode+0x26>
			++i;
    11cc:	3501      	adds	r5, #1
		while (i < slen && src[i] == ' ') {
    11ce:	42ae      	cmp	r6, r5
			++x;
    11d0:	f10e 0e01 	add.w	lr, lr, #1
		while (i < slen && src[i] == ' ') {
    11d4:	d105      	bne.n	11e2 <base64_decode+0x32>
		}

		n++;
	}

	if (n == 0) {
    11d6:	bba8      	cbnz	r0, 1244 <base64_decode+0x94>
		*olen = 0;
    11d8:	6010      	str	r0, [r2, #0]
	}

	*olen = p - dst;

	return 0;
}
    11da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		x = 0U;
    11de:	f04f 0e00 	mov.w	lr, #0
		while (i < slen && src[i] == ' ') {
    11e2:	5d5c      	ldrb	r4, [r3, r5]
    11e4:	2c20      	cmp	r4, #32
    11e6:	d0f1      	beq.n	11cc <base64_decode+0x1c>
		if (i == slen) {
    11e8:	42ae      	cmp	r6, r5
    11ea:	d0f4      	beq.n	11d6 <base64_decode+0x26>
		if ((slen - i) >= 2 && src[i] == '\r' && src[i + 1] == '\n') {
    11ec:	eba6 0905 	sub.w	r9, r6, r5
    11f0:	f1b9 0f01 	cmp.w	r9, #1
    11f4:	d915      	bls.n	1222 <base64_decode+0x72>
    11f6:	2c0d      	cmp	r4, #13
    11f8:	d113      	bne.n	1222 <base64_decode+0x72>
    11fa:	eb03 0905 	add.w	r9, r3, r5
    11fe:	f899 9001 	ldrb.w	r9, [r9, #1]
    1202:	f1b9 0f0a 	cmp.w	r9, #10
		if (src[i] == '\n') {
    1206:	d01b      	beq.n	1240 <base64_decode+0x90>
		if (x != 0U) {
    1208:	f1be 0f00 	cmp.w	lr, #0
    120c:	d106      	bne.n	121c <base64_decode+0x6c>
		if (src[i] == '=' && ++j > 2) {
    120e:	2c3d      	cmp	r4, #61	; 0x3d
    1210:	d109      	bne.n	1226 <base64_decode+0x76>
    1212:	f10c 0c01 	add.w	ip, ip, #1
    1216:	f1bc 0f02 	cmp.w	ip, #2
    121a:	d907      	bls.n	122c <base64_decode+0x7c>
			return -EINVAL;
    121c:	f06f 0015 	mvn.w	r0, #21
    1220:	e7db      	b.n	11da <base64_decode+0x2a>
		if (src[i] == '\n') {
    1222:	2c0a      	cmp	r4, #10
    1224:	e7ef      	b.n	1206 <base64_decode+0x56>
		if (src[i] > 127 || base64_dec_map[src[i]] == 127U) {
    1226:	f014 0f80 	tst.w	r4, #128	; 0x80
    122a:	d1f7      	bne.n	121c <base64_decode+0x6c>
    122c:	f818 4004 	ldrb.w	r4, [r8, r4]
    1230:	2c7f      	cmp	r4, #127	; 0x7f
    1232:	d0f3      	beq.n	121c <base64_decode+0x6c>
		if (base64_dec_map[src[i]] < 64 && j != 0U) {
    1234:	2c3f      	cmp	r4, #63	; 0x3f
    1236:	d802      	bhi.n	123e <base64_decode+0x8e>
    1238:	f1bc 0f00 	cmp.w	ip, #0
    123c:	d1ee      	bne.n	121c <base64_decode+0x6c>
		n++;
    123e:	3001      	adds	r0, #1
	for (i = n = j = 0U; i < slen; i++) {
    1240:	3501      	adds	r5, #1
    1242:	e7bf      	b.n	11c4 <base64_decode+0x14>
	n = (6 * (n >> 3)) + ((6 * (n & 0x7) + 7) >> 3);
    1244:	2506      	movs	r5, #6
    1246:	f000 0407 	and.w	r4, r0, #7
    124a:	436c      	muls	r4, r5
    124c:	f104 0e07 	add.w	lr, r4, #7
    1250:	08c4      	lsrs	r4, r0, #3
    1252:	436c      	muls	r4, r5
    1254:	eba4 040c 	sub.w	r4, r4, ip
	n -= j;
    1258:	eb04 04de 	add.w	r4, r4, lr, lsr #3
	if (dst == NULL || dlen < n) {
    125c:	b187      	cbz	r7, 1280 <base64_decode+0xd0>
    125e:	428c      	cmp	r4, r1
    1260:	d80e      	bhi.n	1280 <base64_decode+0xd0>
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    1262:	2500      	movs	r5, #0
		j -= (base64_dec_map[*src] == 64U);
    1264:	f8df e07c 	ldr.w	lr, [pc, #124]	; 12e4 <base64_decode+0x134>
		if (*src == '\r' || *src == '\n' || *src == ' ') {
    1268:	f8df 807c 	ldr.w	r8, [pc, #124]	; 12e8 <base64_decode+0x138>
    126c:	441e      	add	r6, r3
	if (dst == NULL || dlen < n) {
    126e:	4639      	mov	r1, r7
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    1270:	2403      	movs	r4, #3
    1272:	4628      	mov	r0, r5
    1274:	429e      	cmp	r6, r3
    1276:	d107      	bne.n	1288 <base64_decode+0xd8>
	*olen = p - dst;
    1278:	1bc9      	subs	r1, r1, r7
    127a:	6011      	str	r1, [r2, #0]
	return 0;
    127c:	2000      	movs	r0, #0
    127e:	e7ac      	b.n	11da <base64_decode+0x2a>
		*olen = n;
    1280:	6014      	str	r4, [r2, #0]
		return -ENOMEM;
    1282:	f06f 000b 	mvn.w	r0, #11
    1286:	e7a8      	b.n	11da <base64_decode+0x2a>
		if (*src == '\r' || *src == '\n' || *src == ' ') {
    1288:	f813 9b01 	ldrb.w	r9, [r3], #1
    128c:	f1a9 0c0a 	sub.w	ip, r9, #10
    1290:	fa5f fc8c 	uxtb.w	ip, ip
    1294:	f1bc 0f16 	cmp.w	ip, #22
    1298:	d804      	bhi.n	12a4 <base64_decode+0xf4>
    129a:	fa28 fc0c 	lsr.w	ip, r8, ip
    129e:	f01c 0f01 	tst.w	ip, #1
    12a2:	d1e7      	bne.n	1274 <base64_decode+0xc4>
		j -= (base64_dec_map[*src] == 64U);
    12a4:	f81e c009 	ldrb.w	ip, [lr, r9]
		if (++n == 4) {
    12a8:	3001      	adds	r0, #1
		j -= (base64_dec_map[*src] == 64U);
    12aa:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
    12ae:	bf08      	it	eq
    12b0:	3c01      	subeq	r4, #1
		x  = (x << 6) | (base64_dec_map[*src] & 0x3F);
    12b2:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
		if (++n == 4) {
    12b6:	2804      	cmp	r0, #4
		x  = (x << 6) | (base64_dec_map[*src] & 0x3F);
    12b8:	ea4c 1585 	orr.w	r5, ip, r5, lsl #6
		if (++n == 4) {
    12bc:	d1da      	bne.n	1274 <base64_decode+0xc4>
			if (j > 0) {
    12be:	b17c      	cbz	r4, 12e0 <base64_decode+0x130>
				*p++ = (unsigned char)(x >> 16);
    12c0:	0c28      	lsrs	r0, r5, #16
			if (j > 1) {
    12c2:	2c01      	cmp	r4, #1
				*p++ = (unsigned char)(x >> 16);
    12c4:	7008      	strb	r0, [r1, #0]
			if (j > 1) {
    12c6:	d102      	bne.n	12ce <base64_decode+0x11e>
				*p++ = (unsigned char)(x >> 16);
    12c8:	3101      	adds	r1, #1
			n = 0;
    12ca:	2000      	movs	r0, #0
    12cc:	e7d2      	b.n	1274 <base64_decode+0xc4>
			if (j > 2) {
    12ce:	2c02      	cmp	r4, #2
				*p++ = (unsigned char)(x >> 8);
    12d0:	ea4f 2015 	mov.w	r0, r5, lsr #8
    12d4:	7048      	strb	r0, [r1, #1]
				*p++ = (unsigned char)(x);
    12d6:	bf16      	itet	ne
    12d8:	708d      	strbne	r5, [r1, #2]
				*p++ = (unsigned char)(x >> 8);
    12da:	3102      	addeq	r1, #2
				*p++ = (unsigned char)(x);
    12dc:	3103      	addne	r1, #3
    12de:	e7f4      	b.n	12ca <base64_decode+0x11a>
			n = 0;
    12e0:	4620      	mov	r0, r4
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    12e2:	e7c7      	b.n	1274 <base64_decode+0xc4>
    12e4:	0000dddc 	.word	0x0000dddc
    12e8:	00400009 	.word	0x00400009

000012ec <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    12ec:	680b      	ldr	r3, [r1, #0]
    12ee:	3301      	adds	r3, #1
    12f0:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    12f2:	4b01      	ldr	r3, [pc, #4]	; (12f8 <char_out+0xc>)
    12f4:	681b      	ldr	r3, [r3, #0]
    12f6:	4718      	bx	r3
    12f8:	20000008 	.word	0x20000008

000012fc <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    12fc:	b507      	push	{r0, r1, r2, lr}
    12fe:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    1300:	2100      	movs	r1, #0
{
    1302:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    1304:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    1306:	4803      	ldr	r0, [pc, #12]	; (1314 <vprintk+0x18>)
    1308:	a901      	add	r1, sp, #4
    130a:	f000 f8eb 	bl	14e4 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    130e:	b003      	add	sp, #12
    1310:	f85d fb04 	ldr.w	pc, [sp], #4
    1314:	000012ed 	.word	0x000012ed

00001318 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1318:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    131c:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1320:	f019 0808 	ands.w	r8, r9, #8
{
    1324:	4604      	mov	r4, r0
    1326:	4693      	mov	fp, r2
	if (processing) {
    1328:	d00d      	beq.n	1346 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    132a:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    132c:	bf0c      	ite	eq
    132e:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    1332:	f049 0920 	orrne.w	r9, r9, #32
    1336:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    133a:	f38b 8811 	msr	BASEPRI, fp
    133e:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    1342:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1346:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    134a:	2902      	cmp	r1, #2
    134c:	d107      	bne.n	135e <process_event+0x46>
			evt = process_recheck(mgr);
    134e:	4620      	mov	r0, r4
    1350:	f008 fbbd 	bl	9ace <process_recheck>
		if (evt == EVT_NOP) {
    1354:	2800      	cmp	r0, #0
    1356:	d0f0      	beq.n	133a <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    1358:	2801      	cmp	r0, #1
    135a:	8b23      	ldrh	r3, [r4, #24]
    135c:	d150      	bne.n	1400 <process_event+0xe8>
			res = mgr->last_res;
    135e:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1360:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    1362:	2f00      	cmp	r7, #0
    1364:	da15      	bge.n	1392 <process_event+0x7a>
		*clients = mgr->clients;
    1366:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1368:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    136c:	e9c4 8800 	strd	r8, r8, [r4]
    1370:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1374:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    1376:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1378:	8b21      	ldrh	r1, [r4, #24]
    137a:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    137e:	45ca      	cmp	sl, r9
    1380:	d002      	beq.n	1388 <process_event+0x70>
		if (do_monitors
    1382:	68a3      	ldr	r3, [r4, #8]
    1384:	2b00      	cmp	r3, #0
    1386:	d15c      	bne.n	1442 <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
    1388:	b90d      	cbnz	r5, 138e <process_event+0x76>
		    || (transit != NULL)) {
    138a:	2e00      	cmp	r6, #0
    138c:	d074      	beq.n	1478 <process_event+0x160>
    138e:	2300      	movs	r3, #0
    1390:	e058      	b.n	1444 <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1392:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    1396:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1398:	2a01      	cmp	r2, #1
    139a:	d820      	bhi.n	13de <process_event+0xc6>
		*clients = mgr->clients;
    139c:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    13a0:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    13a2:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
    13a4:	b289      	uxth	r1, r1
	list->tail = NULL;
    13a6:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    13aa:	d10c      	bne.n	13c6 <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    13ac:	2d00      	cmp	r5, #0
    13ae:	462b      	mov	r3, r5
    13b0:	bf38      	it	cc
    13b2:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    13b4:	b12b      	cbz	r3, 13c2 <process_event+0xaa>
				mgr->refs += 1U;
    13b6:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    13b8:	681b      	ldr	r3, [r3, #0]
    13ba:	3201      	adds	r2, #1
    13bc:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    13be:	2b00      	cmp	r3, #0
    13c0:	d1f8      	bne.n	13b4 <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    13c2:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    13c6:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    13c8:	4620      	mov	r0, r4
    13ca:	f008 fb80 	bl	9ace <process_recheck>
    13ce:	4606      	mov	r6, r0
    13d0:	2800      	cmp	r0, #0
    13d2:	d0d1      	beq.n	1378 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    13d4:	8b23      	ldrh	r3, [r4, #24]
    13d6:	f043 0320 	orr.w	r3, r3, #32
    13da:	8323      	strh	r3, [r4, #24]
    13dc:	e7cb      	b.n	1376 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    13de:	2b04      	cmp	r3, #4
    13e0:	d10c      	bne.n	13fc <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    13e2:	f021 0107 	bic.w	r1, r1, #7
    13e6:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    13e8:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    13ea:	4620      	mov	r0, r4
    13ec:	f008 fb6f 	bl	9ace <process_recheck>
    13f0:	4605      	mov	r5, r0
    13f2:	2800      	cmp	r0, #0
    13f4:	d0bf      	beq.n	1376 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    13f6:	f041 0120 	orr.w	r1, r1, #32
    13fa:	8321      	strh	r1, [r4, #24]
    13fc:	2500      	movs	r5, #0
    13fe:	e7ba      	b.n	1376 <process_event+0x5e>
		} else if (evt == EVT_START) {
    1400:	2803      	cmp	r0, #3
    1402:	d109      	bne.n	1418 <process_event+0x100>
			transit = mgr->transitions->start;
    1404:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1406:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    140a:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    140c:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    1410:	8323      	strh	r3, [r4, #24]
}
    1412:	2500      	movs	r5, #0
		res = 0;
    1414:	462f      	mov	r7, r5
    1416:	e7af      	b.n	1378 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    1418:	2804      	cmp	r0, #4
    141a:	d106      	bne.n	142a <process_event+0x112>
			transit = mgr->transitions->stop;
    141c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    141e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    1422:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1424:	f043 0304 	orr.w	r3, r3, #4
    1428:	e7f2      	b.n	1410 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
    142a:	2805      	cmp	r0, #5
    142c:	d106      	bne.n	143c <process_event+0x124>
			transit = mgr->transitions->reset;
    142e:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1430:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    1434:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1436:	f043 0305 	orr.w	r3, r3, #5
    143a:	e7e9      	b.n	1410 <process_event+0xf8>
    143c:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    143e:	462e      	mov	r6, r5
    1440:	e7e8      	b.n	1414 <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
    1442:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1444:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1448:	8321      	strh	r1, [r4, #24]
    144a:	f38b 8811 	msr	BASEPRI, fp
    144e:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    1452:	bb03      	cbnz	r3, 1496 <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
    1454:	2d00      	cmp	r5, #0
    1456:	d133      	bne.n	14c0 <process_event+0x1a8>
			if (transit != NULL) {
    1458:	b116      	cbz	r6, 1460 <process_event+0x148>
				transit(mgr, transition_complete);
    145a:	4921      	ldr	r1, [pc, #132]	; (14e0 <process_event+0x1c8>)
    145c:	4620      	mov	r0, r4
    145e:	47b0      	blx	r6
	__asm__ volatile(
    1460:	f04f 0320 	mov.w	r3, #32
    1464:	f3ef 8b11 	mrs	fp, BASEPRI
    1468:	f383 8811 	msr	BASEPRI, r3
    146c:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1470:	8b23      	ldrh	r3, [r4, #24]
    1472:	f023 0308 	bic.w	r3, r3, #8
    1476:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1478:	8b23      	ldrh	r3, [r4, #24]
    147a:	06da      	lsls	r2, r3, #27
    147c:	d528      	bpl.n	14d0 <process_event+0x1b8>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    147e:	f023 0310 	bic.w	r3, r3, #16
    1482:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    1484:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    1486:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    148a:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    148e:	2900      	cmp	r1, #0
    1490:	f47f af5b 	bne.w	134a <process_event+0x32>
out:
    1494:	e751      	b.n	133a <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1496:	68a1      	ldr	r1, [r4, #8]
    1498:	2900      	cmp	r1, #0
    149a:	d0db      	beq.n	1454 <process_event+0x13c>
	return node->next;
    149c:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    149e:	f8d1 b004 	ldr.w	fp, [r1, #4]
    14a2:	2b00      	cmp	r3, #0
    14a4:	bf38      	it	cc
    14a6:	2300      	movcc	r3, #0
    14a8:	4699      	mov	r9, r3
    14aa:	4652      	mov	r2, sl
    14ac:	463b      	mov	r3, r7
    14ae:	4620      	mov	r0, r4
    14b0:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    14b2:	f1b9 0f00 	cmp.w	r9, #0
    14b6:	d0cd      	beq.n	1454 <process_event+0x13c>
    14b8:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    14bc:	4649      	mov	r1, r9
    14be:	e7ee      	b.n	149e <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    14c0:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    14c2:	463b      	mov	r3, r7
    14c4:	4652      	mov	r2, sl
    14c6:	4620      	mov	r0, r4
    14c8:	682d      	ldr	r5, [r5, #0]
    14ca:	f008 fb1c 	bl	9b06 <notify_one>
    14ce:	e7c1      	b.n	1454 <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    14d0:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    14d4:	bf1e      	ittt	ne
    14d6:	f023 0320 	bicne.w	r3, r3, #32
    14da:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    14dc:	2102      	movne	r1, #2
    14de:	e7d2      	b.n	1486 <process_event+0x16e>
    14e0:	00009b33 	.word	0x00009b33

000014e4 <cbvprintf>:
 * @param ap Variable parameters
 *
 * @return printed byte count if CONFIG_CBPRINTF_LIBC_SUBSTS is set
 */
int cbvprintf(cbprintf_cb out, void *ctx, const char *fmt, va_list ap)
{
    14e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    14e8:	b08f      	sub	sp, #60	; 0x3c
    14ea:	461f      	mov	r7, r3
	char *prefix, *data;
	int min_width, precision, data_len;
	char padding_mode, length_mod, special;

	/* we pre-increment in the loop  afterwards */
	fmt--;
    14ec:	1e53      	subs	r3, r2, #1
{
    14ee:	9000      	str	r0, [sp, #0]
    14f0:	468b      	mov	fp, r1
	fmt--;
    14f2:	9301      	str	r3, [sp, #4]
	size_t count = 0;
    14f4:	f04f 0a00 	mov.w	sl, #0

start:
	while (*++fmt != '%') {
    14f8:	9b01      	ldr	r3, [sp, #4]
    14fa:	7858      	ldrb	r0, [r3, #1]
    14fc:	2825      	cmp	r0, #37	; 0x25
    14fe:	f103 0401 	add.w	r4, r3, #1
    1502:	d122      	bne.n	154a <cbvprintf+0x66>
	min_width = -1;
	precision = -1;
	prefix = "";
	padding_mode = 0;
	length_mod = 0;
	special = 0;
    1504:	2000      	movs	r0, #0
	precision = -1;
    1506:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff

	for (fmt++ ; ; fmt++) {
    150a:	f103 0c02 	add.w	ip, r3, #2
	length_mod = 0;
    150e:	4601      	mov	r1, r0
	padding_mode = 0;
    1510:	9002      	str	r0, [sp, #8]
	min_width = -1;
    1512:	4634      	mov	r4, r6
				precision = 10 * precision + *fmt - '0';
			} else {
				if (min_width < 0) {
					min_width = 0;
				}
				min_width = 10 * min_width + *fmt - '0';
    1514:	f04f 0e0a 	mov.w	lr, #10
		switch (*fmt) {
    1518:	f89c 2000 	ldrb.w	r2, [ip]
    151c:	f8cd c004 	str.w	ip, [sp, #4]
    1520:	2a39      	cmp	r2, #57	; 0x39
    1522:	f10c 0c01 	add.w	ip, ip, #1
    1526:	d857      	bhi.n	15d8 <cbvprintf+0xf4>
    1528:	2a1f      	cmp	r2, #31
    152a:	d818      	bhi.n	155e <cbvprintf+0x7a>
    152c:	2a00      	cmp	r2, #0
    152e:	f000 8204 	beq.w	193a <CONFIG_USB_DEVICE_VID+0x25>
			precision = 0;
			break;
		}

		default:
			OUTC('%');
    1532:	9b00      	ldr	r3, [sp, #0]
    1534:	4659      	mov	r1, fp
    1536:	2025      	movs	r0, #37	; 0x25
    1538:	4798      	blx	r3
			OUTC(*fmt);
    153a:	9b01      	ldr	r3, [sp, #4]
    153c:	4659      	mov	r1, fp
    153e:	7818      	ldrb	r0, [r3, #0]
    1540:	9b00      	ldr	r3, [sp, #0]
    1542:	4798      	blx	r3
    1544:	f10a 0a02 	add.w	sl, sl, #2
			goto start;
    1548:	e7d6      	b.n	14f8 <cbvprintf+0x14>
		if (*fmt == '\0') {
    154a:	2800      	cmp	r0, #0
    154c:	f000 81f5 	beq.w	193a <CONFIG_USB_DEVICE_VID+0x25>
		OUTC(*fmt);
    1550:	9b00      	ldr	r3, [sp, #0]
    1552:	4659      	mov	r1, fp
    1554:	4798      	blx	r3
    1556:	f10a 0a01 	add.w	sl, sl, #1
	while (*++fmt != '%') {
    155a:	9401      	str	r4, [sp, #4]
    155c:	e7cc      	b.n	14f8 <cbvprintf+0x14>
    155e:	f1a2 0320 	sub.w	r3, r2, #32
    1562:	2b19      	cmp	r3, #25
    1564:	d8e5      	bhi.n	1532 <cbvprintf+0x4e>
    1566:	a501      	add	r5, pc, #4	; (adr r5, 156c <cbvprintf+0x88>)
    1568:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
    156c:	000015d5 	.word	0x000015d5
    1570:	00001533 	.word	0x00001533
    1574:	00001533 	.word	0x00001533
    1578:	000015d5 	.word	0x000015d5
    157c:	00001533 	.word	0x00001533
    1580:	00001655 	.word	0x00001655
    1584:	00001533 	.word	0x00001533
    1588:	00001533 	.word	0x00001533
    158c:	00001533 	.word	0x00001533
    1590:	00001533 	.word	0x00001533
    1594:	00001697 	.word	0x00001697
    1598:	000015d5 	.word	0x000015d5
    159c:	00001533 	.word	0x00001533
    15a0:	000016ab 	.word	0x000016ab
    15a4:	00001663 	.word	0x00001663
    15a8:	00001533 	.word	0x00001533
    15ac:	0000166f 	.word	0x0000166f
    15b0:	0000168b 	.word	0x0000168b
    15b4:	0000168b 	.word	0x0000168b
    15b8:	0000168b 	.word	0x0000168b
    15bc:	0000168b 	.word	0x0000168b
    15c0:	0000168b 	.word	0x0000168b
    15c4:	0000168b 	.word	0x0000168b
    15c8:	0000168b 	.word	0x0000168b
    15cc:	0000168b 	.word	0x0000168b
    15d0:	0000168b 	.word	0x0000168b
		switch (*fmt) {
    15d4:	4610      	mov	r0, r2
    15d6:	e79f      	b.n	1518 <cbvprintf+0x34>
    15d8:	2a58      	cmp	r2, #88	; 0x58
    15da:	f000 8145 	beq.w	1868 <cbvprintf+0x384>
    15de:	f1a2 0363 	sub.w	r3, r2, #99	; 0x63
    15e2:	b2dd      	uxtb	r5, r3
    15e4:	2d17      	cmp	r5, #23
    15e6:	d8a4      	bhi.n	1532 <cbvprintf+0x4e>
    15e8:	2b17      	cmp	r3, #23
    15ea:	d8a2      	bhi.n	1532 <cbvprintf+0x4e>
    15ec:	a501      	add	r5, pc, #4	; (adr r5, 15f4 <cbvprintf+0x110>)
    15ee:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
    15f2:	bf00      	nop
    15f4:	000018c5 	.word	0x000018c5
    15f8:	000016d1 	.word	0x000016d1
    15fc:	00001533 	.word	0x00001533
    1600:	00001533 	.word	0x00001533
    1604:	00001533 	.word	0x00001533
    1608:	000016b1 	.word	0x000016b1
    160c:	000016d1 	.word	0x000016d1
    1610:	00001533 	.word	0x00001533
    1614:	00001533 	.word	0x00001533
    1618:	000016b1 	.word	0x000016b1
    161c:	00001533 	.word	0x00001533
    1620:	00001533 	.word	0x00001533
    1624:	00001533 	.word	0x00001533
    1628:	0000180f 	.word	0x0000180f
    162c:	00001533 	.word	0x00001533
    1630:	00001533 	.word	0x00001533
    1634:	000018a7 	.word	0x000018a7
    1638:	00001533 	.word	0x00001533
    163c:	000016d1 	.word	0x000016d1
    1640:	00001533 	.word	0x00001533
    1644:	00001533 	.word	0x00001533
    1648:	0000180f 	.word	0x0000180f
    164c:	00001533 	.word	0x00001533
    1650:	000016b1 	.word	0x000016b1
			OUTC('%');
    1654:	9b00      	ldr	r3, [sp, #0]
    1656:	4659      	mov	r1, fp
    1658:	2025      	movs	r0, #37	; 0x25
    165a:	4798      	blx	r3
    165c:	f10a 0a01 	add.w	sl, sl, #1
			goto start;
    1660:	e74a      	b.n	14f8 <cbvprintf+0x14>
			padding_mode &= (char)~PAD_ZERO;
    1662:	9b02      	ldr	r3, [sp, #8]
    1664:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    1668:	9302      	str	r3, [sp, #8]
			precision = 0;
    166a:	2600      	movs	r6, #0
			continue;
    166c:	e754      	b.n	1518 <cbvprintf+0x34>
			if (min_width < 0 && precision < 0 && !padding_mode) {
    166e:	2c00      	cmp	r4, #0
    1670:	da0b      	bge.n	168a <cbvprintf+0x1a6>
    1672:	2e00      	cmp	r6, #0
    1674:	da0b      	bge.n	168e <cbvprintf+0x1aa>
    1676:	9b02      	ldr	r3, [sp, #8]
    1678:	2b00      	cmp	r3, #0
    167a:	f000 815a 	beq.w	1932 <CONFIG_USB_DEVICE_VID+0x1d>
				min_width = 10 * min_width + *fmt - '0';
    167e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    1682:	fb0e 2404 	mla	r4, lr, r4, r2
    1686:	3c30      	subs	r4, #48	; 0x30
    1688:	e746      	b.n	1518 <cbvprintf+0x34>
			if (precision >= 0) {
    168a:	2e00      	cmp	r6, #0
    168c:	dbf7      	blt.n	167e <cbvprintf+0x19a>
				precision = 10 * precision + *fmt - '0';
    168e:	fb0e 2606 	mla	r6, lr, r6, r2
    1692:	3e30      	subs	r6, #48	; 0x30
    1694:	e740      	b.n	1518 <cbvprintf+0x34>
			if (precision >= 0) {
    1696:	2e00      	cmp	r6, #0
    1698:	f857 3b04 	ldr.w	r3, [r7], #4
    169c:	db01      	blt.n	16a2 <cbvprintf+0x1be>
				precision = va_arg(ap, int);
    169e:	461e      	mov	r6, r3
    16a0:	e73a      	b.n	1518 <cbvprintf+0x34>
				if (min_width < 0) {
    16a2:	1e1c      	subs	r4, r3, #0
    16a4:	f6bf af38 	bge.w	1518 <cbvprintf+0x34>
					min_width = -min_width;
    16a8:	4264      	negs	r4, r4
		switch (*fmt) {
    16aa:	2302      	movs	r3, #2
				padding_mode = PAD_ZERO;
    16ac:	9302      	str	r3, [sp, #8]
    16ae:	e733      	b.n	1518 <cbvprintf+0x34>
			if (*fmt == 'h' && length_mod == 'h') {
    16b0:	2a68      	cmp	r2, #104	; 0x68
    16b2:	d103      	bne.n	16bc <cbvprintf+0x1d8>
    16b4:	2968      	cmp	r1, #104	; 0x68
    16b6:	d106      	bne.n	16c6 <cbvprintf+0x1e2>
				length_mod = 'H';
    16b8:	2148      	movs	r1, #72	; 0x48
    16ba:	e72d      	b.n	1518 <cbvprintf+0x34>
			} else if (*fmt == 'l' && length_mod == 'l') {
    16bc:	2a6c      	cmp	r2, #108	; 0x6c
    16be:	d102      	bne.n	16c6 <cbvprintf+0x1e2>
    16c0:	296c      	cmp	r1, #108	; 0x6c
    16c2:	f000 8138 	beq.w	1936 <CONFIG_USB_DEVICE_VID+0x21>
			} else if (length_mod == '\0') {
    16c6:	2900      	cmp	r1, #0
    16c8:	f47f af33 	bne.w	1532 <cbvprintf+0x4e>
    16cc:	4611      	mov	r1, r2
		switch (*fmt) {
    16ce:	e723      	b.n	1518 <cbvprintf+0x34>
			if (length_mod == 'z') {
    16d0:	297a      	cmp	r1, #122	; 0x7a
    16d2:	d108      	bne.n	16e6 <cbvprintf+0x202>
				d = va_arg(ap, long);
    16d4:	463d      	mov	r5, r7
    16d6:	f855 3b04 	ldr.w	r3, [r5], #4
    16da:	4698      	mov	r8, r3
    16dc:	ea4f 79e3 	mov.w	r9, r3, asr #31
			if (*fmt != 'u' && (int_value_type)d < 0) {
    16e0:	2a75      	cmp	r2, #117	; 0x75
    16e2:	d119      	bne.n	1718 <cbvprintf+0x234>
    16e4:	e011      	b.n	170a <cbvprintf+0x226>
			} else if (length_mod == 'l') {
    16e6:	296c      	cmp	r1, #108	; 0x6c
    16e8:	d0f4      	beq.n	16d4 <cbvprintf+0x1f0>
			} else if (length_mod == 'L') {
    16ea:	294c      	cmp	r1, #76	; 0x4c
    16ec:	d105      	bne.n	16fa <cbvprintf+0x216>
				long long lld = va_arg(ap, long long);
    16ee:	1dfd      	adds	r5, r7, #7
    16f0:	f025 0507 	bic.w	r5, r5, #7
				d = (uint_value_type) lld;
    16f4:	e8f5 8902 	ldrd	r8, r9, [r5], #8
    16f8:	e7f2      	b.n	16e0 <cbvprintf+0x1fc>
				d = va_arg(ap, unsigned int);
    16fa:	683b      	ldr	r3, [r7, #0]
			} else if (*fmt == 'u') {
    16fc:	2a75      	cmp	r2, #117	; 0x75
    16fe:	f107 0504 	add.w	r5, r7, #4
				d = va_arg(ap, unsigned int);
    1702:	4698      	mov	r8, r3
			} else if (*fmt == 'u') {
    1704:	d106      	bne.n	1714 <cbvprintf+0x230>
				d = va_arg(ap, unsigned int);
    1706:	f04f 0900 	mov.w	r9, #0
			} else if (special == ' ') {
    170a:	2820      	cmp	r0, #32
    170c:	d178      	bne.n	1800 <cbvprintf+0x31c>
				prefix = " ";
    170e:	4f8d      	ldr	r7, [pc, #564]	; (1944 <CONFIG_USB_DEVICE_VID+0x2f>)
				min_width--;
    1710:	3c01      	subs	r4, #1
    1712:	e00c      	b.n	172e <cbvprintf+0x24a>
				d = va_arg(ap, int);
    1714:	ea4f 79e3 	mov.w	r9, r3, asr #31
			if (*fmt != 'u' && (int_value_type)d < 0) {
    1718:	f1b8 0f00 	cmp.w	r8, #0
    171c:	f179 0300 	sbcs.w	r3, r9, #0
    1720:	daf3      	bge.n	170a <cbvprintf+0x226>
				d = -d;
    1722:	f1d8 0800 	rsbs	r8, r8, #0
				prefix = "-";
    1726:	4f88      	ldr	r7, [pc, #544]	; (1948 <CONFIG_USB_DEVICE_VID+0x33>)
				d = -d;
    1728:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
				min_width--;
    172c:	3c01      	subs	r4, #1
	int i = 0;
    172e:	ab0d      	add	r3, sp, #52	; 0x34
    1730:	9307      	str	r3, [sp, #28]
    1732:	2300      	movs	r3, #0
    1734:	9303      	str	r3, [sp, #12]
		buftop[--i] = c + '0';
    1736:	9b03      	ldr	r3, [sp, #12]
    1738:	9306      	str	r3, [sp, #24]
    173a:	3b01      	subs	r3, #1
    173c:	9303      	str	r3, [sp, #12]
		unsigned int c = num % base;
    173e:	4640      	mov	r0, r8
    1740:	4649      	mov	r1, r9
    1742:	220a      	movs	r2, #10
    1744:	2300      	movs	r3, #0
    1746:	f7fe fcdb 	bl	100 <__aeabi_uldivmod>
		buftop[--i] = c + '0';
    174a:	9b07      	ldr	r3, [sp, #28]
    174c:	3230      	adds	r2, #48	; 0x30
    174e:	f803 2901 	strb.w	r2, [r3], #-1
		num /= base;
    1752:	4640      	mov	r0, r8
		buftop[--i] = c + '0';
    1754:	9307      	str	r3, [sp, #28]
		num /= base;
    1756:	220a      	movs	r2, #10
    1758:	2300      	movs	r3, #0
    175a:	4649      	mov	r1, r9
    175c:	e9cd 8904 	strd	r8, r9, [sp, #16]
    1760:	f7fe fcce 	bl	100 <__aeabi_uldivmod>
	} while (num);
    1764:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    1768:	2b00      	cmp	r3, #0
    176a:	bf08      	it	eq
    176c:	2a0a      	cmpeq	r2, #10
		num /= base;
    176e:	4680      	mov	r8, r0
    1770:	4689      	mov	r9, r1
	} while (num);
    1772:	d2e0      	bcs.n	1736 <cbvprintf+0x252>
	return -i;
    1774:	9b06      	ldr	r3, [sp, #24]
			data = buf + sizeof(buf) - data_len;
    1776:	aa0e      	add	r2, sp, #56	; 0x38
	return -i;
    1778:	f1c3 0901 	rsb	r9, r3, #1
			data = buf + sizeof(buf) - data_len;
    177c:	eb03 0802 	add.w	r8, r3, r2
		}

		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    1780:	2e00      	cmp	r6, #0
			data = buf + sizeof(buf) - data_len;
    1782:	f1a8 0804 	sub.w	r8, r8, #4
		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    1786:	da04      	bge.n	1792 <cbvprintf+0x2ae>
    1788:	9b02      	ldr	r3, [sp, #8]
    178a:	f013 0f01 	tst.w	r3, #1
    178e:	bf18      	it	ne
    1790:	4626      	movne	r6, r4
			precision = min_width;
		}
		min_width -= data_len;
		precision -= data_len;
    1792:	eba6 0309 	sub.w	r3, r6, r9
		if (precision > 0) {
    1796:	2b00      	cmp	r3, #0
		precision -= data_len;
    1798:	9303      	str	r3, [sp, #12]
			min_width -= precision;
		}

		if (!(padding_mode & PAD_TAIL)) {
    179a:	9b02      	ldr	r3, [sp, #8]
		min_width -= data_len;
    179c:	bfd4      	ite	le
    179e:	eba4 0409 	suble.w	r4, r4, r9
			min_width -= precision;
    17a2:	1ba4      	subgt	r4, r4, r6
		if (!(padding_mode & PAD_TAIL)) {
    17a4:	079a      	lsls	r2, r3, #30
    17a6:	f140 80ae 	bpl.w	1906 <cbvprintf+0x422>
    17aa:	ebaa 0607 	sub.w	r6, sl, r7
    17ae:	eb06 0a07 	add.w	sl, r6, r7
			while (--min_width >= 0) {
				OUTC(' ');
			}
		}
		while (*prefix) {
    17b2:	f817 0b01 	ldrb.w	r0, [r7], #1
    17b6:	2800      	cmp	r0, #0
    17b8:	f040 80a7 	bne.w	190a <cbvprintf+0x426>
		precision -= data_len;
    17bc:	9e03      	ldr	r6, [sp, #12]
			OUTC(*prefix++);
		}
		while (--precision >= 0) {
    17be:	3e01      	subs	r6, #1
    17c0:	f140 80a7 	bpl.w	1912 <cbvprintf+0x42e>
    17c4:	9b03      	ldr	r3, [sp, #12]
    17c6:	1e5a      	subs	r2, r3, #1
    17c8:	3201      	adds	r2, #1
    17ca:	bfac      	ite	ge
    17cc:	461f      	movge	r7, r3
    17ce:	2700      	movlt	r7, #0
    17d0:	464e      	mov	r6, r9
			OUTC('0');
		}
		while (--data_len >= 0) {
    17d2:	3e01      	subs	r6, #1
    17d4:	f140 80a2 	bpl.w	191c <CONFIG_USB_DEVICE_VID+0x7>
    17d8:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    17dc:	3201      	adds	r2, #1
    17de:	bfac      	ite	ge
    17e0:	464b      	movge	r3, r9
    17e2:	2300      	movlt	r3, #0
    17e4:	eb03 0907 	add.w	r9, r3, r7
    17e8:	4626      	mov	r6, r4
			OUTC(*data++);
		}
		while (--min_width >= 0) {
    17ea:	3e01      	subs	r6, #1
    17ec:	f140 809c 	bpl.w	1928 <CONFIG_USB_DEVICE_VID+0x13>
    17f0:	1e63      	subs	r3, r4, #1
    17f2:	3301      	adds	r3, #1
    17f4:	bfb8      	it	lt
    17f6:	2400      	movlt	r4, #0
    17f8:	44a1      	add	r9, r4
    17fa:	44ca      	add	sl, r9
    17fc:	462f      	mov	r7, r5
    17fe:	e67b      	b.n	14f8 <cbvprintf+0x14>
			} else if (special == '+') {
    1800:	282b      	cmp	r0, #43	; 0x2b
				prefix = "+";
    1802:	bf0a      	itet	eq
    1804:	4f51      	ldreq	r7, [pc, #324]	; (194c <CONFIG_USB_DEVICE_VID+0x37>)
	prefix = "";
    1806:	4f52      	ldrne	r7, [pc, #328]	; (1950 <CONFIG_USB_DEVICE_VID+0x3b>)
				min_width--;
    1808:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
    180c:	e78f      	b.n	172e <cbvprintf+0x24a>
			if (*fmt == 'p') {
    180e:	2a70      	cmp	r2, #112	; 0x70
    1810:	d12a      	bne.n	1868 <cbvprintf+0x384>
				x = (uintptr_t)va_arg(ap, void *);
    1812:	463d      	mov	r5, r7
    1814:	f855 1b04 	ldr.w	r1, [r5], #4
				if (x == (uint_value_type)0) {
    1818:	2900      	cmp	r1, #0
    181a:	d05d      	beq.n	18d8 <cbvprintf+0x3f4>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    181c:	4f4d      	ldr	r7, [pc, #308]	; (1954 <CONFIG_USB_DEVICE_VID+0x3f>)
				x = (uintptr_t)va_arg(ap, void *);
    181e:	4688      	mov	r8, r1
    1820:	f04f 0900 	mov.w	r9, #0
				min_width -= 2;
    1824:	3c02      	subs	r4, #2
			data_len = convert_value(x, 16, ALPHA(*fmt),
    1826:	f002 0260 	and.w	r2, r2, #96	; 0x60
    182a:	f1a2 0e39 	sub.w	lr, r2, #57	; 0x39
	int i = 0;
    182e:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
    1832:	2200      	movs	r2, #0
		unsigned int c = num % base;
    1834:	f008 030f 	and.w	r3, r8, #15
		if (c >= 10) {
    1838:	2b09      	cmp	r3, #9
			c += alpha;
    183a:	bf88      	it	hi
    183c:	4473      	addhi	r3, lr
		buftop[--i] = c + '0';
    183e:	3330      	adds	r3, #48	; 0x30
	} while (num);
    1840:	f1b9 0f00 	cmp.w	r9, #0
		buftop[--i] = c + '0';
    1844:	f80c 3901 	strb.w	r3, [ip], #-1
	} while (num);
    1848:	bf08      	it	eq
    184a:	f1b8 0f10 	cmpeq.w	r8, #16
		num /= base;
    184e:	ea4f 1318 	mov.w	r3, r8, lsr #4
		buftop[--i] = c + '0';
    1852:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
		num /= base;
    1856:	ea43 7309 	orr.w	r3, r3, r9, lsl #28
    185a:	ea4f 1119 	mov.w	r1, r9, lsr #4
	} while (num);
    185e:	d21e      	bcs.n	189e <cbvprintf+0x3ba>
	return -i;
    1860:	f1c2 0901 	rsb	r9, r2, #1
			data = buf + sizeof(buf) - data_len;
    1864:	ab0e      	add	r3, sp, #56	; 0x38
    1866:	e789      	b.n	177c <cbvprintf+0x298>
			} else if (length_mod == 'l') {
    1868:	296c      	cmp	r1, #108	; 0x6c
    186a:	d106      	bne.n	187a <cbvprintf+0x396>
				x = va_arg(ap, unsigned int);
    186c:	463d      	mov	r5, r7
    186e:	f04f 0900 	mov.w	r9, #0
    1872:	f855 3b04 	ldr.w	r3, [r5], #4
    1876:	4698      	mov	r8, r3
    1878:	e006      	b.n	1888 <cbvprintf+0x3a4>
			} else if (length_mod == 'L') {
    187a:	294c      	cmp	r1, #76	; 0x4c
    187c:	d1f6      	bne.n	186c <cbvprintf+0x388>
				x = va_arg(ap, unsigned long long);
    187e:	1dfd      	adds	r5, r7, #7
    1880:	f025 0507 	bic.w	r5, r5, #7
    1884:	e8f5 8902 	ldrd	r8, r9, [r5], #8
			if (special == '#') {
    1888:	2823      	cmp	r0, #35	; 0x23
    188a:	d106      	bne.n	189a <cbvprintf+0x3b6>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    188c:	4b31      	ldr	r3, [pc, #196]	; (1954 <CONFIG_USB_DEVICE_VID+0x3f>)
    188e:	4f32      	ldr	r7, [pc, #200]	; (1958 <CONFIG_USB_DEVICE_VID+0x43>)
    1890:	f012 0f20 	tst.w	r2, #32
    1894:	bf18      	it	ne
    1896:	461f      	movne	r7, r3
    1898:	e7c4      	b.n	1824 <cbvprintf+0x340>
	prefix = "";
    189a:	4f2d      	ldr	r7, [pc, #180]	; (1950 <CONFIG_USB_DEVICE_VID+0x3b>)
    189c:	e7c3      	b.n	1826 <cbvprintf+0x342>
		buftop[--i] = c + '0';
    189e:	4602      	mov	r2, r0
		num /= base;
    18a0:	4698      	mov	r8, r3
    18a2:	4689      	mov	r9, r1
    18a4:	e7c6      	b.n	1834 <cbvprintf+0x350>
			data = va_arg(ap, char *);
    18a6:	463d      	mov	r5, r7
    18a8:	f855 8b04 	ldr.w	r8, [r5], #4
			data_len = strlen(data);
    18ac:	4640      	mov	r0, r8
    18ae:	f009 f9a2 	bl	abf6 <strlen>
			if (precision >= 0 && data_len > precision) {
    18b2:	2e00      	cmp	r6, #0
			data_len = strlen(data);
    18b4:	4681      	mov	r9, r0
			if (precision >= 0 && data_len > precision) {
    18b6:	db02      	blt.n	18be <cbvprintf+0x3da>
    18b8:	42b0      	cmp	r0, r6
    18ba:	bfa8      	it	ge
    18bc:	46b1      	movge	r9, r6
    18be:	4f24      	ldr	r7, [pc, #144]	; (1950 <CONFIG_USB_DEVICE_VID+0x3b>)
    18c0:	2600      	movs	r6, #0
    18c2:	e766      	b.n	1792 <cbvprintf+0x2ae>
			int c = va_arg(ap, int);
    18c4:	463d      	mov	r5, r7
			data_len = 1;
    18c6:	f04f 0901 	mov.w	r9, #1
			buf[0] = c;
    18ca:	f855 3b04 	ldr.w	r3, [r5], #4
    18ce:	f88d 3020 	strb.w	r3, [sp, #32]
			data = buf;
    18d2:	f10d 0820 	add.w	r8, sp, #32
    18d6:	e7f2      	b.n	18be <cbvprintf+0x3da>
					data = "(nil)";
    18d8:	f8df 8080 	ldr.w	r8, [pc, #128]	; 195c <CONFIG_USB_DEVICE_VID+0x47>
					data_len = 5;
    18dc:	f04f 0905 	mov.w	r9, #5
    18e0:	e7ed      	b.n	18be <cbvprintf+0x3da>
				OUTC(' ');
    18e2:	9b00      	ldr	r3, [sp, #0]
    18e4:	4659      	mov	r1, fp
    18e6:	2020      	movs	r0, #32
    18e8:	4798      	blx	r3
			while (--min_width >= 0) {
    18ea:	3e01      	subs	r6, #1
    18ec:	d5f9      	bpl.n	18e2 <cbvprintf+0x3fe>
    18ee:	1e62      	subs	r2, r4, #1
    18f0:	1c53      	adds	r3, r2, #1
    18f2:	bfac      	ite	ge
    18f4:	4621      	movge	r1, r4
    18f6:	2100      	movlt	r1, #0
    18f8:	f1c4 0400 	rsb	r4, r4, #0
    18fc:	bfb8      	it	lt
    18fe:	2400      	movlt	r4, #0
    1900:	448a      	add	sl, r1
    1902:	4414      	add	r4, r2
    1904:	e751      	b.n	17aa <cbvprintf+0x2c6>
    1906:	4626      	mov	r6, r4
    1908:	e7ef      	b.n	18ea <cbvprintf+0x406>
			OUTC(*prefix++);
    190a:	9b00      	ldr	r3, [sp, #0]
    190c:	4659      	mov	r1, fp
    190e:	4798      	blx	r3
    1910:	e74d      	b.n	17ae <cbvprintf+0x2ca>
			OUTC('0');
    1912:	9b00      	ldr	r3, [sp, #0]
    1914:	4659      	mov	r1, fp
    1916:	2030      	movs	r0, #48	; 0x30
    1918:	4798      	blx	r3
    191a:	e750      	b.n	17be <cbvprintf+0x2da>
			OUTC(*data++);
    191c:	f818 0b01 	ldrb.w	r0, [r8], #1
    1920:	9b00      	ldr	r3, [sp, #0]
    1922:	4659      	mov	r1, fp
    1924:	4798      	blx	r3
    1926:	e754      	b.n	17d2 <cbvprintf+0x2ee>
			OUTC(' ');
    1928:	9b00      	ldr	r3, [sp, #0]
    192a:	4659      	mov	r1, fp
    192c:	2020      	movs	r0, #32
    192e:	4798      	blx	r3
    1930:	e75b      	b.n	17ea <cbvprintf+0x306>
				padding_mode = PAD_ZERO;
    1932:	2301      	movs	r3, #1
    1934:	e6ba      	b.n	16ac <cbvprintf+0x1c8>
				length_mod = 'L';
    1936:	214c      	movs	r1, #76	; 0x4c
    1938:	e5ee      	b.n	1518 <cbvprintf+0x34>
		}

		goto start;
	}
}
    193a:	4650      	mov	r0, sl
    193c:	b00f      	add	sp, #60	; 0x3c
    193e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1942:	bf00      	nop
    1944:	0000de9e 	.word	0x0000de9e
    1948:	0000de9c 	.word	0x0000de9c
    194c:	0000dea0 	.word	0x0000dea0
    1950:	0000ded6 	.word	0x0000ded6
    1954:	0000dea2 	.word	0x0000dea2
    1958:	0000dea5 	.word	0x0000dea5
    195c:	0000dea8 	.word	0x0000dea8

00001960 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
    1960:	b508      	push	{r3, lr}
    1962:	4604      	mov	r4, r0
    1964:	f04f 0220 	mov.w	r2, #32
    1968:	f3ef 8311 	mrs	r3, BASEPRI
    196c:	f382 8811 	msr	BASEPRI, r2
    1970:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
    1974:	f009 f808 	bl	a988 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
    1978:	4620      	mov	r0, r4
    197a:	f003 faf1 	bl	4f60 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    197e:	4803      	ldr	r0, [pc, #12]	; (198c <sys_reboot+0x2c>)
    1980:	f008 f898 	bl	9ab4 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1984:	f003 f83a 	bl	49fc <arch_cpu_idle>
    1988:	e7fc      	b.n	1984 <sys_reboot+0x24>
    198a:	bf00      	nop
    198c:	0000deae 	.word	0x0000deae

00001990 <class_handler>:
 * usb_enable() is no longer needed.
 */

static int class_handler(struct usb_setup_packet *pSetup,
			 int32_t *len, uint8_t **data)
{
    1990:	b5f0      	push	{r4, r5, r6, r7, lr}
	size_t size = (__usb_data_end - __usb_data_start);
    1992:	4b10      	ldr	r3, [pc, #64]	; (19d4 <class_handler+0x44>)
    1994:	4c10      	ldr	r4, [pc, #64]	; (19d8 <class_handler+0x48>)
    1996:	4d11      	ldr	r5, [pc, #68]	; (19dc <class_handler+0x4c>)
    1998:	1ae4      	subs	r4, r4, r3
    199a:	10a4      	asrs	r4, r4, #2
    199c:	436c      	muls	r4, r5
		if_descr = __usb_data_start[i].interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    199e:	4d10      	ldr	r5, [pc, #64]	; (19e0 <class_handler+0x50>)
    19a0:	f8d5 c024 	ldr.w	ip, [r5, #36]	; 0x24
	for (size_t i = 0; i < size; i++) {
    19a4:	2500      	movs	r5, #0
    19a6:	42a5      	cmp	r5, r4
    19a8:	d102      	bne.n	19b0 <class_handler+0x20>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
    19aa:	f06f 0085 	mvn.w	r0, #133	; 0x85
    19ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if_descr = __usb_data_start[i].interface_descriptor;
    19b0:	685f      	ldr	r7, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    19b2:	4567      	cmp	r7, ip
    19b4:	d30a      	bcc.n	19cc <class_handler+0x3c>
		if (iface->class_handler &&
    19b6:	691e      	ldr	r6, [r3, #16]
    19b8:	b146      	cbz	r6, 19cc <class_handler+0x3c>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    19ba:	f897 e002 	ldrb.w	lr, [r7, #2]
    19be:	7907      	ldrb	r7, [r0, #4]
		if (iface->class_handler &&
    19c0:	45be      	cmp	lr, r7
    19c2:	d103      	bne.n	19cc <class_handler+0x3c>
			return iface->class_handler(pSetup, len, data);
    19c4:	4633      	mov	r3, r6
}
    19c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			return iface->class_handler(pSetup, len, data);
    19ca:	4718      	bx	r3
	for (size_t i = 0; i < size; i++) {
    19cc:	3501      	adds	r5, #1
    19ce:	3324      	adds	r3, #36	; 0x24
    19d0:	e7e9      	b.n	19a6 <class_handler+0x16>
    19d2:	bf00      	nop
    19d4:	2000040c 	.word	0x2000040c
    19d8:	20000430 	.word	0x20000430
    19dc:	38e38e39 	.word	0x38e38e39
    19e0:	20000f84 	.word	0x20000f84

000019e4 <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    19e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t size = (__usb_data_end - __usb_data_start);
    19e8:	4b12      	ldr	r3, [pc, #72]	; (1a34 <custom_handler+0x50>)
    19ea:	4c13      	ldr	r4, [pc, #76]	; (1a38 <custom_handler+0x54>)
    19ec:	4d13      	ldr	r5, [pc, #76]	; (1a3c <custom_handler+0x58>)
    19ee:	1ae4      	subs	r4, r4, r3
    19f0:	10a4      	asrs	r4, r4, #2
    19f2:	436c      	muls	r4, r5
		if_descr = __usb_data_start[i].interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    19f4:	4d12      	ldr	r5, [pc, #72]	; (1a40 <custom_handler+0x5c>)
    19f6:	f8d5 c024 	ldr.w	ip, [r5, #36]	; 0x24
	for (size_t i = 0; i < size; i++) {
    19fa:	2500      	movs	r5, #0
    19fc:	42a5      	cmp	r5, r4
    19fe:	d103      	bne.n	1a08 <custom_handler+0x24>
			return iface->custom_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
    1a00:	f06f 0085 	mvn.w	r0, #133	; 0x85
    1a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if_descr = __usb_data_start[i].interface_descriptor;
    1a08:	685e      	ldr	r6, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    1a0a:	4566      	cmp	r6, ip
    1a0c:	d30e      	bcc.n	1a2c <custom_handler+0x48>
		if (iface->custom_handler &&
    1a0e:	699f      	ldr	r7, [r3, #24]
    1a10:	b167      	cbz	r7, 1a2c <custom_handler+0x48>
		    (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF) ||
    1a12:	f896 8002 	ldrb.w	r8, [r6, #2]
    1a16:	f890 e004 	ldrb.w	lr, [r0, #4]
		if (iface->custom_handler &&
    1a1a:	45f0      	cmp	r8, lr
    1a1c:	d103      	bne.n	1a26 <custom_handler+0x42>
			return iface->custom_handler(pSetup, len, data);
    1a1e:	463b      	mov	r3, r7
}
    1a20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return iface->custom_handler(pSetup, len, data);
    1a24:	4718      	bx	r3
		    (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF) ||
    1a26:	7976      	ldrb	r6, [r6, #5]
    1a28:	2e01      	cmp	r6, #1
    1a2a:	d0f8      	beq.n	1a1e <custom_handler+0x3a>
	for (size_t i = 0; i < size; i++) {
    1a2c:	3501      	adds	r5, #1
    1a2e:	3324      	adds	r3, #36	; 0x24
    1a30:	e7e4      	b.n	19fc <custom_handler+0x18>
    1a32:	bf00      	nop
    1a34:	2000040c 	.word	0x2000040c
    1a38:	20000430 	.word	0x20000430
    1a3c:	38e38e39 	.word	0x38e38e39
    1a40:	20000f84 	.word	0x20000f84

00001a44 <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    1a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	size_t size = (__usb_data_end - __usb_data_start);
    1a48:	4c0f      	ldr	r4, [pc, #60]	; (1a88 <vendor_handler+0x44>)
    1a4a:	4b10      	ldr	r3, [pc, #64]	; (1a8c <vendor_handler+0x48>)
{
    1a4c:	4617      	mov	r7, r2
	size_t size = (__usb_data_end - __usb_data_start);
    1a4e:	1b1b      	subs	r3, r3, r4
    1a50:	4a0f      	ldr	r2, [pc, #60]	; (1a90 <vendor_handler+0x4c>)
    1a52:	109b      	asrs	r3, r3, #2
{
    1a54:	4605      	mov	r5, r0
    1a56:	460e      	mov	r6, r1
	size_t size = (__usb_data_end - __usb_data_start);
    1a58:	fb02 f903 	mul.w	r9, r2, r3
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	for (size_t i = 0; i < size; i++) {
    1a5c:	f04f 0800 	mov.w	r8, #0
    1a60:	45c1      	cmp	r9, r8
    1a62:	d102      	bne.n	1a6a <vendor_handler+0x26>
				return 0;
			}
		}
	}

	return -ENOTSUP;
    1a64:	f06f 0085 	mvn.w	r0, #133	; 0x85
    1a68:	e00b      	b.n	1a82 <vendor_handler+0x3e>
		if (iface->vendor_handler) {
    1a6a:	6963      	ldr	r3, [r4, #20]
    1a6c:	b91b      	cbnz	r3, 1a76 <vendor_handler+0x32>
	for (size_t i = 0; i < size; i++) {
    1a6e:	f108 0801 	add.w	r8, r8, #1
    1a72:	3424      	adds	r4, #36	; 0x24
    1a74:	e7f4      	b.n	1a60 <vendor_handler+0x1c>
			if (!iface->vendor_handler(pSetup, len, data)) {
    1a76:	463a      	mov	r2, r7
    1a78:	4631      	mov	r1, r6
    1a7a:	4628      	mov	r0, r5
    1a7c:	4798      	blx	r3
    1a7e:	2800      	cmp	r0, #0
    1a80:	d1f5      	bne.n	1a6e <vendor_handler+0x2a>
}
    1a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1a86:	bf00      	nop
    1a88:	2000040c 	.word	0x2000040c
    1a8c:	20000430 	.word	0x20000430
    1a90:	38e38e39 	.word	0x38e38e39

00001a94 <set_endpoint>:
{
    1a94:	b507      	push	{r0, r1, r2, lr}
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    1a96:	7883      	ldrb	r3, [r0, #2]
    1a98:	f88d 3000 	strb.w	r3, [sp]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    1a9c:	7903      	ldrb	r3, [r0, #4]
    1a9e:	7942      	ldrb	r2, [r0, #5]
    1aa0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1aa4:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    1aa8:	78c3      	ldrb	r3, [r0, #3]
	ret = usb_dc_ep_configure(&ep_cfg);
    1aaa:	4668      	mov	r0, sp
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    1aac:	f003 0303 	and.w	r3, r3, #3
    1ab0:	f88d 3004 	strb.w	r3, [sp, #4]
	ret = usb_dc_ep_configure(&ep_cfg);
    1ab4:	f001 fe0a 	bl	36cc <usb_dc_ep_configure>
	if (ret == -EALREADY) {
    1ab8:	f110 0f78 	cmn.w	r0, #120	; 0x78
    1abc:	d004      	beq.n	1ac8 <set_endpoint+0x34>
	} else if (ret) {
    1abe:	b118      	cbz	r0, 1ac8 <set_endpoint+0x34>
		return false;
    1ac0:	2000      	movs	r0, #0
}
    1ac2:	b003      	add	sp, #12
    1ac4:	f85d fb04 	ldr.w	pc, [sp], #4
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
    1ac8:	f89d 0000 	ldrb.w	r0, [sp]
    1acc:	f001 fe84 	bl	37d8 <usb_dc_ep_enable>
	if (ret == -EALREADY) {
    1ad0:	f110 0f78 	cmn.w	r0, #120	; 0x78
    1ad4:	d001      	beq.n	1ada <set_endpoint+0x46>
	} else if (ret) {
    1ad6:	2800      	cmp	r0, #0
    1ad8:	d1f2      	bne.n	1ac0 <set_endpoint+0x2c>
	usb_dev.configured = true;
    1ada:	4b02      	ldr	r3, [pc, #8]	; (1ae4 <set_endpoint+0x50>)
    1adc:	2001      	movs	r0, #1
    1ade:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
	return true;
    1ae2:	e7ee      	b.n	1ac2 <set_endpoint+0x2e>
    1ae4:	20000f84 	.word	0x20000f84

00001ae8 <forward_status_cb>:
{
    1ae8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t size = (__usb_data_end - __usb_data_start);
    1aec:	4b25      	ldr	r3, [pc, #148]	; (1b84 <forward_status_cb+0x9c>)
    1aee:	4c26      	ldr	r4, [pc, #152]	; (1b88 <forward_status_cb+0xa0>)
    1af0:	4f26      	ldr	r7, [pc, #152]	; (1b8c <forward_status_cb+0xa4>)
    1af2:	1b1b      	subs	r3, r3, r4
    1af4:	109b      	asrs	r3, r3, #2
    1af6:	435f      	muls	r7, r3
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND) {
    1af8:	1f03      	subs	r3, r0, #4
    1afa:	2b01      	cmp	r3, #1
{
    1afc:	4605      	mov	r5, r0
    1afe:	460e      	mov	r6, r1
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND) {
    1b00:	d825      	bhi.n	1b4e <forward_status_cb+0x66>
		if (usb_dev.configured) {
    1b02:	4b23      	ldr	r3, [pc, #140]	; (1b90 <forward_status_cb+0xa8>)
    1b04:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
    1b08:	4698      	mov	r8, r3
    1b0a:	b302      	cbz	r2, 1b4e <forward_status_cb+0x66>
			usb_cancel_transfers();
    1b0c:	f000 fd92 	bl	2634 <usb_cancel_transfers>
			if (status == USB_DC_DISCONNECTED) {
    1b10:	2d04      	cmp	r5, #4
    1b12:	d11c      	bne.n	1b4e <forward_status_cb+0x66>
	for (size_t i = 0; i < size; i++) {
    1b14:	f04f 0900 	mov.w	r9, #0
    1b18:	454f      	cmp	r7, r9
    1b1a:	d015      	beq.n	1b48 <forward_status_cb+0x60>
		struct usb_ep_cfg_data *ep_data = cfg->endpoint;
    1b1c:	f8d4 b020 	ldr.w	fp, [r4, #32]
		for (uint8_t n = 0; n < cfg->num_endpoints; n++) {
    1b20:	f04f 0a00 	mov.w	sl, #0
    1b24:	7f22      	ldrb	r2, [r4, #28]
    1b26:	fa5f f38a 	uxtb.w	r3, sl
    1b2a:	429a      	cmp	r2, r3
    1b2c:	d803      	bhi.n	1b36 <forward_status_cb+0x4e>
	for (size_t i = 0; i < size; i++) {
    1b2e:	f109 0901 	add.w	r9, r9, #1
    1b32:	3424      	adds	r4, #36	; 0x24
    1b34:	e7f0      	b.n	1b18 <forward_status_cb+0x30>
	return usb_dc_ep_disable(ep_data->ep_addr);
    1b36:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
    1b3a:	f10a 0a01 	add.w	sl, sl, #1
    1b3e:	7918      	ldrb	r0, [r3, #4]
    1b40:	f001 fe74 	bl	382c <usb_dc_ep_disable>
			if (ret < 0) {
    1b44:	2800      	cmp	r0, #0
    1b46:	daed      	bge.n	1b24 <forward_status_cb+0x3c>
				usb_dev.configured = false;
    1b48:	2300      	movs	r3, #0
    1b4a:	f888 30b9 	strb.w	r3, [r8, #185]	; 0xb9
    1b4e:	4c0e      	ldr	r4, [pc, #56]	; (1b88 <forward_status_cb+0xa0>)
	for (size_t i = 0; i < size; i++) {
    1b50:	f04f 0800 	mov.w	r8, #0
	for (size_t i = 0; i < size; i++) {
    1b54:	45b8      	cmp	r8, r7
    1b56:	d108      	bne.n	1b6a <forward_status_cb+0x82>
	if (usb_dev.user_status_callback) {
    1b58:	4b0d      	ldr	r3, [pc, #52]	; (1b90 <forward_status_cb+0xa8>)
    1b5a:	6a1b      	ldr	r3, [r3, #32]
    1b5c:	b17b      	cbz	r3, 1b7e <forward_status_cb+0x96>
		usb_dev.user_status_callback(status, param);
    1b5e:	4631      	mov	r1, r6
    1b60:	4628      	mov	r0, r5
}
    1b62:	b001      	add	sp, #4
    1b64:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		usb_dev.user_status_callback(status, param);
    1b68:	4718      	bx	r3
		if (cfg->cb_usb_status) {
    1b6a:	68e3      	ldr	r3, [r4, #12]
    1b6c:	b11b      	cbz	r3, 1b76 <forward_status_cb+0x8e>
			cfg->cb_usb_status(cfg, status, param);
    1b6e:	4632      	mov	r2, r6
    1b70:	4629      	mov	r1, r5
    1b72:	4620      	mov	r0, r4
    1b74:	4798      	blx	r3
	for (size_t i = 0; i < size; i++) {
    1b76:	f108 0801 	add.w	r8, r8, #1
    1b7a:	3424      	adds	r4, #36	; 0x24
    1b7c:	e7ea      	b.n	1b54 <forward_status_cb+0x6c>
}
    1b7e:	b001      	add	sp, #4
    1b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b84:	20000430 	.word	0x20000430
    1b88:	2000040c 	.word	0x2000040c
    1b8c:	38e38e39 	.word	0x38e38e39
    1b90:	20000f84 	.word	0x20000f84

00001b94 <usb_handle_standard_request>:
{
    1b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (usb_dev.custom_req_handler &&
    1b98:	4dae      	ldr	r5, [pc, #696]	; (1e54 <usb_handle_standard_request+0x2c0>)
    1b9a:	69ab      	ldr	r3, [r5, #24]
{
    1b9c:	b085      	sub	sp, #20
    1b9e:	4606      	mov	r6, r0
    1ba0:	460c      	mov	r4, r1
    1ba2:	4690      	mov	r8, r2
	if (usb_dev.custom_req_handler &&
    1ba4:	b963      	cbnz	r3, 1bc0 <usb_handle_standard_request+0x2c>
	switch (REQTYPE_GET_RECIP(setup->bmRequestType)) {
    1ba6:	7833      	ldrb	r3, [r6, #0]
    1ba8:	f003 031f 	and.w	r3, r3, #31
    1bac:	2b01      	cmp	r3, #1
    1bae:	f000 8088 	beq.w	1cc2 <usb_handle_standard_request+0x12e>
    1bb2:	2b02      	cmp	r3, #2
    1bb4:	f000 80d1 	beq.w	1d5a <usb_handle_standard_request+0x1c6>
    1bb8:	b143      	cbz	r3, 1bcc <usb_handle_standard_request+0x38>
	switch (setup->bRequest) {
    1bba:	f06f 0015 	mvn.w	r0, #21
    1bbe:	e002      	b.n	1bc6 <usb_handle_standard_request+0x32>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
    1bc0:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
    1bc2:	2800      	cmp	r0, #0
    1bc4:	d1ef      	bne.n	1ba6 <usb_handle_standard_request+0x12>
}
    1bc6:	b005      	add	sp, #20
    1bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t value = setup->wValue;
    1bcc:	7872      	ldrb	r2, [r6, #1]
    1bce:	8870      	ldrh	r0, [r6, #2]
	uint8_t *data = *data_buf;
    1bd0:	f8d8 3000 	ldr.w	r3, [r8]
	switch (setup->bRequest) {
    1bd4:	2a09      	cmp	r2, #9
    1bd6:	d8f0      	bhi.n	1bba <usb_handle_standard_request+0x26>
    1bd8:	a101      	add	r1, pc, #4	; (adr r1, 1be0 <usb_handle_standard_request+0x4c>)
    1bda:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    1bde:	bf00      	nop
    1be0:	00001c09 	.word	0x00001c09
    1be4:	00001bbb 	.word	0x00001bbb
    1be8:	00001bbb 	.word	0x00001bbb
    1bec:	00001bbb 	.word	0x00001bbb
    1bf0:	00001bbb 	.word	0x00001bbb
    1bf4:	00001c15 	.word	0x00001c15
    1bf8:	00001c1f 	.word	0x00001c1f
    1bfc:	00001bbb 	.word	0x00001bbb
    1c00:	00001c4d 	.word	0x00001c4d
    1c04:	00001c57 	.word	0x00001c57
		data[1] = 0U;
    1c08:	2000      	movs	r0, #0
			data[0] |= DEVICE_STATUS_SELF_POWERED;
    1c0a:	2201      	movs	r2, #1
		data[1] = 0U;
    1c0c:	7058      	strb	r0, [r3, #1]
			data[0] |= DEVICE_STATUS_SELF_POWERED;
    1c0e:	701a      	strb	r2, [r3, #0]
			*len = 2;
    1c10:	2302      	movs	r3, #2
    1c12:	e06f      	b.n	1cf4 <usb_handle_standard_request+0x160>
		usb_dc_set_address(value);
    1c14:	b2c0      	uxtb	r0, r0
    1c16:	f001 fd47 	bl	36a8 <usb_dc_set_address>
	int rc = 0;
    1c1a:	2000      	movs	r0, #0
    1c1c:	e7d3      	b.n	1bc6 <usb_handle_standard_request+0x32>
	type = GET_DESC_TYPE(type_index);
    1c1e:	0a02      	lsrs	r2, r0, #8
	if ((type == USB_INTERFACE_DESC) || (type == USB_ENDPOINT_DESC) ||
    1c20:	1f13      	subs	r3, r2, #4
    1c22:	2b01      	cmp	r3, #1
    1c24:	d9c9      	bls.n	1bba <usb_handle_standard_request+0x26>
    1c26:	2a07      	cmp	r2, #7
    1c28:	d8c7      	bhi.n	1bba <usb_handle_standard_request+0x26>
	p = (uint8_t *)usb_dev.descriptors;
    1c2a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	index = GET_DESC_INDEX(type_index);
    1c2c:	b2c0      	uxtb	r0, r0
	cur_index = 0U;
    1c2e:	2100      	movs	r1, #0
	while (p[DESC_bLength] != 0U) {
    1c30:	781d      	ldrb	r5, [r3, #0]
    1c32:	2d00      	cmp	r5, #0
    1c34:	d0c1      	beq.n	1bba <usb_handle_standard_request+0x26>
		if (p[DESC_bDescriptorType] == type) {
    1c36:	785e      	ldrb	r6, [r3, #1]
    1c38:	4296      	cmp	r6, r2
    1c3a:	d103      	bne.n	1c44 <usb_handle_standard_request+0xb0>
			if (cur_index == index) {
    1c3c:	4288      	cmp	r0, r1
    1c3e:	f000 80f1 	beq.w	1e24 <usb_handle_standard_request+0x290>
			cur_index++;
    1c42:	3101      	adds	r1, #1
		p += p[DESC_bLength];
    1c44:	442b      	add	r3, r5
    1c46:	e7f3      	b.n	1c30 <usb_handle_standard_request+0x9c>
			*len = p[DESC_bLength];
    1c48:	781b      	ldrb	r3, [r3, #0]
    1c4a:	e0f1      	b.n	1e30 <usb_handle_standard_request+0x29c>
		data[0] = usb_dev.configuration;
    1c4c:	f895 20ba 	ldrb.w	r2, [r5, #186]	; 0xba
    1c50:	701a      	strb	r2, [r3, #0]
		*len = 1;
    1c52:	2301      	movs	r3, #1
    1c54:	e0ec      	b.n	1e30 <usb_handle_standard_request+0x29c>
		if (!usb_set_configuration(value, 0)) {
    1c56:	b2c7      	uxtb	r7, r0
    1c58:	f88d 700f 	strb.w	r7, [sp, #15]
	if (config_index == 0U) {
    1c5c:	b177      	cbz	r7, 1c7c <usb_handle_standard_request+0xe8>
	uint8_t cur_config = 0xFF;
    1c5e:	f04f 08ff 	mov.w	r8, #255	; 0xff
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
    1c62:	6a6c      	ldr	r4, [r5, #36]	; 0x24
	bool found = false;
    1c64:	2600      	movs	r6, #0
	uint8_t cur_alt_setting = 0xFF;
    1c66:	46c1      	mov	r9, r8
	while (p[DESC_bLength] != 0U) {
    1c68:	7823      	ldrb	r3, [r4, #0]
    1c6a:	b953      	cbnz	r3, 1c82 <usb_handle_standard_request+0xee>
	if (usb_dev.status_callback) {
    1c6c:	69eb      	ldr	r3, [r5, #28]
    1c6e:	b11b      	cbz	r3, 1c78 <usb_handle_standard_request+0xe4>
		usb_dev.status_callback(USB_DC_CONFIGURED, &config_index);
    1c70:	f10d 010f 	add.w	r1, sp, #15
    1c74:	2003      	movs	r0, #3
    1c76:	4798      	blx	r3
		if (!usb_set_configuration(value, 0)) {
    1c78:	2e00      	cmp	r6, #0
    1c7a:	d09e      	beq.n	1bba <usb_handle_standard_request+0x26>
			usb_dev.configuration = value;
    1c7c:	f885 70ba 	strb.w	r7, [r5, #186]	; 0xba
	return ret;
    1c80:	e7cb      	b.n	1c1a <usb_handle_standard_request+0x86>
		switch (p[DESC_bDescriptorType]) {
    1c82:	7863      	ldrb	r3, [r4, #1]
    1c84:	2b04      	cmp	r3, #4
    1c86:	d00d      	beq.n	1ca4 <usb_handle_standard_request+0x110>
    1c88:	2b05      	cmp	r3, #5
    1c8a:	d00e      	beq.n	1caa <usb_handle_standard_request+0x116>
    1c8c:	2b02      	cmp	r3, #2
    1c8e:	d106      	bne.n	1c9e <usb_handle_standard_request+0x10a>
			cur_config = p[CONF_DESC_bConfigurationValue];
    1c90:	f894 8005 	ldrb.w	r8, [r4, #5]
			if (cur_config == config_index) {
    1c94:	f89d 300f 	ldrb.w	r3, [sp, #15]
				found = true;
    1c98:	4543      	cmp	r3, r8
    1c9a:	bf08      	it	eq
    1c9c:	2601      	moveq	r6, #1
		p += p[DESC_bLength];
    1c9e:	7823      	ldrb	r3, [r4, #0]
    1ca0:	441c      	add	r4, r3
    1ca2:	e7e1      	b.n	1c68 <usb_handle_standard_request+0xd4>
			cur_alt_setting =
    1ca4:	f894 9003 	ldrb.w	r9, [r4, #3]
			break;
    1ca8:	e7f9      	b.n	1c9e <usb_handle_standard_request+0x10a>
			if ((cur_config != config_index) ||
    1caa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1cae:	4543      	cmp	r3, r8
    1cb0:	d1f5      	bne.n	1c9e <usb_handle_standard_request+0x10a>
    1cb2:	f1b9 0f00 	cmp.w	r9, #0
    1cb6:	d1f2      	bne.n	1c9e <usb_handle_standard_request+0x10a>
			found = set_endpoint((struct usb_ep_descriptor *)p);
    1cb8:	4620      	mov	r0, r4
    1cba:	f7ff feeb 	bl	1a94 <set_endpoint>
    1cbe:	4606      	mov	r6, r0
			break;
    1cc0:	e7ed      	b.n	1c9e <usb_handle_standard_request+0x10a>
	if (!is_device_configured() ||
    1cc2:	f895 30ba 	ldrb.w	r3, [r5, #186]	; 0xba
    1cc6:	2b00      	cmp	r3, #0
    1cc8:	f43f af77 	beq.w	1bba <usb_handle_standard_request+0x26>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    1ccc:	6a6f      	ldr	r7, [r5, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
    1cce:	f896 9004 	ldrb.w	r9, [r6, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    1cd2:	463b      	mov	r3, r7
	while (p[DESC_bLength] != 0U) {
    1cd4:	7819      	ldrb	r1, [r3, #0]
    1cd6:	2900      	cmp	r1, #0
    1cd8:	f43f af6f 	beq.w	1bba <usb_handle_standard_request+0x26>
		if (p[DESC_bDescriptorType] == USB_CONFIGURATION_DESC) {
    1cdc:	785a      	ldrb	r2, [r3, #1]
    1cde:	2a02      	cmp	r2, #2
    1ce0:	d103      	bne.n	1cea <usb_handle_standard_request+0x156>
			if (interface < cfg_descr->bNumInterfaces) {
    1ce2:	7918      	ldrb	r0, [r3, #4]
    1ce4:	4548      	cmp	r0, r9
    1ce6:	f200 80a5 	bhi.w	1e34 <usb_handle_standard_request+0x2a0>
		p += p[DESC_bLength];
    1cea:	440b      	add	r3, r1
    1cec:	e7f2      	b.n	1cd4 <usb_handle_standard_request+0x140>
		data[0] = 0U;
    1cee:	2000      	movs	r0, #0
    1cf0:	7018      	strb	r0, [r3, #0]
		*len = 1;
    1cf2:	2301      	movs	r3, #1
			*len = 2;
    1cf4:	6023      	str	r3, [r4, #0]
			break;
    1cf6:	e766      	b.n	1bc6 <usb_handle_standard_request+0x32>
		usb_set_interface(setup->wIndex, setup->wValue);
    1cf8:	f896 b002 	ldrb.w	fp, [r6, #2]
	uint8_t cur_iface = 0xFF;
    1cfc:	26ff      	movs	r6, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
    1cfe:	46b2      	mov	sl, r6
	const uint8_t *if_desc = NULL;
    1d00:	f04f 0800 	mov.w	r8, #0
	while (p[DESC_bLength] != 0U) {
    1d04:	783b      	ldrb	r3, [r7, #0]
    1d06:	b93b      	cbnz	r3, 1d18 <usb_handle_standard_request+0x184>
	if (usb_dev.status_callback) {
    1d08:	69eb      	ldr	r3, [r5, #28]
    1d0a:	b113      	cbz	r3, 1d12 <usb_handle_standard_request+0x17e>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
    1d0c:	4641      	mov	r1, r8
    1d0e:	2007      	movs	r0, #7
    1d10:	4798      	blx	r3
		*len = 0;
    1d12:	2000      	movs	r0, #0
    1d14:	6020      	str	r0, [r4, #0]
		break;
    1d16:	e756      	b.n	1bc6 <usb_handle_standard_request+0x32>
		switch (p[DESC_bDescriptorType]) {
    1d18:	787b      	ldrb	r3, [r7, #1]
    1d1a:	2b04      	cmp	r3, #4
    1d1c:	d004      	beq.n	1d28 <usb_handle_standard_request+0x194>
    1d1e:	2b05      	cmp	r3, #5
    1d20:	d00b      	beq.n	1d3a <usb_handle_standard_request+0x1a6>
		p += p[DESC_bLength];
    1d22:	783b      	ldrb	r3, [r7, #0]
    1d24:	441f      	add	r7, r3
    1d26:	e7ed      	b.n	1d04 <usb_handle_standard_request+0x170>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    1d28:	78be      	ldrb	r6, [r7, #2]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
    1d2a:	f897 a003 	ldrb.w	sl, [r7, #3]
			if (cur_iface == iface &&
    1d2e:	45b1      	cmp	r9, r6
    1d30:	d1f7      	bne.n	1d22 <usb_handle_standard_request+0x18e>
    1d32:	45d3      	cmp	fp, sl
    1d34:	bf08      	it	eq
    1d36:	46b8      	moveq	r8, r7
    1d38:	e7f3      	b.n	1d22 <usb_handle_standard_request+0x18e>
			if (cur_iface == iface) {
    1d3a:	45b1      	cmp	r9, r6
    1d3c:	d1f1      	bne.n	1d22 <usb_handle_standard_request+0x18e>
	if (cur_alt_setting != alt_setting) {
    1d3e:	45d3      	cmp	fp, sl
    1d40:	d007      	beq.n	1d52 <usb_handle_standard_request+0x1be>
		ret = reset_endpoint(ep_desc);
    1d42:	78b8      	ldrb	r0, [r7, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    1d44:	9001      	str	r0, [sp, #4]
    1d46:	f000 fc57 	bl	25f8 <usb_cancel_transfer>
	ret = usb_dc_ep_disable(ep_cfg.ep_addr);
    1d4a:	9801      	ldr	r0, [sp, #4]
    1d4c:	f001 fd6e 	bl	382c <usb_dc_ep_disable>
	if (ret == -EALREADY) {
    1d50:	e7e7      	b.n	1d22 <usb_handle_standard_request+0x18e>
		ret = set_endpoint(ep_desc);
    1d52:	4638      	mov	r0, r7
    1d54:	f7ff fe9e 	bl	1a94 <set_endpoint>
    1d58:	e7e3      	b.n	1d22 <usb_handle_standard_request+0x18e>
	uint8_t ep = (uint8_t)setup->wIndex;
    1d5a:	7930      	ldrb	r0, [r6, #4]
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
    1d5c:	f8d8 8000 	ldr.w	r8, [r8]
	uint8_t ep = (uint8_t)setup->wIndex;
    1d60:	f88d 000f 	strb.w	r0, [sp, #15]
	if (USB_EP_GET_IDX(ep) == 0) {
    1d64:	f030 0780 	bics.w	r7, r0, #128	; 0x80
    1d68:	d01e      	beq.n	1da8 <usb_handle_standard_request+0x214>
	size_t size = (__usb_data_end - __usb_data_start);
    1d6a:	4b3b      	ldr	r3, [pc, #236]	; (1e58 <usb_handle_standard_request+0x2c4>)
    1d6c:	4a3b      	ldr	r2, [pc, #236]	; (1e5c <usb_handle_standard_request+0x2c8>)
    1d6e:	493c      	ldr	r1, [pc, #240]	; (1e60 <usb_handle_standard_request+0x2cc>)
    1d70:	1ad2      	subs	r2, r2, r3
    1d72:	1092      	asrs	r2, r2, #2
    1d74:	434a      	muls	r2, r1
	for (size_t i = 0; i < size; i++) {
    1d76:	f04f 0c00 	mov.w	ip, #0
    1d7a:	4562      	cmp	r2, ip
    1d7c:	f43f af1d 	beq.w	1bba <usb_handle_standard_request+0x26>
		ep_data = cfg->endpoint;
    1d80:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg->num_endpoints; n++) {
    1d82:	f893 901c 	ldrb.w	r9, [r3, #28]
    1d86:	f04f 0e00 	mov.w	lr, #0
			if (ep_data[n].ep_addr == ep) {
    1d8a:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg->num_endpoints; n++) {
    1d8c:	fa5f fa8e 	uxtb.w	sl, lr
    1d90:	45ca      	cmp	sl, r9
    1d92:	d303      	bcc.n	1d9c <usb_handle_standard_request+0x208>
	for (size_t i = 0; i < size; i++) {
    1d94:	f10c 0c01 	add.w	ip, ip, #1
    1d98:	3324      	adds	r3, #36	; 0x24
    1d9a:	e7ee      	b.n	1d7a <usb_handle_standard_request+0x1e6>
			if (ep_data[n].ep_addr == ep) {
    1d9c:	f10e 0e01 	add.w	lr, lr, #1
    1da0:	f811 a03e 	ldrb.w	sl, [r1, lr, lsl #3]
    1da4:	4582      	cmp	sl, r0
    1da6:	d1f1      	bne.n	1d8c <usb_handle_standard_request+0x1f8>
	switch (setup->bRequest) {
    1da8:	7873      	ldrb	r3, [r6, #1]
    1daa:	2b01      	cmp	r3, #1
    1dac:	d011      	beq.n	1dd2 <usb_handle_standard_request+0x23e>
    1dae:	2b03      	cmp	r3, #3
    1db0:	d024      	beq.n	1dfc <usb_handle_standard_request+0x268>
    1db2:	2b00      	cmp	r3, #0
    1db4:	f47f af01 	bne.w	1bba <usb_handle_standard_request+0x26>
		if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    1db8:	b127      	cbz	r7, 1dc4 <usb_handle_standard_request+0x230>
    1dba:	f895 30ba 	ldrb.w	r3, [r5, #186]	; 0xba
    1dbe:	2b00      	cmp	r3, #0
    1dc0:	f43f aefb 	beq.w	1bba <usb_handle_standard_request+0x26>
			usb_dc_ep_is_stalled(ep, &data[0]);
    1dc4:	4641      	mov	r1, r8
    1dc6:	f001 fceb 	bl	37a0 <usb_dc_ep_is_stalled>
			data[1] = 0U;
    1dca:	2000      	movs	r0, #0
    1dcc:	f888 0001 	strb.w	r0, [r8, #1]
    1dd0:	e71e      	b.n	1c10 <usb_handle_standard_request+0x7c>
		if (setup->wValue == FEA_ENDPOINT_HALT) {
    1dd2:	8873      	ldrh	r3, [r6, #2]
    1dd4:	2b00      	cmp	r3, #0
    1dd6:	f47f aef0 	bne.w	1bba <usb_handle_standard_request+0x26>
			if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    1dda:	b127      	cbz	r7, 1de6 <usb_handle_standard_request+0x252>
    1ddc:	f895 30ba 	ldrb.w	r3, [r5, #186]	; 0xba
    1de0:	2b00      	cmp	r3, #0
    1de2:	f43f aeea 	beq.w	1bba <usb_handle_standard_request+0x26>
				usb_dc_ep_clear_stall(ep);
    1de6:	f001 fcbb 	bl	3760 <usb_dc_ep_clear_stall>
				if (usb_dev.status_callback) {
    1dea:	69eb      	ldr	r3, [r5, #28]
    1dec:	2b00      	cmp	r3, #0
    1dee:	f43f af14 	beq.w	1c1a <usb_handle_standard_request+0x86>
					usb_dev.status_callback(
    1df2:	f10d 010f 	add.w	r1, sp, #15
    1df6:	2009      	movs	r0, #9
					usb_dev.status_callback(
    1df8:	4798      	blx	r3
    1dfa:	e70e      	b.n	1c1a <usb_handle_standard_request+0x86>
		if (setup->wValue == FEA_ENDPOINT_HALT) {
    1dfc:	8873      	ldrh	r3, [r6, #2]
    1dfe:	2b00      	cmp	r3, #0
    1e00:	f47f aedb 	bne.w	1bba <usb_handle_standard_request+0x26>
			if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    1e04:	b127      	cbz	r7, 1e10 <usb_handle_standard_request+0x27c>
    1e06:	f895 30ba 	ldrb.w	r3, [r5, #186]	; 0xba
    1e0a:	2b00      	cmp	r3, #0
    1e0c:	f43f aed5 	beq.w	1bba <usb_handle_standard_request+0x26>
				usb_dc_ep_set_stall(ep);
    1e10:	f001 fc7e 	bl	3710 <usb_dc_ep_set_stall>
				if (usb_dev.status_callback) {
    1e14:	69eb      	ldr	r3, [r5, #28]
    1e16:	2b00      	cmp	r3, #0
    1e18:	f43f aeff 	beq.w	1c1a <usb_handle_standard_request+0x86>
					usb_dev.status_callback(
    1e1c:	f10d 010f 	add.w	r1, sp, #15
    1e20:	2008      	movs	r0, #8
    1e22:	e7e9      	b.n	1df8 <usb_handle_standard_request+0x264>
		if (type == USB_CONFIGURATION_DESC) {
    1e24:	2a02      	cmp	r2, #2
		*data = p;
    1e26:	f8c8 3000 	str.w	r3, [r8]
		if (type == USB_CONFIGURATION_DESC) {
    1e2a:	f47f af0d 	bne.w	1c48 <usb_handle_standard_request+0xb4>
			*len = (p[CONF_DESC_wTotalLength]) |
    1e2e:	885b      	ldrh	r3, [r3, #2]
    1e30:	6023      	str	r3, [r4, #0]
    1e32:	e6f2      	b.n	1c1a <usb_handle_standard_request+0x86>
	switch (setup->bRequest) {
    1e34:	7870      	ldrb	r0, [r6, #1]
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
    1e36:	f8d8 3000 	ldr.w	r3, [r8]
	switch (setup->bRequest) {
    1e3a:	280a      	cmp	r0, #10
    1e3c:	f43f af57 	beq.w	1cee <usb_handle_standard_request+0x15a>
    1e40:	280b      	cmp	r0, #11
    1e42:	f43f af59 	beq.w	1cf8 <usb_handle_standard_request+0x164>
    1e46:	2800      	cmp	r0, #0
    1e48:	f47f aeb7 	bne.w	1bba <usb_handle_standard_request+0x26>
		data[0] = 0U;
    1e4c:	7018      	strb	r0, [r3, #0]
		data[1] = 0U;
    1e4e:	7058      	strb	r0, [r3, #1]
		*len = 2;
    1e50:	6022      	str	r2, [r4, #0]
		break;
    1e52:	e6b8      	b.n	1bc6 <usb_handle_standard_request+0x32>
    1e54:	20000f84 	.word	0x20000f84
    1e58:	2000040c 	.word	0x2000040c
    1e5c:	20000430 	.word	0x20000430
    1e60:	38e38e39 	.word	0x38e38e39

00001e64 <usb_handle_request.constprop.0>:
static bool usb_handle_request(struct usb_setup_packet *setup,
    1e64:	b508      	push	{r3, lr}
	usb_request_handler handler = usb_dev.req_handlers[type];
    1e66:	4809      	ldr	r0, [pc, #36]	; (1e8c <usb_handle_request.constprop.0+0x28>)
	uint32_t type = REQTYPE_GET_TYPE(setup->bmRequestType);
    1e68:	7803      	ldrb	r3, [r0, #0]
    1e6a:	f3c3 1341 	ubfx	r3, r3, #5, #2
	usb_request_handler handler = usb_dev.req_handlers[type];
    1e6e:	330a      	adds	r3, #10
    1e70:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (handler == NULL) {
    1e74:	b13b      	cbz	r3, 1e86 <usb_handle_request.constprop.0+0x22>
	if ((*handler)(setup, len, data) < 0) {
    1e76:	f100 0208 	add.w	r2, r0, #8
    1e7a:	f100 0110 	add.w	r1, r0, #16
    1e7e:	4798      	blx	r3
    1e80:	43c0      	mvns	r0, r0
    1e82:	0fc0      	lsrs	r0, r0, #31
}
    1e84:	bd08      	pop	{r3, pc}
		return false;
    1e86:	4618      	mov	r0, r3
    1e88:	e7fc      	b.n	1e84 <usb_handle_request.constprop.0+0x20>
    1e8a:	bf00      	nop
    1e8c:	20000f84 	.word	0x20000f84

00001e90 <usb_disable>:
{
    1e90:	b510      	push	{r4, lr}
	if (usb_dev.enabled != true) {
    1e92:	4c06      	ldr	r4, [pc, #24]	; (1eac <usb_disable+0x1c>)
    1e94:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
    1e98:	b130      	cbz	r0, 1ea8 <usb_disable+0x18>
	ret = usb_dc_detach();
    1e9a:	f001 fbb9 	bl	3610 <usb_dc_detach>
	if (ret < 0) {
    1e9e:	2800      	cmp	r0, #0
	usb_dev.enabled = false;
    1ea0:	bfa4      	itt	ge
    1ea2:	2000      	movge	r0, #0
    1ea4:	f884 00b8 	strbge.w	r0, [r4, #184]	; 0xb8
}
    1ea8:	bd10      	pop	{r4, pc}
    1eaa:	bf00      	nop
    1eac:	20000f84 	.word	0x20000f84

00001eb0 <usb_data_to_host>:
{
    1eb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (usb_dev.zlp_flag == false) {
    1eb2:	4c12      	ldr	r4, [pc, #72]	; (1efc <usb_data_to_host+0x4c>)
    1eb4:	7d23      	ldrb	r3, [r4, #20]
{
    1eb6:	4605      	mov	r5, r0
	if (usb_dev.zlp_flag == false) {
    1eb8:	b9bb      	cbnz	r3, 1eea <usb_data_to_host+0x3a>
		uint32_t chunk = usb_dev.data_buf_residue;
    1eba:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_IN_EP0, usb_dev.data_buf,
    1ebc:	68a1      	ldr	r1, [r4, #8]
		uint32_t chunk = usb_dev.data_buf_residue;
    1ebe:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_IN_EP0, usb_dev.data_buf,
    1ec0:	ab01      	add	r3, sp, #4
    1ec2:	2080      	movs	r0, #128	; 0x80
    1ec4:	f008 fa70 	bl	a3a8 <usb_write>
		usb_dev.data_buf += chunk;
    1ec8:	9901      	ldr	r1, [sp, #4]
    1eca:	68a2      	ldr	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    1ecc:	68e3      	ldr	r3, [r4, #12]
		usb_dev.data_buf += chunk;
    1ece:	440a      	add	r2, r1
		usb_dev.data_buf_residue -= chunk;
    1ed0:	1a5b      	subs	r3, r3, r1
		usb_dev.data_buf += chunk;
    1ed2:	60a2      	str	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    1ed4:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && len > usb_dev.data_buf_len) {
    1ed6:	b933      	cbnz	r3, 1ee6 <usb_data_to_host+0x36>
    1ed8:	6923      	ldr	r3, [r4, #16]
    1eda:	429d      	cmp	r5, r3
    1edc:	dd03      	ble.n	1ee6 <usb_data_to_host+0x36>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
    1ede:	069b      	lsls	r3, r3, #26
    1ee0:	d101      	bne.n	1ee6 <usb_data_to_host+0x36>
				usb_dev.zlp_flag = true;
    1ee2:	2301      	movs	r3, #1
    1ee4:	7523      	strb	r3, [r4, #20]
}
    1ee6:	b003      	add	sp, #12
    1ee8:	bd30      	pop	{r4, r5, pc}
		usb_dev.zlp_flag = false;
    1eea:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_IN_EP0, NULL, 0, NULL);
    1eec:	461a      	mov	r2, r3
    1eee:	4619      	mov	r1, r3
    1ef0:	2080      	movs	r0, #128	; 0x80
		usb_dev.zlp_flag = false;
    1ef2:	7523      	strb	r3, [r4, #20]
		usb_dc_ep_write(USB_CONTROL_IN_EP0, NULL, 0, NULL);
    1ef4:	f001 fcc0 	bl	3878 <usb_dc_ep_write>
}
    1ef8:	e7f5      	b.n	1ee6 <usb_data_to_host+0x36>
    1efa:	bf00      	nop
    1efc:	20000f84 	.word	0x20000f84

00001f00 <usb_handle_control_transfer>:
{
    1f00:	b530      	push	{r4, r5, lr}
    1f02:	b085      	sub	sp, #20
    1f04:	460b      	mov	r3, r1
	uint32_t chunk = 0U;
    1f06:	2100      	movs	r1, #0
{
    1f08:	4602      	mov	r2, r0
	uint32_t chunk = 0U;
    1f0a:	9101      	str	r1, [sp, #4]
	if (ep == USB_CONTROL_OUT_EP0 && ep_status == USB_DC_EP_SETUP) {
    1f0c:	2800      	cmp	r0, #0
    1f0e:	d157      	bne.n	1fc0 <usb_handle_control_transfer+0xc0>
    1f10:	2b00      	cmp	r3, #0
    1f12:	d133      	bne.n	1f7c <usb_handle_control_transfer+0x7c>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
    1f14:	2208      	movs	r2, #8
    1f16:	eb0d 0102 	add.w	r1, sp, r2
    1f1a:	f008 fced 	bl	a8f8 <usb_dc_ep_read>
    1f1e:	2800      	cmp	r0, #0
    1f20:	da04      	bge.n	1f2c <usb_handle_control_transfer+0x2c>
			usb_dc_ep_set_stall(USB_CONTROL_IN_EP0);
    1f22:	2080      	movs	r0, #128	; 0x80
				usb_dc_ep_set_stall(USB_CONTROL_OUT_EP0);
    1f24:	f001 fbf4 	bl	3710 <usb_dc_ep_set_stall>
}
    1f28:	b005      	add	sp, #20
    1f2a:	bd30      	pop	{r4, r5, pc}
		setup->bmRequestType = setup_raw.bmRequestType;
    1f2c:	4c29      	ldr	r4, [pc, #164]	; (1fd4 <usb_handle_control_transfer+0xd4>)
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
    1f2e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
		setup->bmRequestType = setup_raw.bmRequestType;
    1f32:	9902      	ldr	r1, [sp, #8]
    1f34:	6021      	str	r1, [r4, #0]
		if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
    1f36:	2b80      	cmp	r3, #128	; 0x80
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    1f38:	9903      	ldr	r1, [sp, #12]
		setup->bmRequestType = setup_raw.bmRequestType;
    1f3a:	f89d 2008 	ldrb.w	r2, [sp, #8]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    1f3e:	6061      	str	r1, [r4, #4]
		if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
    1f40:	d906      	bls.n	1f50 <usb_handle_control_transfer+0x50>
			if (REQTYPE_GET_DIR(setup->bmRequestType)
    1f42:	09d1      	lsrs	r1, r2, #7
    1f44:	d104      	bne.n	1f50 <usb_handle_control_transfer+0x50>
				usb_dc_ep_set_stall(USB_CONTROL_IN_EP0);
    1f46:	2080      	movs	r0, #128	; 0x80
    1f48:	f001 fbe2 	bl	3710 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_OUT_EP0);
    1f4c:	2000      	movs	r0, #0
    1f4e:	e7e9      	b.n	1f24 <usb_handle_control_transfer+0x24>
		usb_dev.data_buf = usb_dev.req_data;
    1f50:	4921      	ldr	r1, [pc, #132]	; (1fd8 <usb_handle_control_transfer+0xd8>)
		usb_dev.data_buf_len = setup->wLength;
    1f52:	6123      	str	r3, [r4, #16]
		usb_dev.data_buf_residue = setup->wLength;
    1f54:	e9c4 1302 	strd	r1, r3, [r4, #8]
		usb_dev.zlp_flag = false;
    1f58:	2100      	movs	r1, #0
    1f5a:	7521      	strb	r1, [r4, #20]
		if (setup->wLength &&
    1f5c:	b10b      	cbz	r3, 1f62 <usb_handle_control_transfer+0x62>
    1f5e:	09d3      	lsrs	r3, r2, #7
    1f60:	d0e2      	beq.n	1f28 <usb_handle_control_transfer+0x28>
		if (!usb_handle_request(setup,
    1f62:	f7ff ff7f 	bl	1e64 <usb_handle_request.constprop.0>
    1f66:	2800      	cmp	r0, #0
    1f68:	d0db      	beq.n	1f22 <usb_handle_control_transfer+0x22>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
    1f6a:	88e0      	ldrh	r0, [r4, #6]
    1f6c:	6923      	ldr	r3, [r4, #16]
    1f6e:	4283      	cmp	r3, r0
    1f70:	bfd4      	ite	le
    1f72:	60e3      	strle	r3, [r4, #12]
    1f74:	60e0      	strgt	r0, [r4, #12]
			usb_data_to_host(setup->wLength);
    1f76:	f7ff ff9b 	bl	1eb0 <usb_data_to_host>
		__ASSERT_NO_MSG(false);
    1f7a:	e7d5      	b.n	1f28 <usb_handle_control_transfer+0x28>
		if (usb_dev.data_buf_residue <= 0) {
    1f7c:	4c15      	ldr	r4, [pc, #84]	; (1fd4 <usb_handle_control_transfer+0xd4>)
    1f7e:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
    1f82:	2d00      	cmp	r5, #0
			if (usb_dc_ep_read(USB_CONTROL_OUT_EP0,
    1f84:	ab01      	add	r3, sp, #4
		if (usb_dev.data_buf_residue <= 0) {
    1f86:	dc04      	bgt.n	1f92 <usb_handle_control_transfer+0x92>
			if (usb_dc_ep_read(USB_CONTROL_OUT_EP0,
    1f88:	f008 fcb6 	bl	a8f8 <usb_dc_ep_read>
    1f8c:	2800      	cmp	r0, #0
    1f8e:	dacb      	bge.n	1f28 <usb_handle_control_transfer+0x28>
    1f90:	e7c7      	b.n	1f22 <usb_handle_control_transfer+0x22>
		if (usb_dc_ep_read(USB_CONTROL_OUT_EP0,
    1f92:	462a      	mov	r2, r5
    1f94:	f008 fcb0 	bl	a8f8 <usb_dc_ep_read>
    1f98:	2800      	cmp	r0, #0
    1f9a:	dbd4      	blt.n	1f46 <usb_handle_control_transfer+0x46>
		usb_dev.data_buf += chunk;
    1f9c:	9901      	ldr	r1, [sp, #4]
    1f9e:	68a2      	ldr	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    1fa0:	68e3      	ldr	r3, [r4, #12]
		usb_dev.data_buf += chunk;
    1fa2:	440a      	add	r2, r1
		usb_dev.data_buf_residue -= chunk;
    1fa4:	1a5b      	subs	r3, r3, r1
		usb_dev.data_buf += chunk;
    1fa6:	60a2      	str	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    1fa8:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
    1faa:	2b00      	cmp	r3, #0
    1fac:	d1bc      	bne.n	1f28 <usb_handle_control_transfer+0x28>
			usb_dev.data_buf = usb_dev.req_data;
    1fae:	f104 0338 	add.w	r3, r4, #56	; 0x38
    1fb2:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
    1fb4:	f7ff ff56 	bl	1e64 <usb_handle_request.constprop.0>
    1fb8:	2800      	cmp	r0, #0
    1fba:	d0b2      	beq.n	1f22 <usb_handle_control_transfer+0x22>
			usb_data_to_host(setup->wLength);
    1fbc:	88e0      	ldrh	r0, [r4, #6]
    1fbe:	e7da      	b.n	1f76 <usb_handle_control_transfer+0x76>
	} else if (ep == USB_CONTROL_IN_EP0) {
    1fc0:	2880      	cmp	r0, #128	; 0x80
    1fc2:	d1b1      	bne.n	1f28 <usb_handle_control_transfer+0x28>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
    1fc4:	4b03      	ldr	r3, [pc, #12]	; (1fd4 <usb_handle_control_transfer+0xd4>)
    1fc6:	68da      	ldr	r2, [r3, #12]
    1fc8:	b912      	cbnz	r2, 1fd0 <usb_handle_control_transfer+0xd0>
    1fca:	7d1a      	ldrb	r2, [r3, #20]
    1fcc:	2a00      	cmp	r2, #0
    1fce:	d0ab      	beq.n	1f28 <usb_handle_control_transfer+0x28>
			usb_data_to_host(setup->wLength);
    1fd0:	88d8      	ldrh	r0, [r3, #6]
    1fd2:	e7d0      	b.n	1f76 <usb_handle_control_transfer+0x76>
    1fd4:	20000f84 	.word	0x20000f84
    1fd8:	20000fbc 	.word	0x20000fbc

00001fdc <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
    1fdc:	4b05      	ldr	r3, [pc, #20]	; (1ff4 <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
    1fde:	4a06      	ldr	r2, [pc, #24]	; (1ff8 <usb_set_config+0x1c>)
    1fe0:	629a      	str	r2, [r3, #40]	; 0x28
    1fe2:	4a06      	ldr	r2, [pc, #24]	; (1ffc <usb_set_config+0x20>)
    1fe4:	62da      	str	r2, [r3, #44]	; 0x2c
    1fe6:	4a06      	ldr	r2, [pc, #24]	; (2000 <usb_set_config+0x24>)
    1fe8:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
    1fea:	4a06      	ldr	r2, [pc, #24]	; (2004 <usb_set_config+0x28>)
	usb_dev.descriptors = usb_descriptors;
    1fec:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.custom_req_handler = handler;
    1fee:	619a      	str	r2, [r3, #24]

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);

	return 0;
}
    1ff0:	2000      	movs	r0, #0
    1ff2:	4770      	bx	lr
    1ff4:	20000f84 	.word	0x20000f84
    1ff8:	00001b95 	.word	0x00001b95
    1ffc:	00001991 	.word	0x00001991
    2000:	00001a45 	.word	0x00001a45
    2004:	000019e5 	.word	0x000019e5

00002008 <usb_device_init>:
 */
static int usb_device_init(const struct device *dev)
{
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
    2008:	4b07      	ldr	r3, [pc, #28]	; (2028 <usb_device_init+0x20>)
{
    200a:	b510      	push	{r4, lr}
	if (usb_dev.enabled == true) {
    200c:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
    2010:	b924      	cbnz	r4, 201c <usb_device_init+0x14>
		return 0;
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
    2012:	f000 f9af 	bl	2374 <usb_get_device_descriptor>
	if (!device_descriptor) {
    2016:	b118      	cbz	r0, 2020 <usb_device_init+0x18>
		LOG_ERR("Failed to configure USB device stack");
		return -1;
	}

	usb_set_config(device_descriptor);
    2018:	f7ff ffe0 	bl	1fdc <usb_set_config>
		return 0;
    201c:	2000      	movs	r0, #0

	return 0;
}
    201e:	bd10      	pop	{r4, pc}
		return -1;
    2020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2024:	e7fb      	b.n	201e <usb_device_init+0x16>
    2026:	bf00      	nop
    2028:	20000f84 	.word	0x20000f84

0000202c <usb_enable>:
{
    202c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    2030:	4604      	mov	r4, r0
	if (usb_dev.enabled == true) {
    2032:	4d37      	ldr	r5, [pc, #220]	; (2110 <usb_enable+0xe4>)
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    2034:	4837      	ldr	r0, [pc, #220]	; (2114 <usb_enable+0xe8>)
    2036:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    203a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    203e:	f006 f877 	bl	8130 <z_impl_k_mutex_lock>
    2042:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
    2046:	2e00      	cmp	r6, #0
    2048:	d142      	bne.n	20d0 <usb_enable+0xa4>
	usb_dev.status_callback = cb;
    204a:	4833      	ldr	r0, [pc, #204]	; (2118 <usb_enable+0xec>)
	usb_dev.user_status_callback = status_cb;
    204c:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
    204e:	61e8      	str	r0, [r5, #28]
	usb_dc_set_status_callback(forward_status_cb);
    2050:	f001 fd28 	bl	3aa4 <usb_dc_set_status_callback>
	ret = usb_dc_attach();
    2054:	f001 fa9e 	bl	3594 <usb_dc_attach>
	if (ret < 0) {
    2058:	1e04      	subs	r4, r0, #0
    205a:	db3a      	blt.n	20d2 <usb_enable+0xa6>
	ret = usb_transfer_init();
    205c:	f000 fb12 	bl	2684 <usb_transfer_init>
	if (ret < 0) {
    2060:	1e04      	subs	r4, r0, #0
    2062:	db36      	blt.n	20d2 <usb_enable+0xa6>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    2064:	2340      	movs	r3, #64	; 0x40
	ret = usb_dc_ep_configure(&ep0_cfg);
    2066:	4668      	mov	r0, sp
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    2068:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
    206c:	f88d 6004 	strb.w	r6, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_OUT_EP0;
    2070:	f88d 6000 	strb.w	r6, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    2074:	f001 fb2a 	bl	36cc <usb_dc_ep_configure>
	if (ret < 0) {
    2078:	1e04      	subs	r4, r0, #0
    207a:	db2a      	blt.n	20d2 <usb_enable+0xa6>
	ep0_cfg.ep_addr = USB_CONTROL_IN_EP0;
    207c:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
    207e:	4668      	mov	r0, sp
	ep0_cfg.ep_addr = USB_CONTROL_IN_EP0;
    2080:	f88d 7000 	strb.w	r7, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    2084:	f001 fb22 	bl	36cc <usb_dc_ep_configure>
	if (ret < 0) {
    2088:	1e04      	subs	r4, r0, #0
    208a:	db22      	blt.n	20d2 <usb_enable+0xa6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_OUT_EP0,
    208c:	4923      	ldr	r1, [pc, #140]	; (211c <usb_enable+0xf0>)
    208e:	4630      	mov	r0, r6
    2090:	f001 fcf4 	bl	3a7c <usb_dc_ep_set_callback>
	if (ret < 0) {
    2094:	1e04      	subs	r4, r0, #0
    2096:	db1c      	blt.n	20d2 <usb_enable+0xa6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_IN_EP0,
    2098:	4920      	ldr	r1, [pc, #128]	; (211c <usb_enable+0xf0>)
    209a:	4638      	mov	r0, r7
    209c:	f001 fcee 	bl	3a7c <usb_dc_ep_set_callback>
	if (ret < 0) {
    20a0:	1e04      	subs	r4, r0, #0
    20a2:	db16      	blt.n	20d2 <usb_enable+0xa6>
	size_t size = (__usb_data_end - __usb_data_start);
    20a4:	4c1e      	ldr	r4, [pc, #120]	; (2120 <usb_enable+0xf4>)
    20a6:	4b1f      	ldr	r3, [pc, #124]	; (2124 <usb_enable+0xf8>)
    20a8:	4a1f      	ldr	r2, [pc, #124]	; (2128 <usb_enable+0xfc>)
    20aa:	1b1b      	subs	r3, r3, r4
    20ac:	109b      	asrs	r3, r3, #2
    20ae:	fb02 f903 	mul.w	r9, r2, r3
	for (size_t i = 0; i < size; i++) {
    20b2:	45b1      	cmp	r9, r6
    20b4:	d114      	bne.n	20e0 <usb_enable+0xb4>
	ret = usb_dc_ep_enable(USB_CONTROL_OUT_EP0);
    20b6:	2000      	movs	r0, #0
    20b8:	f001 fb8e 	bl	37d8 <usb_dc_ep_enable>
	if (ret < 0) {
    20bc:	1e04      	subs	r4, r0, #0
    20be:	db08      	blt.n	20d2 <usb_enable+0xa6>
	ret = usb_dc_ep_enable(USB_CONTROL_IN_EP0);
    20c0:	2080      	movs	r0, #128	; 0x80
    20c2:	f001 fb89 	bl	37d8 <usb_dc_ep_enable>
	if (ret < 0) {
    20c6:	1e04      	subs	r4, r0, #0
    20c8:	db03      	blt.n	20d2 <usb_enable+0xa6>
	usb_dev.enabled = true;
    20ca:	2301      	movs	r3, #1
    20cc:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
		ret = 0;
    20d0:	2400      	movs	r4, #0
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    20d2:	4810      	ldr	r0, [pc, #64]	; (2114 <usb_enable+0xe8>)
    20d4:	f006 f8a4 	bl	8220 <z_impl_k_mutex_unlock>
}
    20d8:	4620      	mov	r0, r4
    20da:	b003      	add	sp, #12
    20dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		ep_data = __usb_data_start[i].endpoint;
    20e0:	f8d4 8020 	ldr.w	r8, [r4, #32]
		for (uint8_t n = 0; n < __usb_data_start[i].num_endpoints; n++) {
    20e4:	2700      	movs	r7, #0
    20e6:	7f23      	ldrb	r3, [r4, #28]
    20e8:	b2fa      	uxtb	r2, r7
    20ea:	4293      	cmp	r3, r2
    20ec:	d802      	bhi.n	20f4 <usb_enable+0xc8>
	for (size_t i = 0; i < size; i++) {
    20ee:	3601      	adds	r6, #1
    20f0:	3424      	adds	r4, #36	; 0x24
    20f2:	e7de      	b.n	20b2 <usb_enable+0x86>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
    20f4:	eb08 03c2 	add.w	r3, r8, r2, lsl #3
    20f8:	f858 1032 	ldr.w	r1, [r8, r2, lsl #3]
    20fc:	7918      	ldrb	r0, [r3, #4]
    20fe:	f001 fcbd 	bl	3a7c <usb_dc_ep_set_callback>
    2102:	3701      	adds	r7, #1
    2104:	2800      	cmp	r0, #0
    2106:	d0ee      	beq.n	20e6 <usb_enable+0xba>
    2108:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    210c:	e7e1      	b.n	20d2 <usb_enable+0xa6>
    210e:	bf00      	nop
    2110:	20000f84 	.word	0x20000f84
    2114:	20000328 	.word	0x20000328
    2118:	00001ae9 	.word	0x00001ae9
    211c:	00001f01 	.word	0x00001f01
    2120:	2000040c 	.word	0x2000040c
    2124:	20000430 	.word	0x20000430
    2128:	38e38e39 	.word	0x38e38e39

0000212c <usb_update_sn_string_descriptor>:
 * Hardware Information Driver (HWINFO). User can implement own variant
 * of this function. Please note that the length of the new Serial Number
 * descriptor may not exceed the length of the CONFIG_USB_DEVICE_SN.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
    212c:	b530      	push	{r4, r5, lr}
	uint8_t hwid[sizeof(CONFIG_USB_DEVICE_SN) / 2];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
    212e:	4b1c      	ldr	r3, [pc, #112]	; (21a0 <usb_update_sn_string_descriptor+0x74>)
{
    2130:	b089      	sub	sp, #36	; 0x24
	const char hex[] = "0123456789ABCDEF";
    2132:	aa03      	add	r2, sp, #12
    2134:	f103 0510 	add.w	r5, r3, #16
    2138:	6818      	ldr	r0, [r3, #0]
    213a:	6859      	ldr	r1, [r3, #4]
    213c:	4614      	mov	r4, r2
    213e:	c403      	stmia	r4!, {r0, r1}
    2140:	3308      	adds	r3, #8
    2142:	42ab      	cmp	r3, r5
    2144:	4622      	mov	r2, r4
    2146:	d1f7      	bne.n	2138 <usb_update_sn_string_descriptor+0xc>
    2148:	781b      	ldrb	r3, [r3, #0]
    214a:	7023      	strb	r3, [r4, #0]

	memset(hwid, 0, sizeof(hwid));
    214c:	2208      	movs	r2, #8
    214e:	2100      	movs	r1, #0
    2150:	a801      	add	r0, sp, #4
    2152:	f008 fd9e 	bl	ac92 <memset>
	memset(sn, 0, sizeof(sn));
    2156:	2212      	movs	r2, #18
    2158:	2100      	movs	r1, #0
    215a:	4812      	ldr	r0, [pc, #72]	; (21a4 <usb_update_sn_string_descriptor+0x78>)
    215c:	f008 fd99 	bl	ac92 <memset>
	if (z_syscall_trap()) {
		return (ssize_t) arch_syscall_invoke2(*(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    2160:	2108      	movs	r1, #8
    2162:	a801      	add	r0, sp, #4
    2164:	f008 fbd7 	bl	a916 <z_impl_hwinfo_get_device_id>

	if (hwinfo_get_device_id(hwid, sizeof(hwid)) > 0) {
    2168:	2800      	cmp	r0, #0
    216a:	dd16      	ble.n	219a <usb_update_sn_string_descriptor+0x6e>
    216c:	490d      	ldr	r1, [pc, #52]	; (21a4 <usb_update_sn_string_descriptor+0x78>)
    216e:	aa01      	add	r2, sp, #4
		LOG_HEXDUMP_DBG(hwid, sizeof(hwid), "Serial Number");
		for (int i = 0; i < sizeof(hwid); i++) {
    2170:	2000      	movs	r0, #0
			sn[i * 2] = hex[hwid[i] >> 4];
    2172:	f812 3b01 	ldrb.w	r3, [r2], #1
    2176:	ac08      	add	r4, sp, #32
    2178:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i] & 0xF];
    217c:	f003 030f 	and.w	r3, r3, #15
			sn[i * 2] = hex[hwid[i] >> 4];
    2180:	f814 4c14 	ldrb.w	r4, [r4, #-20]
    2184:	700c      	strb	r4, [r1, #0]
			sn[i * 2 + 1] = hex[hwid[i] & 0xF];
    2186:	ac08      	add	r4, sp, #32
    2188:	4423      	add	r3, r4
		for (int i = 0; i < sizeof(hwid); i++) {
    218a:	3001      	adds	r0, #1
			sn[i * 2 + 1] = hex[hwid[i] & 0xF];
    218c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
    2190:	704b      	strb	r3, [r1, #1]
		for (int i = 0; i < sizeof(hwid); i++) {
    2192:	2808      	cmp	r0, #8
    2194:	f101 0102 	add.w	r1, r1, #2
    2198:	d1eb      	bne.n	2172 <usb_update_sn_string_descriptor+0x46>
		}
	}

	return sn;
}
    219a:	4802      	ldr	r0, [pc, #8]	; (21a4 <usb_update_sn_string_descriptor+0x78>)
    219c:	b009      	add	sp, #36	; 0x24
    219e:	bd30      	pop	{r4, r5, pc}
    21a0:	0000ded7 	.word	0x0000ded7
    21a4:	2000448e 	.word	0x2000448e

000021a8 <usb_fix_descriptor>:
 * Restrictions:
 * - just one device configuration (there is only one)
 * - string descriptor must be present
 */
static int usb_fix_descriptor(struct usb_desc_header *head)
{
    21a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t length = (__usb_data_end - __usb_data_start);
    21ac:	4a6c      	ldr	r2, [pc, #432]	; (2360 <usb_fix_descriptor+0x1b8>)
    21ae:	4b6d      	ldr	r3, [pc, #436]	; (2364 <usb_fix_descriptor+0x1bc>)
    21b0:	496d      	ldr	r1, [pc, #436]	; (2368 <usb_fix_descriptor+0x1c0>)
    21b2:	1a9b      	subs	r3, r3, r2
{
    21b4:	b087      	sub	sp, #28
	size_t length = (__usb_data_end - __usb_data_start);
    21b6:	109b      	asrs	r3, r3, #2
	struct usb_cfg_descriptor *cfg_descr = NULL;
	struct usb_if_descriptor *if_descr = NULL;
	struct usb_cfg_data *cfg_data = NULL;
	struct usb_ep_descriptor *ep_descr = NULL;
	uint8_t numof_ifaces = 0U;
	uint8_t str_descr_idx = 0U;
    21b8:	2600      	movs	r6, #0
	size_t length = (__usb_data_end - __usb_data_start);
    21ba:	434b      	muls	r3, r1
{
    21bc:	4604      	mov	r4, r0
	size_t length = (__usb_data_end - __usb_data_start);
    21be:	9301      	str	r3, [sp, #4]
	uint32_t requested_ep = BIT(16) | BIT(0);
    21c0:	f04f 1a01 	mov.w	sl, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
    21c4:	46b0      	mov	r8, r6
	struct usb_cfg_data *cfg_data = NULL;
    21c6:	4637      	mov	r7, r6
	struct usb_cfg_descriptor *cfg_descr = NULL;
    21c8:	46b1      	mov	r9, r6
    21ca:	4693      	mov	fp, r2

	while (head->bLength != 0U) {
    21cc:	7823      	ldrb	r3, [r4, #0]
    21ce:	b93b      	cbnz	r3, 21e0 <usb_fix_descriptor+0x38>

		/* Move to next descriptor */
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
	}

	if ((head + 1) != __usb_descriptor_end) {
    21d0:	4a66      	ldr	r2, [pc, #408]	; (236c <usb_fix_descriptor+0x1c4>)
    21d2:	1ca0      	adds	r0, r4, #2
    21d4:	4290      	cmp	r0, r2
    21d6:	f000 80c0 	beq.w	235a <usb_fix_descriptor+0x1b2>
		LOG_DBG("try to fix next descriptor at %p", head + 1);
		return usb_fix_descriptor(head + 1);
    21da:	f7ff ffe5 	bl	21a8 <usb_fix_descriptor>
    21de:	e017      	b.n	2210 <usb_fix_descriptor+0x68>
		switch (head->bDescriptorType) {
    21e0:	7863      	ldrb	r3, [r4, #1]
    21e2:	2b05      	cmp	r3, #5
    21e4:	d805      	bhi.n	21f2 <usb_fix_descriptor+0x4a>
    21e6:	e8df f003 	tbb	[pc, r3]
    21ea:	047f      	.short	0x047f
    21ec:	2b077f03 	.word	0x2b077f03
    21f0:	46a1      	mov	r9, r4
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
    21f2:	7823      	ldrb	r3, [r4, #0]
    21f4:	441c      	add	r4, r3
    21f6:	e7e9      	b.n	21cc <usb_fix_descriptor+0x24>
			if (if_descr->bAlternateSetting) {
    21f8:	78e3      	ldrb	r3, [r4, #3]
    21fa:	2b00      	cmp	r3, #0
    21fc:	d1f9      	bne.n	21f2 <usb_fix_descriptor+0x4a>
			if (if_descr->bInterfaceNumber == 0U) {
    21fe:	78a3      	ldrb	r3, [r4, #2]
    2200:	b99b      	cbnz	r3, 222a <usb_fix_descriptor+0x82>
    2202:	4a57      	ldr	r2, [pc, #348]	; (2360 <usb_fix_descriptor+0x1b8>)
	for (size_t i = 0; i < length; i++) {
    2204:	461f      	mov	r7, r3
    2206:	9b01      	ldr	r3, [sp, #4]
    2208:	42bb      	cmp	r3, r7
    220a:	d104      	bne.n	2216 <usb_fix_descriptor+0x6e>
					return -1;
    220c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	return 0;
}
    2210:	b007      	add	sp, #28
    2212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (__usb_data_start[i].interface_descriptor == iface) {
    2216:	6853      	ldr	r3, [r2, #4]
    2218:	429c      	cmp	r4, r3
    221a:	f102 0224 	add.w	r2, r2, #36	; 0x24
    221e:	d109      	bne.n	2234 <usb_fix_descriptor+0x8c>
			return &__usb_data_start[i];
    2220:	2324      	movs	r3, #36	; 0x24
    2222:	fb03 b707 	mla	r7, r3, r7, fp
				if (cfg_data->interface_config) {
    2226:	68bb      	ldr	r3, [r7, #8]
    2228:	b933      	cbnz	r3, 2238 <usb_fix_descriptor+0x90>
			numof_ifaces++;
    222a:	f108 0801 	add.w	r8, r8, #1
    222e:	fa5f f888 	uxtb.w	r8, r8
			break;
    2232:	e7de      	b.n	21f2 <usb_fix_descriptor+0x4a>
	for (size_t i = 0; i < length; i++) {
    2234:	3701      	adds	r7, #1
    2236:	e7e6      	b.n	2206 <usb_fix_descriptor+0x5e>
					cfg_data->interface_config(head,
    2238:	4641      	mov	r1, r8
    223a:	4620      	mov	r0, r4
    223c:	4798      	blx	r3
    223e:	e7f4      	b.n	222a <usb_fix_descriptor+0x82>
			if (!cfg_data) {
    2240:	2f00      	cmp	r7, #0
    2242:	d0e3      	beq.n	220c <usb_fix_descriptor+0x64>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    2244:	2300      	movs	r3, #0
    2246:	2101      	movs	r1, #1
    2248:	7f3a      	ldrb	r2, [r7, #28]
    224a:	4293      	cmp	r3, r2
    224c:	d2de      	bcs.n	220c <usb_fix_descriptor+0x64>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
    224e:	6a3a      	ldr	r2, [r7, #32]
    2250:	78a5      	ldrb	r5, [r4, #2]
    2252:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    2256:	7910      	ldrb	r0, [r2, #4]
    2258:	4285      	cmp	r5, r0
    225a:	d001      	beq.n	2260 <usb_fix_descriptor+0xb8>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    225c:	3301      	adds	r3, #1
    225e:	e7f3      	b.n	2248 <usb_fix_descriptor+0xa0>
    2260:	2501      	movs	r5, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    2262:	f894 c003 	ldrb.w	ip, [r4, #3]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    2266:	f894 e005 	ldrb.w	lr, [r4, #5]
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    226a:	f00c 0c03 	and.w	ip, ip, #3
    226e:	f88d c014 	strb.w	ip, [sp, #20]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    2272:	f894 c004 	ldrb.w	ip, [r4, #4]
    2276:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
    227a:	f8ad c012 	strh.w	ip, [sp, #18]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    227e:	f994 c002 	ldrsb.w	ip, [r4, #2]
    2282:	f1bc 0f00 	cmp.w	ip, #0
    2286:	b2e8      	uxtb	r0, r5
    2288:	da25      	bge.n	22d6 <usb_fix_descriptor+0x12e>
				if ((*requested_ep & (1U << (idx + 16U)))) {
    228a:	f105 0c10 	add.w	ip, r5, #16
    228e:	fa01 fc0c 	lsl.w	ip, r1, ip
    2292:	ea1c 0f0a 	tst.w	ip, sl
    2296:	d123      	bne.n	22e0 <usb_fix_descriptor+0x138>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
    2298:	f060 007f 	orn	r0, r0, #127	; 0x7f
				ep_cfg.ep_addr = idx;
    229c:	f88d 0010 	strb.w	r0, [sp, #16]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
    22a0:	a804      	add	r0, sp, #16
    22a2:	e9cd 3202 	strd	r3, r2, [sp, #8]
    22a6:	f008 fb0f 	bl	a8c8 <usb_dc_ep_check_cap>
    22aa:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
    22ae:	2101      	movs	r1, #1
    22b0:	b9b0      	cbnz	r0, 22e0 <usb_fix_descriptor+0x138>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
    22b2:	f89d 3010 	ldrb.w	r3, [sp, #16]
    22b6:	70a3      	strb	r3, [r4, #2]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    22b8:	f013 0f80 	tst.w	r3, #128	; 0x80
				ep_data[i].ep_addr = ep_cfg.ep_addr;
    22bc:	7113      	strb	r3, [r2, #4]
					*requested_ep |= (1U << (idx + 16U));
    22be:	bf18      	it	ne
    22c0:	3510      	addne	r5, #16
    22c2:	460b      	mov	r3, r1
    22c4:	bf15      	itete	ne
    22c6:	40ab      	lslne	r3, r5
					*requested_ep |= (1U << idx);
    22c8:	fa03 f505 	lsleq.w	r5, r3, r5
					*requested_ep |= (1U << (idx + 16U));
    22cc:	ea4a 0a03 	orrne.w	sl, sl, r3
					*requested_ep |= (1U << idx);
    22d0:	ea4a 0a05 	orreq.w	sl, sl, r5
				return 0;
    22d4:	e78d      	b.n	21f2 <usb_fix_descriptor+0x4a>
				if ((*requested_ep & (1U << (idx)))) {
    22d6:	fa01 fc05 	lsl.w	ip, r1, r5
    22da:	ea1c 0f0a 	tst.w	ip, sl
    22de:	d0dd      	beq.n	229c <usb_fix_descriptor+0xf4>
		for (uint8_t idx = 1; idx < 16U; idx++) {
    22e0:	3501      	adds	r5, #1
    22e2:	2d10      	cmp	r5, #16
    22e4:	d1bd      	bne.n	2262 <usb_fix_descriptor+0xba>
    22e6:	e7b9      	b.n	225c <usb_fix_descriptor+0xb4>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
    22e8:	2e03      	cmp	r6, #3
    22ea:	d11e      	bne.n	232a <usb_fix_descriptor+0x182>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
    22ec:	f7ff ff1e 	bl	212c <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
    22f0:	4605      	mov	r5, r0
    22f2:	b168      	cbz	r0, 2310 <usb_fix_descriptor+0x168>
	runtime_sn_len = strlen(runtime_sn);
    22f4:	f008 fc7f 	bl	abf6 <strlen>
	if (!runtime_sn_len) {
    22f8:	9002      	str	r0, [sp, #8]
    22fa:	b148      	cbz	r0, 2310 <usb_fix_descriptor+0x168>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
    22fc:	481c      	ldr	r0, [pc, #112]	; (2370 <usb_fix_descriptor+0x1c8>)
    22fe:	f008 fc7a 	bl	abf6 <strlen>
	if (runtime_sn_len != default_sn_len) {
    2302:	9a02      	ldr	r2, [sp, #8]
    2304:	4282      	cmp	r2, r0
    2306:	d103      	bne.n	2310 <usb_fix_descriptor+0x168>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
    2308:	4629      	mov	r1, r5
    230a:	1ca0      	adds	r0, r4, #2
    230c:	f008 fc96 	bl	ac3c <memcpy>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
    2310:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
    2312:	f06f 0102 	mvn.w	r1, #2
    2316:	18e2      	adds	r2, r4, r3
    2318:	1b09      	subs	r1, r1, r4
    231a:	eb04 0353 	add.w	r3, r4, r3, lsr #1
		buf[i] = 0U;
    231e:	2000      	movs	r0, #0
	for (int i = idx_max; i >= 0; i -= 2) {
    2320:	42d1      	cmn	r1, r2
    2322:	d513      	bpl.n	234c <usb_fix_descriptor+0x1a4>
			str_descr_idx += 1U;
    2324:	3601      	adds	r6, #1
    2326:	b2f6      	uxtb	r6, r6
			break;
    2328:	e763      	b.n	21f2 <usb_fix_descriptor+0x4a>
			if (str_descr_idx) {
    232a:	2e00      	cmp	r6, #0
    232c:	d1f0      	bne.n	2310 <usb_fix_descriptor+0x168>
				if (!cfg_descr) {
    232e:	f1b9 0f00 	cmp.w	r9, #0
    2332:	f43f af6b 	beq.w	220c <usb_fix_descriptor+0x64>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
    2336:	eba4 0309 	sub.w	r3, r4, r9
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    233a:	f889 3002 	strb.w	r3, [r9, #2]
	dst[1] = val >> 8;
    233e:	f3c3 2307 	ubfx	r3, r3, #8, #8
    2342:	f889 3003 	strb.w	r3, [r9, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
    2346:	f889 8004 	strb.w	r8, [r9, #4]
    234a:	e7eb      	b.n	2324 <usb_fix_descriptor+0x17c>
		buf[i] = 0U;
    234c:	f802 0c01 	strb.w	r0, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
    2350:	f813 5901 	ldrb.w	r5, [r3], #-1
    2354:	f802 5d02 	strb.w	r5, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
    2358:	e7e2      	b.n	2320 <usb_fix_descriptor+0x178>
	return 0;
    235a:	4618      	mov	r0, r3
    235c:	e758      	b.n	2210 <usb_fix_descriptor+0x68>
    235e:	bf00      	nop
    2360:	2000040c 	.word	0x2000040c
    2364:	20000430 	.word	0x20000430
    2368:	38e38e39 	.word	0x38e38e39
    236c:	2000040b 	.word	0x2000040b
    2370:	0000ded7 	.word	0x0000ded7

00002374 <usb_get_device_descriptor>:


uint8_t *usb_get_device_descriptor(void)
{
    2374:	b508      	push	{r3, lr}
	LOG_DBG("__usb_descriptor_start %p", __usb_descriptor_start);
	LOG_DBG("__usb_descriptor_end %p", __usb_descriptor_end);

	if (usb_fix_descriptor(__usb_descriptor_start)) {
    2376:	4804      	ldr	r0, [pc, #16]	; (2388 <usb_get_device_descriptor+0x14>)
    2378:	f7ff ff16 	bl	21a8 <usb_fix_descriptor>
    237c:	2800      	cmp	r0, #0
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
	}

	return (uint8_t *) __usb_descriptor_start;
}
    237e:	4802      	ldr	r0, [pc, #8]	; (2388 <usb_get_device_descriptor+0x14>)
    2380:	bf18      	it	ne
    2382:	2000      	movne	r0, #0
    2384:	bd08      	pop	{r3, pc}
    2386:	bf00      	nop
    2388:	2000034c 	.word	0x2000034c

0000238c <usb_ep_get_transfer>:
/** Max number of parallel transfers */
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
    238c:	b510      	push	{r4, lr}
    238e:	4b09      	ldr	r3, [pc, #36]	; (23b4 <usb_ep_get_transfer+0x28>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2390:	2100      	movs	r1, #0
    2392:	461a      	mov	r2, r3
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
    2394:	781c      	ldrb	r4, [r3, #0]
    2396:	4284      	cmp	r4, r0
    2398:	d104      	bne.n	23a4 <usb_ep_get_transfer+0x18>
    239a:	685c      	ldr	r4, [r3, #4]
    239c:	b114      	cbz	r4, 23a4 <usb_ep_get_transfer+0x18>
			return &ut_data[i];
    239e:	eb02 1081 	add.w	r0, r2, r1, lsl #6
		}
	}

	return NULL;
}
    23a2:	bd10      	pop	{r4, pc}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    23a4:	3101      	adds	r1, #1
    23a6:	2904      	cmp	r1, #4
    23a8:	f103 0340 	add.w	r3, r3, #64	; 0x40
    23ac:	d1f2      	bne.n	2394 <usb_ep_get_transfer+0x8>
	return NULL;
    23ae:	2000      	movs	r0, #0
    23b0:	e7f7      	b.n	23a2 <usb_ep_get_transfer+0x16>
    23b2:	bf00      	nop
    23b4:	20001040 	.word	0x20001040

000023b8 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
    23b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
    23bc:	f850 3c28 	ldr.w	r3, [r0, #-40]
	ep = trans->ep;
    23c0:	f810 5c2c 	ldrb.w	r5, [r0, #-44]
	if (trans->status != -EBUSY) {
    23c4:	3310      	adds	r3, #16
{
    23c6:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
    23c8:	d110      	bne.n	23ec <usb_transfer_work+0x34>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
    23ca:	6903      	ldr	r3, [r0, #16]
    23cc:	f850 2c20 	ldr.w	r2, [r0, #-32]
    23d0:	0799      	lsls	r1, r3, #30
    23d2:	d53c      	bpl.n	244e <usb_transfer_work+0x96>
		if (!trans->bsize) {
    23d4:	bb02      	cbnz	r2, 2418 <usb_transfer_work+0x60>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
    23d6:	f013 0304 	ands.w	r3, r3, #4
    23da:	d104      	bne.n	23e6 <usb_transfer_work+0x2e>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
    23dc:	461a      	mov	r2, r3
    23de:	4619      	mov	r1, r3
    23e0:	4628      	mov	r0, r5
    23e2:	f007 ffe1 	bl	a3a8 <usb_write>
			}
			trans->status = 0;
    23e6:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
    23e8:	f844 3c28 	str.w	r3, [r4, #-40]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
    23ec:	f854 3c28 	ldr.w	r3, [r4, #-40]
    23f0:	3310      	adds	r3, #16
    23f2:	d00e      	beq.n	2412 <usb_transfer_work+0x5a>
    23f4:	f854 6c18 	ldr.w	r6, [r4, #-24]
    23f8:	b15e      	cbz	r6, 2412 <usb_transfer_work+0x5a>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
    23fa:	f854 7c1c 	ldr.w	r7, [r4, #-28]
		void *priv = trans->priv;
    23fe:	f854 8c14 	ldr.w	r8, [r4, #-20]

		if (k_is_in_isr()) {
    2402:	f00a fe3a 	bl	d07a <k_is_in_isr>
    2406:	2800      	cmp	r0, #0
    2408:	d04c      	beq.n	24a4 <usb_transfer_work+0xec>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    240a:	482e      	ldr	r0, [pc, #184]	; (24c4 <usb_transfer_work+0x10c>)
    240c:	4621      	mov	r1, r4
    240e:	f00a fee0 	bl	d1d2 <k_work_submit_to_queue>
		/* Transfer completion callback */
		if (trans->status != -ECANCELED) {
			cb(ep, tsize, priv);
		}
	}
}
    2412:	b002      	add	sp, #8
    2414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
    2418:	f850 1c24 	ldr.w	r1, [r0, #-36]
    241c:	ab01      	add	r3, sp, #4
    241e:	4628      	mov	r0, r5
    2420:	f007 ffc2 	bl	a3a8 <usb_write>
		if (ret) {
    2424:	b110      	cbz	r0, 242c <usb_transfer_work+0x74>
			trans->status = -EINVAL;
    2426:	f06f 0315 	mvn.w	r3, #21
    242a:	e7dd      	b.n	23e8 <usb_transfer_work+0x30>
		trans->buffer += bytes;
    242c:	9a01      	ldr	r2, [sp, #4]
    242e:	f854 3c24 	ldr.w	r3, [r4, #-36]
    2432:	4413      	add	r3, r2
    2434:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    2438:	f854 3c20 	ldr.w	r3, [r4, #-32]
    243c:	1a9b      	subs	r3, r3, r2
    243e:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    2442:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    2446:	4413      	add	r3, r2
    2448:	f844 3c1c 	str.w	r3, [r4, #-28]
    244c:	e7ce      	b.n	23ec <usb_transfer_work+0x34>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
    244e:	f850 1c24 	ldr.w	r1, [r0, #-36]
    2452:	ab01      	add	r3, sp, #4
    2454:	4628      	mov	r0, r5
    2456:	f001 fa87 	bl	3968 <usb_dc_ep_read_wait>
		if (ret) {
    245a:	2800      	cmp	r0, #0
    245c:	d1e3      	bne.n	2426 <usb_transfer_work+0x6e>
		trans->buffer += bytes;
    245e:	9e01      	ldr	r6, [sp, #4]
    2460:	f854 3c24 	ldr.w	r3, [r4, #-36]
    2464:	4433      	add	r3, r6
    2466:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    246a:	f854 3c20 	ldr.w	r3, [r4, #-32]
    246e:	1b9b      	subs	r3, r3, r6
    2470:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    2474:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    2478:	4433      	add	r3, r6
    247a:	f844 3c1c 	str.w	r3, [r4, #-28]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    247e:	2e00      	cmp	r6, #0
    2480:	d0b1      	beq.n	23e6 <usb_transfer_work+0x2e>
    2482:	4628      	mov	r0, r5
    2484:	f001 fb14 	bl	3ab0 <usb_dc_ep_mps>
    2488:	fbb6 f3f0 	udiv	r3, r6, r0
    248c:	fb03 6010 	mls	r0, r3, r0, r6
    2490:	2800      	cmp	r0, #0
    2492:	d1a8      	bne.n	23e6 <usb_transfer_work+0x2e>
    2494:	f854 3c20 	ldr.w	r3, [r4, #-32]
    2498:	2b00      	cmp	r3, #0
    249a:	d0a4      	beq.n	23e6 <usb_transfer_work+0x2e>
		usb_dc_ep_read_continue(ep);
    249c:	4628      	mov	r0, r5
    249e:	f001 faab 	bl	39f8 <usb_dc_ep_read_continue>
    24a2:	e7a3      	b.n	23ec <usb_transfer_work+0x34>
		trans->cb = NULL;
    24a4:	f844 0c18 	str.w	r0, [r4, #-24]
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    24a8:	f1a4 0010 	sub.w	r0, r4, #16
    24ac:	f005 ff32 	bl	8314 <z_impl_k_sem_give>
		if (trans->status != -ECANCELED) {
    24b0:	f854 3c28 	ldr.w	r3, [r4, #-40]
    24b4:	338c      	adds	r3, #140	; 0x8c
    24b6:	d0ac      	beq.n	2412 <usb_transfer_work+0x5a>
			cb(ep, tsize, priv);
    24b8:	4642      	mov	r2, r8
    24ba:	4639      	mov	r1, r7
    24bc:	4628      	mov	r0, r5
    24be:	47b0      	blx	r6
    24c0:	e7a7      	b.n	2412 <usb_transfer_work+0x5a>
    24c2:	bf00      	nop
    24c4:	20000430 	.word	0x20000430

000024c8 <usb_transfer_ep_callback>:

void usb_transfer_ep_callback(uint8_t ep, enum usb_dc_ep_cb_status_code status)
{
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);

	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    24c8:	1e4b      	subs	r3, r1, #1
    24ca:	2b01      	cmp	r3, #1
{
    24cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    24ce:	4606      	mov	r6, r0
    24d0:	460d      	mov	r5, r1
	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    24d2:	d80f      	bhi.n	24f4 <usb_transfer_ep_callback+0x2c>
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    24d4:	f7ff ff5a 	bl	238c <usb_ep_get_transfer>
		return;
	}

	if (!trans) {
    24d8:	4604      	mov	r4, r0
    24da:	b968      	cbnz	r0, 24f8 <usb_transfer_ep_callback+0x30>
		if (status == USB_DC_EP_DATA_OUT) {
    24dc:	2d01      	cmp	r5, #1
    24de:	d109      	bne.n	24f4 <usb_transfer_ep_callback+0x2c>
			 * so drain it).
			 */
			do {
				uint8_t data;

				usb_dc_ep_read_wait(ep, &data, 1, &bytes);
    24e0:	ab01      	add	r3, sp, #4
    24e2:	2201      	movs	r2, #1
    24e4:	f10d 0103 	add.w	r1, sp, #3
    24e8:	4630      	mov	r0, r6
    24ea:	f001 fa3d 	bl	3968 <usb_dc_ep_read_wait>
			} while (bytes);
    24ee:	9b01      	ldr	r3, [sp, #4]
    24f0:	2b00      	cmp	r3, #0
    24f2:	d1f5      	bne.n	24e0 <usb_transfer_ep_callback+0x18>
		/* Read (out) needs to be done from ep_callback */
		usb_transfer_work(&trans->work);
	} else {
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
	}
}
    24f4:	b002      	add	sp, #8
    24f6:	bd70      	pop	{r4, r5, r6, pc}
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    24f8:	f00a fdbf 	bl	d07a <k_is_in_isr>
    24fc:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    2500:	b108      	cbz	r0, 2506 <usb_transfer_ep_callback+0x3e>
    2502:	2d01      	cmp	r5, #1
    2504:	d103      	bne.n	250e <usb_transfer_ep_callback+0x46>
		usb_transfer_work(&trans->work);
    2506:	4608      	mov	r0, r1
    2508:	f7ff ff56 	bl	23b8 <usb_transfer_work>
    250c:	e7f2      	b.n	24f4 <usb_transfer_ep_callback+0x2c>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    250e:	4802      	ldr	r0, [pc, #8]	; (2518 <usb_transfer_ep_callback+0x50>)
    2510:	f00a fe5f 	bl	d1d2 <k_work_submit_to_queue>
    2514:	e7ee      	b.n	24f4 <usb_transfer_ep_callback+0x2c>
    2516:	bf00      	nop
    2518:	20000430 	.word	0x20000430

0000251c <usb_transfer>:

int usb_transfer(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags,
		 usb_transfer_callback cb, void *cb_data)
{
    251c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2520:	4605      	mov	r5, r0
    2522:	468a      	mov	sl, r1
    2524:	4690      	mov	r8, r2
    2526:	4699      	mov	r9, r3
	struct usb_transfer_data *trans = NULL;
	int i, key, ret = 0;

	/* Parallel transfer to same endpoint is not supported. */
	if (usb_transfer_is_busy(ep)) {
    2528:	f007 ff90 	bl	a44c <usb_transfer_is_busy>
    252c:	4604      	mov	r4, r0
    252e:	2800      	cmp	r0, #0
    2530:	d159      	bne.n	25e6 <usb_transfer+0xca>
    2532:	f04f 0320 	mov.w	r3, #32
    2536:	f3ef 8b11 	mrs	fp, BASEPRI
    253a:	f383 8811 	msr	BASEPRI, r3
    253e:	f3bf 8f6f 	isb	sy
	LOG_DBG("Transfer start, ep 0x%02x, data %p, dlen %zd",
		ep, data, dlen);

	key = irq_lock();

	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2542:	492a      	ldr	r1, [pc, #168]	; (25ec <usb_transfer+0xd0>)
		if (!k_sem_take(&ut_data[i].sem, K_NO_WAIT)) {
    2544:	01a6      	lsls	r6, r4, #6
	return z_impl_k_sem_take(sem, timeout);
    2546:	2200      	movs	r2, #0
    2548:	4608      	mov	r0, r1
    254a:	2300      	movs	r3, #0
    254c:	9101      	str	r1, [sp, #4]
    254e:	f005 ff01 	bl	8354 <z_impl_k_sem_take>
    2552:	9901      	ldr	r1, [sp, #4]
    2554:	b958      	cbnz	r0, 256e <usb_transfer+0x52>
		LOG_ERR("No transfer slot available");
		ret = -ENOMEM;
		goto done;
	}

	if (trans->status == -EBUSY) {
    2556:	4f26      	ldr	r7, [pc, #152]	; (25f0 <usb_transfer+0xd4>)
    2558:	19bc      	adds	r4, r7, r6
    255a:	6863      	ldr	r3, [r4, #4]
    255c:	f113 0f10 	cmn.w	r3, #16
    2560:	d114      	bne.n	258c <usb_transfer+0x70>
    2562:	9301      	str	r3, [sp, #4]
	z_impl_k_sem_give(sem);
    2564:	4608      	mov	r0, r1
    2566:	f005 fed5 	bl	8314 <z_impl_k_sem_give>
		/* A transfer is already ongoing and not completed */
		LOG_ERR("A transfer is already ongoing, ep 0x%02x", ep);
		k_sem_give(&trans->sem);
		ret = -EBUSY;
		goto done;
    256a:	9b01      	ldr	r3, [sp, #4]
    256c:	e006      	b.n	257c <usb_transfer+0x60>
	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    256e:	3401      	adds	r4, #1
    2570:	2c04      	cmp	r4, #4
    2572:	f101 0140 	add.w	r1, r1, #64	; 0x40
    2576:	d1e5      	bne.n	2544 <usb_transfer+0x28>
		ret = -ENOMEM;
    2578:	f06f 030b 	mvn.w	r3, #11
	__asm__ volatile(
    257c:	f38b 8811 	msr	BASEPRI, fp
    2580:	f3bf 8f6f 	isb	sy
	}

done:
	irq_unlock(key);
	return ret;
}
    2584:	4618      	mov	r0, r3
    2586:	b003      	add	sp, #12
    2588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	trans->cb = cb;
    258c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    258e:	6163      	str	r3, [r4, #20]
	trans->priv = cb_data;
    2590:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2592:	61a3      	str	r3, [r4, #24]
	trans->status = -EBUSY;
    2594:	f06f 030f 	mvn.w	r3, #15
	trans->tsize = 0;
    2598:	6120      	str	r0, [r4, #16]
	trans->bsize = dlen;
    259a:	e9c4 a802 	strd	sl, r8, [r4, #8]
	trans->flags = flags;
    259e:	f8c4 903c 	str.w	r9, [r4, #60]	; 0x3c
	trans->status = -EBUSY;
    25a2:	6063      	str	r3, [r4, #4]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    25a4:	4628      	mov	r0, r5
	trans->ep = ep;
    25a6:	55bd      	strb	r5, [r7, r6]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    25a8:	f001 fa82 	bl	3ab0 <usb_dc_ep_mps>
    25ac:	b158      	cbz	r0, 25c6 <usb_transfer+0xaa>
    25ae:	4628      	mov	r0, r5
    25b0:	f001 fa7e 	bl	3ab0 <usb_dc_ep_mps>
    25b4:	fbb8 f2f0 	udiv	r2, r8, r0
    25b8:	fb02 8010 	mls	r0, r2, r0, r8
    25bc:	b118      	cbz	r0, 25c6 <usb_transfer+0xaa>
		trans->flags |= USB_TRANS_NO_ZLP;
    25be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    25c0:	f043 0304 	orr.w	r3, r3, #4
    25c4:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (flags & USB_TRANS_WRITE) {
    25c6:	f019 0f02 	tst.w	r9, #2
    25ca:	d007      	beq.n	25dc <usb_transfer+0xc0>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    25cc:	f106 012c 	add.w	r1, r6, #44	; 0x2c
    25d0:	4808      	ldr	r0, [pc, #32]	; (25f4 <usb_transfer+0xd8>)
    25d2:	4439      	add	r1, r7
    25d4:	f00a fdfd 	bl	d1d2 <k_work_submit_to_queue>
	int i, key, ret = 0;
    25d8:	2300      	movs	r3, #0
    25da:	e7cf      	b.n	257c <usb_transfer+0x60>
		ret = usb_dc_ep_read_continue(ep);
    25dc:	4628      	mov	r0, r5
    25de:	f001 fa0b 	bl	39f8 <usb_dc_ep_read_continue>
    25e2:	4603      	mov	r3, r0
    25e4:	e7ca      	b.n	257c <usb_transfer+0x60>
		return -EBUSY;
    25e6:	f06f 030f 	mvn.w	r3, #15
    25ea:	e7cb      	b.n	2584 <usb_transfer+0x68>
    25ec:	2000105c 	.word	0x2000105c
    25f0:	20001040 	.word	0x20001040
    25f4:	20000430 	.word	0x20000430

000025f8 <usb_cancel_transfer>:

void usb_cancel_transfer(uint8_t ep)
{
    25f8:	b510      	push	{r4, lr}
	__asm__ volatile(
    25fa:	f04f 0320 	mov.w	r3, #32
    25fe:	f3ef 8411 	mrs	r4, BASEPRI
    2602:	f383 8811 	msr	BASEPRI, r3
    2606:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
    260a:	f7ff febf 	bl	238c <usb_ep_get_transfer>
	if (!trans) {
    260e:	b150      	cbz	r0, 2626 <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
    2610:	6843      	ldr	r3, [r0, #4]
    2612:	3310      	adds	r3, #16
    2614:	d107      	bne.n	2626 <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
    2616:	f06f 038b 	mvn.w	r3, #139	; 0x8b
    261a:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    261c:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    2620:	4803      	ldr	r0, [pc, #12]	; (2630 <usb_cancel_transfer+0x38>)
    2622:	f00a fdd6 	bl	d1d2 <k_work_submit_to_queue>
	__asm__ volatile(
    2626:	f384 8811 	msr	BASEPRI, r4
    262a:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
    262e:	bd10      	pop	{r4, pc}
    2630:	20000430 	.word	0x20000430

00002634 <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
    2634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2638:	4c10      	ldr	r4, [pc, #64]	; (267c <usb_cancel_transfers+0x48>)

		key = irq_lock();

		if (trans->status == -EBUSY) {
			trans->status = -ECANCELED;
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    263a:	f8df 8044 	ldr.w	r8, [pc, #68]	; 2680 <usb_cancel_transfers+0x4c>
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    263e:	2500      	movs	r5, #0
			trans->status = -ECANCELED;
    2640:	f06f 078b 	mvn.w	r7, #139	; 0x8b
	__asm__ volatile(
    2644:	f04f 0320 	mov.w	r3, #32
    2648:	f3ef 8611 	mrs	r6, BASEPRI
    264c:	f383 8811 	msr	BASEPRI, r3
    2650:	f3bf 8f6f 	isb	sy
		if (trans->status == -EBUSY) {
    2654:	6863      	ldr	r3, [r4, #4]
    2656:	3310      	adds	r3, #16
    2658:	d105      	bne.n	2666 <usb_cancel_transfers+0x32>
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    265a:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    265e:	4640      	mov	r0, r8
			trans->status = -ECANCELED;
    2660:	6067      	str	r7, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2662:	f00a fdb6 	bl	d1d2 <k_work_submit_to_queue>
	__asm__ volatile(
    2666:	f386 8811 	msr	BASEPRI, r6
    266a:	f3bf 8f6f 	isb	sy
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    266e:	3501      	adds	r5, #1
    2670:	2d04      	cmp	r5, #4
    2672:	f104 0440 	add.w	r4, r4, #64	; 0x40
    2676:	d1e5      	bne.n	2644 <usb_cancel_transfers+0x10>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
    2678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    267c:	20001040 	.word	0x20001040
    2680:	20000430 	.word	0x20000430

00002684 <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
    2684:	b570      	push	{r4, r5, r6, lr}
    2686:	4c0a      	ldr	r4, [pc, #40]	; (26b0 <usb_transfer_init+0x2c>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
		k_work_init(&ut_data[i].work, usb_transfer_work);
    2688:	4e0a      	ldr	r6, [pc, #40]	; (26b4 <usb_transfer_init+0x30>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    268a:	2500      	movs	r5, #0
		k_work_init(&ut_data[i].work, usb_transfer_work);
    268c:	4631      	mov	r1, r6
    268e:	4620      	mov	r0, r4
    2690:	f00a fd96 	bl	d1c0 <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
    2694:	2201      	movs	r2, #1
    2696:	f1a4 0010 	sub.w	r0, r4, #16
    269a:	4611      	mov	r1, r2
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    269c:	3501      	adds	r5, #1
    269e:	f00a fd7c 	bl	d19a <z_impl_k_sem_init>
    26a2:	2d04      	cmp	r5, #4
    26a4:	f104 0440 	add.w	r4, r4, #64	; 0x40
    26a8:	d1f0      	bne.n	268c <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
    26aa:	2000      	movs	r0, #0
    26ac:	bd70      	pop	{r4, r5, r6, pc}
    26ae:	bf00      	nop
    26b0:	2000106c 	.word	0x2000106c
    26b4:	000023b9 	.word	0x000023b9

000026b8 <cdc_acm_class_handle_req>:
 *
 * @return  0 on success, negative errno code on fail.
 */
int cdc_acm_class_handle_req(struct usb_setup_packet *pSetup,
			     int32_t *len, uint8_t **data)
{
    26b8:	b570      	push	{r4, r5, r6, lr}
    26ba:	4604      	mov	r4, r0
    26bc:	460e      	mov	r6, r1
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;
	uint32_t rate;
	uint32_t new_rate;

	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    26be:	7901      	ldrb	r1, [r0, #4]
    26c0:	4810      	ldr	r0, [pc, #64]	; (2704 <cdc_acm_class_handle_req+0x4c>)
{
    26c2:	4615      	mov	r5, r2
	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    26c4:	f007 fe97 	bl	a3f6 <usb_get_dev_data_by_iface>
					   (uint8_t)pSetup->wIndex);
	if (common == NULL) {
    26c8:	b1b0      	cbz	r0, 26f8 <cdc_acm_class_handle_req+0x40>
		return -ENODEV;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	switch (pSetup->bRequest) {
    26ca:	7863      	ldrb	r3, [r4, #1]
    26cc:	2b21      	cmp	r3, #33	; 0x21
    26ce:	d00e      	beq.n	26ee <cdc_acm_class_handle_req+0x36>
    26d0:	2b22      	cmp	r3, #34	; 0x22
    26d2:	d008      	beq.n	26e6 <cdc_acm_class_handle_req+0x2e>
    26d4:	2b20      	cmp	r3, #32
    26d6:	d112      	bne.n	26fe <cdc_acm_class_handle_req+0x46>
	case SET_LINE_CODING:
		rate = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
		memcpy(&dev_data->line_coding,
    26d8:	6829      	ldr	r1, [r5, #0]
    26da:	2207      	movs	r2, #7
    26dc:	380c      	subs	r0, #12
    26de:	f008 faad 	bl	ac3c <memcpy>
		LOG_DBG("CDC ACM request 0x%x, value 0x%x",
			pSetup->bRequest, pSetup->wValue);
		return -EINVAL;
	}

	return 0;
    26e2:	2000      	movs	r0, #0
}
    26e4:	bd70      	pop	{r4, r5, r6, pc}
		dev_data->line_state = (uint8_t)pSetup->wValue;
    26e6:	8863      	ldrh	r3, [r4, #2]
    26e8:	f800 3c05 	strb.w	r3, [r0, #-5]
		break;
    26ec:	e7f9      	b.n	26e2 <cdc_acm_class_handle_req+0x2a>
		*data = (uint8_t *)(&dev_data->line_coding);
    26ee:	380c      	subs	r0, #12
		*len = sizeof(dev_data->line_coding);
    26f0:	2307      	movs	r3, #7
		*data = (uint8_t *)(&dev_data->line_coding);
    26f2:	6028      	str	r0, [r5, #0]
		*len = sizeof(dev_data->line_coding);
    26f4:	6033      	str	r3, [r6, #0]
    26f6:	e7f4      	b.n	26e2 <cdc_acm_class_handle_req+0x2a>
		return -ENODEV;
    26f8:	f06f 0012 	mvn.w	r0, #18
    26fc:	e7f2      	b.n	26e4 <cdc_acm_class_handle_req+0x2c>
	switch (pSetup->bRequest) {
    26fe:	f06f 0015 	mvn.w	r0, #21
    2702:	e7ef      	b.n	26e4 <cdc_acm_class_handle_req+0x2c>
    2704:	20001144 	.word	0x20001144

00002708 <cdc_acm_int_in>:
 * @param ep_status Endpoint status code.
 *
 * @return  N/A.
 */
static void cdc_acm_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
{
    2708:	b508      	push	{r3, lr}
    270a:	4601      	mov	r1, r0
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;

	ARG_UNUSED(ep_status);

	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
    270c:	4803      	ldr	r0, [pc, #12]	; (271c <cdc_acm_int_in+0x14>)
    270e:	f007 fe83 	bl	a418 <usb_get_dev_data_by_ep>
	if (common == NULL) {
    2712:	b110      	cbz	r0, 271a <cdc_acm_int_in+0x12>
		return;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	dev_data->notification_sent = 1U;
    2714:	2301      	movs	r3, #1
    2716:	f800 3c03 	strb.w	r3, [r0, #-3]
	LOG_DBG("CDC_IntIN EP[%x]\r", ep);
}
    271a:	bd08      	pop	{r3, pc}
    271c:	20001144 	.word	0x20001144

00002720 <cdc_acm_irq_rx_enable>:
 *
 * @return N/A
 */
static void cdc_acm_irq_rx_enable(const struct device *dev)
{
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    2720:	6901      	ldr	r1, [r0, #16]

	dev_data->rx_irq_ena = true;
    2722:	2301      	movs	r3, #1
    2724:	f881 303b 	strb.w	r3, [r1, #59]	; 0x3b

	if (dev_data->cb && dev_data->rx_ready) {
    2728:	680b      	ldr	r3, [r1, #0]
    272a:	b133      	cbz	r3, 273a <cdc_acm_irq_rx_enable+0x1a>
    272c:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
    2730:	b11b      	cbz	r3, 273a <cdc_acm_irq_rx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    2732:	4802      	ldr	r0, [pc, #8]	; (273c <cdc_acm_irq_rx_enable+0x1c>)
    2734:	3118      	adds	r1, #24
    2736:	f00a bd4c 	b.w	d1d2 <k_work_submit_to_queue>
	}
}
    273a:	4770      	bx	lr
    273c:	20000430 	.word	0x20000430

00002740 <cdc_acm_irq_tx_enable>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    2740:	6901      	ldr	r1, [r0, #16]
	dev_data->tx_irq_ena = true;
    2742:	2301      	movs	r3, #1
    2744:	f881 303a 	strb.w	r3, [r1, #58]	; 0x3a
	if (dev_data->cb && dev_data->tx_ready) {
    2748:	680b      	ldr	r3, [r1, #0]
    274a:	b133      	cbz	r3, 275a <cdc_acm_irq_tx_enable+0x1a>
    274c:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
    2750:	b11b      	cbz	r3, 275a <cdc_acm_irq_tx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    2752:	4802      	ldr	r0, [pc, #8]	; (275c <cdc_acm_irq_tx_enable+0x1c>)
    2754:	3118      	adds	r1, #24
    2756:	f00a bd3c 	b.w	d1d2 <k_work_submit_to_queue>
}
    275a:	4770      	bx	lr
    275c:	20000430 	.word	0x20000430

00002760 <cdc_acm_fifo_fill>:
{
    2760:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    2762:	6905      	ldr	r5, [r0, #16]
	if (!dev_data->configured || dev_data->suspended) {
    2764:	f895 008e 	ldrb.w	r0, [r5, #142]	; 0x8e
    2768:	b178      	cbz	r0, 278a <cdc_acm_fifo_fill+0x2a>
    276a:	f895 308f 	ldrb.w	r3, [r5, #143]	; 0x8f
    276e:	b96b      	cbnz	r3, 278c <cdc_acm_fifo_fill+0x2c>
	dev_data->tx_ready = false;
    2770:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    2774:	f8d5 0080 	ldr.w	r0, [r5, #128]	; 0x80
    2778:	f007 fd8b 	bl	a292 <ring_buf_put>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    277c:	f105 0128 	add.w	r1, r5, #40	; 0x28
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    2780:	4604      	mov	r4, r0
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    2782:	4803      	ldr	r0, [pc, #12]	; (2790 <cdc_acm_fifo_fill+0x30>)
    2784:	f00a fd25 	bl	d1d2 <k_work_submit_to_queue>
	return wrote;
    2788:	4620      	mov	r0, r4
}
    278a:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
    278c:	2000      	movs	r0, #0
    278e:	e7fc      	b.n	278a <cdc_acm_fifo_fill+0x2a>
    2790:	20000430 	.word	0x20000430

00002794 <cdc_acm_write_cb>:
	dev_data->tx_ready = true;
    2794:	2301      	movs	r3, #1
{
    2796:	b510      	push	{r4, lr}
    2798:	4614      	mov	r4, r2
	dev_data->tx_ready = true;
    279a:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	z_impl_k_sem_give(sem);
    279e:	f102 0008 	add.w	r0, r2, #8
    27a2:	f005 fdb7 	bl	8314 <z_impl_k_sem_give>
	if (dev_data->cb && dev_data->tx_irq_ena) {
    27a6:	6823      	ldr	r3, [r4, #0]
    27a8:	b13b      	cbz	r3, 27ba <cdc_acm_write_cb+0x26>
    27aa:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    27ae:	b123      	cbz	r3, 27ba <cdc_acm_write_cb+0x26>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    27b0:	4809      	ldr	r0, [pc, #36]	; (27d8 <cdc_acm_write_cb+0x44>)
    27b2:	f104 0118 	add.w	r1, r4, #24
    27b6:	f00a fd0c 	bl	d1d2 <k_work_submit_to_queue>
	if (ring_buf_is_empty(dev_data->tx_ringbuf)) {
    27ba:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    27be:	e9d3 2300 	ldrd	r2, r3, [r3]
    27c2:	429a      	cmp	r2, r3
    27c4:	d006      	beq.n	27d4 <cdc_acm_write_cb+0x40>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    27c6:	f104 0128 	add.w	r1, r4, #40	; 0x28
    27ca:	4803      	ldr	r0, [pc, #12]	; (27d8 <cdc_acm_write_cb+0x44>)
}
    27cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    27d0:	f00a bcff 	b.w	d1d2 <k_work_submit_to_queue>
}
    27d4:	bd10      	pop	{r4, pc}
    27d6:	bf00      	nop
    27d8:	20000430 	.word	0x20000430

000027dc <cdc_acm_read_cb>:
{
    27dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    27de:	4614      	mov	r4, r2
    27e0:	f102 063c 	add.w	r6, r2, #60	; 0x3c
	if (size <= 0) {
    27e4:	1e0a      	subs	r2, r1, #0
{
    27e6:	4605      	mov	r5, r0
	if (size <= 0) {
    27e8:	dd03      	ble.n	27f2 <cdc_acm_read_cb+0x16>
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    27ea:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    27ec:	4631      	mov	r1, r6
    27ee:	f007 fd50 	bl	a292 <ring_buf_put>
	dev_data->rx_ready = true;
    27f2:	2301      	movs	r3, #1
    27f4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	if (dev_data->cb && dev_data->rx_irq_ena) {
    27f8:	6823      	ldr	r3, [r4, #0]
    27fa:	b13b      	cbz	r3, 280c <CONFIG_MAIN_STACK_SIZE+0xc>
    27fc:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
    2800:	b123      	cbz	r3, 280c <CONFIG_MAIN_STACK_SIZE+0xc>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    2802:	4808      	ldr	r0, [pc, #32]	; (2824 <CONFIG_MAIN_STACK_SIZE+0x24>)
    2804:	f104 0118 	add.w	r1, r4, #24
    2808:	f00a fce3 	bl	d1d2 <k_work_submit_to_queue>
	usb_transfer(ep, dev_data->rx_buf, sizeof(dev_data->rx_buf),
    280c:	4b06      	ldr	r3, [pc, #24]	; (2828 <CONFIG_MAIN_STACK_SIZE+0x28>)
    280e:	9300      	str	r3, [sp, #0]
    2810:	9401      	str	r4, [sp, #4]
    2812:	2301      	movs	r3, #1
    2814:	2240      	movs	r2, #64	; 0x40
    2816:	4631      	mov	r1, r6
    2818:	4628      	mov	r0, r5
    281a:	f7ff fe7f 	bl	251c <usb_transfer>
}
    281e:	b002      	add	sp, #8
    2820:	bd70      	pop	{r4, r5, r6, pc}
    2822:	bf00      	nop
    2824:	20000430 	.word	0x20000430
    2828:	000027dd 	.word	0x000027dd

0000282c <tx_work_handler>:
{
    282c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct usb_cfg_data *cfg = (void *)dev->config;
    282e:	6e83      	ldr	r3, [r0, #104]	; 0x68
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
    2830:	685b      	ldr	r3, [r3, #4]
    2832:	6a1b      	ldr	r3, [r3, #32]
    2834:	7d1e      	ldrb	r6, [r3, #20]
{
    2836:	4605      	mov	r5, r0
	if (usb_transfer_is_busy(ep)) {
    2838:	4630      	mov	r0, r6
    283a:	f007 fe07 	bl	a44c <usb_transfer_is_busy>
    283e:	b9d0      	cbnz	r0, 2876 <tx_work_handler+0x4a>
	len = ring_buf_get_claim(dev_data->tx_ringbuf, &data,
    2840:	6da8      	ldr	r0, [r5, #88]	; 0x58
    2842:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2846:	a903      	add	r1, sp, #12
    2848:	f007 fd42 	bl	a2d0 <ring_buf_get_claim>
	if (!len) {
    284c:	4604      	mov	r4, r0
    284e:	b190      	cbz	r0, 2876 <tx_work_handler+0x4a>
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
    2850:	0683      	lsls	r3, r0, #26
	struct cdc_acm_dev_data_t *dev_data =
    2852:	f1a5 0328 	sub.w	r3, r5, #40	; 0x28
		len -= 1;
    2856:	bf08      	it	eq
    2858:	f100 34ff 	addeq.w	r4, r0, #4294967295	; 0xffffffff
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
    285c:	9301      	str	r3, [sp, #4]
    285e:	4b07      	ldr	r3, [pc, #28]	; (287c <tx_work_handler+0x50>)
    2860:	9903      	ldr	r1, [sp, #12]
    2862:	9300      	str	r3, [sp, #0]
    2864:	4622      	mov	r2, r4
    2866:	2302      	movs	r3, #2
    2868:	4630      	mov	r0, r6
    286a:	f7ff fe57 	bl	251c <usb_transfer>
	ring_buf_get_finish(dev_data->tx_ringbuf, len);
    286e:	6da8      	ldr	r0, [r5, #88]	; 0x58
    2870:	4621      	mov	r1, r4
    2872:	f007 fd49 	bl	a308 <ring_buf_get_finish>
}
    2876:	b004      	add	sp, #16
    2878:	bd70      	pop	{r4, r5, r6, pc}
    287a:	bf00      	nop
    287c:	00002795 	.word	0x00002795

00002880 <cdc_acm_send_notification>:
 *
 * @return  N/A.
 */
static int cdc_acm_send_notification(const struct device *dev,
				     uint16_t serial_state)
{
    2880:	b530      	push	{r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
	struct usb_cfg_data * const cfg = (void *)dev->config;
    2882:	6842      	ldr	r2, [r0, #4]
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    2884:	6905      	ldr	r5, [r0, #16]

	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
		  (const uint8_t *)&notification, sizeof(notification), NULL);

	/* Wait for notification to be sent */
	while (!((volatile uint8_t)dev_data->notification_sent)) {
    2886:	4c10      	ldr	r4, [pc, #64]	; (28c8 <cdc_acm_send_notification+0x48>)
{
    2888:	b085      	sub	sp, #20
	notification.wIndex = 0U;
    288a:	f242 00a1 	movw	r0, #8353	; 0x20a1
    288e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    2892:	e9cd 0301 	strd	r0, r3, [sp, #4]
	dev_data->notification_sent = 0U;
    2896:	2300      	movs	r3, #0
    2898:	f885 308d 	strb.w	r3, [r5, #141]	; 0x8d
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    289c:	6a10      	ldr	r0, [r2, #32]
	notification.data = sys_cpu_to_le16(serial_state);
    289e:	f8ad 100c 	strh.w	r1, [sp, #12]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    28a2:	7900      	ldrb	r0, [r0, #4]
    28a4:	220a      	movs	r2, #10
    28a6:	a901      	add	r1, sp, #4
    28a8:	f007 fd7e 	bl	a3a8 <usb_write>
	while (!((volatile uint8_t)dev_data->notification_sent)) {
    28ac:	f895 308d 	ldrb.w	r3, [r5, #141]	; 0x8d
    28b0:	b113      	cbz	r3, 28b8 <cdc_acm_send_notification+0x38>
			LOG_DBG("CDC ACM notification timeout!");
			return -EIO;
		}
	}

	return 0;
    28b2:	2000      	movs	r0, #0
}
    28b4:	b005      	add	sp, #20
    28b6:	bd30      	pop	{r4, r5, pc}
	z_impl_k_busy_wait(usec_to_wait);
    28b8:	2001      	movs	r0, #1
    28ba:	f00a fdd5 	bl	d468 <z_impl_k_busy_wait>
		if (++cnt > CDC_CONTROL_SERIAL_STATE_TIMEOUT_US) {
    28be:	3c01      	subs	r4, #1
    28c0:	d1f4      	bne.n	28ac <cdc_acm_send_notification+0x2c>
			return -EIO;
    28c2:	f06f 0004 	mvn.w	r0, #4
    28c6:	e7f5      	b.n	28b4 <cdc_acm_send_notification+0x34>
    28c8:	000186a1 	.word	0x000186a1

000028cc <cdc_acm_init>:
{
    28cc:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    28ce:	6904      	ldr	r4, [r0, #16]
	parent->next = child;
    28d0:	2300      	movs	r3, #0
    28d2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
Z_GENLIST_APPEND(slist, snode)
    28d6:	4b0f      	ldr	r3, [pc, #60]	; (2914 <cdc_acm_init+0x48>)
	dev_data->common.dev = dev;
    28d8:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    28dc:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&cdc_acm_data_devlist, &dev_data->common.node);
    28de:	f104 0294 	add.w	r2, r4, #148	; 0x94
    28e2:	b9a1      	cbnz	r1, 290e <cdc_acm_init+0x42>
	list->head = node;
    28e4:	e9c3 2200 	strd	r2, r2, [r3]
	return z_impl_k_sem_init(sem, initial_count, limit);
    28e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    28ec:	2100      	movs	r1, #0
    28ee:	f104 0008 	add.w	r0, r4, #8
    28f2:	f00a fc52 	bl	d19a <z_impl_k_sem_init>
	k_work_init(&dev_data->cb_work, cdc_acm_irq_callback_work_handler);
    28f6:	f104 0018 	add.w	r0, r4, #24
    28fa:	4907      	ldr	r1, [pc, #28]	; (2918 <cdc_acm_init+0x4c>)
    28fc:	f00a fc60 	bl	d1c0 <k_work_init>
	k_work_init(&dev_data->tx_work, tx_work_handler);
    2900:	f104 0028 	add.w	r0, r4, #40	; 0x28
    2904:	4905      	ldr	r1, [pc, #20]	; (291c <cdc_acm_init+0x50>)
    2906:	f00a fc5b 	bl	d1c0 <k_work_init>
}
    290a:	2000      	movs	r0, #0
    290c:	bd10      	pop	{r4, pc}
	parent->next = child;
    290e:	600a      	str	r2, [r1, #0]
	list->tail = node;
    2910:	605a      	str	r2, [r3, #4]
}
    2912:	e7e9      	b.n	28e8 <cdc_acm_init+0x1c>
    2914:	20001144 	.word	0x20001144
    2918:	0000a477 	.word	0x0000a477
    291c:	0000282d 	.word	0x0000282d

00002920 <cdc_acm_reset_port>:
{
    2920:	b510      	push	{r4, lr}
    2922:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
    2924:	3008      	adds	r0, #8
    2926:	f005 fcf5 	bl	8314 <z_impl_k_sem_give>
	dev_data->line_coding = (struct cdc_acm_line_coding)
    292a:	4b0c      	ldr	r3, [pc, #48]	; (295c <cdc_acm_reset_port+0x3c>)
	dev_data->configured = false;
    292c:	2100      	movs	r1, #0
	dev_data->line_coding = (struct cdc_acm_line_coding)
    292e:	6818      	ldr	r0, [r3, #0]
    2930:	889a      	ldrh	r2, [r3, #4]
    2932:	799b      	ldrb	r3, [r3, #6]
    2934:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    2938:	f8a4 2088 	strh.w	r2, [r4, #136]	; 0x88
	dev_data->configured = false;
    293c:	f8a4 108e 	strh.w	r1, [r4, #142]	; 0x8e
	dev_data->tx_ready = false;
    2940:	8721      	strh	r1, [r4, #56]	; 0x38
	dev_data->line_coding = (struct cdc_acm_line_coding)
    2942:	f884 308a 	strb.w	r3, [r4, #138]	; 0x8a
	dev_data->serial_state = 0;
    2946:	f884 108c 	strb.w	r1, [r4, #140]	; 0x8c
	dev_data->line_state = 0;
    294a:	f884 108b 	strb.w	r1, [r4, #139]	; 0x8b
	memset(&dev_data->rx_buf, 0, CDC_ACM_BUFFER_SIZE);
    294e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    2952:	2240      	movs	r2, #64	; 0x40
}
    2954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(&dev_data->rx_buf, 0, CDC_ACM_BUFFER_SIZE);
    2958:	f008 b99b 	b.w	ac92 <memset>
    295c:	0000d830 	.word	0x0000d830

00002960 <cdc_acm_dev_status_cb>:
{
    2960:	b538      	push	{r3, r4, r5, lr}
    2962:	460d      	mov	r5, r1
	common = usb_get_dev_data_by_cfg(&cdc_acm_data_devlist, cfg);
    2964:	4601      	mov	r1, r0
    2966:	481c      	ldr	r0, [pc, #112]	; (29d8 <cdc_acm_dev_status_cb+0x78>)
    2968:	f007 fd36 	bl	a3d8 <usb_get_dev_data_by_cfg>
	if (common == NULL) {
    296c:	4604      	mov	r4, r0
    296e:	b1b8      	cbz	r0, 29a0 <cdc_acm_dev_status_cb+0x40>
	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);
    2970:	4602      	mov	r2, r0
	struct usb_cfg_data *cfg = (void *)dev->config;
    2972:	1e69      	subs	r1, r5, #1
    2974:	f852 3990 	ldr.w	r3, [r2], #-144
    2978:	685b      	ldr	r3, [r3, #4]
	switch (status) {
    297a:	2905      	cmp	r1, #5
    297c:	d810      	bhi.n	29a0 <cdc_acm_dev_status_cb+0x40>
    297e:	e8df f001 	tbb	[pc, r1]
    2982:	0f10      	.short	0x0f10
    2984:	19151003 	.word	0x19151003
		if (!dev_data->configured) {
    2988:	f814 1c02 	ldrb.w	r1, [r4, #-2]
    298c:	b919      	cbnz	r1, 2996 <cdc_acm_dev_status_cb+0x36>
			cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0,
    298e:	6a1b      	ldr	r3, [r3, #32]
    2990:	7b18      	ldrb	r0, [r3, #12]
    2992:	f7ff ff23 	bl	27dc <cdc_acm_read_cb>
		dev_data->configured = true;
    2996:	2301      	movs	r3, #1
    2998:	f804 3c02 	strb.w	r3, [r4, #-2]
		dev_data->tx_ready = true;
    299c:	f804 3c58 	strb.w	r3, [r4, #-88]
}
    29a0:	bd38      	pop	{r3, r4, r5, pc}
    29a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		cdc_acm_reset_port(dev_data);
    29a6:	4610      	mov	r0, r2
    29a8:	f7ff bfba 	b.w	2920 <cdc_acm_reset_port>
		dev_data->suspended = true;
    29ac:	2301      	movs	r3, #1
    29ae:	f804 3c01 	strb.w	r3, [r4, #-1]
		break;
    29b2:	e7f5      	b.n	29a0 <cdc_acm_dev_status_cb+0x40>
		if (dev_data->suspended) {
    29b4:	f814 1c01 	ldrb.w	r1, [r4, #-1]
    29b8:	2900      	cmp	r1, #0
    29ba:	d0f1      	beq.n	29a0 <cdc_acm_dev_status_cb+0x40>
			if (dev_data->configured) {
    29bc:	f814 0c02 	ldrb.w	r0, [r4, #-2]
			dev_data->suspended = false;
    29c0:	2100      	movs	r1, #0
    29c2:	f804 1c01 	strb.w	r1, [r4, #-1]
			if (dev_data->configured) {
    29c6:	2800      	cmp	r0, #0
    29c8:	d0ea      	beq.n	29a0 <cdc_acm_dev_status_cb+0x40>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr,
    29ca:	6a1b      	ldr	r3, [r3, #32]
    29cc:	7b18      	ldrb	r0, [r3, #12]
}
    29ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr,
    29d2:	f7ff bf03 	b.w	27dc <cdc_acm_read_cb>
    29d6:	bf00      	nop
    29d8:	20001144 	.word	0x20001144

000029dc <z_usb_work_q_init>:
K_KERNEL_STACK_DEFINE(z_usb_work_q_stack, CONFIG_USB_WORKQUEUE_STACK_SIZE);

struct k_work_q z_usb_work_q;

static int z_usb_work_q_init(const struct device *dev)
{
    29dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&z_usb_work_q,
    29de:	4d09      	ldr	r5, [pc, #36]	; (2a04 <z_usb_work_q_init+0x28>)
    29e0:	4909      	ldr	r1, [pc, #36]	; (2a08 <z_usb_work_q_init+0x2c>)
    29e2:	2400      	movs	r4, #0
    29e4:	9400      	str	r4, [sp, #0]
    29e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    29ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
    29ee:	4628      	mov	r0, r5
    29f0:	f005 fdc8 	bl	8584 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    29f4:	4905      	ldr	r1, [pc, #20]	; (2a0c <z_usb_work_q_init+0x30>)
    29f6:	4628      	mov	r0, r5
    29f8:	f00a fb45 	bl	d086 <z_impl_k_thread_name_set>
			   K_KERNEL_STACK_SIZEOF(z_usb_work_q_stack),
			   CONFIG_USB_WORKQUEUE_PRIORITY, NULL);
	k_thread_name_set(&z_usb_work_q.thread, "usbworkq");

	return 0;
}
    29fc:	4620      	mov	r0, r4
    29fe:	b003      	add	sp, #12
    2a00:	bd30      	pop	{r4, r5, pc}
    2a02:	bf00      	nop
    2a04:	20000430 	.word	0x20000430
    2a08:	20005180 	.word	0x20005180
    2a0c:	0000def2 	.word	0x0000def2

00002a10 <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    2a10:	4b09      	ldr	r3, [pc, #36]	; (2a38 <get_flash_area_from_id+0x28>)
{
    2a12:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
    2a14:	681d      	ldr	r5, [r3, #0]
		if (flash_map[i].fa_id == idx) {
    2a16:	4b09      	ldr	r3, [pc, #36]	; (2a3c <get_flash_area_from_id+0x2c>)
{
    2a18:	4602      	mov	r2, r0
		if (flash_map[i].fa_id == idx) {
    2a1a:	681c      	ldr	r4, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
    2a1c:	2300      	movs	r3, #0
    2a1e:	429d      	cmp	r5, r3
    2a20:	dc01      	bgt.n	2a26 <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
    2a22:	2000      	movs	r0, #0
}
    2a24:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
    2a26:	0119      	lsls	r1, r3, #4
    2a28:	eb04 1003 	add.w	r0, r4, r3, lsl #4
    2a2c:	5c61      	ldrb	r1, [r4, r1]
    2a2e:	4291      	cmp	r1, r2
    2a30:	d0f8      	beq.n	2a24 <get_flash_area_from_id+0x14>
	for (int i = 0; i < flash_map_entries; i++) {
    2a32:	3301      	adds	r3, #1
    2a34:	e7f3      	b.n	2a1e <get_flash_area_from_id+0xe>
    2a36:	bf00      	nop
    2a38:	0000d958 	.word	0x0000d958
    2a3c:	200000f8 	.word	0x200000f8

00002a40 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    2a40:	4b08      	ldr	r3, [pc, #32]	; (2a64 <flash_area_open+0x24>)
    2a42:	681b      	ldr	r3, [r3, #0]
{
    2a44:	b510      	push	{r4, lr}
    2a46:	460c      	mov	r4, r1
	if (flash_map == NULL) {
    2a48:	b12b      	cbz	r3, 2a56 <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
    2a4a:	f7ff ffe1 	bl	2a10 <get_flash_area_from_id>
	if (area == NULL) {
    2a4e:	b128      	cbz	r0, 2a5c <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
    2a50:	6020      	str	r0, [r4, #0]
	return 0;
    2a52:	2000      	movs	r0, #0
}
    2a54:	bd10      	pop	{r4, pc}
		return -EACCES;
    2a56:	f06f 000c 	mvn.w	r0, #12
    2a5a:	e7fb      	b.n	2a54 <flash_area_open+0x14>
		return -ENOENT;
    2a5c:	f06f 0001 	mvn.w	r0, #1
    2a60:	e7f8      	b.n	2a54 <flash_area_open+0x14>
    2a62:	bf00      	nop
    2a64:	200000f8 	.word	0x200000f8

00002a68 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    2a68:	b530      	push	{r4, r5, lr}
    2a6a:	b089      	sub	sp, #36	; 0x24
    2a6c:	460c      	mov	r4, r1
    2a6e:	4615      	mov	r5, r2
	cb_data->area_idx = idx;
    2a70:	9001      	str	r0, [sp, #4]
	fa = get_flash_area_from_id(idx);
    2a72:	f7ff ffcd 	bl	2a10 <get_flash_area_from_id>
	if (fa == NULL) {
    2a76:	b1b8      	cbz	r0, 2aa8 <flash_area_get_sectors+0x40>
	cb_data->area_off = fa->fa_off;
    2a78:	6843      	ldr	r3, [r0, #4]
    2a7a:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    2a7c:	6883      	ldr	r3, [r0, #8]
	cb_data->ret_len = *cnt;
    2a7e:	6822      	ldr	r2, [r4, #0]
	flash_dev = device_get_binding(fa->fa_dev_name);
    2a80:	68c0      	ldr	r0, [r0, #12]
	cb_data->ret = ret;
    2a82:	e9cd 3503 	strd	r3, r5, [sp, #12]
	cb_data->ret_idx = 0U;
    2a86:	2300      	movs	r3, #0
	cb_data->status = 0;
    2a88:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
    2a8c:	9305      	str	r3, [sp, #20]
	flash_dev = device_get_binding(fa->fa_dev_name);
    2a8e:	f007 fdbc 	bl	a60a <device_get_binding>
	if (flash_dev == NULL) {
    2a92:	b160      	cbz	r0, 2aae <flash_area_get_sectors+0x46>
	flash_page_foreach(flash_dev, cb, cb_data);
    2a94:	4907      	ldr	r1, [pc, #28]	; (2ab4 <flash_area_get_sectors+0x4c>)
    2a96:	aa01      	add	r2, sp, #4
    2a98:	f008 fa3b 	bl	af12 <flash_page_foreach>
	if (cb_data->status == 0) {
    2a9c:	9807      	ldr	r0, [sp, #28]
    2a9e:	b908      	cbnz	r0, 2aa4 <flash_area_get_sectors+0x3c>
		*cnt = cb_data->ret_idx;
    2aa0:	9b05      	ldr	r3, [sp, #20]
    2aa2:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    2aa4:	b009      	add	sp, #36	; 0x24
    2aa6:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    2aa8:	f06f 0015 	mvn.w	r0, #21
    2aac:	e7fa      	b.n	2aa4 <flash_area_get_sectors+0x3c>
		return -ENODEV;
    2aae:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    2ab2:	e7f7      	b.n	2aa4 <flash_area_get_sectors+0x3c>
    2ab4:	0000a60f 	.word	0x0000a60f

00002ab8 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    2ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2aba:	4605      	mov	r5, r0
	__asm__ volatile(
    2abc:	f04f 0320 	mov.w	r3, #32
    2ac0:	f3ef 8611 	mrs	r6, BASEPRI
    2ac4:	f383 8811 	msr	BASEPRI, r3
    2ac8:	f3bf 8f6f 	isb	sy
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    2acc:	4b0b      	ldr	r3, [pc, #44]	; (2afc <pm_state_notify+0x44>)
    2ace:	681c      	ldr	r4, [r3, #0]
    2ad0:	2c00      	cmp	r4, #0
    2ad2:	bf38      	it	cc
    2ad4:	2400      	movcc	r4, #0
    2ad6:	b15c      	cbz	r4, 2af0 <pm_state_notify+0x38>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
    2ad8:	4f09      	ldr	r7, [pc, #36]	; (2b00 <pm_state_notify+0x48>)
			callback = notifier->state_exit;
    2ada:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    2ade:	2d00      	cmp	r5, #0
    2ae0:	bf08      	it	eq
    2ae2:	4613      	moveq	r3, r2
		if (callback) {
    2ae4:	b10b      	cbz	r3, 2aea <pm_state_notify+0x32>
			callback(z_power_state.state);
    2ae6:	7838      	ldrb	r0, [r7, #0]
    2ae8:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2aea:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    2aec:	2c00      	cmp	r4, #0
    2aee:	d1f4      	bne.n	2ada <pm_state_notify+0x22>
	__asm__ volatile(
    2af0:	f386 8811 	msr	BASEPRI, r6
    2af4:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    2af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2afa:	bf00      	nop
    2afc:	2000114c 	.word	0x2000114c
    2b00:	20001154 	.word	0x20001154

00002b04 <pm_system_resume>:
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    2b04:	4b08      	ldr	r3, [pc, #32]	; (2b28 <pm_system_resume+0x24>)
{
    2b06:	b510      	push	{r4, lr}
	if (!post_ops_done) {
    2b08:	681c      	ldr	r4, [r3, #0]
    2b0a:	b95c      	cbnz	r4, 2b24 <pm_system_resume+0x20>
		post_ops_done = 1;
    2b0c:	2201      	movs	r2, #1
    2b0e:	601a      	str	r2, [r3, #0]
		pm_power_state_exit_post_ops(z_power_state);
    2b10:	4b06      	ldr	r3, [pc, #24]	; (2b2c <pm_system_resume+0x28>)
    2b12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    2b16:	f008 f8f4 	bl	ad02 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    2b1a:	4620      	mov	r0, r4
	}
}
    2b1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pm_state_notify(false);
    2b20:	f7ff bfca 	b.w	2ab8 <pm_state_notify>
}
    2b24:	bd10      	pop	{r4, pc}
    2b26:	bf00      	nop
    2b28:	200000f4 	.word	0x200000f4
    2b2c:	20001154 	.word	0x20001154

00002b30 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
    2b30:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b32:	b085      	sub	sp, #20
	z_power_state = pm_policy_next_state(ticks);
    2b34:	466e      	mov	r6, sp
    2b36:	4601      	mov	r1, r0
{
    2b38:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
    2b3a:	4630      	mov	r0, r6
    2b3c:	f007 fe14 	bl	a768 <pm_policy_next_state>
    2b40:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    2b44:	4c14      	ldr	r4, [pc, #80]	; (2b98 <pm_system_suspend+0x68>)
    2b46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    2b4a:	7820      	ldrb	r0, [r4, #0]
    2b4c:	b308      	cbz	r0, 2b92 <pm_system_suspend+0x62>
		LOG_DBG("No PM operations done.");
		return z_power_state.state;
	}
	post_ops_done = 0;
    2b4e:	4b13      	ldr	r3, [pc, #76]	; (2b9c <pm_system_suspend+0x6c>)
    2b50:	2100      	movs	r1, #0
    2b52:	6019      	str	r1, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
    2b54:	1c6b      	adds	r3, r5, #1
    2b56:	d00e      	beq.n	2b76 <pm_system_suspend+0x46>
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    2b58:	4811      	ldr	r0, [pc, #68]	; (2ba0 <pm_system_suspend+0x70>)
    2b5a:	4617      	mov	r7, r2
    2b5c:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    2b60:	2100      	movs	r1, #0
    2b62:	4a10      	ldr	r2, [pc, #64]	; (2ba4 <pm_system_suspend+0x74>)
    2b64:	2300      	movs	r3, #0
    2b66:	fbe6 0107 	umlal	r0, r1, r6, r7
    2b6a:	f7fd fac9 	bl	100 <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    2b6e:	2101      	movs	r1, #1
    2b70:	1a28      	subs	r0, r5, r0
    2b72:	f00a fc5b 	bl	d42c <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    2b76:	f005 fd97 	bl	86a8 <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
    2b7a:	2001      	movs	r0, #1
    2b7c:	f7ff ff9c 	bl	2ab8 <pm_state_notify>
	pm_power_state_set(z_power_state);
    2b80:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    2b84:	f008 f8aa 	bl	acdc <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
    2b88:	f7ff ffbc 	bl	2b04 <pm_system_resume>
	k_sched_unlock();
    2b8c:	f005 fe7e 	bl	888c <k_sched_unlock>

	return z_power_state.state;
    2b90:	7820      	ldrb	r0, [r4, #0]
}
    2b92:	b005      	add	sp, #20
    2b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b96:	bf00      	nop
    2b98:	20001154 	.word	0x20001154
    2b9c:	200000f4 	.word	0x200000f4
    2ba0:	000f423f 	.word	0x000f423f
    2ba4:	000f4240 	.word	0x000f4240

00002ba8 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    2ba8:	4a0e      	ldr	r2, [pc, #56]	; (2be4 <onoff_stop+0x3c>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2baa:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    2bac:	1a84      	subs	r4, r0, r2
    2bae:	10a3      	asrs	r3, r4, #2
    2bb0:	4c0d      	ldr	r4, [pc, #52]	; (2be8 <onoff_stop+0x40>)
    2bb2:	435c      	muls	r4, r3
{
    2bb4:	4605      	mov	r5, r0
    2bb6:	b2e4      	uxtb	r4, r4
	err = set_off_state(&subdata->flags, ctx);
    2bb8:	200c      	movs	r0, #12
    2bba:	fb00 2004 	mla	r0, r0, r4, r2
{
    2bbe:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
    2bc0:	2140      	movs	r1, #64	; 0x40
    2bc2:	4408      	add	r0, r1
    2bc4:	f007 fdde 	bl	a784 <set_off_state>
	if (err < 0) {
    2bc8:	1e01      	subs	r1, r0, #0
    2bca:	db05      	blt.n	2bd8 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
    2bcc:	4b07      	ldr	r3, [pc, #28]	; (2bec <onoff_stop+0x44>)
    2bce:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    2bd2:	6863      	ldr	r3, [r4, #4]
    2bd4:	4798      	blx	r3
	return 0;
    2bd6:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    2bd8:	4628      	mov	r0, r5
    2bda:	4633      	mov	r3, r6
}
    2bdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    2be0:	4718      	bx	r3
    2be2:	bf00      	nop
    2be4:	20001174 	.word	0x20001174
    2be8:	b6db6db7 	.word	0xb6db6db7
    2bec:	0000d8c8 	.word	0x0000d8c8

00002bf0 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    2bf4:	4e10      	ldr	r6, [pc, #64]	; (2c38 <onoff_start+0x48>)
    2bf6:	1b84      	subs	r4, r0, r6
    2bf8:	10a3      	asrs	r3, r4, #2
    2bfa:	4c10      	ldr	r4, [pc, #64]	; (2c3c <onoff_start+0x4c>)
    2bfc:	435c      	muls	r4, r3
    2bfe:	b2e4      	uxtb	r4, r4
	err = set_starting_state(&subdata->flags, ctx);
    2c00:	250c      	movs	r5, #12
    2c02:	4365      	muls	r5, r4
{
    2c04:	4680      	mov	r8, r0
	err = set_starting_state(&subdata->flags, ctx);
    2c06:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
    2c0a:	460f      	mov	r7, r1
	err = set_starting_state(&subdata->flags, ctx);
    2c0c:	4430      	add	r0, r6
    2c0e:	2140      	movs	r1, #64	; 0x40
    2c10:	f007 fdd1 	bl	a7b6 <set_starting_state>
	if (err < 0) {
    2c14:	1e01      	subs	r1, r0, #0
    2c16:	db09      	blt.n	2c2c <onoff_start+0x3c>
	subdata->cb = cb;
    2c18:	4a09      	ldr	r2, [pc, #36]	; (2c40 <onoff_start+0x50>)
    2c1a:	1973      	adds	r3, r6, r5
	subdata->user_data = user_data;
    2c1c:	e9c3 270e 	strd	r2, r7, [r3, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    2c20:	4b08      	ldr	r3, [pc, #32]	; (2c44 <onoff_start+0x54>)
    2c22:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    2c26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    2c2a:	4718      	bx	r3
		notify(mgr, err);
    2c2c:	4640      	mov	r0, r8
    2c2e:	463b      	mov	r3, r7
}
    2c30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    2c34:	4718      	bx	r3
    2c36:	bf00      	nop
    2c38:	20001174 	.word	0x20001174
    2c3c:	b6db6db7 	.word	0xb6db6db7
    2c40:	0000a819 	.word	0x0000a819
    2c44:	0000d8c8 	.word	0x0000d8c8

00002c48 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2c48:	2200      	movs	r2, #0
{
    2c4a:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2c4c:	2101      	movs	r1, #1
{
    2c4e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2c50:	4610      	mov	r0, r2
    2c52:	f001 fe69 	bl	4928 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    2c56:	2000      	movs	r0, #0
    2c58:	f001 fe34 	bl	48c4 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    2c5c:	480f      	ldr	r0, [pc, #60]	; (2c9c <clk_init+0x54>)
    2c5e:	f003 f859 	bl	5d14 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    2c62:	4b0f      	ldr	r3, [pc, #60]	; (2ca0 <clk_init+0x58>)
    2c64:	4298      	cmp	r0, r3
    2c66:	d115      	bne.n	2c94 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    2c68:	f003 f864 	bl	5d34 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    2c6c:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    2c6e:	490d      	ldr	r1, [pc, #52]	; (2ca4 <clk_init+0x5c>)
    2c70:	4630      	mov	r0, r6
    2c72:	f006 ff7b 	bl	9b6c <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    2c76:	2800      	cmp	r0, #0
    2c78:	db0b      	blt.n	2c92 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2c7a:	2501      	movs	r5, #1
    2c7c:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
    2c7e:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2c80:	4908      	ldr	r1, [pc, #32]	; (2ca4 <clk_init+0x5c>)
    2c82:	f104 001c 	add.w	r0, r4, #28
    2c86:	f006 ff71 	bl	9b6c <onoff_manager_init>
		if (err < 0) {
    2c8a:	2800      	cmp	r0, #0
    2c8c:	db01      	blt.n	2c92 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2c8e:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    2c90:	2000      	movs	r0, #0
}
    2c92:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    2c94:	f06f 0004 	mvn.w	r0, #4
    2c98:	e7fb      	b.n	2c92 <clk_init+0x4a>
    2c9a:	bf00      	nop
    2c9c:	00002cdd 	.word	0x00002cdd
    2ca0:	0bad0000 	.word	0x0bad0000
    2ca4:	0000d8d8 	.word	0x0000d8d8

00002ca8 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    2ca8:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    2caa:	230c      	movs	r3, #12
    2cac:	4809      	ldr	r0, [pc, #36]	; (2cd4 <clkstarted_handle.constprop.0+0x2c>)
    2cae:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    2cb0:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    2cb2:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    2cb4:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    2cb8:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    2cba:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    2cbc:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    2cbe:	4418      	add	r0, r3
    2cc0:	f007 fd97 	bl	a7f2 <set_on_state>
	if (callback) {
    2cc4:	b12d      	cbz	r5, 2cd2 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    2cc6:	4632      	mov	r2, r6
    2cc8:	462b      	mov	r3, r5
    2cca:	4803      	ldr	r0, [pc, #12]	; (2cd8 <clkstarted_handle.constprop.0+0x30>)
}
    2ccc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    2cd0:	4718      	bx	r3
}
    2cd2:	bd70      	pop	{r4, r5, r6, pc}
    2cd4:	20001174 	.word	0x20001174
    2cd8:	200001fc 	.word	0x200001fc

00002cdc <clock_event_handler>:
	switch (event) {
    2cdc:	b110      	cbz	r0, 2ce4 <clock_event_handler+0x8>
    2cde:	2801      	cmp	r0, #1
    2ce0:	d004      	beq.n	2cec <clock_event_handler+0x10>
    2ce2:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    2ce4:	4b03      	ldr	r3, [pc, #12]	; (2cf4 <clock_event_handler+0x18>)
    2ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2ce8:	075b      	lsls	r3, r3, #29
    2cea:	d101      	bne.n	2cf0 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    2cec:	f7ff bfdc 	b.w	2ca8 <clkstarted_handle.constprop.0>
}
    2cf0:	4770      	bx	lr
    2cf2:	bf00      	nop
    2cf4:	20001174 	.word	0x20001174

00002cf8 <generic_hfclk_start>:
{
    2cf8:	b508      	push	{r3, lr}
	__asm__ volatile(
    2cfa:	f04f 0320 	mov.w	r3, #32
    2cfe:	f3ef 8111 	mrs	r1, BASEPRI
    2d02:	f383 8811 	msr	BASEPRI, r3
    2d06:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    2d0a:	4a12      	ldr	r2, [pc, #72]	; (2d54 <generic_hfclk_start+0x5c>)
    2d0c:	6813      	ldr	r3, [r2, #0]
    2d0e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    2d12:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    2d16:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    2d18:	d00c      	beq.n	2d34 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2d1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2d1e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2d22:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    2d26:	f013 0301 	ands.w	r3, r3, #1
    2d2a:	d003      	beq.n	2d34 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    2d2c:	480a      	ldr	r0, [pc, #40]	; (2d58 <generic_hfclk_start+0x60>)
    2d2e:	f007 fd60 	bl	a7f2 <set_on_state>
			already_started = true;
    2d32:	2301      	movs	r3, #1
	__asm__ volatile(
    2d34:	f381 8811 	msr	BASEPRI, r1
    2d38:	f3bf 8f6f 	isb	sy
	if (already_started) {
    2d3c:	b123      	cbz	r3, 2d48 <generic_hfclk_start+0x50>
}
    2d3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    2d42:	2000      	movs	r0, #0
    2d44:	f7ff bfb0 	b.w	2ca8 <clkstarted_handle.constprop.0>
}
    2d48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    2d4c:	2001      	movs	r0, #1
    2d4e:	f002 bfff 	b.w	5d50 <nrfx_clock_start>
    2d52:	bf00      	nop
    2d54:	200011c4 	.word	0x200011c4
    2d58:	200011b4 	.word	0x200011b4

00002d5c <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2d5c:	4b09      	ldr	r3, [pc, #36]	; (2d84 <generic_hfclk_stop+0x28>)
    2d5e:	f3bf 8f5b 	dmb	ish
    2d62:	e853 2f00 	ldrex	r2, [r3]
    2d66:	f022 0102 	bic.w	r1, r2, #2
    2d6a:	e843 1000 	strex	r0, r1, [r3]
    2d6e:	2800      	cmp	r0, #0
    2d70:	d1f7      	bne.n	2d62 <generic_hfclk_stop+0x6>
    2d72:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    2d76:	07d3      	lsls	r3, r2, #31
    2d78:	d402      	bmi.n	2d80 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    2d7a:	2001      	movs	r0, #1
    2d7c:	f003 b81a 	b.w	5db4 <nrfx_clock_stop>
}
    2d80:	4770      	bx	lr
    2d82:	bf00      	nop
    2d84:	200011c4 	.word	0x200011c4

00002d88 <api_blocking_start>:
{
    2d88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2d8a:	2200      	movs	r2, #0
    2d8c:	2301      	movs	r3, #1
    2d8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2d92:	4a09      	ldr	r2, [pc, #36]	; (2db8 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2d94:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2d98:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2d9a:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2d9e:	f007 fd61 	bl	a864 <api_start>
	if (err < 0) {
    2da2:	2800      	cmp	r0, #0
    2da4:	db05      	blt.n	2db2 <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    2da6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2daa:	2300      	movs	r3, #0
    2dac:	4668      	mov	r0, sp
    2dae:	f005 fad1 	bl	8354 <z_impl_k_sem_take>
}
    2db2:	b005      	add	sp, #20
    2db4:	f85d fb04 	ldr.w	pc, [sp], #4
    2db8:	0000a837 	.word	0x0000a837

00002dbc <z_nrf_clock_control_get_onoff>:
}
    2dbc:	4a02      	ldr	r2, [pc, #8]	; (2dc8 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    2dbe:	b2c3      	uxtb	r3, r0
}
    2dc0:	201c      	movs	r0, #28
    2dc2:	fb03 2000 	mla	r0, r3, r0, r2
    2dc6:	4770      	bx	lr
    2dc8:	20001174 	.word	0x20001174

00002dcc <z_nrf_clock_control_lf_on>:
{
    2dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2dd0:	493a      	ldr	r1, [pc, #232]	; (2ebc <z_nrf_clock_control_lf_on+0xf0>)
    2dd2:	f3bf 8f5b 	dmb	ish
    2dd6:	4606      	mov	r6, r0
    2dd8:	2201      	movs	r2, #1
    2dda:	e851 3f00 	ldrex	r3, [r1]
    2dde:	e841 2000 	strex	r0, r2, [r1]
    2de2:	2800      	cmp	r0, #0
    2de4:	d1f9      	bne.n	2dda <z_nrf_clock_control_lf_on+0xe>
    2de6:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    2dea:	b933      	cbnz	r3, 2dfa <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    2dec:	4934      	ldr	r1, [pc, #208]	; (2ec0 <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
    2dee:	4835      	ldr	r0, [pc, #212]	; (2ec4 <z_nrf_clock_control_lf_on+0xf8>)
    2df0:	604b      	str	r3, [r1, #4]
    2df2:	60cb      	str	r3, [r1, #12]
    2df4:	608a      	str	r2, [r1, #8]
    2df6:	f006 fecc 	bl	9b92 <onoff_request>
	switch (start_mode) {
    2dfa:	1e73      	subs	r3, r6, #1
    2dfc:	2b01      	cmp	r3, #1
    2dfe:	d832      	bhi.n	2e66 <z_nrf_clock_control_lf_on+0x9a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    2e00:	2e01      	cmp	r6, #1
    2e02:	d107      	bne.n	2e14 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    2e04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2e08:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    2e0c:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    2e10:	2b01      	cmp	r3, #1
    2e12:	d028      	beq.n	2e66 <z_nrf_clock_control_lf_on+0x9a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2e14:	f00a f931 	bl	d07a <k_is_in_isr>
    2e18:	4604      	mov	r4, r0
    2e1a:	b918      	cbnz	r0, 2e24 <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
    2e1c:	4b2a      	ldr	r3, [pc, #168]	; (2ec8 <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
    2e1e:	781b      	ldrb	r3, [r3, #0]
    2e20:	2b00      	cmp	r3, #0
    2e22:	d144      	bne.n	2eae <z_nrf_clock_control_lf_on+0xe2>
	__asm__ volatile(
    2e24:	f04f 0320 	mov.w	r3, #32
    2e28:	f3ef 8511 	mrs	r5, BASEPRI
    2e2c:	f383 8811 	msr	BASEPRI, r3
    2e30:	f3bf 8f6f 	isb	sy
    2e34:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2e36:	4f25      	ldr	r7, [pc, #148]	; (2ecc <z_nrf_clock_control_lf_on+0x100>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2e38:	f8df 8094 	ldr.w	r8, [pc, #148]	; 2ed0 <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2e3c:	f8df 9094 	ldr.w	r9, [pc, #148]	; 2ed4 <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2e40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2e44:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2e48:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    2e4c:	03d2      	lsls	r2, r2, #15
    2e4e:	d50c      	bpl.n	2e6a <z_nrf_clock_control_lf_on+0x9e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    2e50:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    2e54:	2b01      	cmp	r3, #1
    2e56:	d001      	beq.n	2e5c <z_nrf_clock_control_lf_on+0x90>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    2e58:	2e01      	cmp	r6, #1
    2e5a:	d106      	bne.n	2e6a <z_nrf_clock_control_lf_on+0x9e>
	if (isr_mode) {
    2e5c:	b30c      	cbz	r4, 2ea2 <z_nrf_clock_control_lf_on+0xd6>
	__asm__ volatile(
    2e5e:	f385 8811 	msr	BASEPRI, r5
    2e62:	f3bf 8f6f 	isb	sy
}
    2e66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    2e6a:	b1ac      	cbz	r4, 2e98 <z_nrf_clock_control_lf_on+0xcc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    2e6c:	4628      	mov	r0, r5
    2e6e:	f001 fdd3 	bl	4a18 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    2e72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2e76:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    2e7a:	2b00      	cmp	r3, #0
    2e7c:	d1e0      	bne.n	2e40 <z_nrf_clock_control_lf_on+0x74>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2e7e:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    2e80:	2900      	cmp	r1, #0
    2e82:	d0dd      	beq.n	2e40 <z_nrf_clock_control_lf_on+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2e84:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    2e86:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    2e88:	2301      	movs	r3, #1
    2e8a:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    2e8e:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2e92:	f8c9 3000 	str.w	r3, [r9]
}
    2e96:	e7d3      	b.n	2e40 <z_nrf_clock_control_lf_on+0x74>
	return z_impl_k_sleep(timeout);
    2e98:	2100      	movs	r1, #0
    2e9a:	2021      	movs	r0, #33	; 0x21
    2e9c:	f005 fe92 	bl	8bc4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2ea0:	e7e7      	b.n	2e72 <z_nrf_clock_control_lf_on+0xa6>
    p_reg->INTENSET = mask;
    2ea2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2ea6:	2202      	movs	r2, #2
    2ea8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    2eac:	e7db      	b.n	2e66 <z_nrf_clock_control_lf_on+0x9a>
    p_reg->INTENCLR = mask;
    2eae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2eb2:	2202      	movs	r2, #2
    2eb4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    2eb8:	4605      	mov	r5, r0
}
    2eba:	e7bc      	b.n	2e36 <z_nrf_clock_control_lf_on+0x6a>
    2ebc:	200011c8 	.word	0x200011c8
    2ec0:	20001164 	.word	0x20001164
    2ec4:	20001190 	.word	0x20001190
    2ec8:	2000516b 	.word	0x2000516b
    2ecc:	40000104 	.word	0x40000104
    2ed0:	e000e100 	.word	0xe000e100
    2ed4:	40000008 	.word	0x40000008

00002ed8 <endpoint_ctx>:
	return (uint8_t)ep;
}

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);
    2ed8:	f000 037f 	and.w	r3, r0, #127	; 0x7f

	if (NRF_USBD_EPIN_CHECK(ep)) {
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    2edc:	2b08      	cmp	r3, #8
	if (NRF_USBD_EPIN_CHECK(ep)) {
    2ede:	b241      	sxtb	r1, r0
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    2ee0:	d004      	beq.n	2eec <endpoint_ctx+0x14>
			if (CFG_EP_ISOIN_CNT == 0) {
				return false;
			}
		} else {
			if (ep_num >= CFG_EPIN_CNT) {
    2ee2:	f010 0f78 	tst.w	r0, #120	; 0x78
    2ee6:	d001      	beq.n	2eec <endpoint_ctx+0x14>
{
	struct nrf_usbd_ctx *ctx;
	uint8_t ep_num;

	if (!ep_is_valid(ep)) {
		return NULL;
    2ee8:	2000      	movs	r0, #0
    2eea:	4770      	bx	lr
	}

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
    2eec:	2900      	cmp	r1, #0
	ep_num = NRF_USBD_EP_NR_GET(ep);
    2eee:	f000 020f 	and.w	r2, r0, #15
	if (NRF_USBD_EPIN_CHECK(ep)) {
    2ef2:	f000 0008 	and.w	r0, r0, #8
    2ef6:	da05      	bge.n	2f04 <endpoint_ctx+0x2c>
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    2ef8:	b958      	cbnz	r0, 2f12 <endpoint_ctx+0x3a>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
		} else {
			return &ctx->ep_ctx[ep_num];
    2efa:	4808      	ldr	r0, [pc, #32]	; (2f1c <endpoint_ctx+0x44>)
    2efc:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    2f00:	304c      	adds	r0, #76	; 0x4c
    2f02:	4770      	bx	lr
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    2f04:	b938      	cbnz	r0, 2f16 <endpoint_ctx+0x3e>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
		} else {
			return &ctx->ep_ctx[CFG_EPIN_CNT +
    2f06:	4805      	ldr	r0, [pc, #20]	; (2f1c <endpoint_ctx+0x44>)
    2f08:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    2f0c:	f500 70b6 	add.w	r0, r0, #364	; 0x16c
    2f10:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
    2f12:	4803      	ldr	r0, [pc, #12]	; (2f20 <endpoint_ctx+0x48>)
    2f14:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
    2f16:	4803      	ldr	r0, [pc, #12]	; (2f24 <endpoint_ctx+0x4c>)
					    ep_num];
		}
	}

	return NULL;
}
    2f18:	4770      	bx	lr
    2f1a:	bf00      	nop
    2f1c:	200017cc 	.word	0x200017cc
    2f20:	20001918 	.word	0x20001918
    2f24:	20001a38 	.word	0x20001a38

00002f28 <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
    2f28:	4601      	mov	r1, r0
	k_fifo_put(&usbd_evt_fifo, ev);
    2f2a:	4801      	ldr	r0, [pc, #4]	; (2f30 <usbd_evt_put+0x8>)
    2f2c:	f00a b92a 	b.w	d184 <k_queue_append>
    2f30:	2000033c 	.word	0x2000033c

00002f34 <usbd_work_schedule>:
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    2f34:	4901      	ldr	r1, [pc, #4]	; (2f3c <usbd_work_schedule+0x8>)
    2f36:	4802      	ldr	r0, [pc, #8]	; (2f40 <usbd_work_schedule+0xc>)
    2f38:	f00a b94b 	b.w	d1d2 <k_work_submit_to_queue>
    2f3c:	200017f4 	.word	0x200017f4
    2f40:	200004d0 	.word	0x200004d0

00002f44 <usb_init>:
	}
	return 0;
}

static int usb_init(const struct device *arg)
{
    2f44:	b513      	push	{r0, r1, r4, lr}
	};

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
    2f46:	480b      	ldr	r0, [pc, #44]	; (2f74 <usb_init+0x30>)
    2f48:	f003 f83a 	bl	5fc0 <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);

	k_work_queue_start(&usbd_work_queue,
    2f4c:	2400      	movs	r4, #0
	nrfx_power_usbevt_init(&usbevt_config);
    2f4e:	480a      	ldr	r0, [pc, #40]	; (2f78 <usb_init+0x34>)
    2f50:	f003 f87e 	bl	6050 <nrfx_power_usbevt_init>
	k_work_queue_start(&usbd_work_queue,
    2f54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2f58:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2f5c:	4907      	ldr	r1, [pc, #28]	; (2f7c <usb_init+0x38>)
    2f5e:	4808      	ldr	r0, [pc, #32]	; (2f80 <usb_init+0x3c>)
    2f60:	9400      	str	r4, [sp, #0]
    2f62:	f005 fb0f 	bl	8584 <k_work_queue_start>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_work_init(&ctx->usb_work, usbd_work_handler);
    2f66:	4907      	ldr	r1, [pc, #28]	; (2f84 <usb_init+0x40>)
    2f68:	4807      	ldr	r0, [pc, #28]	; (2f88 <usb_init+0x44>)
    2f6a:	f00a f929 	bl	d1c0 <k_work_init>

	return 0;
}
    2f6e:	4620      	mov	r0, r4
    2f70:	b002      	add	sp, #8
    2f72:	bd10      	pop	{r4, pc}
    2f74:	0000df04 	.word	0x0000df04
    2f78:	0000d8e4 	.word	0x0000d8e4
    2f7c:	200055a0 	.word	0x200055a0
    2f80:	200004d0 	.word	0x200004d0
    2f84:	000032a5 	.word	0x000032a5
    2f88:	200017f4 	.word	0x200017f4

00002f8c <hfxo_stop.constprop.0>:
static int hfxo_stop(struct nrf_usbd_ctx *ctx)
    2f8c:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2f8e:	4911      	ldr	r1, [pc, #68]	; (2fd4 <hfxo_stop.constprop.0+0x48>)
    2f90:	f3bf 8f5b 	dmb	ish
    2f94:	f101 0320 	add.w	r3, r1, #32
    2f98:	2200      	movs	r2, #0
    2f9a:	e853 0f00 	ldrex	r0, [r3]
    2f9e:	2801      	cmp	r0, #1
    2fa0:	d103      	bne.n	2faa <hfxo_stop.constprop.0+0x1e>
    2fa2:	e843 2400 	strex	r4, r2, [r3]
    2fa6:	2c00      	cmp	r4, #0
    2fa8:	d1f7      	bne.n	2f9a <hfxo_stop.constprop.0+0xe>
    2faa:	f3bf 8f5b 	dmb	ish
    2fae:	bf0c      	ite	eq
    2fb0:	2001      	moveq	r0, #1
    2fb2:	4610      	movne	r0, r2
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
    2fb4:	d10c      	bne.n	2fd0 <hfxo_stop.constprop.0+0x44>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
    2fb6:	69cc      	ldr	r4, [r1, #28]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
    2fb8:	310c      	adds	r1, #12
    2fba:	4620      	mov	r0, r4
    2fbc:	f006 fe57 	bl	9c6e <onoff_cancel>

	if (rv == -EALREADY) {
    2fc0:	f110 0f78 	cmn.w	r0, #120	; 0x78
    2fc4:	d104      	bne.n	2fd0 <hfxo_stop.constprop.0+0x44>
		rv = onoff_release(mgr);
    2fc6:	4620      	mov	r0, r4
}
    2fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2fcc:	f006 be2a 	b.w	9c24 <onoff_release>
    2fd0:	bd10      	pop	{r4, pc}
    2fd2:	bf00      	nop
    2fd4:	200017cc 	.word	0x200017cc

00002fd8 <usbd_evt_flush>:
{
    2fd8:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_queue_get(queue, timeout);
    2fda:	4d07      	ldr	r5, [pc, #28]	; (2ff8 <usbd_evt_flush+0x20>)
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    2fdc:	4c07      	ldr	r4, [pc, #28]	; (2ffc <usbd_evt_flush+0x24>)
    2fde:	2200      	movs	r2, #0
    2fe0:	2300      	movs	r3, #0
    2fe2:	4628      	mov	r0, r5
    2fe4:	f005 f962 	bl	82ac <z_impl_k_queue_get>
		if (ev) {
    2fe8:	b120      	cbz	r0, 2ff4 <usbd_evt_flush+0x1c>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    2fea:	1d01      	adds	r1, r0, #4
    2fec:	4620      	mov	r0, r4
    2fee:	f00a f81b 	bl	d028 <k_mem_slab_free>
	} while (ev != NULL);
    2ff2:	e7f4      	b.n	2fde <usbd_evt_flush+0x6>
}
    2ff4:	bd38      	pop	{r3, r4, r5, pc}
    2ff6:	bf00      	nop
    2ff8:	2000033c 	.word	0x2000033c
    2ffc:	200002bc 	.word	0x200002bc

00003000 <usbd_evt_alloc>:
{
    3000:	b507      	push	{r0, r1, r2, lr}
	if (k_mem_slab_alloc(&fifo_elem_slab,
    3002:	2300      	movs	r3, #0
    3004:	480e      	ldr	r0, [pc, #56]	; (3040 <usbd_evt_alloc+0x40>)
    3006:	2200      	movs	r2, #0
    3008:	a901      	add	r1, sp, #4
    300a:	f004 ff8f 	bl	7f2c <k_mem_slab_alloc>
    300e:	b190      	cbz	r0, 3036 <usbd_evt_alloc+0x36>
		usbd_evt_flush();
    3010:	f7ff ffe2 	bl	2fd8 <usbd_evt_flush>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    3014:	480a      	ldr	r0, [pc, #40]	; (3040 <usbd_evt_alloc+0x40>)
    3016:	2200      	movs	r2, #0
    3018:	2300      	movs	r3, #0
    301a:	a901      	add	r1, sp, #4
    301c:	f004 ff86 	bl	7f2c <k_mem_slab_alloc>
    3020:	b938      	cbnz	r0, 3032 <usbd_evt_alloc+0x32>
		ev = (struct usbd_event *)block.data;
    3022:	9801      	ldr	r0, [sp, #4]
		ev->evt_type = USBD_EVT_REINIT;
    3024:	2304      	movs	r3, #4
		ev->block = block;
    3026:	6040      	str	r0, [r0, #4]
		ev->evt_type = USBD_EVT_REINIT;
    3028:	7403      	strb	r3, [r0, #16]
		usbd_evt_put(ev);
    302a:	f7ff ff7d 	bl	2f28 <usbd_evt_put>
		usbd_work_schedule();
    302e:	f7ff ff81 	bl	2f34 <usbd_work_schedule>
		return NULL;
    3032:	2000      	movs	r0, #0
    3034:	e001      	b.n	303a <usbd_evt_alloc+0x3a>
	ev = (struct usbd_event *)block.data;
    3036:	9801      	ldr	r0, [sp, #4]
	ev->block = block;
    3038:	6040      	str	r0, [r0, #4]
}
    303a:	b003      	add	sp, #12
    303c:	f85d fb04 	ldr.w	pc, [sp], #4
    3040:	200002bc 	.word	0x200002bc

00003044 <usbd_event_transfer_data>:
{
    3044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		endpoint_ctx(p_event->data.eptransfer.ep);
    3046:	7887      	ldrb	r7, [r0, #2]
{
    3048:	4606      	mov	r6, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
    304a:	4638      	mov	r0, r7
    304c:	f7ff ff44 	bl	2ed8 <endpoint_ctx>
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    3050:	063b      	lsls	r3, r7, #24
    3052:	78f5      	ldrb	r5, [r6, #3]
		endpoint_ctx(p_event->data.eptransfer.ep);
    3054:	4604      	mov	r4, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    3056:	d512      	bpl.n	307e <usbd_event_transfer_data+0x3a>
		switch (p_event->data.eptransfer.status) {
    3058:	2d00      	cmp	r5, #0
    305a:	d143      	bne.n	30e4 <usbd_event_transfer_data+0xa0>
			struct usbd_event *ev = usbd_evt_alloc();
    305c:	f7ff ffd0 	bl	3000 <usbd_evt_alloc>
			if (!ev) {
    3060:	4603      	mov	r3, r0
    3062:	2800      	cmp	r0, #0
    3064:	d03e      	beq.n	30e4 <usbd_event_transfer_data+0xa0>
			ev->evt_type = USBD_EVT_EP;
    3066:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    3068:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
    306a:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    306c:	2203      	movs	r2, #3
    306e:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    3070:	609c      	str	r4, [r3, #8]
			usbd_evt_put(ev);
    3072:	f7ff ff59 	bl	2f28 <usbd_evt_put>
}
    3076:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			usbd_work_schedule();
    307a:	f7ff bf5b 	b.w	2f34 <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
    307e:	b14d      	cbz	r5, 3094 <usbd_event_transfer_data+0x50>
    3080:	2d01      	cmp	r5, #1
    3082:	d12f      	bne.n	30e4 <usbd_event_transfer_data+0xa0>
			struct usbd_event *ev = usbd_evt_alloc();
    3084:	f7ff ffbc 	bl	3000 <usbd_evt_alloc>
			if (!ev) {
    3088:	4603      	mov	r3, r0
    308a:	b358      	cbz	r0, 30e4 <usbd_event_transfer_data+0xa0>
			ep_ctx->read_pending = true;
    308c:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
    308e:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    3090:	7305      	strb	r5, [r0, #12]
    3092:	e7ed      	b.n	3070 <usbd_event_transfer_data+0x2c>
			struct usbd_event *ev = usbd_evt_alloc();
    3094:	f7ff ffb4 	bl	3000 <usbd_evt_alloc>
			if (!ev) {
    3098:	b320      	cbz	r0, 30e4 <usbd_event_transfer_data+0xa0>
				p_event->data.eptransfer.ep);
    309a:	78b3      	ldrb	r3, [r6, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
    309c:	4a12      	ldr	r2, [pc, #72]	; (30e8 <usbd_event_transfer_data+0xa4>)
    309e:	f013 0f80 	tst.w	r3, #128	; 0x80
    30a2:	f003 0108 	and.w	r1, r3, #8
    30a6:	d011      	beq.n	30cc <usbd_event_transfer_data+0x88>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    30a8:	b141      	cbz	r1, 30bc <usbd_event_transfer_data+0x78>
        {
            ret = p_reg->ISOIN.AMOUNT;
    30aa:	f8d2 36a8 	ldr.w	r3, [r2, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
    30ae:	60e3      	str	r3, [r4, #12]
			ev->evt_type = USBD_EVT_EP;
    30b0:	2301      	movs	r3, #1
    30b2:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    30b4:	2302      	movs	r3, #2
    30b6:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    30b8:	6084      	str	r4, [r0, #8]
    30ba:	e7da      	b.n	3072 <usbd_event_transfer_data+0x2e>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPIN[epnr].AMOUNT;
    30bc:	f003 030f 	and.w	r3, r3, #15
    30c0:	2114      	movs	r1, #20
    30c2:	fb01 2303 	mla	r3, r1, r3, r2
    30c6:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    30ca:	e7f0      	b.n	30ae <usbd_event_transfer_data+0x6a>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    30cc:	b111      	cbz	r1, 30d4 <usbd_event_transfer_data+0x90>
        {
            ret = p_reg->ISOOUT.AMOUNT;
    30ce:	f8d2 37a8 	ldr.w	r3, [r2, #1960]	; 0x7a8
    30d2:	e7ec      	b.n	30ae <usbd_event_transfer_data+0x6a>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPOUT[epnr].AMOUNT;
    30d4:	f003 030f 	and.w	r3, r3, #15
    30d8:	2114      	movs	r1, #20
    30da:	fb01 2303 	mla	r3, r1, r3, r2
    30de:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    30e2:	e7e4      	b.n	30ae <usbd_event_transfer_data+0x6a>
}
    30e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    30e6:	bf00      	nop
    30e8:	40027000 	.word	0x40027000

000030ec <usbd_event_handler>:
{
    30ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    30ee:	4606      	mov	r6, r0
    30f0:	b089      	sub	sp, #36	; 0x24
	struct usbd_event evt = {0};
    30f2:	2214      	movs	r2, #20
    30f4:	2100      	movs	r1, #0
    30f6:	a803      	add	r0, sp, #12
    30f8:	f007 fdcb 	bl	ac92 <memset>
	switch (p_event->type) {
    30fc:	7833      	ldrb	r3, [r6, #0]
    30fe:	3b01      	subs	r3, #1
    3100:	2b05      	cmp	r3, #5
    3102:	d824      	bhi.n	314e <usbd_event_handler+0x62>
    3104:	e8df f003 	tbb	[pc, r3]
    3108:	17170379 	.word	0x17170379
    310c:	1969      	.short	0x1969
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
    310e:	2303      	movs	r3, #3
		evt.evt.pwr_evt.state = USBD_RESUMED;
    3110:	f88d 3014 	strb.w	r3, [sp, #20]
		evt.evt_type = USBD_EVT_POWER;
    3114:	2400      	movs	r4, #0
		ev = usbd_evt_alloc();
    3116:	f7ff ff73 	bl	3000 <usbd_evt_alloc>
		if (!ev) {
    311a:	4603      	mov	r3, r0
    311c:	b1b8      	cbz	r0, 314e <usbd_event_handler+0x62>
		ev->evt = evt.evt;
    311e:	2200      	movs	r2, #0
    3120:	f88d 2018 	strb.w	r2, [sp, #24]
		ev->evt_type = evt.evt_type;
    3124:	7404      	strb	r4, [r0, #16]
		ev->evt = evt.evt;
    3126:	f100 0208 	add.w	r2, r0, #8
    312a:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
    312e:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
    3132:	4618      	mov	r0, r3
    3134:	e01d      	b.n	3172 <usbd_event_handler+0x86>
		evt.evt.pwr_evt.state = USBD_RESUMED;
    3136:	2304      	movs	r3, #4
    3138:	e7ea      	b.n	3110 <usbd_event_handler+0x24>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    313a:	78b7      	ldrb	r7, [r6, #2]
    313c:	4638      	mov	r0, r7
    313e:	f7ff fecb 	bl	2ed8 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
    3142:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    3144:	4604      	mov	r4, r0
		switch (ep_ctx->cfg.type) {
    3146:	b123      	cbz	r3, 3152 <usbd_event_handler+0x66>
    3148:	3b01      	subs	r3, #1
    314a:	2b02      	cmp	r3, #2
    314c:	d941      	bls.n	31d2 <usbd_event_handler+0xe6>
}
    314e:	b009      	add	sp, #36	; 0x24
    3150:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    3152:	063b      	lsls	r3, r7, #24
    3154:	78f5      	ldrb	r5, [r6, #3]
    3156:	d511      	bpl.n	317c <usbd_event_handler+0x90>
		switch (p_event->data.eptransfer.status) {
    3158:	2d00      	cmp	r5, #0
    315a:	d1f8      	bne.n	314e <usbd_event_handler+0x62>
			struct usbd_event *ev = usbd_evt_alloc();
    315c:	f7ff ff50 	bl	3000 <usbd_evt_alloc>
			if (!ev) {
    3160:	4603      	mov	r3, r0
    3162:	2800      	cmp	r0, #0
    3164:	d0f3      	beq.n	314e <usbd_event_handler+0x62>
			ev->evt_type = USBD_EVT_EP;
    3166:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    3168:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
    316a:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    316c:	2203      	movs	r2, #3
    316e:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    3170:	609c      	str	r4, [r3, #8]
		usbd_evt_put(ev);
    3172:	f7ff fed9 	bl	2f28 <usbd_evt_put>
		usbd_work_schedule();
    3176:	f7ff fedd 	bl	2f34 <usbd_work_schedule>
    317a:	e7e8      	b.n	314e <usbd_event_handler+0x62>
		switch (p_event->data.eptransfer.status) {
    317c:	b155      	cbz	r5, 3194 <usbd_event_handler+0xa8>
    317e:	2d01      	cmp	r5, #1
    3180:	d1e5      	bne.n	314e <usbd_event_handler+0x62>
			struct usbd_event *ev = usbd_evt_alloc();
    3182:	f7ff ff3d 	bl	3000 <usbd_evt_alloc>
			if (!ev) {
    3186:	4603      	mov	r3, r0
    3188:	2800      	cmp	r0, #0
    318a:	d0e0      	beq.n	314e <usbd_event_handler+0x62>
			ep_ctx->read_pending = true;
    318c:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
    318e:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    3190:	7305      	strb	r5, [r0, #12]
    3192:	e7ed      	b.n	3170 <usbd_event_handler+0x84>
			struct usbd_event *ev = usbd_evt_alloc();
    3194:	f7ff ff34 	bl	3000 <usbd_evt_alloc>
			if (!ev) {
    3198:	4607      	mov	r7, r0
    319a:	2800      	cmp	r0, #0
    319c:	d0d7      	beq.n	314e <usbd_event_handler+0x62>
			ev->evt_type = USBD_EVT_EP;
    319e:	2301      	movs	r3, #1
    31a0:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    31a2:	2302      	movs	r3, #2
    31a4:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    31a6:	6084      	str	r4, [r0, #8]
			err_code = nrfx_usbd_ep_status_get(
    31a8:	f104 010c 	add.w	r1, r4, #12
    31ac:	78b0      	ldrb	r0, [r6, #2]
    31ae:	f008 f9bb 	bl	b528 <nrfx_usbd_ep_status_get>
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
    31b2:	4a13      	ldr	r2, [pc, #76]	; (3200 <usbd_event_handler+0x114>)
    31b4:	68e1      	ldr	r1, [r4, #12]
    31b6:	f8b2 328c 	ldrh.w	r3, [r2, #652]	; 0x28c
    31ba:	428b      	cmp	r3, r1
    31bc:	d906      	bls.n	31cc <usbd_event_handler+0xe0>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
    31be:	1a5b      	subs	r3, r3, r1
    31c0:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
    31c4:	f003 fcee 	bl	6ba4 <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
    31c8:	4638      	mov	r0, r7
    31ca:	e7d2      	b.n	3172 <usbd_event_handler+0x86>
				ctx->ctrl_read_len = 0U;
    31cc:	f8a2 528c 	strh.w	r5, [r2, #652]	; 0x28c
    31d0:	e7fa      	b.n	31c8 <usbd_event_handler+0xdc>
			usbd_event_transfer_data(p_event);
    31d2:	4630      	mov	r0, r6
    31d4:	f7ff ff36 	bl	3044 <usbd_event_transfer_data>
	if (put_evt) {
    31d8:	e7b9      	b.n	314e <usbd_event_handler+0x62>
		nrfx_usbd_setup_get(&drv_setup);
    31da:	a801      	add	r0, sp, #4
    31dc:	f003 fcbc 	bl	6b58 <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != REQ_SET_ADDRESS)
    31e0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    31e4:	2b05      	cmp	r3, #5
    31e6:	d104      	bne.n	31f2 <usbd_event_handler+0x106>
		    || (REQTYPE_GET_TYPE(drv_setup.bmRequestType)
    31e8:	f89d 3004 	ldrb.w	r3, [sp, #4]
    31ec:	f013 0f60 	tst.w	r3, #96	; 0x60
    31f0:	d0ad      	beq.n	314e <usbd_event_handler+0x62>
			evt.evt.ep_evt.ep = ep_ctx;
    31f2:	4b04      	ldr	r3, [pc, #16]	; (3204 <usbd_event_handler+0x118>)
    31f4:	9305      	str	r3, [sp, #20]
			evt.evt_type = USBD_EVT_EP;
    31f6:	2401      	movs	r4, #1
    31f8:	e78d      	b.n	3116 <usbd_event_handler+0x2a>
	switch (p_event->type) {
    31fa:	2402      	movs	r4, #2
    31fc:	e78b      	b.n	3116 <usbd_event_handler+0x2a>
    31fe:	bf00      	nop
    3200:	200017cc 	.word	0x200017cc
    3204:	20001938 	.word	0x20001938

00003208 <usb_dc_power_event_handler>:
	switch (event) {
    3208:	2802      	cmp	r0, #2
{
    320a:	b510      	push	{r4, lr}
    320c:	d811      	bhi.n	3232 <usb_dc_power_event_handler+0x2a>
    320e:	4b09      	ldr	r3, [pc, #36]	; (3234 <usb_dc_power_event_handler+0x2c>)
    3210:	5c1c      	ldrb	r4, [r3, r0]
	struct usbd_event *ev = usbd_evt_alloc();
    3212:	f7ff fef5 	bl	3000 <usbd_evt_alloc>
	if (!ev) {
    3216:	b160      	cbz	r0, 3232 <usb_dc_power_event_handler+0x2a>
	ev->evt_type = USBD_EVT_POWER;
    3218:	2200      	movs	r2, #0
    321a:	7402      	strb	r2, [r0, #16]
	ev->evt.pwr_evt.state = state;
    321c:	7204      	strb	r4, [r0, #8]
	usbd_evt_put(ev);
    321e:	f7ff fe83 	bl	2f28 <usbd_evt_put>
	if (usbd_ctx.attached) {
    3222:	4b05      	ldr	r3, [pc, #20]	; (3238 <usb_dc_power_event_handler+0x30>)
    3224:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    3228:	b11b      	cbz	r3, 3232 <usb_dc_power_event_handler+0x2a>
}
    322a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usbd_work_schedule();
    322e:	f7ff be81 	b.w	2f34 <usbd_work_schedule>
}
    3232:	bd10      	pop	{r4, pc}
    3234:	0000df01 	.word	0x0000df01
    3238:	200017cc 	.word	0x200017cc

0000323c <eps_ctx_init>:
{
    323c:	b538      	push	{r3, r4, r5, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    323e:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    3240:	f064 007f 	orn	r0, r4, #127	; 0x7f
    3244:	b2c0      	uxtb	r0, r0
    3246:	f7ff fe47 	bl	2ed8 <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    324a:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    324c:	f007 fb25 	bl	a89a <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    3250:	2c08      	cmp	r4, #8
    3252:	d1f5      	bne.n	3240 <eps_ctx_init+0x4>
			ep_ctx->buf.block.data = ep_out_bufs[i];
    3254:	4d0f      	ldr	r5, [pc, #60]	; (3294 <eps_ctx_init+0x58>)
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    3256:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    3258:	b2e0      	uxtb	r0, r4
    325a:	f7ff fe3d 	bl	2ed8 <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
    325e:	6903      	ldr	r3, [r0, #16]
    3260:	b913      	cbnz	r3, 3268 <eps_ctx_init+0x2c>
			ep_ctx->buf.block.data = ep_out_bufs[i];
    3262:	eb05 1384 	add.w	r3, r5, r4, lsl #6
    3266:	6103      	str	r3, [r0, #16]
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    3268:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    326a:	f007 fb16 	bl	a89a <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    326e:	2c08      	cmp	r4, #8
    3270:	d1f2      	bne.n	3258 <eps_ctx_init+0x1c>
		ep_ctx_reset(ep_ctx);
    3272:	4c09      	ldr	r4, [pc, #36]	; (3298 <eps_ctx_init+0x5c>)
    3274:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
    3278:	f007 fb0f 	bl	a89a <ep_ctx_reset>
		if (!ep_ctx->buf.block.data) {
    327c:	f8d4 327c 	ldr.w	r3, [r4, #636]	; 0x27c
    3280:	b913      	cbnz	r3, 3288 <eps_ctx_init+0x4c>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
    3282:	4b06      	ldr	r3, [pc, #24]	; (329c <eps_ctx_init+0x60>)
    3284:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
		ep_ctx_reset(ep_ctx);
    3288:	4805      	ldr	r0, [pc, #20]	; (32a0 <eps_ctx_init+0x64>)
    328a:	f007 fb06 	bl	a89a <ep_ctx_reset>
}
    328e:	2000      	movs	r0, #0
    3290:	bd38      	pop	{r3, r4, r5, pc}
    3292:	bf00      	nop
    3294:	200015cc 	.word	0x200015cc
    3298:	200017cc 	.word	0x200017cc
    329c:	200011cc 	.word	0x200011cc
    32a0:	20001a38 	.word	0x20001a38

000032a4 <usbd_work_handler>:
{
    32a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    32a8:	f8df 82e4 	ldr.w	r8, [pc, #740]	; 3590 <usbd_work_handler+0x2ec>
	return get_usbd_ctx()->ready;
    32ac:	4cb0      	ldr	r4, [pc, #704]	; (3570 <usbd_work_handler+0x2cc>)
{
    32ae:	b085      	sub	sp, #20
    32b0:	4607      	mov	r7, r0
    32b2:	2200      	movs	r2, #0
    32b4:	2300      	movs	r3, #0
    32b6:	4640      	mov	r0, r8
    32b8:	f004 fff8 	bl	82ac <z_impl_k_queue_get>
	while ((ev = usbd_evt_get()) != NULL) {
    32bc:	b910      	cbnz	r0, 32c4 <usbd_work_handler+0x20>
}
    32be:	b005      	add	sp, #20
    32c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return get_usbd_ctx()->ready;
    32c4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    32c8:	7c02      	ldrb	r2, [r0, #16]
    32ca:	f100 0904 	add.w	r9, r0, #4
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    32ce:	b93b      	cbnz	r3, 32e0 <usbd_work_handler+0x3c>
    32d0:	2a00      	cmp	r2, #0
    32d2:	f000 8085 	beq.w	33e0 <usbd_work_handler+0x13c>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    32d6:	48a7      	ldr	r0, [pc, #668]	; (3574 <usbd_work_handler+0x2d0>)
    32d8:	4649      	mov	r1, r9
    32da:	f009 fea5 	bl	d028 <k_mem_slab_free>
}
    32de:	e7e8      	b.n	32b2 <usbd_work_handler+0xe>
		switch (ev->evt_type) {
    32e0:	2a04      	cmp	r2, #4
    32e2:	d8f8      	bhi.n	32d6 <usbd_work_handler+0x32>
    32e4:	e8df f012 	tbh	[pc, r2, lsl #1]
    32e8:	0005007c 	.word	0x0005007c
    32ec:	01180102 	.word	0x01180102
    32f0:	0133      	.short	0x0133
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
    32f2:	7b03      	ldrb	r3, [r0, #12]
    32f4:	6885      	ldr	r5, [r0, #8]
	switch (ep_evt->evt_type) {
    32f6:	2b03      	cmp	r3, #3
    32f8:	d8ed      	bhi.n	32d6 <usbd_work_handler+0x32>
    32fa:	e8df f003 	tbb	[pc, r3]
    32fe:	3c02      	.short	0x3c02
    3300:	5e59      	.short	0x5e59
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
    3302:	696e      	ldr	r6, [r5, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
    3304:	2208      	movs	r2, #8
    3306:	2100      	movs	r1, #0
    3308:	4630      	mov	r0, r6
    330a:	f007 fcc2 	bl	ac92 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    330e:	4b9a      	ldr	r3, [pc, #616]	; (3578 <usbd_work_handler+0x2d4>)
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    3310:	489a      	ldr	r0, [pc, #616]	; (357c <usbd_work_handler+0x2d8>)
    3312:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    3316:	7032      	strb	r2, [r6, #0]
    return (uint8_t)(p_reg->BREQUEST);
    3318:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    331c:	7072      	strb	r2, [r6, #1]
    const uint16_t val = p_reg->WVALUEL;
    331e:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    3322:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    3326:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
    332a:	8072      	strh	r2, [r6, #2]
    const uint16_t val = p_reg->WINDEXL;
    332c:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    3330:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    3334:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
    3338:	80b2      	strh	r2, [r6, #4]
    const uint16_t val = p_reg->WLENGTHL;
    333a:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    333e:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    3342:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    3346:	2208      	movs	r2, #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
    3348:	80f3      	strh	r3, [r6, #6]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    334a:	4631      	mov	r1, r6
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    334c:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    334e:	f007 fc75 	bl	ac3c <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
    3352:	682b      	ldr	r3, [r5, #0]
    3354:	7a68      	ldrb	r0, [r5, #9]
    3356:	2100      	movs	r1, #0
    3358:	4798      	blx	r3
	if ((REQTYPE_GET_DIR(usbd_setup->bmRequestType)
    335a:	7833      	ldrb	r3, [r6, #0]
    335c:	09db      	lsrs	r3, r3, #7
    335e:	d106      	bne.n	336e <usbd_work_handler+0xca>
	    && (usbd_setup->wLength)) {
    3360:	88f3      	ldrh	r3, [r6, #6]
    3362:	b123      	cbz	r3, 336e <usbd_work_handler+0xca>
		ctx->ctrl_read_len = usbd_setup->wLength;
    3364:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
    3368:	f003 fc1c 	bl	6ba4 <nrfx_usbd_setup_data_clear>
    336c:	e7b3      	b.n	32d6 <usbd_work_handler+0x32>
		ctx->ctrl_read_len = 0U;
    336e:	2300      	movs	r3, #0
    3370:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
    3374:	e7af      	b.n	32d6 <usbd_work_handler+0x32>
	if (!ep_ctx->read_pending) {
    3376:	7f6b      	ldrb	r3, [r5, #29]
    3378:	2b00      	cmp	r3, #0
    337a:	d0ac      	beq.n	32d6 <usbd_work_handler+0x32>
	if (!ep_ctx->read_complete) {
    337c:	7f2b      	ldrb	r3, [r5, #28]
    337e:	2b00      	cmp	r3, #0
    3380:	d0a9      	beq.n	32d6 <usbd_work_handler+0x32>
	ep_ctx->read_pending = false;
    3382:	2600      	movs	r6, #0
    3384:	776e      	strb	r6, [r5, #29]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    3386:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	ep_ctx->read_complete = false;
    338a:	772e      	strb	r6, [r5, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    338c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3390:	487b      	ldr	r0, [pc, #492]	; (3580 <usbd_work_handler+0x2dc>)
    3392:	f007 fa97 	bl	a8c4 <k_mutex_lock.constprop.0>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
    3396:	696b      	ldr	r3, [r5, #20]
    3398:	9301      	str	r3, [sp, #4]
    339a:	686b      	ldr	r3, [r5, #4]
    339c:	e9cd 3602 	strd	r3, r6, [sp, #8]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    33a0:	a901      	add	r1, sp, #4
    33a2:	7a68      	ldrb	r0, [r5, #9]
    33a4:	f003 f9fa 	bl	679c <nrfx_usbd_ep_transfer>
	k_mutex_unlock(&ctx->drv_lock);
    33a8:	4875      	ldr	r0, [pc, #468]	; (3580 <usbd_work_handler+0x2dc>)
    33aa:	f007 fa89 	bl	a8c0 <k_mutex_unlock>
    33ae:	e792      	b.n	32d6 <usbd_work_handler+0x32>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    33b0:	682b      	ldr	r3, [r5, #0]
    33b2:	2101      	movs	r1, #1
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    33b4:	7a68      	ldrb	r0, [r5, #9]
    33b6:	4798      	blx	r3
		break;
    33b8:	e78d      	b.n	32d6 <usbd_work_handler+0x32>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
    33ba:	7aab      	ldrb	r3, [r5, #10]
    33bc:	b96b      	cbnz	r3, 33da <usbd_work_handler+0x136>
    33be:	7feb      	ldrb	r3, [r5, #31]
    33c0:	b95b      	cbnz	r3, 33da <usbd_work_handler+0x136>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    33c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    33c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    33ca:	486d      	ldr	r0, [pc, #436]	; (3580 <usbd_work_handler+0x2dc>)
    33cc:	f007 fa7a 	bl	a8c4 <k_mutex_lock.constprop.0>
			nrfx_usbd_setup_clear();
    33d0:	f003 fc14 	bl	6bfc <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
    33d4:	486a      	ldr	r0, [pc, #424]	; (3580 <usbd_work_handler+0x2dc>)
    33d6:	f007 fa73 	bl	a8c0 <k_mutex_unlock>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    33da:	682b      	ldr	r3, [r5, #0]
    33dc:	2102      	movs	r1, #2
    33de:	e7e9      	b.n	33b4 <usbd_work_handler+0x110>
	switch (pwr_evt->state) {
    33e0:	7a02      	ldrb	r2, [r0, #8]
    33e2:	2a04      	cmp	r2, #4
    33e4:	f63f af77 	bhi.w	32d6 <usbd_work_handler+0x32>
    33e8:	e8df f002 	tbb	[pc, r2]
    33ec:	6925035b 	.word	0x6925035b
    33f0:	75          	.byte	0x75
    33f1:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
    33f2:	f003 f983 	bl	66fc <nrfx_usbd_is_enabled>
    33f6:	4605      	mov	r5, r0
    33f8:	2800      	cmp	r0, #0
    33fa:	f47f af6c 	bne.w	32d6 <usbd_work_handler+0x32>
			nrfx_usbd_enable();
    33fe:	f003 f8bf 	bl	6580 <nrfx_usbd_enable>
    3402:	f3bf 8f5b 	dmb	ish
    3406:	495f      	ldr	r1, [pc, #380]	; (3584 <usbd_work_handler+0x2e0>)
    3408:	2301      	movs	r3, #1
    340a:	e851 2f00 	ldrex	r2, [r1]
    340e:	2a00      	cmp	r2, #0
    3410:	d103      	bne.n	341a <usbd_work_handler+0x176>
    3412:	e841 3000 	strex	r0, r3, [r1]
    3416:	2800      	cmp	r0, #0
    3418:	d1f7      	bne.n	340a <usbd_work_handler+0x166>
    341a:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
    341e:	f47f af5a 	bne.w	32d6 <usbd_work_handler+0x32>
    3422:	f841 5c10 	str.w	r5, [r1, #-16]
    3426:	f841 5c08 	str.w	r5, [r1, #-8]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
    342a:	69e0      	ldr	r0, [r4, #28]
    342c:	6163      	str	r3, [r4, #20]
    342e:	3914      	subs	r1, #20
    3430:	f006 fbaf 	bl	9b92 <onoff_request>
    3434:	e74f      	b.n	32d6 <usbd_work_handler+0x32>
			usbd_work_process_pwr_events(&ev->evt.pwr_evt);
    3436:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    3438:	f065 007f 	orn	r0, r5, #127	; 0x7f
    343c:	b2c0      	uxtb	r0, r0
    343e:	f7ff fd4b 	bl	2ed8 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    3442:	7a03      	ldrb	r3, [r0, #8]
    3444:	b113      	cbz	r3, 344c <usbd_work_handler+0x1a8>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    3446:	7a40      	ldrb	r0, [r0, #9]
    3448:	f003 fdca 	bl	6fe0 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    344c:	3501      	adds	r5, #1
    344e:	2d08      	cmp	r5, #8
    3450:	d1f2      	bne.n	3438 <usbd_work_handler+0x194>
		if (ep_ctx->cfg.en) {
    3452:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
    3456:	b11b      	cbz	r3, 3460 <usbd_work_handler+0x1bc>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    3458:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
    345c:	f003 fdc0 	bl	6fe0 <nrfx_usbd_ep_enable>
			usbd_work_process_pwr_events(&ev->evt.pwr_evt);
    3460:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    3462:	b2e8      	uxtb	r0, r5
    3464:	f7ff fd38 	bl	2ed8 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    3468:	7a03      	ldrb	r3, [r0, #8]
    346a:	b113      	cbz	r3, 3472 <usbd_work_handler+0x1ce>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    346c:	7a40      	ldrb	r0, [r0, #9]
    346e:	f003 fdb7 	bl	6fe0 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
    3472:	3501      	adds	r5, #1
    3474:	2d08      	cmp	r5, #8
    3476:	d1f4      	bne.n	3462 <usbd_work_handler+0x1be>
		if (ep_ctx->cfg.en) {
    3478:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    347c:	b11b      	cbz	r3, 3486 <usbd_work_handler+0x1e2>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    347e:	f894 0275 	ldrb.w	r0, [r4, #629]	; 0x275
    3482:	f003 fdad 	bl	6fe0 <nrfx_usbd_ep_enable>
		nrfx_usbd_start(true);
    3486:	2001      	movs	r0, #1
    3488:	f003 f912 	bl	66b0 <nrfx_usbd_start>
		ctx->ready = true;
    348c:	2301      	movs	r3, #1
    348e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
    3492:	6823      	ldr	r3, [r4, #0]
    3494:	2b00      	cmp	r3, #0
    3496:	f43f af1e 	beq.w	32d6 <usbd_work_handler+0x32>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
    349a:	2100      	movs	r1, #0
    349c:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_SOF, NULL);
    349e:	4798      	blx	r3
    34a0:	e719      	b.n	32d6 <usbd_work_handler+0x32>
		ctx->ready = false;
    34a2:	2500      	movs	r5, #0
    34a4:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
		nrfx_usbd_disable();
    34a8:	f003 fd26 	bl	6ef8 <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
    34ac:	f7ff fd6e 	bl	2f8c <hfxo_stop.constprop.0>
		if (ctx->status_cb) {
    34b0:	6823      	ldr	r3, [r4, #0]
    34b2:	2b00      	cmp	r3, #0
    34b4:	f43f af0f 	beq.w	32d6 <usbd_work_handler+0x32>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
    34b8:	4629      	mov	r1, r5
    34ba:	2004      	movs	r0, #4
    34bc:	e7ef      	b.n	349e <usbd_work_handler+0x1fa>
		if (dev_ready()) {
    34be:	2b00      	cmp	r3, #0
    34c0:	f43f af09 	beq.w	32d6 <usbd_work_handler+0x32>
			nrfx_usbd_suspend();
    34c4:	f003 fd30 	bl	6f28 <nrfx_usbd_suspend>
			if (ctx->status_cb) {
    34c8:	6823      	ldr	r3, [r4, #0]
    34ca:	2b00      	cmp	r3, #0
    34cc:	f43f af03 	beq.w	32d6 <usbd_work_handler+0x32>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
    34d0:	2100      	movs	r1, #0
    34d2:	2005      	movs	r0, #5
    34d4:	e7e3      	b.n	349e <usbd_work_handler+0x1fa>
		if (ctx->status_cb && dev_ready()) {
    34d6:	6822      	ldr	r2, [r4, #0]
    34d8:	2a00      	cmp	r2, #0
    34da:	f43f aefc 	beq.w	32d6 <usbd_work_handler+0x32>
    34de:	2b00      	cmp	r3, #0
    34e0:	f43f aef9 	beq.w	32d6 <usbd_work_handler+0x32>
			ctx->status_cb(USB_DC_RESUME, NULL);
    34e4:	2100      	movs	r1, #0
    34e6:	2006      	movs	r0, #6
    34e8:	4790      	blx	r2
    34ea:	e6f4      	b.n	32d6 <usbd_work_handler+0x32>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    34ec:	f107 0510 	add.w	r5, r7, #16
    34f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    34f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    34f8:	4628      	mov	r0, r5
    34fa:	f007 f9e3 	bl	a8c4 <k_mutex_lock.constprop.0>
			eps_ctx_init();
    34fe:	f7ff fe9d 	bl	323c <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
    3502:	4628      	mov	r0, r5
    3504:	f007 f9dc 	bl	a8c0 <k_mutex_unlock>
			if (ctx->status_cb) {
    3508:	f857 3c28 	ldr.w	r3, [r7, #-40]
    350c:	2b00      	cmp	r3, #0
    350e:	f43f aee2 	beq.w	32d6 <usbd_work_handler+0x32>
				ctx->status_cb(USB_DC_RESET, NULL);
    3512:	2100      	movs	r1, #0
    3514:	2001      	movs	r0, #1
    3516:	e7c2      	b.n	349e <usbd_work_handler+0x1fa>
	if (ep_ctx->cfg.en) {
    3518:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    351c:	b17b      	cbz	r3, 353e <usbd_work_handler+0x29a>
		ep_ctx->read_pending = true;
    351e:	2501      	movs	r5, #1
    3520:	f884 5289 	strb.w	r5, [r4, #649]	; 0x289
		ep_ctx->read_complete = true;
    3524:	f884 5288 	strb.w	r5, [r4, #648]	; 0x288
		ev = usbd_evt_alloc();
    3528:	f7ff fd6a 	bl	3000 <usbd_evt_alloc>
		if (!ev) {
    352c:	b138      	cbz	r0, 353e <usbd_work_handler+0x29a>
		ev->evt.ep_evt.ep = ep_ctx;
    352e:	4a16      	ldr	r2, [pc, #88]	; (3588 <usbd_work_handler+0x2e4>)
		ev->evt_type = USBD_EVT_EP;
    3530:	7405      	strb	r5, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    3532:	7305      	strb	r5, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
    3534:	6082      	str	r2, [r0, #8]
		usbd_evt_put(ev);
    3536:	f7ff fcf7 	bl	2f28 <usbd_evt_put>
		usbd_work_schedule();
    353a:	f7ff fcfb 	bl	2f34 <usbd_work_schedule>
			if (ctx->status_cb) {
    353e:	f857 3c28 	ldr.w	r3, [r7, #-40]
    3542:	2b00      	cmp	r3, #0
    3544:	f43f aec7 	beq.w	32d6 <usbd_work_handler+0x32>
				ctx->status_cb(USB_DC_SOF, NULL);
    3548:	2100      	movs	r1, #0
    354a:	200a      	movs	r0, #10
    354c:	e7a7      	b.n	349e <usbd_work_handler+0x1fa>
	nrfx_power_usbevt_disable();
    354e:	f007 ff61 	bl	b414 <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
    3552:	f003 fcd1 	bl	6ef8 <nrfx_usbd_disable>
	nrfx_usbd_uninit();
    3556:	f003 f809 	bl	656c <nrfx_usbd_uninit>
	usbd_evt_flush();
    355a:	f7ff fd3d 	bl	2fd8 <usbd_evt_flush>
	ret = eps_ctx_init();
    355e:	f7ff fe6d 	bl	323c <eps_ctx_init>
	nrfx_power_usbevt_enable();
    3562:	f007 ff50 	bl	b406 <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
    3566:	4809      	ldr	r0, [pc, #36]	; (358c <usbd_work_handler+0x2e8>)
    3568:	f003 f8d2 	bl	6710 <nrfx_usbd_init>
}
    356c:	e6b3      	b.n	32d6 <usbd_work_handler+0x32>
    356e:	bf00      	nop
    3570:	200017cc 	.word	0x200017cc
    3574:	200002bc 	.word	0x200002bc
    3578:	40027000 	.word	0x40027000
    357c:	200017d0 	.word	0x200017d0
    3580:	20001804 	.word	0x20001804
    3584:	200017ec 	.word	0x200017ec
    3588:	20001a38 	.word	0x20001a38
    358c:	000030ed 	.word	0x000030ed
    3590:	2000033c 	.word	0x2000033c

00003594 <usb_dc_attach>:
{
    3594:	b538      	push	{r3, r4, r5, lr}
	if (ctx->attached) {
    3596:	4d1a      	ldr	r5, [pc, #104]	; (3600 <usb_dc_attach+0x6c>)
    3598:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
    359c:	bb5c      	cbnz	r4, 35f6 <usb_dc_attach+0x62>
	return z_impl_k_mutex_init(mutex);
    359e:	f105 0038 	add.w	r0, r5, #56	; 0x38
    35a2:	f009 fd7c 	bl	d09e <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
    35a6:	4620      	mov	r0, r4
    35a8:	f7ff fc08 	bl	2dbc <z_nrf_clock_control_get_onoff>
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    35ac:	4622      	mov	r2, r4
	ctx->hfxo_mgr =
    35ae:	61e8      	str	r0, [r5, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    35b0:	2101      	movs	r1, #1
    35b2:	2027      	movs	r0, #39	; 0x27
    35b4:	f001 f9b8 	bl	4928 <z_arm_irq_priority_set>
	err = nrfx_usbd_init(usbd_event_handler);
    35b8:	4812      	ldr	r0, [pc, #72]	; (3604 <usb_dc_attach+0x70>)
    35ba:	f003 f8a9 	bl	6710 <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
    35be:	4b12      	ldr	r3, [pc, #72]	; (3608 <usb_dc_attach+0x74>)
    35c0:	4298      	cmp	r0, r3
    35c2:	d11a      	bne.n	35fa <usb_dc_attach+0x66>
	nrfx_power_usbevt_enable();
    35c4:	f007 ff1f 	bl	b406 <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
    35c8:	f7ff fe38 	bl	323c <eps_ctx_init>
	if (ret == 0) {
    35cc:	4604      	mov	r4, r0
    35ce:	b910      	cbnz	r0, 35d6 <usb_dc_attach+0x42>
		ctx->attached = true;
    35d0:	2301      	movs	r3, #1
    35d2:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
    35d6:	4b0d      	ldr	r3, [pc, #52]	; (360c <usb_dc_attach+0x78>)
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
    35d8:	681b      	ldr	r3, [r3, #0]
    35da:	b10b      	cbz	r3, 35e0 <usb_dc_attach+0x4c>
		usbd_work_schedule();
    35dc:	f7ff fcaa 	bl	2f34 <usbd_work_schedule>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
    35e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    35e4:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
    35e8:	07db      	lsls	r3, r3, #31
    35ea:	d502      	bpl.n	35f2 <usb_dc_attach+0x5e>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
    35ec:	2000      	movs	r0, #0
    35ee:	f7ff fe0b 	bl	3208 <usb_dc_power_event_handler>
}
    35f2:	4620      	mov	r0, r4
    35f4:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
    35f6:	2400      	movs	r4, #0
    35f8:	e7fb      	b.n	35f2 <usb_dc_attach+0x5e>
		return -EIO;
    35fa:	f06f 0404 	mvn.w	r4, #4
    35fe:	e7f8      	b.n	35f2 <usb_dc_attach+0x5e>
    3600:	200017cc 	.word	0x200017cc
    3604:	000030ed 	.word	0x000030ed
    3608:	0bad0000 	.word	0x0bad0000
    360c:	2000033c 	.word	0x2000033c

00003610 <usb_dc_detach>:
{
    3610:	b510      	push	{r4, lr}
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    3612:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3616:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    361a:	481f      	ldr	r0, [pc, #124]	; (3698 <usb_dc_detach+0x88>)
    361c:	f007 f952 	bl	a8c4 <k_mutex_lock.constprop.0>
	usbd_evt_flush();
    3620:	f7ff fcda 	bl	2fd8 <usbd_evt_flush>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    3624:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    3626:	f064 007f 	orn	r0, r4, #127	; 0x7f
    362a:	b2c0      	uxtb	r0, r0
    362c:	f7ff fc54 	bl	2ed8 <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    3630:	3401      	adds	r4, #1
		memset(ep_ctx, 0, sizeof(*ep_ctx));
    3632:	2220      	movs	r2, #32
    3634:	2100      	movs	r1, #0
    3636:	f007 fb2c 	bl	ac92 <memset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    363a:	2c08      	cmp	r4, #8
    363c:	d1f3      	bne.n	3626 <usb_dc_detach+0x16>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    363e:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    3640:	b2e0      	uxtb	r0, r4
    3642:	f7ff fc49 	bl	2ed8 <endpoint_ctx>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    3646:	3401      	adds	r4, #1
		memset(ep_ctx, 0, sizeof(*ep_ctx));
    3648:	2220      	movs	r2, #32
    364a:	2100      	movs	r1, #0
    364c:	f007 fb21 	bl	ac92 <memset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    3650:	2c08      	cmp	r4, #8
    3652:	d1f5      	bne.n	3640 <usb_dc_detach+0x30>
		memset(ep_ctx, 0, sizeof(*ep_ctx));
    3654:	2220      	movs	r2, #32
    3656:	2100      	movs	r1, #0
    3658:	4810      	ldr	r0, [pc, #64]	; (369c <usb_dc_detach+0x8c>)
    365a:	f007 fb1a 	bl	ac92 <memset>
		memset(ep_ctx, 0, sizeof(*ep_ctx));
    365e:	2220      	movs	r2, #32
    3660:	2100      	movs	r1, #0
    3662:	480f      	ldr	r0, [pc, #60]	; (36a0 <usb_dc_detach+0x90>)
    3664:	f007 fb15 	bl	ac92 <memset>
	if (nrfx_usbd_is_enabled()) {
    3668:	f003 f848 	bl	66fc <nrfx_usbd_is_enabled>
    366c:	b108      	cbz	r0, 3672 <usb_dc_detach+0x62>
		nrfx_usbd_disable();
    366e:	f003 fc43 	bl	6ef8 <nrfx_usbd_disable>
	if (nrfx_usbd_is_initialized()) {
    3672:	f003 f83b 	bl	66ec <nrfx_usbd_is_initialized>
    3676:	b108      	cbz	r0, 367c <usb_dc_detach+0x6c>
		nrfx_usbd_uninit();
    3678:	f002 ff78 	bl	656c <nrfx_usbd_uninit>
	(void)hfxo_stop(ctx);
    367c:	f7ff fc86 	bl	2f8c <hfxo_stop.constprop.0>
	nrfx_power_usbevt_disable();
    3680:	f007 fec8 	bl	b414 <nrfx_power_usbevt_disable>
	ctx->attached = false;
    3684:	4807      	ldr	r0, [pc, #28]	; (36a4 <usb_dc_detach+0x94>)
    3686:	2400      	movs	r4, #0
    3688:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
	k_mutex_unlock(&ctx->drv_lock);
    368c:	3038      	adds	r0, #56	; 0x38
    368e:	f007 f917 	bl	a8c0 <k_mutex_unlock>
}
    3692:	4620      	mov	r0, r4
    3694:	bd10      	pop	{r4, pc}
    3696:	bf00      	nop
    3698:	20001804 	.word	0x20001804
    369c:	20001918 	.word	0x20001918
    36a0:	20001a38 	.word	0x20001a38
    36a4:	200017cc 	.word	0x200017cc

000036a8 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
    36a8:	4b07      	ldr	r3, [pc, #28]	; (36c8 <usb_dc_set_address+0x20>)
	if (!dev_attached() || !dev_ready()) {
    36aa:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    36ae:	b13a      	cbz	r2, 36c0 <usb_dc_set_address+0x18>
    36b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    36b4:	2b00      	cmp	r3, #0
	return 0;
    36b6:	bf0c      	ite	eq
    36b8:	f06f 0012 	mvneq.w	r0, #18
    36bc:	2000      	movne	r0, #0
    36be:	4770      	bx	lr
		return -ENODEV;
    36c0:	f06f 0012 	mvn.w	r0, #18
}
    36c4:	4770      	bx	lr
    36c6:	bf00      	nop
    36c8:	200017cc 	.word	0x200017cc

000036cc <usb_dc_ep_configure>:
{
    36cc:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    36ce:	4b0f      	ldr	r3, [pc, #60]	; (370c <usb_dc_ep_configure+0x40>)
	if (!dev_attached()) {
    36d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
    36d4:	4604      	mov	r4, r0
	if (!dev_attached()) {
    36d6:	b1b3      	cbz	r3, 3706 <usb_dc_ep_configure+0x3a>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
    36d8:	7805      	ldrb	r5, [r0, #0]
    36da:	4628      	mov	r0, r5
    36dc:	f7ff fbfc 	bl	2ed8 <endpoint_ctx>
	if (!ep_ctx) {
    36e0:	b910      	cbnz	r0, 36e8 <usb_dc_ep_configure+0x1c>
		return -EINVAL;
    36e2:	f06f 0015 	mvn.w	r0, #21
}
    36e6:	bd38      	pop	{r3, r4, r5, pc}
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
    36e8:	7245      	strb	r5, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
    36ea:	7923      	ldrb	r3, [r4, #4]
    36ec:	7283      	strb	r3, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
    36ee:	8861      	ldrh	r1, [r4, #2]
    36f0:	6041      	str	r1, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
    36f2:	072b      	lsls	r3, r5, #28
    36f4:	d402      	bmi.n	36fc <usb_dc_ep_configure+0x30>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
    36f6:	1e4b      	subs	r3, r1, #1
    36f8:	420b      	tst	r3, r1
    36fa:	d1f2      	bne.n	36e2 <usb_dc_ep_configure+0x16>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
    36fc:	4628      	mov	r0, r5
    36fe:	f007 ff0e 	bl	b51e <nrfx_usbd_ep_max_packet_size_set>
	return 0;
    3702:	2000      	movs	r0, #0
    3704:	e7ef      	b.n	36e6 <usb_dc_ep_configure+0x1a>
		return -ENODEV;
    3706:	f06f 0012 	mvn.w	r0, #18
    370a:	e7ec      	b.n	36e6 <usb_dc_ep_configure+0x1a>
    370c:	200017cc 	.word	0x200017cc

00003710 <usb_dc_ep_set_stall>:
{
    3710:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    3712:	4b12      	ldr	r3, [pc, #72]	; (375c <usb_dc_ep_set_stall+0x4c>)
	if (!dev_attached() || !dev_ready()) {
    3714:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    3718:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    371a:	b1ca      	cbz	r2, 3750 <usb_dc_ep_set_stall+0x40>
    371c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    3720:	b1b3      	cbz	r3, 3750 <usb_dc_ep_set_stall+0x40>
	ep_ctx = endpoint_ctx(ep);
    3722:	f7ff fbd9 	bl	2ed8 <endpoint_ctx>
	if (!ep_ctx) {
    3726:	4604      	mov	r4, r0
    3728:	b1a8      	cbz	r0, 3756 <usb_dc_ep_set_stall+0x46>
	switch (ep_ctx->cfg.type) {
    372a:	7a83      	ldrb	r3, [r0, #10]
    372c:	2b01      	cmp	r3, #1
    372e:	d012      	beq.n	3756 <usb_dc_ep_set_stall+0x46>
    3730:	d907      	bls.n	3742 <usb_dc_ep_set_stall+0x32>
    3732:	3b02      	subs	r3, #2
    3734:	2b01      	cmp	r3, #1
    3736:	d907      	bls.n	3748 <usb_dc_ep_set_stall+0x38>
	ep_ctx->buf.curr = ep_ctx->buf.data;
    3738:	6963      	ldr	r3, [r4, #20]
    373a:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len = 0U;
    373c:	2000      	movs	r0, #0
    373e:	60e0      	str	r0, [r4, #12]
}
    3740:	bd38      	pop	{r3, r4, r5, pc}
		nrfx_usbd_setup_stall();
    3742:	f003 fa63 	bl	6c0c <nrfx_usbd_setup_stall>
		break;
    3746:	e7f7      	b.n	3738 <usb_dc_ep_set_stall+0x28>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
    3748:	4628      	mov	r0, r5
    374a:	f003 f9d7 	bl	6afc <nrfx_usbd_ep_stall>
		break;
    374e:	e7f3      	b.n	3738 <usb_dc_ep_set_stall+0x28>
		return -ENODEV;
    3750:	f06f 0012 	mvn.w	r0, #18
    3754:	e7f4      	b.n	3740 <usb_dc_ep_set_stall+0x30>
	switch (ep_ctx->cfg.type) {
    3756:	f06f 0015 	mvn.w	r0, #21
    375a:	e7f1      	b.n	3740 <usb_dc_ep_set_stall+0x30>
    375c:	200017cc 	.word	0x200017cc

00003760 <usb_dc_ep_clear_stall>:
{
    3760:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    3762:	4b0e      	ldr	r3, [pc, #56]	; (379c <usb_dc_ep_clear_stall+0x3c>)
	if (!dev_attached() || !dev_ready()) {
    3764:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    3768:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    376a:	b182      	cbz	r2, 378e <usb_dc_ep_clear_stall+0x2e>
    376c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    3770:	b16b      	cbz	r3, 378e <usb_dc_ep_clear_stall+0x2e>
	ep_ctx = endpoint_ctx(ep);
    3772:	f7ff fbb1 	bl	2ed8 <endpoint_ctx>
	if (!ep_ctx) {
    3776:	b168      	cbz	r0, 3794 <usb_dc_ep_clear_stall+0x34>
	if (NRF_USBD_EPISO_CHECK(ep)) {
    3778:	f015 0408 	ands.w	r4, r5, #8
    377c:	d10a      	bne.n	3794 <usb_dc_ep_clear_stall+0x34>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    377e:	4628      	mov	r0, r5
    3780:	f003 f9de 	bl	6b40 <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    3784:	4628      	mov	r0, r5
    3786:	f003 fc7d 	bl	7084 <nrfx_usbd_ep_stall_clear>
	return 0;
    378a:	4620      	mov	r0, r4
}
    378c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    378e:	f06f 0012 	mvn.w	r0, #18
    3792:	e7fb      	b.n	378c <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
    3794:	f06f 0015 	mvn.w	r0, #21
    3798:	e7f8      	b.n	378c <usb_dc_ep_clear_stall+0x2c>
    379a:	bf00      	nop
    379c:	200017cc 	.word	0x200017cc

000037a0 <usb_dc_ep_is_stalled>:
{
    37a0:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    37a2:	4b0c      	ldr	r3, [pc, #48]	; (37d4 <usb_dc_ep_is_stalled+0x34>)
	if (!dev_attached() || !dev_ready()) {
    37a4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    37a8:	4605      	mov	r5, r0
    37aa:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
    37ac:	b162      	cbz	r2, 37c8 <usb_dc_ep_is_stalled+0x28>
    37ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    37b2:	b14b      	cbz	r3, 37c8 <usb_dc_ep_is_stalled+0x28>
	ep_ctx = endpoint_ctx(ep);
    37b4:	f7ff fb90 	bl	2ed8 <endpoint_ctx>
	if (!ep_ctx) {
    37b8:	b148      	cbz	r0, 37ce <usb_dc_ep_is_stalled+0x2e>
	if (!stalled) {
    37ba:	b144      	cbz	r4, 37ce <usb_dc_ep_is_stalled+0x2e>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
    37bc:	4628      	mov	r0, r5
    37be:	f003 f9a5 	bl	6b0c <nrfx_usbd_ep_stall_check>
    37c2:	7020      	strb	r0, [r4, #0]
	return 0;
    37c4:	2000      	movs	r0, #0
}
    37c6:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    37c8:	f06f 0012 	mvn.w	r0, #18
    37cc:	e7fb      	b.n	37c6 <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
    37ce:	f06f 0015 	mvn.w	r0, #21
    37d2:	e7f8      	b.n	37c6 <usb_dc_ep_is_stalled+0x26>
    37d4:	200017cc 	.word	0x200017cc

000037d8 <usb_dc_ep_enable>:
{
    37d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return get_usbd_ctx()->attached;
    37da:	4e13      	ldr	r6, [pc, #76]	; (3828 <usb_dc_ep_enable+0x50>)
	if (!dev_attached()) {
    37dc:	f896 2024 	ldrb.w	r2, [r6, #36]	; 0x24
{
    37e0:	4604      	mov	r4, r0
	if (!dev_attached()) {
    37e2:	b1ba      	cbz	r2, 3814 <usb_dc_ep_enable+0x3c>
	ep_ctx = endpoint_ctx(ep);
    37e4:	f7ff fb78 	bl	2ed8 <endpoint_ctx>
	if (!ep_ctx) {
    37e8:	4605      	mov	r5, r0
    37ea:	b1b0      	cbz	r0, 381a <usb_dc_ep_enable+0x42>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
    37ec:	0723      	lsls	r3, r4, #28
    37ee:	d405      	bmi.n	37fc <usb_dc_ep_enable+0x24>
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    37f0:	4620      	mov	r0, r4
    37f2:	f003 f9a5 	bl	6b40 <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    37f6:	4620      	mov	r0, r4
    37f8:	f003 fc44 	bl	7084 <nrfx_usbd_ep_stall_clear>
	if (ep_ctx->cfg.en) {
    37fc:	7a2f      	ldrb	r7, [r5, #8]
    37fe:	b97f      	cbnz	r7, 3820 <usb_dc_ep_enable+0x48>
	if (dev_ready()) {
    3800:	f896 0025 	ldrb.w	r0, [r6, #37]	; 0x25
	ep_ctx->cfg.en = true;
    3804:	2301      	movs	r3, #1
    3806:	722b      	strb	r3, [r5, #8]
	if (dev_ready()) {
    3808:	b118      	cbz	r0, 3812 <usb_dc_ep_enable+0x3a>
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
    380a:	4620      	mov	r0, r4
    380c:	f003 fbe8 	bl	6fe0 <nrfx_usbd_ep_enable>
	return 0;
    3810:	4638      	mov	r0, r7
}
    3812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENODEV;
    3814:	f06f 0012 	mvn.w	r0, #18
    3818:	e7fb      	b.n	3812 <usb_dc_ep_enable+0x3a>
		return -EINVAL;
    381a:	f06f 0015 	mvn.w	r0, #21
    381e:	e7f8      	b.n	3812 <usb_dc_ep_enable+0x3a>
		return -EALREADY;
    3820:	f06f 0077 	mvn.w	r0, #119	; 0x77
    3824:	e7f5      	b.n	3812 <usb_dc_ep_enable+0x3a>
    3826:	bf00      	nop
    3828:	200017cc 	.word	0x200017cc

0000382c <usb_dc_ep_disable>:
{
    382c:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    382e:	4b11      	ldr	r3, [pc, #68]	; (3874 <usb_dc_ep_disable+0x48>)
	if (!dev_attached() || !dev_ready()) {
    3830:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    3834:	4604      	mov	r4, r0
	if (!dev_attached() || !dev_ready()) {
    3836:	b19a      	cbz	r2, 3860 <usb_dc_ep_disable+0x34>
    3838:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    383c:	b183      	cbz	r3, 3860 <usb_dc_ep_disable+0x34>
	ep_ctx = endpoint_ctx(ep);
    383e:	f7ff fb4b 	bl	2ed8 <endpoint_ctx>
	if (!ep_ctx) {
    3842:	4605      	mov	r5, r0
    3844:	b178      	cbz	r0, 3866 <usb_dc_ep_disable+0x3a>
	if (!ep_ctx->cfg.en) {
    3846:	7a03      	ldrb	r3, [r0, #8]
    3848:	b183      	cbz	r3, 386c <usb_dc_ep_disable+0x40>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    384a:	4620      	mov	r0, r4
	ep_ctx->write_in_progress = false;
    384c:	2400      	movs	r4, #0
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    384e:	f003 fb9b 	bl	6f88 <nrfx_usbd_ep_disable>
	ep_ctx_reset(ep_ctx);
    3852:	4628      	mov	r0, r5
	ep_ctx->write_in_progress = false;
    3854:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
    3856:	f007 f820 	bl	a89a <ep_ctx_reset>
	ep_ctx->cfg.en = false;
    385a:	722c      	strb	r4, [r5, #8]
	return 0;
    385c:	4620      	mov	r0, r4
}
    385e:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    3860:	f06f 0012 	mvn.w	r0, #18
    3864:	e7fb      	b.n	385e <usb_dc_ep_disable+0x32>
		return -EINVAL;
    3866:	f06f 0015 	mvn.w	r0, #21
    386a:	e7f8      	b.n	385e <usb_dc_ep_disable+0x32>
		return -EALREADY;
    386c:	f06f 0077 	mvn.w	r0, #119	; 0x77
    3870:	e7f5      	b.n	385e <usb_dc_ep_disable+0x32>
    3872:	bf00      	nop
    3874:	200017cc 	.word	0x200017cc

00003878 <usb_dc_ep_write>:
{
    3878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	return get_usbd_ctx()->attached;
    387c:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 3964 <usb_dc_ep_write+0xec>
{
    3880:	461c      	mov	r4, r3
	if (!dev_attached() || !dev_ready()) {
    3882:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
{
    3886:	4607      	mov	r7, r0
    3888:	4689      	mov	r9, r1
    388a:	4616      	mov	r6, r2
    388c:	46c2      	mov	sl, r8
	if (!dev_attached() || !dev_ready()) {
    388e:	2b00      	cmp	r3, #0
    3890:	d05d      	beq.n	394e <usb_dc_ep_write+0xd6>
    3892:	f898 3025 	ldrb.w	r3, [r8, #37]	; 0x25
    3896:	2b00      	cmp	r3, #0
    3898:	d059      	beq.n	394e <usb_dc_ep_write+0xd6>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
    389a:	0603      	lsls	r3, r0, #24
    389c:	d55a      	bpl.n	3954 <usb_dc_ep_write+0xdc>
	ep_ctx = endpoint_ctx(ep);
    389e:	f7ff fb1b 	bl	2ed8 <endpoint_ctx>
	if (!ep_ctx) {
    38a2:	4605      	mov	r5, r0
    38a4:	2800      	cmp	r0, #0
    38a6:	d055      	beq.n	3954 <usb_dc_ep_write+0xdc>
	if (!ep_ctx->cfg.en) {
    38a8:	7a03      	ldrb	r3, [r0, #8]
    38aa:	2b00      	cmp	r3, #0
    38ac:	d052      	beq.n	3954 <usb_dc_ep_write+0xdc>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    38ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    38b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    38b6:	f108 0038 	add.w	r0, r8, #56	; 0x38
    38ba:	f007 f803 	bl	a8c4 <k_mutex_lock.constprop.0>
	if (ep_ctx->write_in_progress) {
    38be:	7fab      	ldrb	r3, [r5, #30]
    38c0:	b14b      	cbz	r3, 38d6 <usb_dc_ep_write+0x5e>
		k_mutex_unlock(&ctx->drv_lock);
    38c2:	f108 0038 	add.w	r0, r8, #56	; 0x38
    38c6:	f006 fffb 	bl	a8c0 <k_mutex_unlock>
		return -EAGAIN;
    38ca:	f06f 040a 	mvn.w	r4, #10
}
    38ce:	4620      	mov	r0, r4
    38d0:	b004      	add	sp, #16
    38d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!data_len && ep_ctx->trans_zlp) {
    38d6:	b916      	cbnz	r6, 38de <usb_dc_ep_write+0x66>
    38d8:	7feb      	ldrb	r3, [r5, #31]
    38da:	b103      	cbz	r3, 38de <usb_dc_ep_write+0x66>
		ep_ctx->trans_zlp = false;
    38dc:	77ee      	strb	r6, [r5, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    38de:	7aab      	ldrb	r3, [r5, #10]
    38e0:	b9bb      	cbnz	r3, 3912 <usb_dc_ep_write+0x9a>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    38e2:	b15e      	cbz	r6, 38fc <usb_dc_ep_write+0x84>
    38e4:	f8ba 300a 	ldrh.w	r3, [sl, #10]
    38e8:	42b3      	cmp	r3, r6
    38ea:	d907      	bls.n	38fc <usb_dc_ep_write+0x84>
		    !(data_len % ep_ctx->cfg.max_sz)) {
    38ec:	686a      	ldr	r2, [r5, #4]
    38ee:	fbb6 f3f2 	udiv	r3, r6, r2
    38f2:	fb02 6313 	mls	r3, r2, r3, r6
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    38f6:	b90b      	cbnz	r3, 38fc <usb_dc_ep_write+0x84>
			ep_ctx->trans_zlp = true;
    38f8:	2301      	movs	r3, #1
    38fa:	77eb      	strb	r3, [r5, #31]
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
    38fc:	f003 f98e 	bl	6c1c <nrfx_usbd_last_setup_dir_get>
    3900:	42b8      	cmp	r0, r7
    3902:	d006      	beq.n	3912 <usb_dc_ep_write+0x9a>
		nrfx_usbd_setup_clear();
    3904:	f003 f97a 	bl	6bfc <nrfx_usbd_setup_clear>
		k_mutex_unlock(&ctx->drv_lock);
    3908:	4814      	ldr	r0, [pc, #80]	; (395c <usb_dc_ep_write+0xe4>)
    390a:	f006 ffd9 	bl	a8c0 <k_mutex_unlock>
		return 0;
    390e:	2400      	movs	r4, #0
    3910:	e7dd      	b.n	38ce <usb_dc_ep_write+0x56>
	ep_ctx->write_in_progress = true;
    3912:	2301      	movs	r3, #1
    3914:	77ab      	strb	r3, [r5, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    3916:	f04f 0800 	mov.w	r8, #0
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    391a:	a901      	add	r1, sp, #4
    391c:	4638      	mov	r0, r7
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    391e:	e9cd 9601 	strd	r9, r6, [sp, #4]
    3922:	f8cd 800c 	str.w	r8, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    3926:	f002 ff39 	bl	679c <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    392a:	4b0d      	ldr	r3, [pc, #52]	; (3960 <usb_dc_ep_write+0xe8>)
    392c:	4298      	cmp	r0, r3
    392e:	d007      	beq.n	3940 <usb_dc_ep_write+0xc8>
		ep_ctx->write_in_progress = false;
    3930:	f885 801e 	strb.w	r8, [r5, #30]
		if (ret_bytes) {
    3934:	b10c      	cbz	r4, 393a <usb_dc_ep_write+0xc2>
			*ret_bytes = 0;
    3936:	f8c4 8000 	str.w	r8, [r4]
		result = -EIO;
    393a:	f06f 0404 	mvn.w	r4, #4
    393e:	e002      	b.n	3946 <usb_dc_ep_write+0xce>
		if (ret_bytes) {
    3940:	b10c      	cbz	r4, 3946 <usb_dc_ep_write+0xce>
			*ret_bytes = data_len;
    3942:	6026      	str	r6, [r4, #0]
	int result = 0;
    3944:	4644      	mov	r4, r8
	k_mutex_unlock(&ctx->drv_lock);
    3946:	4805      	ldr	r0, [pc, #20]	; (395c <usb_dc_ep_write+0xe4>)
    3948:	f006 ffba 	bl	a8c0 <k_mutex_unlock>
	return result;
    394c:	e7bf      	b.n	38ce <usb_dc_ep_write+0x56>
		return -ENODEV;
    394e:	f06f 0412 	mvn.w	r4, #18
    3952:	e7bc      	b.n	38ce <usb_dc_ep_write+0x56>
		return -EINVAL;
    3954:	f06f 0415 	mvn.w	r4, #21
    3958:	e7b9      	b.n	38ce <usb_dc_ep_write+0x56>
    395a:	bf00      	nop
    395c:	20001804 	.word	0x20001804
    3960:	0bad0000 	.word	0x0bad0000
    3964:	200017cc 	.word	0x200017cc

00003968 <usb_dc_ep_read_wait>:
{
    3968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    396c:	461d      	mov	r5, r3
	return get_usbd_ctx()->attached;
    396e:	4b20      	ldr	r3, [pc, #128]	; (39f0 <usb_dc_ep_read_wait+0x88>)
{
    3970:	4617      	mov	r7, r2
	if (!dev_attached() || !dev_ready()) {
    3972:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    3976:	460e      	mov	r6, r1
	if (!dev_attached() || !dev_ready()) {
    3978:	2a00      	cmp	r2, #0
    397a:	d033      	beq.n	39e4 <usb_dc_ep_read_wait+0x7c>
    397c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    3980:	b383      	cbz	r3, 39e4 <usb_dc_ep_read_wait+0x7c>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    3982:	0603      	lsls	r3, r0, #24
    3984:	d431      	bmi.n	39ea <usb_dc_ep_read_wait+0x82>
	if (!data && max_data_len) {
    3986:	b901      	cbnz	r1, 398a <usb_dc_ep_read_wait+0x22>
    3988:	bb7f      	cbnz	r7, 39ea <usb_dc_ep_read_wait+0x82>
	ep_ctx = endpoint_ctx(ep);
    398a:	f7ff faa5 	bl	2ed8 <endpoint_ctx>
	if (!ep_ctx) {
    398e:	4604      	mov	r4, r0
    3990:	b358      	cbz	r0, 39ea <usb_dc_ep_read_wait+0x82>
	if (!ep_ctx->cfg.en) {
    3992:	7a03      	ldrb	r3, [r0, #8]
    3994:	b34b      	cbz	r3, 39ea <usb_dc_ep_read_wait+0x82>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    3996:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    399a:	4816      	ldr	r0, [pc, #88]	; (39f4 <usb_dc_ep_read_wait+0x8c>)
    399c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    39a0:	f006 ff90 	bl	a8c4 <k_mutex_lock.constprop.0>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
    39a4:	68e3      	ldr	r3, [r4, #12]
    39a6:	429f      	cmp	r7, r3
    39a8:	46b8      	mov	r8, r7
    39aa:	bf28      	it	cs
    39ac:	4698      	movcs	r8, r3
	if (!data && !max_data_len) {
    39ae:	b946      	cbnz	r6, 39c2 <usb_dc_ep_read_wait+0x5a>
    39b0:	b93f      	cbnz	r7, 39c2 <usb_dc_ep_read_wait+0x5a>
		if (read_bytes) {
    39b2:	b105      	cbz	r5, 39b6 <usb_dc_ep_read_wait+0x4e>
			*read_bytes = ep_ctx->buf.len;
    39b4:	602b      	str	r3, [r5, #0]
		k_mutex_unlock(&ctx->drv_lock);
    39b6:	480f      	ldr	r0, [pc, #60]	; (39f4 <usb_dc_ep_read_wait+0x8c>)
    39b8:	f006 ff82 	bl	a8c0 <k_mutex_unlock>
		return 0;
    39bc:	2000      	movs	r0, #0
}
    39be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
    39c2:	69a1      	ldr	r1, [r4, #24]
    39c4:	4642      	mov	r2, r8
    39c6:	4630      	mov	r0, r6
    39c8:	f007 f938 	bl	ac3c <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
    39cc:	69a3      	ldr	r3, [r4, #24]
    39ce:	4443      	add	r3, r8
    39d0:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
    39d2:	68e3      	ldr	r3, [r4, #12]
    39d4:	eba3 0308 	sub.w	r3, r3, r8
    39d8:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
    39da:	2d00      	cmp	r5, #0
    39dc:	d0eb      	beq.n	39b6 <usb_dc_ep_read_wait+0x4e>
		*read_bytes = bytes_to_copy;
    39de:	f8c5 8000 	str.w	r8, [r5]
    39e2:	e7e8      	b.n	39b6 <usb_dc_ep_read_wait+0x4e>
		return -ENODEV;
    39e4:	f06f 0012 	mvn.w	r0, #18
    39e8:	e7e9      	b.n	39be <usb_dc_ep_read_wait+0x56>
		return -EINVAL;
    39ea:	f06f 0015 	mvn.w	r0, #21
    39ee:	e7e6      	b.n	39be <usb_dc_ep_read_wait+0x56>
    39f0:	200017cc 	.word	0x200017cc
    39f4:	20001804 	.word	0x20001804

000039f8 <usb_dc_ep_read_continue>:
{
    39f8:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
    39fa:	4d1e      	ldr	r5, [pc, #120]	; (3a74 <usb_dc_ep_read_continue+0x7c>)
	if (!dev_attached() || !dev_ready()) {
    39fc:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
{
    3a00:	4603      	mov	r3, r0
	if (!dev_attached() || !dev_ready()) {
    3a02:	b382      	cbz	r2, 3a66 <usb_dc_ep_read_continue+0x6e>
    3a04:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
    3a08:	b36a      	cbz	r2, 3a66 <usb_dc_ep_read_continue+0x6e>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    3a0a:	061b      	lsls	r3, r3, #24
    3a0c:	d42e      	bmi.n	3a6c <usb_dc_ep_read_continue+0x74>
	ep_ctx = endpoint_ctx(ep);
    3a0e:	f7ff fa63 	bl	2ed8 <endpoint_ctx>
	if (!ep_ctx) {
    3a12:	4604      	mov	r4, r0
    3a14:	b350      	cbz	r0, 3a6c <usb_dc_ep_read_continue+0x74>
	if (!ep_ctx->cfg.en) {
    3a16:	7a03      	ldrb	r3, [r0, #8]
    3a18:	b343      	cbz	r3, 3a6c <usb_dc_ep_read_continue+0x74>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    3a1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3a1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3a22:	f105 0038 	add.w	r0, r5, #56	; 0x38
    3a26:	f006 ff4d 	bl	a8c4 <k_mutex_lock.constprop.0>
	if (!ep_ctx->buf.len) {
    3a2a:	68e3      	ldr	r3, [r4, #12]
    3a2c:	b9b3      	cbnz	r3, 3a5c <usb_dc_ep_read_continue+0x64>
		ep_ctx->read_complete = true;
    3a2e:	2601      	movs	r6, #1
		ep_ctx->buf.curr = ep_ctx->buf.data;
    3a30:	6963      	ldr	r3, [r4, #20]
		ep_ctx->read_complete = true;
    3a32:	7726      	strb	r6, [r4, #28]
		ep_ctx->buf.curr = ep_ctx->buf.data;
    3a34:	61a3      	str	r3, [r4, #24]
		if (ep_ctx->read_pending) {
    3a36:	7f63      	ldrb	r3, [r4, #29]
    3a38:	b183      	cbz	r3, 3a5c <usb_dc_ep_read_continue+0x64>
			struct usbd_event *ev = usbd_evt_alloc();
    3a3a:	f7ff fae1 	bl	3000 <usbd_evt_alloc>
			if (!ev) {
    3a3e:	b930      	cbnz	r0, 3a4e <usb_dc_ep_read_continue+0x56>
				k_mutex_unlock(&ctx->drv_lock);
    3a40:	f105 0038 	add.w	r0, r5, #56	; 0x38
    3a44:	f006 ff3c 	bl	a8c0 <k_mutex_unlock>
				return -ENOMEM;
    3a48:	f06f 000b 	mvn.w	r0, #11
}
    3a4c:	bd70      	pop	{r4, r5, r6, pc}
			ev->evt_type = USBD_EVT_EP;
    3a4e:	7406      	strb	r6, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    3a50:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    3a52:	7306      	strb	r6, [r0, #12]
			usbd_evt_put(ev);
    3a54:	f7ff fa68 	bl	2f28 <usbd_evt_put>
			usbd_work_schedule();
    3a58:	f7ff fa6c 	bl	2f34 <usbd_work_schedule>
	k_mutex_unlock(&ctx->drv_lock);
    3a5c:	4806      	ldr	r0, [pc, #24]	; (3a78 <usb_dc_ep_read_continue+0x80>)
    3a5e:	f006 ff2f 	bl	a8c0 <k_mutex_unlock>
	return 0;
    3a62:	2000      	movs	r0, #0
    3a64:	e7f2      	b.n	3a4c <usb_dc_ep_read_continue+0x54>
		return -ENODEV;
    3a66:	f06f 0012 	mvn.w	r0, #18
    3a6a:	e7ef      	b.n	3a4c <usb_dc_ep_read_continue+0x54>
		return -EINVAL;
    3a6c:	f06f 0015 	mvn.w	r0, #21
    3a70:	e7ec      	b.n	3a4c <usb_dc_ep_read_continue+0x54>
    3a72:	bf00      	nop
    3a74:	200017cc 	.word	0x200017cc
    3a78:	20001804 	.word	0x20001804

00003a7c <usb_dc_ep_set_callback>:
	return get_usbd_ctx()->attached;
    3a7c:	4b08      	ldr	r3, [pc, #32]	; (3aa0 <usb_dc_ep_set_callback+0x24>)
	if (!dev_attached()) {
    3a7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
    3a82:	b510      	push	{r4, lr}
    3a84:	460c      	mov	r4, r1
	if (!dev_attached()) {
    3a86:	b12b      	cbz	r3, 3a94 <usb_dc_ep_set_callback+0x18>
	ep_ctx = endpoint_ctx(ep);
    3a88:	f7ff fa26 	bl	2ed8 <endpoint_ctx>
	if (!ep_ctx) {
    3a8c:	b128      	cbz	r0, 3a9a <usb_dc_ep_set_callback+0x1e>
	ep_ctx->cfg.cb = cb;
    3a8e:	6004      	str	r4, [r0, #0]
	return 0;
    3a90:	2000      	movs	r0, #0
}
    3a92:	bd10      	pop	{r4, pc}
		return -ENODEV;
    3a94:	f06f 0012 	mvn.w	r0, #18
    3a98:	e7fb      	b.n	3a92 <usb_dc_ep_set_callback+0x16>
		return -EINVAL;
    3a9a:	f06f 0015 	mvn.w	r0, #21
    3a9e:	e7f8      	b.n	3a92 <usb_dc_ep_set_callback+0x16>
    3aa0:	200017cc 	.word	0x200017cc

00003aa4 <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
    3aa4:	4b01      	ldr	r3, [pc, #4]	; (3aac <usb_dc_set_status_callback+0x8>)
    3aa6:	6018      	str	r0, [r3, #0]
}
    3aa8:	4770      	bx	lr
    3aaa:	bf00      	nop
    3aac:	200017cc 	.word	0x200017cc

00003ab0 <usb_dc_ep_mps>:
{
    3ab0:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
    3ab2:	4b07      	ldr	r3, [pc, #28]	; (3ad0 <usb_dc_ep_mps+0x20>)
	if (!dev_attached()) {
    3ab4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    3ab8:	b123      	cbz	r3, 3ac4 <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
    3aba:	f7ff fa0d 	bl	2ed8 <endpoint_ctx>
	if (!ep_ctx) {
    3abe:	b120      	cbz	r0, 3aca <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
    3ac0:	6840      	ldr	r0, [r0, #4]
}
    3ac2:	bd08      	pop	{r3, pc}
		return -ENODEV;
    3ac4:	f06f 0012 	mvn.w	r0, #18
    3ac8:	e7fb      	b.n	3ac2 <usb_dc_ep_mps+0x12>
		return -EINVAL;
    3aca:	f06f 0015 	mvn.w	r0, #21
    3ace:	e7f8      	b.n	3ac2 <usb_dc_ep_mps+0x12>
    3ad0:	200017cc 	.word	0x200017cc

00003ad4 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    3ad4:	4a04      	ldr	r2, [pc, #16]	; (3ae8 <sys_clock_timeout_handler+0x14>)
    3ad6:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    3ad8:	1ac8      	subs	r0, r1, r3
    3ada:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    3ade:	4403      	add	r3, r0
    3ae0:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    3ae2:	f005 b9fd 	b.w	8ee0 <sys_clock_announce>
    3ae6:	bf00      	nop
    3ae8:	20001a6c 	.word	0x20001a6c

00003aec <set_absolute_alarm>:
{
    3aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3af0:	0086      	lsls	r6, r0, #2
    3af2:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    3af6:	f100 0450 	add.w	r4, r0, #80	; 0x50
    3afa:	f506 3688 	add.w	r6, r6, #69632	; 0x11000
    3afe:	00a4      	lsls	r4, r4, #2
     return p_reg->COUNTER;
    3b00:	f8df 807c 	ldr.w	r8, [pc, #124]	; 3b80 <set_absolute_alarm+0x94>
    return p_reg->CC[ch];
    3b04:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3b08:	b2a4      	uxth	r4, r4
    3b0a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3b0e:	f44f 3780 	mov.w	r7, #65536	; 0x10000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    3b12:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    3b16:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3b1a:	4087      	lsls	r7, r0
    3b1c:	46c1      	mov	r9, r8
     return p_reg->COUNTER;
    3b1e:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    3b22:	eba3 030a 	sub.w	r3, r3, sl
    3b26:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3b2a:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    3b2e:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    3b30:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    3b34:	d102      	bne.n	3b3c <set_absolute_alarm+0x50>
	z_impl_k_busy_wait(usec_to_wait);
    3b36:	2013      	movs	r0, #19
    3b38:	f009 fc96 	bl	d468 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    3b3c:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
    3b40:	1aab      	subs	r3, r5, r2
    3b42:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    3b46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    3b4a:	bf88      	it	hi
    3b4c:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3b4e:	2300      	movs	r3, #0
    3b50:	6023      	str	r3, [r4, #0]
    3b52:	6823      	ldr	r3, [r4, #0]
    p_reg->EVTENSET = mask;
    3b54:	f8c9 7344 	str.w	r7, [r9, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3b58:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    3b5c:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    3b60:	f8d9 3504 	ldr.w	r3, [r9, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    3b64:	459a      	cmp	sl, r3
    3b66:	d006      	beq.n	3b76 <set_absolute_alarm+0x8a>
	return (a - b) & COUNTER_MAX;
    3b68:	1aeb      	subs	r3, r5, r3
    3b6a:	3b02      	subs	r3, #2
    3b6c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    3b70:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    3b74:	d801      	bhi.n	3b7a <set_absolute_alarm+0x8e>
}
    3b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
    3b7a:	462b      	mov	r3, r5
    3b7c:	e7cf      	b.n	3b1e <set_absolute_alarm+0x32>
    3b7e:	bf00      	nop
    3b80:	40011000 	.word	0x40011000

00003b84 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    3b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return p_reg->INTENSET & mask;
    3b86:	4e10      	ldr	r6, [pc, #64]	; (3bc8 <rtc_nrf_isr+0x44>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3b88:	4f10      	ldr	r7, [pc, #64]	; (3bcc <rtc_nrf_isr+0x48>)
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    3b8a:	2500      	movs	r5, #0
    3b8c:	4b10      	ldr	r3, [pc, #64]	; (3bd0 <rtc_nrf_isr+0x4c>)
    3b8e:	2000      	movs	r0, #0
    3b90:	681c      	ldr	r4, [r3, #0]
    3b92:	461a      	mov	r2, r3
    3b94:	b105      	cbz	r5, 3b98 <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    3b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return p_reg->INTENSET & mask;
    3b98:	f8d6 1304 	ldr.w	r1, [r6, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    3b9c:	03c9      	lsls	r1, r1, #15
    3b9e:	d5fa      	bpl.n	3b96 <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3ba0:	6839      	ldr	r1, [r7, #0]
    3ba2:	2900      	cmp	r1, #0
    3ba4:	d0f7      	beq.n	3b96 <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3ba6:	603d      	str	r5, [r7, #0]
    3ba8:	6839      	ldr	r1, [r7, #0]
    p_reg->EVTENCLR = mask;
    3baa:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    3bae:	f8c6 1348 	str.w	r1, [r6, #840]	; 0x348
    return p_reg->CC[ch];
    3bb2:	f8d6 1540 	ldr.w	r1, [r6, #1344]	; 0x540
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    3bb6:	2501      	movs	r5, #1
			if (handler) {
    3bb8:	b11c      	cbz	r4, 3bc2 <rtc_nrf_isr+0x3e>
				handler(chan, cc_val,
    3bba:	685a      	ldr	r2, [r3, #4]
    3bbc:	6018      	str	r0, [r3, #0]
    3bbe:	47a0      	blx	r4
    3bc0:	e7e4      	b.n	3b8c <rtc_nrf_isr+0x8>
    3bc2:	6014      	str	r4, [r2, #0]
}
    3bc4:	e7e7      	b.n	3b96 <rtc_nrf_isr+0x12>
    3bc6:	bf00      	nop
    3bc8:	40011000 	.word	0x40011000
    3bcc:	40011140 	.word	0x40011140
    3bd0:	20001a60 	.word	0x20001a60

00003bd4 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    3bd4:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    3bd6:	4d10      	ldr	r5, [pc, #64]	; (3c18 <sys_clock_driver_init+0x44>)
    3bd8:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    3bda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    3bde:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
    3be2:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    3be6:	4b0d      	ldr	r3, [pc, #52]	; (3c1c <sys_clock_driver_init+0x48>)
    3be8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    3bec:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    3bf0:	2101      	movs	r1, #1
    3bf2:	4622      	mov	r2, r4
    3bf4:	2011      	movs	r0, #17
    3bf6:	f000 fe97 	bl	4928 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    3bfa:	2011      	movs	r0, #17
    3bfc:	f000 fe62 	bl	48c4 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    3c00:	4a07      	ldr	r2, [pc, #28]	; (3c20 <sys_clock_driver_init+0x4c>)
    3c02:	2301      	movs	r3, #1
    3c04:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    3c06:	4a07      	ldr	r2, [pc, #28]	; (3c24 <sys_clock_driver_init+0x50>)
    3c08:	602b      	str	r3, [r5, #0]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    3c0a:	2002      	movs	r0, #2
	int_mask = BIT_MASK(CHAN_COUNT);
    3c0c:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    3c0e:	f7ff f8dd 	bl	2dcc <z_nrf_clock_control_lf_on>

	return 0;
}
    3c12:	4620      	mov	r0, r4
    3c14:	bd38      	pop	{r3, r4, r5, pc}
    3c16:	bf00      	nop
    3c18:	40011000 	.word	0x40011000
    3c1c:	e000e100 	.word	0xe000e100
    3c20:	40011008 	.word	0x40011008
    3c24:	20001a68 	.word	0x20001a68

00003c28 <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3c28:	4b13      	ldr	r3, [pc, #76]	; (3c78 <sys_clock_set_timeout+0x50>)
    3c2a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    3c2e:	bf08      	it	eq
    3c30:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3c32:	3801      	subs	r0, #1
    3c34:	2800      	cmp	r0, #0
    3c36:	dd1c      	ble.n	3c72 <sys_clock_set_timeout+0x4a>
    3c38:	4298      	cmp	r0, r3
    3c3a:	bfa8      	it	ge
    3c3c:	4618      	movge	r0, r3
     return p_reg->COUNTER;
    3c3e:	4b0f      	ldr	r3, [pc, #60]	; (3c7c <sys_clock_set_timeout+0x54>)
    3c40:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    3c44:	4b0e      	ldr	r3, [pc, #56]	; (3c80 <sys_clock_set_timeout+0x58>)
    3c46:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    3c48:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    3c4a:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
    3c4e:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
		ticks = 0;
    3c52:	bf18      	it	ne
    3c54:	2000      	movne	r0, #0
	cc_data[chan].callback = handler;
    3c56:	4a0b      	ldr	r2, [pc, #44]	; (3c84 <sys_clock_set_timeout+0x5c>)
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    3c58:	3301      	adds	r3, #1
    3c5a:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
    3c5c:	480a      	ldr	r0, [pc, #40]	; (3c88 <sys_clock_set_timeout+0x60>)
    3c5e:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    3c60:	2000      	movs	r0, #0
    3c62:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    3c64:	4a04      	ldr	r2, [pc, #16]	; (3c78 <sys_clock_set_timeout+0x50>)
    3c66:	4293      	cmp	r3, r2
    3c68:	bf94      	ite	ls
    3c6a:	18c9      	addls	r1, r1, r3
    3c6c:	1889      	addhi	r1, r1, r2
    3c6e:	f7ff bf3d 	b.w	3aec <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3c72:	2000      	movs	r0, #0
    3c74:	e7e3      	b.n	3c3e <sys_clock_set_timeout+0x16>
    3c76:	bf00      	nop
    3c78:	007fffff 	.word	0x007fffff
    3c7c:	40011000 	.word	0x40011000
    3c80:	20001a6c 	.word	0x20001a6c
    3c84:	20001a60 	.word	0x20001a60
    3c88:	00003ad5 	.word	0x00003ad5

00003c8c <sys_clock_elapsed>:
    3c8c:	4b04      	ldr	r3, [pc, #16]	; (3ca0 <sys_clock_elapsed+0x14>)
    3c8e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
{
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return counter_sub(counter(), last_count) / CYC_PER_TICK;
    3c92:	4b04      	ldr	r3, [pc, #16]	; (3ca4 <sys_clock_elapsed+0x18>)
	return (a - b) & COUNTER_MAX;
    3c94:	681b      	ldr	r3, [r3, #0]
    3c96:	1ac0      	subs	r0, r0, r3
}
    3c98:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3c9c:	4770      	bx	lr
    3c9e:	bf00      	nop
    3ca0:	40011000 	.word	0x40011000
    3ca4:	20001a6c 	.word	0x20001a6c

00003ca8 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    3ca8:	4801      	ldr	r0, [pc, #4]	; (3cb0 <nrf_cc3xx_platform_abort_init+0x8>)
    3caa:	f005 ba39 	b.w	9120 <nrf_cc3xx_platform_set_abort>
    3cae:	bf00      	nop
    3cb0:	0000d95c 	.word	0x0000d95c

00003cb4 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3cb4:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    3cb6:	b1d0      	cbz	r0, 3cee <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    3cb8:	6843      	ldr	r3, [r0, #4]
    3cba:	2b04      	cmp	r3, #4
    3cbc:	d111      	bne.n	3ce2 <mutex_unlock_platform+0x2e>
    3cbe:	2200      	movs	r2, #0
    3cc0:	6803      	ldr	r3, [r0, #0]
    3cc2:	f3bf 8f5b 	dmb	ish
    3cc6:	e853 1f00 	ldrex	r1, [r3]
    3cca:	2901      	cmp	r1, #1
    3ccc:	d103      	bne.n	3cd6 <mutex_unlock_platform+0x22>
    3cce:	e843 2000 	strex	r0, r2, [r3]
    3cd2:	2800      	cmp	r0, #0
    3cd4:	d1f7      	bne.n	3cc6 <mutex_unlock_platform+0x12>
    3cd6:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3cda:	4807      	ldr	r0, [pc, #28]	; (3cf8 <mutex_unlock_platform+0x44>)
    3cdc:	bf08      	it	eq
    3cde:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    3ce0:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3ce2:	b13b      	cbz	r3, 3cf4 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    3ce4:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    3ce6:	f004 fa9b 	bl	8220 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    3cea:	2000      	movs	r0, #0
    3cec:	e7f8      	b.n	3ce0 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    3cee:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    3cf2:	e7f5      	b.n	3ce0 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    3cf4:	4801      	ldr	r0, [pc, #4]	; (3cfc <mutex_unlock_platform+0x48>)
    3cf6:	e7f3      	b.n	3ce0 <mutex_unlock_platform+0x2c>
    3cf8:	ffff8fe9 	.word	0xffff8fe9
    3cfc:	ffff8fea 	.word	0xffff8fea

00003d00 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3d00:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    3d02:	4604      	mov	r4, r0
    3d04:	b918      	cbnz	r0, 3d0e <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    3d06:	4b0d      	ldr	r3, [pc, #52]	; (3d3c <mutex_free_platform+0x3c>)
    3d08:	480d      	ldr	r0, [pc, #52]	; (3d40 <mutex_free_platform+0x40>)
    3d0a:	685b      	ldr	r3, [r3, #4]
    3d0c:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    3d0e:	6861      	ldr	r1, [r4, #4]
    3d10:	2908      	cmp	r1, #8
    3d12:	d00d      	beq.n	3d30 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3d14:	f031 0304 	bics.w	r3, r1, #4
    3d18:	d00a      	beq.n	3d30 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    3d1a:	f011 0102 	ands.w	r1, r1, #2
    3d1e:	d008      	beq.n	3d32 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    3d20:	4808      	ldr	r0, [pc, #32]	; (3d44 <mutex_free_platform+0x44>)
    3d22:	4621      	mov	r1, r4
    3d24:	f009 f980 	bl	d028 <k_mem_slab_free>
        mutex->mutex = NULL;
    3d28:	2300      	movs	r3, #0
    3d2a:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    3d2c:	2300      	movs	r3, #0
    3d2e:	6063      	str	r3, [r4, #4]
}
    3d30:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    3d32:	6820      	ldr	r0, [r4, #0]
    3d34:	2214      	movs	r2, #20
    3d36:	f006 ffac 	bl	ac92 <memset>
    3d3a:	e7f7      	b.n	3d2c <mutex_free_platform+0x2c>
    3d3c:	2000019c 	.word	0x2000019c
    3d40:	0000df0f 	.word	0x0000df0f
    3d44:	20001a70 	.word	0x20001a70

00003d48 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3d48:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    3d4a:	4604      	mov	r4, r0
    3d4c:	b918      	cbnz	r0, 3d56 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    3d4e:	4b16      	ldr	r3, [pc, #88]	; (3da8 <mutex_init_platform+0x60>)
    3d50:	4816      	ldr	r0, [pc, #88]	; (3dac <mutex_init_platform+0x64>)
    3d52:	685b      	ldr	r3, [r3, #4]
    3d54:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    3d56:	6863      	ldr	r3, [r4, #4]
    3d58:	2b04      	cmp	r3, #4
    3d5a:	d023      	beq.n	3da4 <mutex_init_platform+0x5c>
    3d5c:	2b08      	cmp	r3, #8
    3d5e:	d021      	beq.n	3da4 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    3d60:	b9cb      	cbnz	r3, 3d96 <mutex_init_platform+0x4e>
    3d62:	6823      	ldr	r3, [r4, #0]
    3d64:	b9bb      	cbnz	r3, 3d96 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    3d66:	4812      	ldr	r0, [pc, #72]	; (3db0 <mutex_init_platform+0x68>)
    3d68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3d6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3d70:	4621      	mov	r1, r4
    3d72:	f004 f8db 	bl	7f2c <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    3d76:	b908      	cbnz	r0, 3d7c <mutex_init_platform+0x34>
    3d78:	6823      	ldr	r3, [r4, #0]
    3d7a:	b91b      	cbnz	r3, 3d84 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    3d7c:	4b0a      	ldr	r3, [pc, #40]	; (3da8 <mutex_init_platform+0x60>)
    3d7e:	480d      	ldr	r0, [pc, #52]	; (3db4 <mutex_init_platform+0x6c>)
    3d80:	685b      	ldr	r3, [r3, #4]
    3d82:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    3d84:	6820      	ldr	r0, [r4, #0]
    3d86:	2214      	movs	r2, #20
    3d88:	2100      	movs	r1, #0
    3d8a:	f006 ff82 	bl	ac92 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    3d8e:	6863      	ldr	r3, [r4, #4]
    3d90:	f043 0302 	orr.w	r3, r3, #2
    3d94:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    3d96:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    3d98:	f009 f981 	bl	d09e <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    3d9c:	6863      	ldr	r3, [r4, #4]
    3d9e:	f043 0301 	orr.w	r3, r3, #1
    3da2:	6063      	str	r3, [r4, #4]
}
    3da4:	bd10      	pop	{r4, pc}
    3da6:	bf00      	nop
    3da8:	2000019c 	.word	0x2000019c
    3dac:	0000df0f 	.word	0x0000df0f
    3db0:	20001a70 	.word	0x20001a70
    3db4:	0000df35 	.word	0x0000df35

00003db8 <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3db8:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    3dba:	b308      	cbz	r0, 3e00 <mutex_lock_platform+0x48>
    switch (mutex->flags) {
    3dbc:	6843      	ldr	r3, [r0, #4]
    3dbe:	2b04      	cmp	r3, #4
    3dc0:	d110      	bne.n	3de4 <mutex_lock_platform+0x2c>
    3dc2:	2201      	movs	r2, #1
    3dc4:	6803      	ldr	r3, [r0, #0]
    3dc6:	f3bf 8f5b 	dmb	ish
    3dca:	e853 1f00 	ldrex	r1, [r3]
    3dce:	2900      	cmp	r1, #0
    3dd0:	d103      	bne.n	3dda <mutex_lock_platform+0x22>
    3dd2:	e843 2000 	strex	r0, r2, [r3]
    3dd6:	2800      	cmp	r0, #0
    3dd8:	d1f7      	bne.n	3dca <mutex_lock_platform+0x12>
    3dda:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3dde:	d10b      	bne.n	3df8 <mutex_lock_platform+0x40>
    3de0:	2000      	movs	r0, #0
}
    3de2:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3de4:	b153      	cbz	r3, 3dfc <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    3de6:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    3de8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3dec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3df0:	f004 f99e 	bl	8130 <z_impl_k_mutex_lock>
        if (ret == 0) {
    3df4:	2800      	cmp	r0, #0
    3df6:	d0f3      	beq.n	3de0 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3df8:	4803      	ldr	r0, [pc, #12]	; (3e08 <mutex_lock_platform+0x50>)
    3dfa:	e7f2      	b.n	3de2 <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    3dfc:	4803      	ldr	r0, [pc, #12]	; (3e0c <mutex_lock_platform+0x54>)
    3dfe:	e7f0      	b.n	3de2 <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    3e00:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    3e04:	e7ed      	b.n	3de2 <mutex_lock_platform+0x2a>
    3e06:	bf00      	nop
    3e08:	ffff8fe9 	.word	0xffff8fe9
    3e0c:	ffff8fea 	.word	0xffff8fea

00003e10 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    3e10:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    3e12:	4906      	ldr	r1, [pc, #24]	; (3e2c <nrf_cc3xx_platform_mutex_init+0x1c>)
    3e14:	4806      	ldr	r0, [pc, #24]	; (3e30 <nrf_cc3xx_platform_mutex_init+0x20>)
    3e16:	2340      	movs	r3, #64	; 0x40
    3e18:	2214      	movs	r2, #20
    3e1a:	f009 f8ea 	bl	cff2 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    3e1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    3e22:	4904      	ldr	r1, [pc, #16]	; (3e34 <nrf_cc3xx_platform_mutex_init+0x24>)
    3e24:	4804      	ldr	r0, [pc, #16]	; (3e38 <nrf_cc3xx_platform_mutex_init+0x28>)
    3e26:	f005 b9d1 	b.w	91cc <nrf_cc3xx_platform_set_mutexes>
    3e2a:	bf00      	nop
    3e2c:	20001a8c 	.word	0x20001a8c
    3e30:	20001a70 	.word	0x20001a70
    3e34:	0000d974 	.word	0x0000d974
    3e38:	0000d964 	.word	0x0000d964

00003e3c <boot_uart_fifo_callback>:
	return boot_uart_fifo_init();
}

static void
boot_uart_fifo_callback(const struct device *dev, void *user_data)
{
    3e3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	static struct line_input *cmd;
	uint8_t byte;
	int rx;

	uart_irq_update(uart_dev);
    3e3e:	4d24      	ldr	r5, [pc, #144]	; (3ed0 <boot_uart_fifo_callback+0x94>)
    3e40:	6828      	ldr	r0, [r5, #0]
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update == NULL) {
    3e42:	6883      	ldr	r3, [r0, #8]
    3e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3e46:	b103      	cbz	r3, 3e4a <boot_uart_fifo_callback+0xe>
		return -ENOSYS;
	}
	return api->irq_update(dev);
    3e48:	4798      	blx	r3

	if (!uart_irq_rx_ready(uart_dev)) {
    3e4a:	6828      	ldr	r0, [r5, #0]
	if (api->irq_rx_ready == NULL) {
    3e4c:	6883      	ldr	r3, [r0, #8]
    3e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    3e50:	2b00      	cmp	r3, #0
    3e52:	d135      	bne.n	3ec0 <boot_uart_fifo_callback+0x84>
		rx = uart_fifo_read(uart_dev, &byte, 1);
		if (rx != 1) {
			break;
		}

		if (!cmd) {
    3e54:	4c1f      	ldr	r4, [pc, #124]	; (3ed4 <boot_uart_fifo_callback+0x98>)
Z_GENLIST_IS_EMPTY(slist)
    3e56:	4e20      	ldr	r6, [pc, #128]	; (3ed8 <boot_uart_fifo_callback+0x9c>)
		rx = uart_fifo_read(uart_dev, &byte, 1);
    3e58:	6828      	ldr	r0, [r5, #0]
	if (api->fifo_read != NULL) {
    3e5a:	6883      	ldr	r3, [r0, #8]
    3e5c:	699b      	ldr	r3, [r3, #24]
    3e5e:	2b00      	cmp	r3, #0
    3e60:	d031      	beq.n	3ec6 <boot_uart_fifo_callback+0x8a>
		return api->fifo_read(dev, rx_data, size);
    3e62:	2201      	movs	r2, #1
    3e64:	f10d 0107 	add.w	r1, sp, #7
    3e68:	4798      	blx	r3
		if (rx != 1) {
    3e6a:	2801      	cmp	r0, #1
    3e6c:	d12b      	bne.n	3ec6 <boot_uart_fifo_callback+0x8a>
		if (!cmd) {
    3e6e:	6823      	ldr	r3, [r4, #0]
    3e70:	b943      	cbnz	r3, 3e84 <boot_uart_fifo_callback+0x48>
    3e72:	6833      	ldr	r3, [r6, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    3e74:	b33b      	cbz	r3, 3ec6 <boot_uart_fifo_callback+0x8a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    3e76:	6871      	ldr	r1, [r6, #4]
    3e78:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    3e7a:	6032      	str	r2, [r6, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    3e7c:	428b      	cmp	r3, r1
    3e7e:	d100      	bne.n	3e82 <boot_uart_fifo_callback+0x46>
	list->tail = node;
    3e80:	6072      	str	r2, [r6, #4]
			if (!node) {
				BOOT_LOG_ERR("Not enough memory to store"
					     " incoming data!");
				return;
			}
			cmd = CONTAINER_OF(node, struct line_input, node);
    3e82:	6023      	str	r3, [r4, #0]
		}

		if (cur < CONFIG_BOOT_MAX_LINE_INPUT_LEN) {
    3e84:	4915      	ldr	r1, [pc, #84]	; (3edc <boot_uart_fifo_callback+0xa0>)
    3e86:	f89d 7007 	ldrb.w	r7, [sp, #7]
    3e8a:	880a      	ldrh	r2, [r1, #0]
    3e8c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    3e90:	4608      	mov	r0, r1
    3e92:	d206      	bcs.n	3ea2 <boot_uart_fifo_callback+0x66>
			cmd->line[cur++] = byte;
    3e94:	6823      	ldr	r3, [r4, #0]
    3e96:	4413      	add	r3, r2
    3e98:	f102 0c01 	add.w	ip, r2, #1
    3e9c:	f8a1 c000 	strh.w	ip, [r1]
    3ea0:	721f      	strb	r7, [r3, #8]
		}

		if (byte ==  '\n') {
    3ea2:	2f0a      	cmp	r7, #10
    3ea4:	d1d8      	bne.n	3e58 <boot_uart_fifo_callback+0x1c>
			cmd->len = cur;
    3ea6:	6823      	ldr	r3, [r4, #0]
    3ea8:	8802      	ldrh	r2, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
    3eaa:	490d      	ldr	r1, [pc, #52]	; (3ee0 <boot_uart_fifo_callback+0xa4>)
    3eac:	605a      	str	r2, [r3, #4]
	parent->next = child;
    3eae:	2200      	movs	r2, #0
    3eb0:	601a      	str	r2, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
    3eb2:	684e      	ldr	r6, [r1, #4]
    3eb4:	b94e      	cbnz	r6, 3eca <boot_uart_fifo_callback+0x8e>
	list->head = node;
    3eb6:	e9c1 3300 	strd	r3, r3, [r1]
			sys_slist_append(&lines_queue, &cmd->node);
			cur = 0;
    3eba:	8002      	strh	r2, [r0, #0]
			cmd = NULL;
    3ebc:	6022      	str	r2, [r4, #0]
    3ebe:	e7ca      	b.n	3e56 <boot_uart_fifo_callback+0x1a>
	return api->irq_rx_ready(dev);
    3ec0:	4798      	blx	r3
	if (!uart_irq_rx_ready(uart_dev)) {
    3ec2:	2800      	cmp	r0, #0
    3ec4:	d1c6      	bne.n	3e54 <boot_uart_fifo_callback+0x18>
		}
	}
}
    3ec6:	b003      	add	sp, #12
    3ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	parent->next = child;
    3eca:	6033      	str	r3, [r6, #0]
	list->tail = node;
    3ecc:	604b      	str	r3, [r1, #4]
}
    3ece:	e7f4      	b.n	3eba <boot_uart_fifo_callback+0x7e>
    3ed0:	200023b4 	.word	0x200023b4
    3ed4:	20001f94 	.word	0x20001f94
    3ed8:	20001f8c 	.word	0x20001f8c
    3edc:	2000278c 	.word	0x2000278c
    3ee0:	200023ac 	.word	0x200023ac

00003ee4 <console_out>:
	uart_poll_out(uart_dev, c);
    3ee4:	4b04      	ldr	r3, [pc, #16]	; (3ef8 <console_out+0x14>)
{
    3ee6:	b510      	push	{r4, lr}
    3ee8:	4604      	mov	r4, r0
	uart_poll_out(uart_dev, c);
    3eea:	6818      	ldr	r0, [r3, #0]
	api->poll_out(dev, out_char);
    3eec:	6883      	ldr	r3, [r0, #8]
    3eee:	b2e1      	uxtb	r1, r4
    3ef0:	685b      	ldr	r3, [r3, #4]
    3ef2:	4798      	blx	r3
}
    3ef4:	4620      	mov	r0, r4
    3ef6:	bd10      	pop	{r4, pc}
    3ef8:	200023b4 	.word	0x200023b4

00003efc <console_read>:
{
    3efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3efe:	4606      	mov	r6, r0
    3f00:	460b      	mov	r3, r1
    3f02:	4615      	mov	r5, r2
	__asm__ volatile(
    3f04:	f04f 0220 	mov.w	r2, #32
    3f08:	f3ef 8c11 	mrs	ip, BASEPRI
    3f0c:	f382 8811 	msr	BASEPRI, r2
    3f10:	f3bf 8f6f 	isb	sy
	sys_snode_t *node;
	int key;

	key = irq_lock();
	/* Recycle cmd buffer returned previous time */
	if (cmd != NULL) {
    3f14:	4c19      	ldr	r4, [pc, #100]	; (3f7c <console_read+0x80>)
    3f16:	6821      	ldr	r1, [r4, #0]
    3f18:	b149      	cbz	r1, 3f2e <console_read+0x32>
		if (sys_slist_peek_tail(&avail_queue) != &cmd->node) {
    3f1a:	4a19      	ldr	r2, [pc, #100]	; (3f80 <console_read+0x84>)
    3f1c:	6850      	ldr	r0, [r2, #4]
    3f1e:	4288      	cmp	r0, r1
    3f20:	d005      	beq.n	3f2e <console_read+0x32>
	parent->next = child;
    3f22:	2000      	movs	r0, #0
    3f24:	6008      	str	r0, [r1, #0]
Z_GENLIST_APPEND(slist, snode)
    3f26:	6850      	ldr	r0, [r2, #4]
    3f28:	b998      	cbnz	r0, 3f52 <console_read+0x56>
	list->head = node;
    3f2a:	e9c2 1100 	strd	r1, r1, [r2]
Z_GENLIST_IS_EMPTY(slist)
    3f2e:	4a15      	ldr	r2, [pc, #84]	; (3f84 <console_read+0x88>)
    3f30:	6811      	ldr	r1, [r2, #0]
Z_GENLIST_GET(slist, snode)
    3f32:	b129      	cbz	r1, 3f40 <console_read+0x44>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    3f34:	6857      	ldr	r7, [r2, #4]
    3f36:	6808      	ldr	r0, [r1, #0]
	list->head = node;
    3f38:	6010      	str	r0, [r2, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    3f3a:	42b9      	cmp	r1, r7
	list->tail = node;
    3f3c:	bf08      	it	eq
    3f3e:	6050      	streq	r0, [r2, #4]
	__asm__ volatile(
    3f40:	f38c 8811 	msr	BASEPRI, ip
    3f44:	f3bf 8f6f 	isb	sy

	node = sys_slist_get(&lines_queue);
	irq_unlock(key);

	if (node == NULL) {
		cmd = NULL;
    3f48:	6021      	str	r1, [r4, #0]
	if (node == NULL) {
    3f4a:	b929      	cbnz	r1, 3f58 <console_read+0x5c>
		*newline = 0;
    3f4c:	2000      	movs	r0, #0
    3f4e:	6028      	str	r0, [r5, #0]
}
    3f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    3f52:	6001      	str	r1, [r0, #0]
	list->tail = node;
    3f54:	6051      	str	r1, [r2, #4]
}
    3f56:	e7ea      	b.n	3f2e <console_read+0x32>
		return 0;
	}

	cmd = CONTAINER_OF(node, struct line_input, node);
	*line = cmd->line;
	return cmd->len;
    3f58:	6848      	ldr	r0, [r1, #4]
	if (line == NULL) {
    3f5a:	3108      	adds	r1, #8
    3f5c:	d0f6      	beq.n	3f4c <console_read+0x50>
	if (len > str_size - 1) {
    3f5e:	1e5c      	subs	r4, r3, #1
    3f60:	4284      	cmp	r4, r0
    3f62:	bfa8      	it	ge
    3f64:	4604      	movge	r4, r0
	memcpy(str, line, len);
    3f66:	4622      	mov	r2, r4
    3f68:	4630      	mov	r0, r6
    3f6a:	f006 fe67 	bl	ac3c <memcpy>
	str[len] = '\0';
    3f6e:	2300      	movs	r3, #0
    3f70:	5533      	strb	r3, [r6, r4]
	*newline = 1;
    3f72:	2301      	movs	r3, #1
    3f74:	602b      	str	r3, [r5, #0]
	return len + 1;
    3f76:	18e0      	adds	r0, r4, r3
    3f78:	e7ea      	b.n	3f50 <console_read+0x54>
    3f7a:	bf00      	nop
    3f7c:	20001f98 	.word	0x20001f98
    3f80:	20001f8c 	.word	0x20001f8c
    3f84:	200023ac 	.word	0x200023ac

00003f88 <boot_console_init>:
	list->head = NULL;
    3f88:	4b23      	ldr	r3, [pc, #140]	; (4018 <boot_console_init+0x90>)
{
    3f8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    3f8c:	2500      	movs	r5, #0
	list->tail = NULL;
    3f8e:	e9c3 5500 	strd	r5, r5, [r3]
	list->head = node;
    3f92:	4b22      	ldr	r3, [pc, #136]	; (401c <boot_console_init+0x94>)
    3f94:	4a22      	ldr	r2, [pc, #136]	; (4020 <boot_console_init+0x98>)
	parent->next = child;
    3f96:	f8c3 5208 	str.w	r5, [r3, #520]	; 0x208
    3f9a:	f503 7102 	add.w	r1, r3, #520	; 0x208
	list->head = node;
    3f9e:	6013      	str	r3, [r2, #0]
	parent->next = child;
    3fa0:	6019      	str	r1, [r3, #0]
	list->tail = node;
    3fa2:	6051      	str	r1, [r2, #4]
    3fa4:	481f      	ldr	r0, [pc, #124]	; (4024 <boot_console_init+0x9c>)
boot_uart_fifo_init(void)
{
#ifdef CONFIG_BOOT_SERIAL_UART
	uart_dev = device_get_binding(CONFIG_RECOVERY_UART_DEV_NAME);
#elif CONFIG_BOOT_SERIAL_CDC_ACM
	uart_dev = device_get_binding(CONFIG_USB_CDC_ACM_DEVICE_NAME "_0");
    3fa6:	4c20      	ldr	r4, [pc, #128]	; (4028 <boot_console_init+0xa0>)
    3fa8:	f003 fec6 	bl	7d38 <z_impl_device_get_binding>
    3fac:	6020      	str	r0, [r4, #0]
	if (uart_dev) {
    3fae:	b928      	cbnz	r0, 3fbc <boot_console_init+0x34>
		}
	}
#endif
	uint8_t c;

	if (!uart_dev) {
    3fb0:	6820      	ldr	r0, [r4, #0]
    3fb2:	b948      	cbnz	r0, 3fc8 <boot_console_init+0x40>
			return (-1);
    3fb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    3fb8:	b003      	add	sp, #12
    3fba:	bd30      	pop	{r4, r5, pc}
		rc = usb_enable(NULL);
    3fbc:	4628      	mov	r0, r5
    3fbe:	f7fe f835 	bl	202c <usb_enable>
		if (rc) {
    3fc2:	2800      	cmp	r0, #0
    3fc4:	d0f4      	beq.n	3fb0 <boot_console_init+0x28>
    3fc6:	e7f5      	b.n	3fb4 <boot_console_init+0x2c>
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
    3fc8:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    3fca:	b123      	cbz	r3, 3fd6 <boot_console_init+0x4e>
    3fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3fce:	b113      	cbz	r3, 3fd6 <boot_console_init+0x4e>
		api->irq_callback_set(dev, cb, user_data);
    3fd0:	4916      	ldr	r1, [pc, #88]	; (402c <boot_console_init+0xa4>)
    3fd2:	2200      	movs	r2, #0
    3fd4:	4798      	blx	r3
	}

	uart_irq_callback_set(uart_dev, boot_uart_fifo_callback);

	/* Drain the fifo */
	if (uart_irq_rx_ready(uart_dev)) {
    3fd6:	6820      	ldr	r0, [r4, #0]
	if (api->irq_rx_ready == NULL) {
    3fd8:	6883      	ldr	r3, [r0, #8]
    3fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    3fdc:	b17b      	cbz	r3, 3ffe <boot_console_init+0x76>
	return api->irq_rx_ready(dev);
    3fde:	4798      	blx	r3
    3fe0:	b968      	cbnz	r0, 3ffe <boot_console_init+0x76>
		while (uart_fifo_read(uart_dev, &c, 1)) {
			;
		}
	}

	cur = 0;
    3fe2:	4a13      	ldr	r2, [pc, #76]	; (4030 <boot_console_init+0xa8>)

	uart_irq_rx_enable(uart_dev);
    3fe4:	6820      	ldr	r0, [r4, #0]
	cur = 0;
    3fe6:	2300      	movs	r3, #0
    3fe8:	8013      	strh	r3, [r2, #0]
	if (api->irq_rx_enable != NULL) {
    3fea:	6882      	ldr	r2, [r0, #8]
    3fec:	6a92      	ldr	r2, [r2, #40]	; 0x28
    3fee:	461c      	mov	r4, r3
    3ff0:	b97a      	cbnz	r2, 4012 <boot_console_init+0x8a>
    3ff2:	f384 8811 	msr	BASEPRI, r4
    3ff6:	f3bf 8f6f 	isb	sy
	 * to Zephyr issue #8393. This should be removed once the
	 * issue is fixed in upstream Zephyr.
	 */
	irq_unlock(0);

	return 0;
    3ffa:	2000      	movs	r0, #0
	return boot_uart_fifo_init();
    3ffc:	e7dc      	b.n	3fb8 <boot_console_init+0x30>
		while (uart_fifo_read(uart_dev, &c, 1)) {
    3ffe:	6820      	ldr	r0, [r4, #0]
	if (api->fifo_read != NULL) {
    4000:	6883      	ldr	r3, [r0, #8]
    4002:	699b      	ldr	r3, [r3, #24]
    4004:	2b00      	cmp	r3, #0
    4006:	d0ec      	beq.n	3fe2 <boot_console_init+0x5a>
		return api->fifo_read(dev, rx_data, size);
    4008:	2201      	movs	r2, #1
    400a:	f10d 0107 	add.w	r1, sp, #7
    400e:	4798      	blx	r3
    4010:	e7e6      	b.n	3fe0 <boot_console_init+0x58>
		api->irq_rx_enable(dev);
    4012:	4790      	blx	r2
    4014:	e7ed      	b.n	3ff2 <boot_console_init+0x6a>
    4016:	bf00      	nop
    4018:	200023ac 	.word	0x200023ac
    401c:	20001f9c 	.word	0x20001f9c
    4020:	20001f8c 	.word	0x20001f8c
    4024:	0000dee8 	.word	0x0000dee8
    4028:	200023b4 	.word	0x200023b4
    402c:	00003e3d 	.word	0x00003e3d
    4030:	2000278c 	.word	0x2000278c

00004034 <bs_cbor_writer>:
static CborEncoder bs_root;
static CborEncoder bs_rsp;

int
bs_cbor_writer(struct cbor_encoder_writer *cew, const char *data, int len)
{
    4034:	b538      	push	{r3, r4, r5, lr}
    if (cew->bytes_written + len > sizeof(bs_obuf)) {
    4036:	6843      	ldr	r3, [r0, #4]
{
    4038:	4604      	mov	r4, r0
    if (cew->bytes_written + len > sizeof(bs_obuf)) {
    403a:	1898      	adds	r0, r3, r2
    403c:	2880      	cmp	r0, #128	; 0x80
{
    403e:	4615      	mov	r5, r2
    if (cew->bytes_written + len > sizeof(bs_obuf)) {
    4040:	d808      	bhi.n	4054 <bs_cbor_writer+0x20>
        return CborErrorOutOfMemory;
    }

    memcpy(&bs_obuf[cew->bytes_written], data, len);
    4042:	4806      	ldr	r0, [pc, #24]	; (405c <bs_cbor_writer+0x28>)
    4044:	4418      	add	r0, r3
    4046:	f006 fdf9 	bl	ac3c <memcpy>
    cew->bytes_written += len;
    404a:	6862      	ldr	r2, [r4, #4]
    404c:	442a      	add	r2, r5
    404e:	6062      	str	r2, [r4, #4]

    return 0;
    4050:	2000      	movs	r0, #0
}
    4052:	bd38      	pop	{r3, r4, r5, pc}
        return CborErrorOutOfMemory;
    4054:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    4058:	e7fb      	b.n	4052 <bs_cbor_writer+0x1e>
    405a:	bf00      	nop
    405c:	20004ca0 	.word	0x20004ca0

00004060 <boot_serial_output>:
    }
}

static void
boot_serial_output(void)
{
    4060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4064:	b0d2      	sub	sp, #328	; 0x148
    char *data;
    int len;
    uint16_t crc;
    uint16_t totlen;
    char pkt_start[2] = { SHELL_NLIP_PKT_START1, SHELL_NLIP_PKT_START2 };
    4066:	f640 1306 	movw	r3, #2310	; 0x906
    406a:	f8ad 300c 	strh.w	r3, [sp, #12]
    char encoded_buf[BASE64_ENCODE_SIZE(BOOT_SERIAL_OUT_MAX)];

    data = bs_obuf;
    len = bs_writer.bytes_written;

    bs_hdr->nh_op++;
    406e:	f8df 8104 	ldr.w	r8, [pc, #260]	; 4174 <boot_serial_output+0x114>
    len = bs_writer.bytes_written;
    4072:	4b3c      	ldr	r3, [pc, #240]	; (4164 <boot_serial_output+0x104>)
    bs_hdr->nh_op++;
    4074:	f8d8 0000 	ldr.w	r0, [r8]
    len = bs_writer.bytes_written;
    4078:	685c      	ldr	r4, [r3, #4]
    bs_hdr->nh_flags = 0;
    bs_hdr->nh_len = htons(len);
    bs_hdr->nh_group = htons(bs_hdr->nh_group);
    407a:	8881      	ldrh	r1, [r0, #4]
    bs_hdr->nh_op++;
    407c:	7803      	ldrb	r3, [r0, #0]

#ifdef __ZEPHYR__
    crc =  crc16((uint8_t *)bs_hdr, sizeof(*bs_hdr), CRC_CITT_POLYMINAL,
                 CRC16_INITIAL_CRC, false);
    crc =  crc16(data, len, CRC_CITT_POLYMINAL, crc, true);
    407e:	4f3a      	ldr	r7, [pc, #232]	; (4168 <boot_serial_output+0x108>)
    crc = crc16_ccitt(CRC16_INITIAL_CRC, bs_hdr, sizeof(*bs_hdr));
    crc = crc16_ccitt(crc, data, len);
#endif
    crc = htons(crc);

    boot_uf->write(pkt_start, sizeof(pkt_start));
    4080:	4e3a      	ldr	r6, [pc, #232]	; (416c <boot_serial_output+0x10c>)
    bs_hdr->nh_len = htons(len);
    4082:	f3c4 2207 	ubfx	r2, r4, #8, #8
    4086:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
    408a:	8042      	strh	r2, [r0, #2]
    bs_hdr->nh_op++;
    408c:	3301      	adds	r3, #1
    bs_hdr->nh_group = htons(bs_hdr->nh_group);
    408e:	020a      	lsls	r2, r1, #8
    bs_hdr->nh_op++;
    4090:	7003      	strb	r3, [r0, #0]
    bs_hdr->nh_group = htons(bs_hdr->nh_group);
    4092:	ea42 2211 	orr.w	r2, r2, r1, lsr #8
    bs_hdr->nh_flags = 0;
    4096:	2300      	movs	r3, #0
    4098:	7043      	strb	r3, [r0, #1]
    bs_hdr->nh_group = htons(bs_hdr->nh_group);
    409a:	8082      	strh	r2, [r0, #4]
    crc =  crc16((uint8_t *)bs_hdr, sizeof(*bs_hdr), CRC_CITT_POLYMINAL,
    409c:	2108      	movs	r1, #8
    409e:	9300      	str	r3, [sp, #0]
    40a0:	f241 0221 	movw	r2, #4129	; 0x1021
    40a4:	f005 fcb9 	bl	9a1a <crc16>
    crc =  crc16(data, len, CRC_CITT_POLYMINAL, crc, true);
    40a8:	2201      	movs	r2, #1
    crc =  crc16((uint8_t *)bs_hdr, sizeof(*bs_hdr), CRC_CITT_POLYMINAL,
    40aa:	4603      	mov	r3, r0
    40ac:	f8ad 0010 	strh.w	r0, [sp, #16]
    crc =  crc16(data, len, CRC_CITT_POLYMINAL, crc, true);
    40b0:	9200      	str	r2, [sp, #0]
    40b2:	4621      	mov	r1, r4
    40b4:	f241 0221 	movw	r2, #4129	; 0x1021
    40b8:	4638      	mov	r0, r7
    40ba:	f005 fcae 	bl	9a1a <crc16>
    boot_uf->write(pkt_start, sizeof(pkt_start));
    40be:	6833      	ldr	r3, [r6, #0]
    crc = htons(crc);
    40c0:	ba40      	rev16	r0, r0
    40c2:	f8ad 0010 	strh.w	r0, [sp, #16]
    boot_uf->write(pkt_start, sizeof(pkt_start));
    40c6:	685b      	ldr	r3, [r3, #4]
    40c8:	a803      	add	r0, sp, #12
    40ca:	2102      	movs	r1, #2
    40cc:	4798      	blx	r3

    totlen = len + sizeof(*bs_hdr) + sizeof(crc);
    40ce:	f104 030a 	add.w	r3, r4, #10
    totlen = htons(totlen);
    40d2:	ba5b      	rev16	r3, r3

    memcpy(buf, &totlen, sizeof(totlen));
    40d4:	f10d 0112 	add.w	r1, sp, #18
    40d8:	2202      	movs	r2, #2
    40da:	a806      	add	r0, sp, #24
    totlen = sizeof(totlen);
    40dc:	2502      	movs	r5, #2
    totlen = htons(totlen);
    40de:	f8ad 3012 	strh.w	r3, [sp, #18]
    memcpy(buf, &totlen, sizeof(totlen));
    40e2:	f006 fdab 	bl	ac3c <memcpy>
    memcpy(&buf[totlen], bs_hdr, sizeof(*bs_hdr));
    40e6:	f8d8 1000 	ldr.w	r1, [r8]
    totlen = sizeof(totlen);
    40ea:	f8ad 5012 	strh.w	r5, [sp, #18]
    memcpy(&buf[totlen], bs_hdr, sizeof(*bs_hdr));
    40ee:	2208      	movs	r2, #8
    40f0:	f10d 001a 	add.w	r0, sp, #26
    40f4:	f006 fda2 	bl	ac3c <memcpy>
    totlen += sizeof(*bs_hdr);
    40f8:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    40fc:	3008      	adds	r0, #8
    memcpy(&buf[totlen], data, len);
    40fe:	ab06      	add	r3, sp, #24
    totlen += sizeof(*bs_hdr);
    4100:	b280      	uxth	r0, r0
    4102:	f8ad 0012 	strh.w	r0, [sp, #18]
    memcpy(&buf[totlen], data, len);
    4106:	4622      	mov	r2, r4
    4108:	4639      	mov	r1, r7
    410a:	4418      	add	r0, r3
    410c:	f006 fd96 	bl	ac3c <memcpy>
    totlen += len;
    4110:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    4114:	4420      	add	r0, r4
    memcpy(&buf[totlen], &crc, sizeof(crc));
    4116:	ab06      	add	r3, sp, #24
    totlen += len;
    4118:	b280      	uxth	r0, r0
    411a:	f8ad 0012 	strh.w	r0, [sp, #18]
    memcpy(&buf[totlen], &crc, sizeof(crc));
    411e:	462a      	mov	r2, r5
    4120:	a904      	add	r1, sp, #16
    4122:	4418      	add	r0, r3
    4124:	f006 fd8a 	bl	ac3c <memcpy>
    totlen += sizeof(crc);
    4128:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    412c:	442b      	add	r3, r5
    412e:	b29b      	uxth	r3, r3
#ifdef __ZEPHYR__
    size_t enc_len;
    base64_encode(encoded_buf, sizeof(encoded_buf), &enc_len, buf, totlen);
    4130:	aa05      	add	r2, sp, #20
    totlen += sizeof(crc);
    4132:	f8ad 3012 	strh.w	r3, [sp, #18]
    base64_encode(encoded_buf, sizeof(encoded_buf), &enc_len, buf, totlen);
    4136:	9300      	str	r3, [sp, #0]
    4138:	21ad      	movs	r1, #173	; 0xad
    413a:	ab06      	add	r3, sp, #24
    413c:	a826      	add	r0, sp, #152	; 0x98
    413e:	f7fc ffb5 	bl	10ac <base64_encode>
    totlen = enc_len;
    4142:	9905      	ldr	r1, [sp, #20]
#else
    totlen = base64_encode(buf, totlen, encoded_buf, 1);
#endif
    boot_uf->write(encoded_buf, totlen);
    4144:	6833      	ldr	r3, [r6, #0]
    totlen = enc_len;
    4146:	f8ad 1012 	strh.w	r1, [sp, #18]
    boot_uf->write(encoded_buf, totlen);
    414a:	a826      	add	r0, sp, #152	; 0x98
    414c:	685b      	ldr	r3, [r3, #4]
    414e:	b289      	uxth	r1, r1
    4150:	4798      	blx	r3
    boot_uf->write("\n\r", 2);
    4152:	6833      	ldr	r3, [r6, #0]
    4154:	4806      	ldr	r0, [pc, #24]	; (4170 <boot_serial_output+0x110>)
    4156:	685b      	ldr	r3, [r3, #4]
    4158:	4629      	mov	r1, r5
    415a:	4798      	blx	r3
    BOOT_LOG_INF("TX");
}
    415c:	b052      	add	sp, #328	; 0x148
    415e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4162:	bf00      	nop
    4164:	2000011c 	.word	0x2000011c
    4168:	20004ca0 	.word	0x20004ca0
    416c:	200023b8 	.word	0x200023b8
    4170:	0000df62 	.word	0x0000df62
    4174:	200023bc 	.word	0x200023bc

00004178 <bs_empty_rsp.isra.0>:
bs_empty_rsp(char *buf, int len)
    4178:	b538      	push	{r3, r4, r5, lr}
    cbor_encoder_create_map(&bs_root, &bs_rsp, CborIndefiniteLength);
    417a:	4c0c      	ldr	r4, [pc, #48]	; (41ac <bs_empty_rsp.isra.0+0x34>)
    417c:	4d0c      	ldr	r5, [pc, #48]	; (41b0 <bs_empty_rsp.isra.0+0x38>)
    417e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4182:	4621      	mov	r1, r4
    4184:	4628      	mov	r0, r5
    4186:	f008 feeb 	bl	cf60 <cbor_encoder_create_map>
    cbor_encode_text_stringz(&bs_rsp, "rc");
    418a:	490a      	ldr	r1, [pc, #40]	; (41b4 <bs_empty_rsp.isra.0+0x3c>)
    418c:	4620      	mov	r0, r4
    418e:	f006 fc2f 	bl	a9f0 <cbor_encode_text_stringz>
    cbor_encode_int(&bs_rsp, 0);
    4192:	2300      	movs	r3, #0
    4194:	2200      	movs	r2, #0
    4196:	4620      	mov	r0, r4
    4198:	f008 fec0 	bl	cf1c <cbor_encode_int>
    cbor_encoder_close_container(&bs_root, &bs_rsp);
    419c:	4621      	mov	r1, r4
    419e:	4628      	mov	r0, r5
    41a0:	f008 feed 	bl	cf7e <cbor_encoder_close_container>
}
    41a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    boot_serial_output();
    41a8:	f7ff bf5a 	b.w	4060 <boot_serial_output>
    41ac:	200023d0 	.word	0x200023d0
    41b0:	200023c0 	.word	0x200023c0
    41b4:	0000df65 	.word	0x0000df65

000041b8 <boot_serial_in_dec.constprop.0>:

/*
 * Returns 1 if full packet has been received.
 */
static int
boot_serial_in_dec(char *in, int inlen, char *out, int *out_off, int maxout)
    41b8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    uint16_t crc;
    uint16_t len;

#ifdef __ZEPHYR__
    int err;
    err = base64_decode( &out[*out_off], maxout - *out_off, &rc, in, inlen - 2);
    41bc:	680c      	ldr	r4, [r1, #0]
    41be:	4f1b      	ldr	r7, [pc, #108]	; (422c <boot_serial_in_dec.constprop.0+0x74>)
    41c0:	4b1b      	ldr	r3, [pc, #108]	; (4230 <boot_serial_in_dec.constprop.0+0x78>)
    41c2:	3802      	subs	r0, #2
boot_serial_in_dec(char *in, int inlen, char *out, int *out_off, int maxout)
    41c4:	460d      	mov	r5, r1
    err = base64_decode( &out[*out_off], maxout - *out_off, &rc, in, inlen - 2);
    41c6:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
    41ca:	9000      	str	r0, [sp, #0]
    41cc:	aa03      	add	r2, sp, #12
    41ce:	1938      	adds	r0, r7, r4
    41d0:	3101      	adds	r1, #1
    41d2:	f7fc ffed 	bl	11b0 <base64_decode>
    if (err) {
    41d6:	4604      	mov	r4, r0
    41d8:	bb28      	cbnz	r0, 4226 <boot_serial_in_dec.constprop.0+0x6e>
    if (rc < 0) {
        return -1;
    }
#endif

    *out_off += rc;
    41da:	682b      	ldr	r3, [r5, #0]
    41dc:	9a03      	ldr	r2, [sp, #12]
    41de:	4413      	add	r3, r2
    if (*out_off <= sizeof(uint16_t)) {
    41e0:	2b02      	cmp	r3, #2
    *out_off += rc;
    41e2:	602b      	str	r3, [r5, #0]
    if (*out_off <= sizeof(uint16_t)) {
    41e4:	d91b      	bls.n	421e <boot_serial_in_dec.constprop.0+0x66>
        return 0;
    }

    len = ntohs(*(uint16_t *)out);
    41e6:	8839      	ldrh	r1, [r7, #0]
    41e8:	020e      	lsls	r6, r1, #8
    41ea:	ea46 2611 	orr.w	r6, r6, r1, lsr #8
    41ee:	b2b6      	uxth	r6, r6
    if (len != *out_off - sizeof(uint16_t)) {
    41f0:	3b02      	subs	r3, #2
    41f2:	429e      	cmp	r6, r3
    41f4:	d113      	bne.n	421e <boot_serial_in_dec.constprop.0+0x66>
        len = *out_off - sizeof(uint16_t);
    }

    out += sizeof(uint16_t);
#ifdef __ZEPHYR__
    crc = crc16(out, len, CRC_CITT_POLYMINAL, CRC16_INITIAL_CRC, true);
    41f6:	f04f 0801 	mov.w	r8, #1
    41fa:	4603      	mov	r3, r0
    41fc:	f8cd 8000 	str.w	r8, [sp]
    4200:	f241 0221 	movw	r2, #4129	; 0x1021
    4204:	4631      	mov	r1, r6
    4206:	1cb8      	adds	r0, r7, #2
    4208:	f005 fc07 	bl	9a1a <crc16>
#else
    crc = crc16_ccitt(CRC16_INITIAL_CRC, out, len);
#endif
    if (crc || len <= sizeof(crc)) {
    420c:	b938      	cbnz	r0, 421e <boot_serial_in_dec.constprop.0+0x66>
    420e:	2e02      	cmp	r6, #2
    4210:	d905      	bls.n	421e <boot_serial_in_dec.constprop.0+0x66>
        return 0;
    }
    *out_off -= sizeof(crc);
    4212:	682b      	ldr	r3, [r5, #0]
    4214:	3b02      	subs	r3, #2
    out[*out_off] = '\0';
    4216:	441f      	add	r7, r3
    *out_off -= sizeof(crc);
    4218:	602b      	str	r3, [r5, #0]
    out[*out_off] = '\0';
    421a:	70bc      	strb	r4, [r7, #2]

    return 1;
    421c:	4644      	mov	r4, r8
}
    421e:	4620      	mov	r0, r4
    4220:	b004      	add	sp, #16
    4222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
    4226:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    422a:	e7f8      	b.n	421e <boot_serial_in_dec.constprop.0+0x66>
    422c:	20004d20 	.word	0x20004d20
    4230:	20004f23 	.word	0x20004f23

00004234 <boot_serial_input>:
{
    4234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (len < sizeof(*hdr) ||
    4238:	2907      	cmp	r1, #7
{
    423a:	b0b3      	sub	sp, #204	; 0xcc
    423c:	4605      	mov	r5, r0
    if (len < sizeof(*hdr) ||
    423e:	d960      	bls.n	4302 <boot_serial_input+0xce>
    4240:	7804      	ldrb	r4, [r0, #0]
    4242:	f014 04fd 	ands.w	r4, r4, #253	; 0xfd
    4246:	d15c      	bne.n	4302 <boot_serial_input+0xce>
      (ntohs(hdr->nh_len) < len - sizeof(*hdr))) {
    4248:	8842      	ldrh	r2, [r0, #2]
    424a:	0213      	lsls	r3, r2, #8
    424c:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
    4250:	f1a1 0608 	sub.w	r6, r1, #8
    4254:	b29b      	uxth	r3, r3
      (hdr->nh_op != NMGR_OP_READ && hdr->nh_op != NMGR_OP_WRITE) ||
    4256:	42b3      	cmp	r3, r6
    4258:	d353      	bcc.n	4302 <boot_serial_input+0xce>
    hdr->nh_group = ntohs(hdr->nh_group);
    425a:	8882      	ldrh	r2, [r0, #4]
    bs_hdr = hdr;
    425c:	4bb0      	ldr	r3, [pc, #704]	; (4520 <boot_serial_input+0x2ec>)
    bs_writer.bytes_written = 0;
    425e:	49b1      	ldr	r1, [pc, #708]	; (4524 <boot_serial_input+0x2f0>)
    bs_hdr = hdr;
    4260:	6018      	str	r0, [r3, #0]
    hdr->nh_group = ntohs(hdr->nh_group);
    4262:	0213      	lsls	r3, r2, #8
    4264:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
    4268:	8083      	strh	r3, [r0, #4]
    cbor_encoder_init(&bs_root, &bs_writer, 0);
    426a:	4622      	mov	r2, r4
    426c:	48ae      	ldr	r0, [pc, #696]	; (4528 <boot_serial_input+0x2f4>)
    bs_writer.bytes_written = 0;
    426e:	604c      	str	r4, [r1, #4]
    cbor_encoder_init(&bs_root, &bs_writer, 0);
    4270:	f008 fe47 	bl	cf02 <cbor_encoder_init>
    if (hdr->nh_group == MGMT_GROUP_ID_IMAGE) {
    4274:	88ab      	ldrh	r3, [r5, #4]
    4276:	2b01      	cmp	r3, #1
    4278:	f040 81bd 	bne.w	45f6 <boot_serial_input+0x3c2>
        switch (hdr->nh_id) {
    427c:	79eb      	ldrb	r3, [r5, #7]
    427e:	b12b      	cbz	r3, 428c <boot_serial_input+0x58>
    4280:	2b01      	cmp	r3, #1
    4282:	f000 809d 	beq.w	43c0 <boot_serial_input+0x18c>
            bs_empty_rsp(buf, len);
    4286:	f7ff ff77 	bl	4178 <bs_empty_rsp.isra.0>
            break;
    428a:	e03a      	b.n	4302 <boot_serial_input+0xce>
    cbor_encoder_create_map(&bs_root, &bs_rsp, CborIndefiniteLength);
    428c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4290:	49a6      	ldr	r1, [pc, #664]	; (452c <boot_serial_input+0x2f8>)
    4292:	48a5      	ldr	r0, [pc, #660]	; (4528 <boot_serial_input+0x2f4>)
            if (hdr.ih_magic != IMAGE_MAGIC ||
    4294:	4da6      	ldr	r5, [pc, #664]	; (4530 <boot_serial_input+0x2fc>)
            cbor_encode_text_stringz(&image, "slot");
    4296:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 454c <boot_serial_input+0x318>
            cbor_encode_text_stringz(&image, "version");
    429a:	f8df 92b4 	ldr.w	r9, [pc, #692]	; 4550 <boot_serial_input+0x31c>
    cbor_encoder_create_map(&bs_root, &bs_rsp, CborIndefiniteLength);
    429e:	f008 fe5f 	bl	cf60 <cbor_encoder_create_map>
    cbor_encode_text_stringz(&bs_rsp, "images");
    42a2:	49a4      	ldr	r1, [pc, #656]	; (4534 <boot_serial_input+0x300>)
    42a4:	48a1      	ldr	r0, [pc, #644]	; (452c <boot_serial_input+0x2f8>)
    42a6:	f006 fba3 	bl	a9f0 <cbor_encode_text_stringz>
    cbor_encoder_create_array(&bs_rsp, &images, CborIndefiniteLength);
    42aa:	48a0      	ldr	r0, [pc, #640]	; (452c <boot_serial_input+0x2f8>)
    42ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    42b0:	a908      	add	r1, sp, #32
    42b2:	f008 fe52 	bl	cf5a <cbor_encoder_create_array>
    42b6:	2600      	movs	r6, #0
    42b8:	2700      	movs	r7, #0
            area_id = flash_area_id_from_multi_image_slot(image_index, slot);
    42ba:	4631      	mov	r1, r6
    42bc:	2000      	movs	r0, #0
    42be:	f005 f8a7 	bl	9410 <flash_area_id_from_multi_image_slot>
            if (flash_area_open(area_id, &fap)) {
    42c2:	a907      	add	r1, sp, #28
    42c4:	b2c0      	uxtb	r0, r0
    42c6:	f7fe fbbb 	bl	2a40 <flash_area_open>
    42ca:	4604      	mov	r4, r0
    42cc:	b958      	cbnz	r0, 42e6 <boot_serial_input+0xb2>
            flash_area_read(fap, 0, &hdr, sizeof(hdr));
    42ce:	2320      	movs	r3, #32
    42d0:	4601      	mov	r1, r0
    42d2:	aa10      	add	r2, sp, #64	; 0x40
    42d4:	9807      	ldr	r0, [sp, #28]
    42d6:	f006 f9b9 	bl	a64c <flash_area_read>
            if (hdr.ih_magic != IMAGE_MAGIC ||
    42da:	9b10      	ldr	r3, [sp, #64]	; 0x40
    42dc:	42ab      	cmp	r3, r5
    42de:	d016      	beq.n	430e <boot_serial_input+0xda>
                flash_area_close(fap);
    42e0:	9807      	ldr	r0, [sp, #28]
    42e2:	f006 f9b2 	bl	a64a <flash_area_close>
        for (slot = 0; slot < 2; slot++) {
    42e6:	2f00      	cmp	r7, #0
    42e8:	bf08      	it	eq
    42ea:	2e01      	cmpeq	r6, #1
    42ec:	d10c      	bne.n	4308 <boot_serial_input+0xd4>
    cbor_encoder_close_container(&bs_rsp, &images);
    42ee:	a908      	add	r1, sp, #32
    42f0:	488e      	ldr	r0, [pc, #568]	; (452c <boot_serial_input+0x2f8>)
    42f2:	f008 fe44 	bl	cf7e <cbor_encoder_close_container>
    cbor_encoder_close_container(&bs_root, &bs_rsp);
    42f6:	498d      	ldr	r1, [pc, #564]	; (452c <boot_serial_input+0x2f8>)
    42f8:	488b      	ldr	r0, [pc, #556]	; (4528 <boot_serial_input+0x2f4>)
    42fa:	f008 fe40 	bl	cf7e <cbor_encoder_close_container>
    boot_serial_output();
    42fe:	f7ff feaf 	bl	4060 <boot_serial_output>
}
    4302:	b033      	add	sp, #204	; 0xcc
    4304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4308:	2601      	movs	r6, #1
    430a:	2700      	movs	r7, #0
    430c:	e7d5      	b.n	42ba <boot_serial_input+0x86>
              bootutil_img_validate(NULL, 0, &hdr, fap, tmpbuf, sizeof(tmpbuf),
    430e:	2340      	movs	r3, #64	; 0x40
    4310:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
    4314:	9301      	str	r3, [sp, #4]
    4316:	e9cd 4403 	strd	r4, r4, [sp, #12]
    431a:	9b07      	ldr	r3, [sp, #28]
    431c:	9402      	str	r4, [sp, #8]
    431e:	f8cd a000 	str.w	sl, [sp]
    4322:	aa10      	add	r2, sp, #64	; 0x40
    4324:	4621      	mov	r1, r4
    4326:	4620      	mov	r0, r4
    4328:	f7fc f902 	bl	530 <bootutil_img_validate>
            if (hdr.ih_magic != IMAGE_MAGIC ||
    432c:	2800      	cmp	r0, #0
    432e:	d1d7      	bne.n	42e0 <boot_serial_input+0xac>
            flash_area_close(fap);
    4330:	9807      	ldr	r0, [sp, #28]
    4332:	f006 f98a 	bl	a64a <flash_area_close>
            cbor_encoder_create_map(&images, &image, CborIndefiniteLength);
    4336:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    433a:	a90c      	add	r1, sp, #48	; 0x30
    433c:	a808      	add	r0, sp, #32
    433e:	f008 fe0f 	bl	cf60 <cbor_encoder_create_map>
            cbor_encode_text_stringz(&image, "slot");
    4342:	4641      	mov	r1, r8
    4344:	a80c      	add	r0, sp, #48	; 0x30
    4346:	f006 fb53 	bl	a9f0 <cbor_encode_text_stringz>
            cbor_encode_int(&image, slot);
    434a:	4632      	mov	r2, r6
    434c:	463b      	mov	r3, r7
    434e:	a80c      	add	r0, sp, #48	; 0x30
    4350:	f008 fde4 	bl	cf1c <cbor_encode_int>
            cbor_encode_text_stringz(&image, "version");
    4354:	4649      	mov	r1, r9
    4356:	a80c      	add	r0, sp, #48	; 0x30
    4358:	f006 fb4a 	bl	a9f0 <cbor_encode_text_stringz>
    off = u32toa(dst, ver->iv_major);
    435c:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
    4360:	4650      	mov	r0, sl
    4362:	f006 fb23 	bl	a9ac <u32toa>
    dst[off++] = '.';
    4366:	ab32      	add	r3, sp, #200	; 0xc8
    4368:	1c44      	adds	r4, r0, #1
    436a:	4418      	add	r0, r3
    436c:	f04f 0b2e 	mov.w	fp, #46	; 0x2e
    off += u32toa(dst + off, ver->iv_minor);
    4370:	f89d 1055 	ldrb.w	r1, [sp, #85]	; 0x55
    dst[off++] = '.';
    4374:	f800 bc68 	strb.w	fp, [r0, #-104]
    off += u32toa(dst + off, ver->iv_minor);
    4378:	eb0a 0004 	add.w	r0, sl, r4
    437c:	f006 fb16 	bl	a9ac <u32toa>
    dst[off++] = '.';
    4380:	ab32      	add	r3, sp, #200	; 0xc8
    off += u32toa(dst + off, ver->iv_minor);
    4382:	4420      	add	r0, r4
    dst[off++] = '.';
    4384:	1c44      	adds	r4, r0, #1
    4386:	4418      	add	r0, r3
    off += u32toa(dst + off, ver->iv_revision);
    4388:	f8bd 1056 	ldrh.w	r1, [sp, #86]	; 0x56
    dst[off++] = '.';
    438c:	f800 bc68 	strb.w	fp, [r0, #-104]
    off += u32toa(dst + off, ver->iv_revision);
    4390:	eb0a 0004 	add.w	r0, sl, r4
    4394:	f006 fb0a 	bl	a9ac <u32toa>
    dst[off++] = '.';
    4398:	ab32      	add	r3, sp, #200	; 0xc8
    off += u32toa(dst + off, ver->iv_revision);
    439a:	4404      	add	r4, r0
    dst[off++] = '.';
    439c:	4423      	add	r3, r4
    439e:	3401      	adds	r4, #1
    off += u32toa(dst + off, ver->iv_build_num);
    43a0:	9916      	ldr	r1, [sp, #88]	; 0x58
    dst[off++] = '.';
    43a2:	f803 bc68 	strb.w	fp, [r3, #-104]
    off += u32toa(dst + off, ver->iv_build_num);
    43a6:	eb0a 0004 	add.w	r0, sl, r4
    43aa:	f006 faff 	bl	a9ac <u32toa>
            cbor_encode_text_stringz(&image, (char *)tmpbuf);
    43ae:	4651      	mov	r1, sl
    43b0:	a80c      	add	r0, sp, #48	; 0x30
    43b2:	f006 fb1d 	bl	a9f0 <cbor_encode_text_stringz>
            cbor_encoder_close_container(&images, &image);
    43b6:	a90c      	add	r1, sp, #48	; 0x30
    43b8:	a808      	add	r0, sp, #32
    43ba:	f008 fde0 	bl	cf7e <cbor_encoder_close_container>
    43be:	e792      	b.n	42e6 <boot_serial_input+0xb2>
    if (!cbor_decode_Upload((const uint8_t *)buf, len, &upload)) {
    43c0:	aa18      	add	r2, sp, #96	; 0x60
    43c2:	4631      	mov	r1, r6
    43c4:	f105 0008 	add.w	r0, r5, #8
    const struct flash_area *fap = NULL;
    43c8:	9408      	str	r4, [sp, #32]
    if (!cbor_decode_Upload((const uint8_t *)buf, len, &upload)) {
    43ca:	f000 fa03 	bl	47d4 <cbor_decode_Upload>
    43ce:	b908      	cbnz	r0, 43d4 <boot_serial_input+0x1a0>
        rc = MGMT_ERR_EINVAL;
    43d0:	2603      	movs	r6, #3
    43d2:	e038      	b.n	4446 <boot_serial_input+0x212>
    long long int data_len = UINT_MAX;
    43d4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    43d8:	f04f 0900 	mov.w	r9, #0
    43dc:	f8dd c0c4 	ldr.w	ip, [sp, #196]	; 0xc4
    43e0:	ab18      	add	r3, sp, #96	; 0x60
    for (int i = 0; i < upload._Upload_members_count; i++) {
    43e2:	4622      	mov	r2, r4
    img_num = 0;
    43e4:	4620      	mov	r0, r4
    size_t img_blen = 0;
    43e6:	4625      	mov	r5, r4
    long long int off = UINT_MAX;
    43e8:	4646      	mov	r6, r8
    43ea:	464f      	mov	r7, r9
    const uint8_t *img_data = NULL;
    43ec:	46a3      	mov	fp, r4
    for (int i = 0; i < upload._Upload_members_count; i++) {
    43ee:	4562      	cmp	r2, ip
    43f0:	d14d      	bne.n	448e <boot_serial_input+0x25a>
    if (off == UINT_MAX || img_data == NULL) {
    43f2:	2f00      	cmp	r7, #0
    43f4:	bf08      	it	eq
    43f6:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    43fa:	d0e9      	beq.n	43d0 <boot_serial_input+0x19c>
    43fc:	f1bb 0f00 	cmp.w	fp, #0
    4400:	d0e6      	beq.n	43d0 <boot_serial_input+0x19c>
    rc = flash_area_open(flash_area_id_from_multi_image_slot(img_num, 0), &fap);
    4402:	2100      	movs	r1, #0
    4404:	f005 f804 	bl	9410 <flash_area_id_from_multi_image_slot>
    4408:	a908      	add	r1, sp, #32
    440a:	b2c0      	uxtb	r0, r0
    440c:	f7fe fb18 	bl	2a40 <flash_area_open>
    if (rc) {
    4410:	2800      	cmp	r0, #0
    4412:	d1dd      	bne.n	43d0 <boot_serial_input+0x19c>
    if (off == 0) {
    4414:	ea56 0307 	orrs.w	r3, r6, r7
    4418:	f8df a128 	ldr.w	sl, [pc, #296]	; 4544 <boot_serial_input+0x310>
    441c:	d10b      	bne.n	4436 <boot_serial_input+0x202>
        if (data_len > fap->fa_size) {
    441e:	9b08      	ldr	r3, [sp, #32]
        curr_off = 0;
    4420:	f8ca 0000 	str.w	r0, [sl]
        if (data_len > fap->fa_size) {
    4424:	689a      	ldr	r2, [r3, #8]
    4426:	2300      	movs	r3, #0
    4428:	4542      	cmp	r2, r8
    442a:	eb73 0309 	sbcs.w	r3, r3, r9
    442e:	dbcf      	blt.n	43d0 <boot_serial_input+0x19c>
        img_size = data_len;
    4430:	4b41      	ldr	r3, [pc, #260]	; (4538 <boot_serial_input+0x304>)
    4432:	f8c3 8000 	str.w	r8, [r3]
    if (off != curr_off) {
    4436:	f8da 1000 	ldr.w	r1, [sl]
    443a:	2300      	movs	r3, #0
    443c:	42bb      	cmp	r3, r7
    443e:	bf08      	it	eq
    4440:	42b1      	cmpeq	r1, r6
    4442:	d03a      	beq.n	44ba <boot_serial_input+0x286>
        rc = 0;
    4444:	2600      	movs	r6, #0
    cbor_encoder_create_map(&bs_root, &bs_rsp, CborIndefiniteLength);
    4446:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    444a:	4938      	ldr	r1, [pc, #224]	; (452c <boot_serial_input+0x2f8>)
    444c:	4836      	ldr	r0, [pc, #216]	; (4528 <boot_serial_input+0x2f4>)
    444e:	f008 fd87 	bl	cf60 <cbor_encoder_create_map>
    cbor_encode_text_stringz(&bs_rsp, "rc");
    4452:	493a      	ldr	r1, [pc, #232]	; (453c <boot_serial_input+0x308>)
    4454:	4835      	ldr	r0, [pc, #212]	; (452c <boot_serial_input+0x2f8>)
    4456:	f006 facb 	bl	a9f0 <cbor_encode_text_stringz>
    cbor_encode_int(&bs_rsp, rc);
    445a:	4834      	ldr	r0, [pc, #208]	; (452c <boot_serial_input+0x2f8>)
    445c:	4632      	mov	r2, r6
    445e:	17f3      	asrs	r3, r6, #31
    4460:	f008 fd5c 	bl	cf1c <cbor_encode_int>
    if (rc == 0) {
    4464:	b94e      	cbnz	r6, 447a <boot_serial_input+0x246>
        cbor_encode_text_stringz(&bs_rsp, "off");
    4466:	4936      	ldr	r1, [pc, #216]	; (4540 <boot_serial_input+0x30c>)
    4468:	4830      	ldr	r0, [pc, #192]	; (452c <boot_serial_input+0x2f8>)
    446a:	f006 fac1 	bl	a9f0 <cbor_encode_text_stringz>
        cbor_encode_uint(&bs_rsp, curr_off);
    446e:	4b35      	ldr	r3, [pc, #212]	; (4544 <boot_serial_input+0x310>)
    4470:	482e      	ldr	r0, [pc, #184]	; (452c <boot_serial_input+0x2f8>)
    4472:	681a      	ldr	r2, [r3, #0]
    4474:	4633      	mov	r3, r6
    4476:	f008 fd49 	bl	cf0c <cbor_encode_uint>
    cbor_encoder_close_container(&bs_root, &bs_rsp);
    447a:	492c      	ldr	r1, [pc, #176]	; (452c <boot_serial_input+0x2f8>)
    447c:	482a      	ldr	r0, [pc, #168]	; (4528 <boot_serial_input+0x2f4>)
    447e:	f008 fd7e 	bl	cf7e <cbor_encoder_close_container>
    boot_serial_output();
    4482:	f7ff fded 	bl	4060 <boot_serial_output>
    flash_area_close(fap);
    4486:	9808      	ldr	r0, [sp, #32]
    4488:	f006 f8df 	bl	a64a <flash_area_close>
}
    448c:	e739      	b.n	4302 <boot_serial_input+0xce>
        switch(member->_Member_choice) {
    448e:	7c19      	ldrb	r1, [r3, #16]
    4490:	2903      	cmp	r1, #3
    4492:	d804      	bhi.n	449e <boot_serial_input+0x26a>
    4494:	e8df f001 	tbb	[pc, r1]
    4498:	0e090602 	.word	0x0e090602
                img_num = member->_Member_image;
    449c:	6898      	ldr	r0, [r3, #8]
    for (int i = 0; i < upload._Upload_members_count; i++) {
    449e:	3201      	adds	r2, #1
    44a0:	3314      	adds	r3, #20
    44a2:	e7a4      	b.n	43ee <boot_serial_input+0x1ba>
                slen = member->_Member_data.len;
    44a4:	e9d3 b502 	ldrd	fp, r5, [r3, #8]
                break;
    44a8:	e7f9      	b.n	449e <boot_serial_input+0x26a>
                data_len = member->_Member_len;
    44aa:	6899      	ldr	r1, [r3, #8]
    44ac:	4688      	mov	r8, r1
    44ae:	ea4f 79e1 	mov.w	r9, r1, asr #31
                break;
    44b2:	e7f4      	b.n	449e <boot_serial_input+0x26a>
                off = member->_Member_off;
    44b4:	689e      	ldr	r6, [r3, #8]
    44b6:	17f7      	asrs	r7, r6, #31
                break;
    44b8:	e7f1      	b.n	449e <boot_serial_input+0x26a>
    if (curr_off + img_blen > img_size) {
    44ba:	4b1f      	ldr	r3, [pc, #124]	; (4538 <boot_serial_input+0x304>)
    44bc:	681a      	ldr	r2, [r3, #0]
    44be:	4429      	add	r1, r5
    44c0:	4291      	cmp	r1, r2
    44c2:	4698      	mov	r8, r3
    44c4:	d884      	bhi.n	43d0 <boot_serial_input+0x19c>
    rem_bytes = img_blen % flash_area_align(fap);
    44c6:	9808      	ldr	r0, [sp, #32]
    44c8:	f006 f93c 	bl	a744 <flash_area_align>
    44cc:	fbb5 f3f0 	udiv	r3, r5, r0
    44d0:	fb03 5310 	mls	r3, r3, r0, r5
    if ((curr_off + img_blen < img_size) && rem_bytes) {
    44d4:	f8da 0000 	ldr.w	r0, [sl]
    44d8:	f8d8 2000 	ldr.w	r2, [r8]
    44dc:	1941      	adds	r1, r0, r5
    44de:	4291      	cmp	r1, r2
        img_blen -= rem_bytes;
    44e0:	bf38      	it	cc
    44e2:	1aed      	subcc	r5, r5, r3
    rc = flash_area_sector_from_off(curr_off + img_blen, &sector);
    44e4:	a90c      	add	r1, sp, #48	; 0x30
    44e6:	4428      	add	r0, r5
    rem_bytes = img_blen % flash_area_align(fap);
    44e8:	bf28      	it	cs
    44ea:	b2dc      	uxtbcs	r4, r3
    rc = flash_area_sector_from_off(curr_off + img_blen, &sector);
    44ec:	f7fc f806 	bl	4fc <flash_area_sector_from_off>
    if (rc) {
    44f0:	4606      	mov	r6, r0
    44f2:	2800      	cmp	r0, #0
    44f4:	d1a7      	bne.n	4446 <boot_serial_input+0x212>
    if (off_last != sector.fs_off) {
    44f6:	4f14      	ldr	r7, [pc, #80]	; (4548 <boot_serial_input+0x314>)
    44f8:	990c      	ldr	r1, [sp, #48]	; 0x30
    44fa:	683b      	ldr	r3, [r7, #0]
    44fc:	4299      	cmp	r1, r3
    44fe:	d106      	bne.n	450e <boot_serial_input+0x2da>
    BOOT_LOG_INF("Writing at 0x%x until 0x%x", curr_off, curr_off + img_blen);
    4500:	f8da 1000 	ldr.w	r1, [sl]
    if (rem_bytes) {
    4504:	bb34      	cbnz	r4, 4554 <boot_serial_input+0x320>
        rc = flash_area_write(fap, curr_off, img_data, img_blen);
    4506:	9808      	ldr	r0, [sp, #32]
    4508:	462b      	mov	r3, r5
    450a:	465a      	mov	r2, fp
    450c:	e04c      	b.n	45a8 <boot_serial_input+0x374>
        rc = flash_area_erase(fap, sector.fs_off, sector.fs_size);
    450e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4510:	9808      	ldr	r0, [sp, #32]
        off_last = sector.fs_off;
    4512:	6039      	str	r1, [r7, #0]
        rc = flash_area_erase(fap, sector.fs_off, sector.fs_size);
    4514:	f006 f8e6 	bl	a6e4 <flash_area_erase>
        if (rc) {
    4518:	4606      	mov	r6, r0
    451a:	2800      	cmp	r0, #0
    451c:	d0f0      	beq.n	4500 <boot_serial_input+0x2cc>
    451e:	e792      	b.n	4446 <boot_serial_input+0x212>
    4520:	200023bc 	.word	0x200023bc
    4524:	2000011c 	.word	0x2000011c
    4528:	200023c0 	.word	0x200023c0
    452c:	200023d0 	.word	0x200023d0
    4530:	96f3b83d 	.word	0x96f3b83d
    4534:	0000df68 	.word	0x0000df68
    4538:	200023e4 	.word	0x200023e4
    453c:	0000df65 	.word	0x0000df65
    4540:	0000df7c 	.word	0x0000df7c
    4544:	200023e0 	.word	0x200023e0
    4548:	20000124 	.word	0x20000124
    454c:	0000df6f 	.word	0x0000df6f
    4550:	0000df74 	.word	0x0000df74
        if (w_size) {
    4554:	1b2e      	subs	r6, r5, r4
    4556:	d02d      	beq.n	45b4 <boot_serial_input+0x380>
            rc = flash_area_write(fap, curr_off, img_data, w_size);
    4558:	9808      	ldr	r0, [sp, #32]
    455a:	4633      	mov	r3, r6
    455c:	465a      	mov	r2, fp
    455e:	f006 f892 	bl	a686 <flash_area_write>
            if (rc) {
    4562:	2800      	cmp	r0, #0
    4564:	f47f af34 	bne.w	43d0 <boot_serial_input+0x19c>
            curr_off += w_size;
    4568:	f8da 3000 	ldr.w	r3, [sl]
    456c:	4433      	add	r3, r6
    456e:	f8ca 3000 	str.w	r3, [sl]
            img_data += w_size;
    4572:	44b3      	add	fp, r6
            img_blen -= w_size;
    4574:	4625      	mov	r5, r4
            memcpy(wbs_aligned, img_data, rem_bytes);
    4576:	4622      	mov	r2, r4
    4578:	4659      	mov	r1, fp
    457a:	a810      	add	r0, sp, #64	; 0x40
    457c:	f006 fb5e 	bl	ac3c <memcpy>
            memset(wbs_aligned + rem_bytes, flash_area_erased_val(fap),
    4580:	9808      	ldr	r0, [sp, #32]
    4582:	f006 f8e8 	bl	a756 <flash_area_erased_val>
    4586:	ab10      	add	r3, sp, #64	; 0x40
    4588:	4601      	mov	r1, r0
    458a:	f1c4 0208 	rsb	r2, r4, #8
    458e:	1918      	adds	r0, r3, r4
    4590:	f006 fb7f 	bl	ac92 <memset>
            rc = flash_area_write(fap, curr_off, wbs_aligned, flash_area_align(fap));
    4594:	9c08      	ldr	r4, [sp, #32]
    4596:	f8da 6000 	ldr.w	r6, [sl]
    459a:	4620      	mov	r0, r4
    459c:	f006 f8d2 	bl	a744 <flash_area_align>
    45a0:	aa10      	add	r2, sp, #64	; 0x40
    45a2:	4603      	mov	r3, r0
    45a4:	4631      	mov	r1, r6
    45a6:	4620      	mov	r0, r4
        rc = flash_area_write(fap, curr_off, img_data, img_blen);
    45a8:	f006 f86d 	bl	a686 <flash_area_write>
    if (rc == 0) {
    45ac:	2800      	cmp	r0, #0
    45ae:	f47f af0f 	bne.w	43d0 <boot_serial_input+0x19c>
    45b2:	e001      	b.n	45b8 <boot_serial_input+0x384>
        if (img_blen) {
    45b4:	2d00      	cmp	r5, #0
    45b6:	d1de      	bne.n	4576 <boot_serial_input+0x342>
        curr_off += img_blen;
    45b8:	f8da 3000 	ldr.w	r3, [sl]
    45bc:	441d      	add	r5, r3
        if (curr_off == img_size) {
    45be:	f8d8 3000 	ldr.w	r3, [r8]
        curr_off += img_blen;
    45c2:	f8ca 5000 	str.w	r5, [sl]
        if (curr_off == img_size) {
    45c6:	429d      	cmp	r5, r3
    45c8:	f47f af3c 	bne.w	4444 <boot_serial_input+0x210>
            rc = flash_area_sector_from_off(boot_status_off(fap), &sector);
    45cc:	9808      	ldr	r0, [sp, #32]
    45ce:	f004 ffd3 	bl	9578 <boot_status_off>
    45d2:	a90c      	add	r1, sp, #48	; 0x30
    45d4:	f7fb ff92 	bl	4fc <flash_area_sector_from_off>
            if (rc) {
    45d8:	4606      	mov	r6, r0
    45da:	2800      	cmp	r0, #0
    45dc:	f47f af33 	bne.w	4446 <boot_serial_input+0x212>
            if (off_last < sector.fs_off) {
    45e0:	990c      	ldr	r1, [sp, #48]	; 0x30
    45e2:	683b      	ldr	r3, [r7, #0]
    45e4:	4299      	cmp	r1, r3
    45e6:	f77f af2d 	ble.w	4444 <boot_serial_input+0x210>
                rc = flash_area_erase(fap, sector.fs_off, sector.fs_size);
    45ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    45ec:	9808      	ldr	r0, [sp, #32]
    45ee:	f006 f879 	bl	a6e4 <flash_area_erase>
    45f2:	4606      	mov	r6, r0
                if (rc) {
    45f4:	e727      	b.n	4446 <boot_serial_input+0x212>
    } else if (hdr->nh_group == MGMT_GROUP_ID_DEFAULT) {
    45f6:	2b00      	cmp	r3, #0
    45f8:	f47f ae83 	bne.w	4302 <boot_serial_input+0xce>
        switch (hdr->nh_id) {
    45fc:	79eb      	ldrb	r3, [r5, #7]
    45fe:	2b01      	cmp	r3, #1
    4600:	f43f ae41 	beq.w	4286 <boot_serial_input+0x52>
    4604:	2b05      	cmp	r3, #5
    4606:	f47f ae7c 	bne.w	4302 <boot_serial_input+0xce>
    bs_empty_rsp(buf, len);
    460a:	f7ff fdb5 	bl	4178 <bs_empty_rsp.isra.0>
	return z_impl_k_sleep(timeout);
    460e:	2100      	movs	r1, #0
    4610:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    4614:	f004 fad6 	bl	8bc4 <z_impl_k_sleep>
    sys_reboot(SYS_REBOOT_COLD);
    4618:	2001      	movs	r0, #1
    461a:	f7fd f9a1 	bl	1960 <sys_reboot>
}
    461e:	e670      	b.n	4302 <boot_serial_input+0xce>

00004620 <boot_serial_start>:
 * Task which waits reading console, expecting to get image over
 * serial port.
 */
void
boot_serial_start(const struct boot_uart_funcs *f)
{
    4620:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    int off;
    int dec_off = 0;
    int full_line;
    int max_input;

    boot_uf = f;
    4624:	4b1b      	ldr	r3, [pc, #108]	; (4694 <boot_serial_start+0x74>)
    max_input = sizeof(in_buf);

    off = 0;
    while (1) {
        rc = f->read(in_buf + off, sizeof(in_buf) - off, &full_line);
    4626:	4f1c      	ldr	r7, [pc, #112]	; (4698 <boot_serial_start+0x78>)
            rc = boot_serial_in_dec(&in_buf[2], off - 2, dec_buf, &dec_off, max_input);
        }

        /* serve errors: out of decode memory, or bad encoding */
        if (rc == 1) {
            boot_serial_input(&dec_buf[2], dec_off - 2);
    4628:	f8df 8070 	ldr.w	r8, [pc, #112]	; 469c <boot_serial_start+0x7c>
    boot_uf = f;
    462c:	6018      	str	r0, [r3, #0]
    int dec_off = 0;
    462e:	2400      	movs	r4, #0
{
    4630:	4605      	mov	r5, r0
    int dec_off = 0;
    4632:	9400      	str	r4, [sp, #0]
    off = 0;
    4634:	463e      	mov	r6, r7
        rc = f->read(in_buf + off, sizeof(in_buf) - off, &full_line);
    4636:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
    463a:	682b      	ldr	r3, [r5, #0]
    463c:	aa01      	add	r2, sp, #4
    463e:	3101      	adds	r1, #1
    4640:	1938      	adds	r0, r7, r4
    4642:	4798      	blx	r3
        if (rc <= 0 && !full_line) {
    4644:	2800      	cmp	r0, #0
    4646:	9b01      	ldr	r3, [sp, #4]
    4648:	dc01      	bgt.n	464e <boot_serial_start+0x2e>
    464a:	2b00      	cmp	r3, #0
    464c:	d0f3      	beq.n	4636 <boot_serial_start+0x16>
        off += rc;
    464e:	4404      	add	r4, r0
        if (!full_line) {
    4650:	b92b      	cbnz	r3, 465e <boot_serial_start+0x3e>
            if (off == max_input) {
    4652:	f240 2301 	movw	r3, #513	; 0x201
    4656:	429c      	cmp	r4, r3
    4658:	d1ed      	bne.n	4636 <boot_serial_start+0x16>
        }
        off = 0;
    465a:	2400      	movs	r4, #0
    465c:	e7eb      	b.n	4636 <boot_serial_start+0x16>
        if (in_buf[0] == SHELL_NLIP_PKT_START1 &&
    465e:	7833      	ldrb	r3, [r6, #0]
    4660:	2b06      	cmp	r3, #6
    4662:	d109      	bne.n	4678 <boot_serial_start+0x58>
    4664:	7873      	ldrb	r3, [r6, #1]
    4666:	2b09      	cmp	r3, #9
    4668:	d10b      	bne.n	4682 <boot_serial_start+0x62>
            dec_off = 0;
    466a:	2300      	movs	r3, #0
    466c:	9300      	str	r3, [sp, #0]
            rc = boot_serial_in_dec(&in_buf[2], off - 2, dec_buf, &dec_off, max_input);
    466e:	4669      	mov	r1, sp
    4670:	1ea0      	subs	r0, r4, #2
    4672:	f7ff fda1 	bl	41b8 <boot_serial_in_dec.constprop.0>
    4676:	e004      	b.n	4682 <boot_serial_start+0x62>
        } else if (in_buf[0] == SHELL_NLIP_DATA_START1 &&
    4678:	2b04      	cmp	r3, #4
    467a:	d102      	bne.n	4682 <boot_serial_start+0x62>
    467c:	7873      	ldrb	r3, [r6, #1]
    467e:	2b14      	cmp	r3, #20
    4680:	d0f5      	beq.n	466e <boot_serial_start+0x4e>
        if (rc == 1) {
    4682:	2801      	cmp	r0, #1
    4684:	d1e9      	bne.n	465a <boot_serial_start+0x3a>
            boot_serial_input(&dec_buf[2], dec_off - 2);
    4686:	9900      	ldr	r1, [sp, #0]
    4688:	4640      	mov	r0, r8
    468a:	3902      	subs	r1, #2
    468c:	f7ff fdd2 	bl	4234 <boot_serial_input>
    4690:	e7e3      	b.n	465a <boot_serial_start+0x3a>
    4692:	bf00      	nop
    4694:	200023b8 	.word	0x200023b8
    4698:	20004f21 	.word	0x20004f21
    469c:	20004d22 	.word	0x20004d22

000046a0 <decode_Member>:


static bool decode_Member(
		cbor_decode_state_t *p_state, void * p_result, void * p_min_value,
		void * p_max_value)
{
    46a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cbor_decode_print("decode_Member\n");
	uint8_t const * p_payload_bak;
	size_t elem_count_bak;
	_Member_t* p_type_result = (_Member_t*)p_result;

	bool result = (((p_payload_bak = p_state->p_payload) && ((elem_count_bak = p_state->elem_count) || 1) && ((((strx_decode(p_state, &((*p_type_result)._Member_image_key), NULL, NULL))&& !memcmp("image", (*p_type_result)._Member_image_key.value, (*p_type_result)._Member_image_key.len)
    46a4:	6807      	ldr	r7, [r0, #0]
{
    46a6:	4605      	mov	r5, r0
    46a8:	460c      	mov	r4, r1
	bool result = (((p_payload_bak = p_state->p_payload) && ((elem_count_bak = p_state->elem_count) || 1) && ((((strx_decode(p_state, &((*p_type_result)._Member_image_key), NULL, NULL))&& !memcmp("image", (*p_type_result)._Member_image_key.value, (*p_type_result)._Member_image_key.len)
    46aa:	b917      	cbnz	r7, 46b2 <decode_Member+0x12>
    46ac:	2000      	movs	r0, #0
	{
		cbor_decode_trace();
	}

	return result;
}
    46ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bool result = (((p_payload_bak = p_state->p_payload) && ((elem_count_bak = p_state->elem_count) || 1) && ((((strx_decode(p_state, &((*p_type_result)._Member_image_key), NULL, NULL))&& !memcmp("image", (*p_type_result)._Member_image_key.value, (*p_type_result)._Member_image_key.len)
    46b2:	2300      	movs	r3, #0
    46b4:	461a      	mov	r2, r3
    46b6:	f8d0 8008 	ldr.w	r8, [r0, #8]
    46ba:	f006 fa38 	bl	ab2e <strx_decode>
    46be:	b188      	cbz	r0, 46e4 <decode_Member+0x44>
    46c0:	e9d4 1200 	ldrd	r1, r2, [r4]
    46c4:	483e      	ldr	r0, [pc, #248]	; (47c0 <decode_Member+0x120>)
    46c6:	f006 faa9 	bl	ac1c <memcmp>
    46ca:	4606      	mov	r6, r0
    46cc:	b950      	cbnz	r0, 46e4 <decode_Member+0x44>
	&& (intx32_decode(p_state, &((*p_type_result)._Member_image), NULL, NULL))) && (((*p_type_result)._Member_choice = _Member_image) || 1))
    46ce:	4603      	mov	r3, r0
    46d0:	4602      	mov	r2, r0
    46d2:	f104 0108 	add.w	r1, r4, #8
    46d6:	4628      	mov	r0, r5
    46d8:	f006 f9ef 	bl	aaba <intx32_decode>
    46dc:	b110      	cbz	r0, 46e4 <decode_Member+0x44>
    46de:	7426      	strb	r6, [r4, #16]
	bool result = (((p_payload_bak = p_state->p_payload) && ((elem_count_bak = p_state->elem_count) || 1) && ((((strx_decode(p_state, &((*p_type_result)._Member_image_key), NULL, NULL))&& !memcmp("image", (*p_type_result)._Member_image_key.value, (*p_type_result)._Member_image_key.len)
    46e0:	2001      	movs	r0, #1
    46e2:	e7e4      	b.n	46ae <decode_Member+0xe>
	|| ((p_state->p_payload = p_payload_bak) && ((p_state->elem_count = elem_count_bak) || 1) && (((strx_decode(p_state, &((*p_type_result)._Member_data_key), NULL, NULL))&& !memcmp("data", (*p_type_result)._Member_data_key.value, (*p_type_result)._Member_data_key.len)
    46e4:	2300      	movs	r3, #0
    46e6:	602f      	str	r7, [r5, #0]
    46e8:	f8c5 8008 	str.w	r8, [r5, #8]
    46ec:	461a      	mov	r2, r3
    46ee:	4621      	mov	r1, r4
    46f0:	4628      	mov	r0, r5
    46f2:	f006 fa1c 	bl	ab2e <strx_decode>
    46f6:	b180      	cbz	r0, 471a <decode_Member+0x7a>
    46f8:	e9d4 1200 	ldrd	r1, r2, [r4]
    46fc:	4831      	ldr	r0, [pc, #196]	; (47c4 <decode_Member+0x124>)
    46fe:	f006 fa8d 	bl	ac1c <memcmp>
    4702:	4603      	mov	r3, r0
    4704:	b948      	cbnz	r0, 471a <decode_Member+0x7a>
	&& (strx_decode(p_state, &((*p_type_result)._Member_data), NULL, NULL))) && (((*p_type_result)._Member_choice = _Member_data) || 1)))
    4706:	4602      	mov	r2, r0
    4708:	f104 0108 	add.w	r1, r4, #8
    470c:	4628      	mov	r0, r5
    470e:	f006 fa0e 	bl	ab2e <strx_decode>
    4712:	b110      	cbz	r0, 471a <decode_Member+0x7a>
    4714:	2001      	movs	r0, #1
    4716:	7420      	strb	r0, [r4, #16]
    4718:	e7c9      	b.n	46ae <decode_Member+0xe>
	|| ((p_state->p_payload = p_payload_bak) && ((p_state->elem_count = elem_count_bak) || 1) && (((strx_decode(p_state, &((*p_type_result)._Member_len_key), NULL, NULL))&& !memcmp("len", (*p_type_result)._Member_len_key.value, (*p_type_result)._Member_len_key.len)
    471a:	2300      	movs	r3, #0
    471c:	602f      	str	r7, [r5, #0]
    471e:	f8c5 8008 	str.w	r8, [r5, #8]
    4722:	461a      	mov	r2, r3
    4724:	4621      	mov	r1, r4
    4726:	4628      	mov	r0, r5
    4728:	f006 fa01 	bl	ab2e <strx_decode>
    472c:	b180      	cbz	r0, 4750 <decode_Member+0xb0>
    472e:	e9d4 1200 	ldrd	r1, r2, [r4]
    4732:	4825      	ldr	r0, [pc, #148]	; (47c8 <decode_Member+0x128>)
    4734:	f006 fa72 	bl	ac1c <memcmp>
    4738:	4603      	mov	r3, r0
    473a:	b948      	cbnz	r0, 4750 <decode_Member+0xb0>
	&& (intx32_decode(p_state, &((*p_type_result)._Member_len), NULL, NULL))) && (((*p_type_result)._Member_choice = _Member_len) || 1)))
    473c:	4602      	mov	r2, r0
    473e:	f104 0108 	add.w	r1, r4, #8
    4742:	4628      	mov	r0, r5
    4744:	f006 f9b9 	bl	aaba <intx32_decode>
    4748:	b110      	cbz	r0, 4750 <decode_Member+0xb0>
    474a:	2302      	movs	r3, #2
	&& (strx_decode(p_state, &((*p_type_result)._Member_sha), NULL, NULL))) && (((*p_type_result)._Member_choice = _Member_sha) || 1))))));
    474c:	7423      	strb	r3, [r4, #16]
    474e:	e7c7      	b.n	46e0 <decode_Member+0x40>
	|| ((p_state->p_payload = p_payload_bak) && ((p_state->elem_count = elem_count_bak) || 1) && (((strx_decode(p_state, &((*p_type_result)._Member_off_key), NULL, NULL))&& !memcmp("off", (*p_type_result)._Member_off_key.value, (*p_type_result)._Member_off_key.len)
    4750:	2300      	movs	r3, #0
    4752:	602f      	str	r7, [r5, #0]
    4754:	f8c5 8008 	str.w	r8, [r5, #8]
    4758:	461a      	mov	r2, r3
    475a:	4621      	mov	r1, r4
    475c:	4628      	mov	r0, r5
    475e:	f006 f9e6 	bl	ab2e <strx_decode>
    4762:	b178      	cbz	r0, 4784 <decode_Member+0xe4>
    4764:	e9d4 1200 	ldrd	r1, r2, [r4]
    4768:	4818      	ldr	r0, [pc, #96]	; (47cc <decode_Member+0x12c>)
    476a:	f006 fa57 	bl	ac1c <memcmp>
    476e:	4603      	mov	r3, r0
    4770:	b940      	cbnz	r0, 4784 <decode_Member+0xe4>
	&& (intx32_decode(p_state, &((*p_type_result)._Member_off), NULL, NULL))) && (((*p_type_result)._Member_choice = _Member_off) || 1)))
    4772:	4602      	mov	r2, r0
    4774:	f104 0108 	add.w	r1, r4, #8
    4778:	4628      	mov	r0, r5
    477a:	f006 f99e 	bl	aaba <intx32_decode>
    477e:	b108      	cbz	r0, 4784 <decode_Member+0xe4>
    4780:	2303      	movs	r3, #3
    4782:	e7e3      	b.n	474c <decode_Member+0xac>
	|| ((p_state->p_payload = p_payload_bak) && ((p_state->elem_count = elem_count_bak) || 1) && (((strx_decode(p_state, &((*p_type_result)._Member_sha_key), NULL, NULL))&& !memcmp("sha", (*p_type_result)._Member_sha_key.value, (*p_type_result)._Member_sha_key.len)
    4784:	2300      	movs	r3, #0
    4786:	602f      	str	r7, [r5, #0]
    4788:	f8c5 8008 	str.w	r8, [r5, #8]
    478c:	461a      	mov	r2, r3
    478e:	4621      	mov	r1, r4
    4790:	4628      	mov	r0, r5
    4792:	f006 f9cc 	bl	ab2e <strx_decode>
    4796:	2800      	cmp	r0, #0
    4798:	d088      	beq.n	46ac <decode_Member+0xc>
    479a:	e9d4 1200 	ldrd	r1, r2, [r4]
    479e:	480c      	ldr	r0, [pc, #48]	; (47d0 <decode_Member+0x130>)
    47a0:	f006 fa3c 	bl	ac1c <memcmp>
    47a4:	4603      	mov	r3, r0
    47a6:	2800      	cmp	r0, #0
    47a8:	d180      	bne.n	46ac <decode_Member+0xc>
	&& (strx_decode(p_state, &((*p_type_result)._Member_sha), NULL, NULL))) && (((*p_type_result)._Member_choice = _Member_sha) || 1))))));
    47aa:	4602      	mov	r2, r0
    47ac:	f104 0108 	add.w	r1, r4, #8
    47b0:	4628      	mov	r0, r5
    47b2:	f006 f9bc 	bl	ab2e <strx_decode>
    47b6:	2800      	cmp	r0, #0
    47b8:	f43f af78 	beq.w	46ac <decode_Member+0xc>
    47bc:	2304      	movs	r3, #4
    47be:	e7c5      	b.n	474c <decode_Member+0xac>
    47c0:	0000df80 	.word	0x0000df80
    47c4:	0000df86 	.word	0x0000df86
    47c8:	0000df8b 	.word	0x0000df8b
    47cc:	0000df7c 	.word	0x0000df7c
    47d0:	0000df8f 	.word	0x0000df8f

000047d4 <cbor_decode_Upload>:
	return result;
}


bool cbor_decode_Upload(const uint8_t * p_payload, size_t payload_len, Upload_t * p_result)
{
    47d4:	b570      	push	{r4, r5, r6, lr}
    47d6:	b08c      	sub	sp, #48	; 0x30
	cbor_decode_state_t state = {
    47d8:	2501      	movs	r5, #1
    47da:	9009      	str	r0, [sp, #36]	; 0x24
	bool result = (((list_start_decode(p_state, &(*(p_temp_elem_count++)), 1, 5))
    47dc:	ae09      	add	r6, sp, #36	; 0x24
		.p_payload = p_payload,
		.p_payload_end = p_payload + payload_len,
    47de:	4408      	add	r0, r1
	cbor_decode_state_t state = {
    47e0:	900a      	str	r0, [sp, #40]	; 0x28
	bool result = (((list_start_decode(p_state, &(*(p_temp_elem_count++)), 1, 5))
    47e2:	2305      	movs	r3, #5
{
    47e4:	4614      	mov	r4, r2
	bool result = (((list_start_decode(p_state, &(*(p_temp_elem_count++)), 1, 5))
    47e6:	a907      	add	r1, sp, #28
    47e8:	462a      	mov	r2, r5
    47ea:	4630      	mov	r0, r6
	cbor_decode_state_t state = {
    47ec:	950b      	str	r5, [sp, #44]	; 0x2c
	bool result = (((list_start_decode(p_state, &(*(p_temp_elem_count++)), 1, 5))
    47ee:	f006 f9a9 	bl	ab44 <list_start_decode>
    47f2:	2300      	movs	r3, #0
	&& ((p_state->elem_count = *(--p_temp_elem_count)) || 1)));
    47f4:	b160      	cbz	r0, 4810 <cbor_decode_Upload+0x3c>
	&& multi_decode(1, 5, &(*p_type_result)._Upload_members_count, (void*)decode_Member, p_state, &((*p_type_result)._Upload_members), NULL, NULL, sizeof(_Member_t))
    47f6:	2214      	movs	r2, #20
    47f8:	e9cd 3203 	strd	r3, r2, [sp, #12]
    47fc:	e9cd 4301 	strd	r4, r3, [sp, #4]
    4800:	9600      	str	r6, [sp, #0]
    4802:	4b05      	ldr	r3, [pc, #20]	; (4818 <cbor_decode_Upload+0x44>)
    4804:	f104 0264 	add.w	r2, r4, #100	; 0x64
    4808:	2105      	movs	r1, #5
    480a:	4628      	mov	r0, r5
    480c:	f006 f9b8 	bl	ab80 <multi_decode>
		.elem_count = 1
	};

	return decode_Upload(&state, p_result, NULL, NULL);
}
    4810:	f000 0001 	and.w	r0, r0, #1
    4814:	b00c      	add	sp, #48	; 0x30
    4816:	bd70      	pop	{r4, r5, r6, pc}
    4818:	000046a1 	.word	0x000046a1

0000481c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    481c:	4a09      	ldr	r2, [pc, #36]	; (4844 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    481e:	490a      	ldr	r1, [pc, #40]	; (4848 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    4820:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    4822:	6809      	ldr	r1, [r1, #0]
    4824:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4826:	4909      	ldr	r1, [pc, #36]	; (484c <arch_swap+0x30>)
	_current->arch.basepri = key;
    4828:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    482a:	684b      	ldr	r3, [r1, #4]
    482c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    4830:	604b      	str	r3, [r1, #4]
    4832:	2300      	movs	r3, #0
    4834:	f383 8811 	msr	BASEPRI, r3
    4838:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    483c:	6893      	ldr	r3, [r2, #8]
}
    483e:	6f98      	ldr	r0, [r3, #120]	; 0x78
    4840:	4770      	bx	lr
    4842:	bf00      	nop
    4844:	2000272c 	.word	0x2000272c
    4848:	0000dbfc 	.word	0x0000dbfc
    484c:	e000ed00 	.word	0xe000ed00

00004850 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    4850:	4912      	ldr	r1, [pc, #72]	; (489c <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    4852:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    4854:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    4858:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    485a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    485e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4862:	2020      	movs	r0, #32
    msr BASEPRI, r0
    4864:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    4868:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    486c:	4f0c      	ldr	r7, [pc, #48]	; (48a0 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    486e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    4872:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    4874:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    4876:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    4878:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    487a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    487c:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    487e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    4882:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    4884:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    4886:	f000 faa3 	bl	4dd0 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    488a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    488e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    4892:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    4896:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    489a:	4770      	bx	lr
    ldr r1, =_kernel
    489c:	2000272c 	.word	0x2000272c
    ldr v4, =_SCS_ICSR
    48a0:	e000ed04 	.word	0xe000ed04

000048a4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    48a4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    48a8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    48aa:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    48ae:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    48b2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    48b4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    48b8:	2902      	cmp	r1, #2
    beq _oops
    48ba:	d0ff      	beq.n	48bc <_oops>

000048bc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    48bc:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    48be:	f006 f98f 	bl	abe0 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    48c2:	bd01      	pop	{r0, pc}

000048c4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    48c4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    48c6:	2b00      	cmp	r3, #0
    48c8:	db08      	blt.n	48dc <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    48ca:	2201      	movs	r2, #1
    48cc:	f000 001f 	and.w	r0, r0, #31
    48d0:	fa02 f000 	lsl.w	r0, r2, r0
    48d4:	095b      	lsrs	r3, r3, #5
    48d6:	4a02      	ldr	r2, [pc, #8]	; (48e0 <arch_irq_enable+0x1c>)
    48d8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    48dc:	4770      	bx	lr
    48de:	bf00      	nop
    48e0:	e000e100 	.word	0xe000e100

000048e4 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    48e4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    48e6:	2b00      	cmp	r3, #0
    48e8:	db0d      	blt.n	4906 <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    48ea:	2201      	movs	r2, #1
    48ec:	095b      	lsrs	r3, r3, #5
    48ee:	f000 001f 	and.w	r0, r0, #31
    48f2:	fa02 f000 	lsl.w	r0, r2, r0
    48f6:	3320      	adds	r3, #32
    48f8:	4a03      	ldr	r2, [pc, #12]	; (4908 <arch_irq_disable+0x24>)
    48fa:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    48fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4902:	f3bf 8f6f 	isb	sy
}
    4906:	4770      	bx	lr
    4908:	e000e100 	.word	0xe000e100

0000490c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    490c:	4b05      	ldr	r3, [pc, #20]	; (4924 <arch_irq_is_enabled+0x18>)
    490e:	0942      	lsrs	r2, r0, #5
    4910:	f000 001f 	and.w	r0, r0, #31
    4914:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    4918:	2301      	movs	r3, #1
    491a:	fa03 f000 	lsl.w	r0, r3, r0
}
    491e:	4010      	ands	r0, r2
    4920:	4770      	bx	lr
    4922:	bf00      	nop
    4924:	e000e100 	.word	0xe000e100

00004928 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    4928:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    492a:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    492c:	bfa8      	it	ge
    492e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    4932:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4936:	bfb8      	it	lt
    4938:	4b06      	ldrlt	r3, [pc, #24]	; (4954 <z_arm_irq_priority_set+0x2c>)
    493a:	ea4f 1141 	mov.w	r1, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    493e:	bfac      	ite	ge
    4940:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4944:	f000 000f 	andlt.w	r0, r0, #15
    4948:	b2c9      	uxtb	r1, r1
    494a:	bfb4      	ite	lt
    494c:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    494e:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    4952:	4770      	bx	lr
    4954:	e000ed14 	.word	0xe000ed14

00004958 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    4958:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    495c:	9b00      	ldr	r3, [sp, #0]
    495e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    4962:	490a      	ldr	r1, [pc, #40]	; (498c <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    4964:	9b01      	ldr	r3, [sp, #4]
    4966:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    496a:	9b02      	ldr	r3, [sp, #8]
    496c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    4970:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    4974:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    4978:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    497c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    4980:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    4982:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    4984:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    4986:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    4988:	4770      	bx	lr
    498a:	bf00      	nop
    498c:	00009ccf 	.word	0x00009ccf

00004990 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    4990:	4a0b      	ldr	r2, [pc, #44]	; (49c0 <z_check_thread_stack_fail+0x30>)
{
    4992:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    4994:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    4996:	b190      	cbz	r0, 49be <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    4998:	f113 0f16 	cmn.w	r3, #22
    499c:	6e40      	ldr	r0, [r0, #100]	; 0x64
    499e:	d005      	beq.n	49ac <z_check_thread_stack_fail+0x1c>
    49a0:	f1a0 0220 	sub.w	r2, r0, #32
    49a4:	429a      	cmp	r2, r3
    49a6:	d806      	bhi.n	49b6 <z_check_thread_stack_fail+0x26>
    49a8:	4283      	cmp	r3, r0
    49aa:	d204      	bcs.n	49b6 <z_check_thread_stack_fail+0x26>
    49ac:	4281      	cmp	r1, r0
    49ae:	bf2c      	ite	cs
    49b0:	2100      	movcs	r1, #0
    49b2:	2101      	movcc	r1, #1
    49b4:	e000      	b.n	49b8 <z_check_thread_stack_fail+0x28>
    49b6:	2100      	movs	r1, #0
    49b8:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    49ba:	bf08      	it	eq
    49bc:	2000      	moveq	r0, #0
}
    49be:	4770      	bx	lr
    49c0:	2000272c 	.word	0x2000272c

000049c4 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    49c4:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    49c6:	4b09      	ldr	r3, [pc, #36]	; (49ec <arch_switch_to_main_thread+0x28>)
    49c8:	6098      	str	r0, [r3, #8]
{
    49ca:	460d      	mov	r5, r1
    49cc:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    49ce:	f000 f9ff 	bl	4dd0 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    49d2:	4620      	mov	r0, r4
    49d4:	f385 8809 	msr	PSP, r5
    49d8:	2100      	movs	r1, #0
    49da:	b663      	cpsie	if
    49dc:	f381 8811 	msr	BASEPRI, r1
    49e0:	f3bf 8f6f 	isb	sy
    49e4:	2200      	movs	r2, #0
    49e6:	2300      	movs	r3, #0
    49e8:	f005 f971 	bl	9cce <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    49ec:	2000272c 	.word	0x2000272c

000049f0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    49f0:	4901      	ldr	r1, [pc, #4]	; (49f8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    49f2:	2210      	movs	r2, #16
	str	r2, [r1]
    49f4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    49f6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    49f8:	e000ed10 	.word	0xe000ed10

000049fc <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    49fc:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    49fe:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    4a00:	f380 8811 	msr	BASEPRI, r0
	isb
    4a04:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    4a08:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    4a0c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    4a0e:	b662      	cpsie	i
	isb
    4a10:	f3bf 8f6f 	isb	sy

	bx	lr
    4a14:	4770      	bx	lr
    4a16:	bf00      	nop

00004a18 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    4a18:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    4a1a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    4a1c:	f381 8811 	msr	BASEPRI, r1

	wfe
    4a20:	bf20      	wfe

	msr	BASEPRI, r0
    4a22:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    4a26:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    4a28:	4770      	bx	lr
    4a2a:	bf00      	nop

00004a2c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    4a2c:	bf30      	wfi
    b z_SysNmiOnReset
    4a2e:	f7ff bffd 	b.w	4a2c <z_SysNmiOnReset>
    4a32:	bf00      	nop

00004a34 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    4a34:	4a0b      	ldr	r2, [pc, #44]	; (4a64 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    4a36:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    4a38:	4b0b      	ldr	r3, [pc, #44]	; (4a68 <z_arm_prep_c+0x34>)
    4a3a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    4a3e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    4a40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4a44:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    4a48:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    4a4c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    4a50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    4a54:	f003 f99c 	bl	7d90 <z_bss_zero>
	z_data_copy();
    4a58:	f004 f950 	bl	8cfc <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    4a5c:	f000 f98e 	bl	4d7c <z_arm_interrupt_init>
	z_cstart();
    4a60:	f003 f9ba 	bl	7dd8 <z_cstart>
    4a64:	00000000 	.word	0x00000000
    4a68:	e000ed00 	.word	0xe000ed00

00004a6c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    4a6c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    4a6e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    4a70:	4a0b      	ldr	r2, [pc, #44]	; (4aa0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    4a72:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    4a74:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    4a76:	bf1e      	ittt	ne
	movne	r1, #0
    4a78:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    4a7a:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
    4a7c:	f008 fb08 	blne	d090 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    4a80:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    4a82:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    4a86:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    4a8a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    4a8e:	4905      	ldr	r1, [pc, #20]	; (4aa4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    4a90:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    4a92:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    4a94:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    4a96:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    4a9a:	4903      	ldr	r1, [pc, #12]	; (4aa8 <_isr_wrapper+0x3c>)
	bx r1
    4a9c:	4708      	bx	r1
    4a9e:	0000      	.short	0x0000
	ldr r2, =_kernel
    4aa0:	2000272c 	.word	0x2000272c
	ldr r1, =_sw_isr_table
    4aa4:	0000d644 	.word	0x0000d644
	ldr r1, =z_arm_int_exit
    4aa8:	00004cdd 	.word	0x00004cdd

00004aac <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    4aac:	2000      	movs	r0, #0
    msr CONTROL, r0
    4aae:	f380 8814 	msr	CONTROL, r0
    isb
    4ab2:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    4ab6:	f006 f90f 	bl	acd8 <z_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    4aba:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    4abc:	490d      	ldr	r1, [pc, #52]	; (4af4 <__start+0x48>)
    str r0, [r1]
    4abe:	6008      	str	r0, [r1, #0]
    dsb
    4ac0:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    4ac4:	480c      	ldr	r0, [pc, #48]	; (4af8 <__start+0x4c>)
    msr msp, r0
    4ac6:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    4aca:	f000 f925 	bl	4d18 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4ace:	2020      	movs	r0, #32
    msr BASEPRI, r0
    4ad0:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    4ad4:	4809      	ldr	r0, [pc, #36]	; (4afc <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    4ad6:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    4ada:	1840      	adds	r0, r0, r1
    msr PSP, r0
    4adc:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    4ae0:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    4ae4:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    4ae6:	4308      	orrs	r0, r1
    msr CONTROL, r0
    4ae8:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    4aec:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    4af0:	f7ff ffa0 	bl	4a34 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    4af4:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    4af8:	200081c0 	.word	0x200081c0
    ldr r0, =z_interrupt_stacks
    4afc:	20008340 	.word	0x20008340

00004b00 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    4b00:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    4b04:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    4b08:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    4b0a:	4672      	mov	r2, lr
	bl z_arm_fault
    4b0c:	f000 f868 	bl	4be0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    4b10:	bd01      	pop	{r0, pc}
    4b12:	bf00      	nop

00004b14 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    4b14:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    4b16:	4b19      	ldr	r3, [pc, #100]	; (4b7c <mem_manage_fault+0x68>)
{
    4b18:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    4b1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    4b1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    4b1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    4b20:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    4b22:	0790      	lsls	r0, r2, #30
    4b24:	d519      	bpl.n	4b5a <mem_manage_fault+0x46>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    4b26:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    4b28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4b2a:	0612      	lsls	r2, r2, #24
    4b2c:	d515      	bpl.n	4b5a <mem_manage_fault+0x46>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    4b2e:	b119      	cbz	r1, 4b38 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    4b30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4b32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    4b36:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    4b38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    4b3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    4b3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4b3e:	06d1      	lsls	r1, r2, #27
    4b40:	d40e      	bmi.n	4b60 <mem_manage_fault+0x4c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    4b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    4b44:	079a      	lsls	r2, r3, #30
    4b46:	d40b      	bmi.n	4b60 <mem_manage_fault+0x4c>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4b48:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    4b4a:	4a0c      	ldr	r2, [pc, #48]	; (4b7c <mem_manage_fault+0x68>)
    4b4c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4b4e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    4b52:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    4b54:	2300      	movs	r3, #0
    4b56:	7023      	strb	r3, [r4, #0]

	return reason;
}
    4b58:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
    4b5a:	f06f 0015 	mvn.w	r0, #21
    4b5e:	e7eb      	b.n	4b38 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    4b60:	4b06      	ldr	r3, [pc, #24]	; (4b7c <mem_manage_fault+0x68>)
    4b62:	685b      	ldr	r3, [r3, #4]
    4b64:	051b      	lsls	r3, r3, #20
    4b66:	d5ef      	bpl.n	4b48 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    4b68:	4629      	mov	r1, r5
    4b6a:	f7ff ff11 	bl	4990 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    4b6e:	2800      	cmp	r0, #0
    4b70:	d0ea      	beq.n	4b48 <mem_manage_fault+0x34>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    4b72:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    4b76:	2002      	movs	r0, #2
    4b78:	e7e7      	b.n	4b4a <mem_manage_fault+0x36>
    4b7a:	bf00      	nop
    4b7c:	e000ed00 	.word	0xe000ed00

00004b80 <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    4b80:	4b0d      	ldr	r3, [pc, #52]	; (4bb8 <bus_fault.isra.0+0x38>)
    4b82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    4b84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    4b86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4b88:	0592      	lsls	r2, r2, #22
    4b8a:	d508      	bpl.n	4b9e <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    4b8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    4b8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4b90:	0412      	lsls	r2, r2, #16
    4b92:	d504      	bpl.n	4b9e <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    4b94:	b118      	cbz	r0, 4b9e <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    4b96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4b98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    4b9c:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    4b9e:	4b06      	ldr	r3, [pc, #24]	; (4bb8 <bus_fault.isra.0+0x38>)
    4ba0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    4ba2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4ba4:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    4ba6:	bf58      	it	pl
    4ba8:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    4baa:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    4bac:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    4bae:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    4bb2:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    4bb4:	7008      	strb	r0, [r1, #0]

	return reason;
}
    4bb6:	4770      	bx	lr
    4bb8:	e000ed00 	.word	0xe000ed00

00004bbc <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    4bbc:	4b07      	ldr	r3, [pc, #28]	; (4bdc <usage_fault.isra.0+0x20>)
    4bbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    4bc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    4bc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    4bc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    4bc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    4bc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    4bca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4bcc:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    4bd0:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    4bd4:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    4bd6:	2000      	movs	r0, #0
    4bd8:	4770      	bx	lr
    4bda:	bf00      	nop
    4bdc:	e000ed00 	.word	0xe000ed00

00004be0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    4be0:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4be2:	4b37      	ldr	r3, [pc, #220]	; (4cc0 <z_arm_fault+0xe0>)
    4be4:	685b      	ldr	r3, [r3, #4]
{
    4be6:	b08a      	sub	sp, #40	; 0x28
    4be8:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
    4bee:	2500      	movs	r5, #0
    4bf0:	f385 8811 	msr	BASEPRI, r5
    4bf4:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    4bf8:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    4bfc:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    4c00:	d111      	bne.n	4c26 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    4c02:	f002 010c 	and.w	r1, r2, #12
    4c06:	2908      	cmp	r1, #8
    4c08:	d00d      	beq.n	4c26 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    4c0a:	0711      	lsls	r1, r2, #28
    4c0c:	d401      	bmi.n	4c12 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    4c0e:	4606      	mov	r6, r0
			*nested_exc = true;
    4c10:	2501      	movs	r5, #1
	*recoverable = false;
    4c12:	2200      	movs	r2, #0
    4c14:	3b03      	subs	r3, #3
    4c16:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    4c1a:	2b03      	cmp	r3, #3
    4c1c:	d848      	bhi.n	4cb0 <z_arm_fault+0xd0>
    4c1e:	e8df f003 	tbb	[pc, r3]
    4c22:	3f04      	.short	0x3f04
    4c24:	3c43      	.short	0x3c43
		return NULL;
    4c26:	462e      	mov	r6, r5
    4c28:	e7f3      	b.n	4c12 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    4c2a:	4b25      	ldr	r3, [pc, #148]	; (4cc0 <z_arm_fault+0xe0>)
    4c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4c2e:	0792      	lsls	r2, r2, #30
    4c30:	d43e      	bmi.n	4cb0 <z_arm_fault+0xd0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    4c32:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    4c34:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    4c38:	d009      	beq.n	4c4e <z_arm_fault+0x6e>
		if (SCB_MMFSR != 0) {
    4c3a:	3328      	adds	r3, #40	; 0x28
    4c3c:	781b      	ldrb	r3, [r3, #0]
    4c3e:	b1f3      	cbz	r3, 4c7e <z_arm_fault+0x9e>
			reason = mem_manage_fault(esf, 1, recoverable);
    4c40:	f10d 0207 	add.w	r2, sp, #7
    4c44:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    4c46:	4630      	mov	r0, r6
    4c48:	f7ff ff64 	bl	4b14 <mem_manage_fault>
		reason = usage_fault(esf);
    4c4c:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    4c4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    4c52:	b993      	cbnz	r3, 4c7a <z_arm_fault+0x9a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    4c54:	2220      	movs	r2, #32
    4c56:	4631      	mov	r1, r6
    4c58:	a802      	add	r0, sp, #8
    4c5a:	f005 ffef 	bl	ac3c <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    4c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4c60:	b345      	cbz	r5, 4cb4 <z_arm_fault+0xd4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    4c62:	f3c3 0208 	ubfx	r2, r3, #0, #9
    4c66:	b922      	cbnz	r2, 4c72 <z_arm_fault+0x92>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    4c68:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    4c6c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    4c70:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    4c72:	a902      	add	r1, sp, #8
    4c74:	4620      	mov	r0, r4
    4c76:	f005 ffb1 	bl	abdc <z_arm_fatal_error>
}
    4c7a:	b00a      	add	sp, #40	; 0x28
    4c7c:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    4c7e:	4b11      	ldr	r3, [pc, #68]	; (4cc4 <z_arm_fault+0xe4>)
    4c80:	781b      	ldrb	r3, [r3, #0]
    4c82:	b12b      	cbz	r3, 4c90 <z_arm_fault+0xb0>
			reason = bus_fault(esf, 1, recoverable);
    4c84:	f10d 0107 	add.w	r1, sp, #7
    4c88:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    4c8a:	f7ff ff79 	bl	4b80 <bus_fault.isra.0>
    4c8e:	e7dd      	b.n	4c4c <z_arm_fault+0x6c>
		} else if (SCB_UFSR != 0) {
    4c90:	4b0d      	ldr	r3, [pc, #52]	; (4cc8 <z_arm_fault+0xe8>)
    4c92:	8818      	ldrh	r0, [r3, #0]
    4c94:	b284      	uxth	r4, r0
    4c96:	2c00      	cmp	r4, #0
    4c98:	d0d9      	beq.n	4c4e <z_arm_fault+0x6e>
		reason = usage_fault(esf);
    4c9a:	f7ff ff8f 	bl	4bbc <usage_fault.isra.0>
    4c9e:	e7d5      	b.n	4c4c <z_arm_fault+0x6c>
		reason = mem_manage_fault(esf, 0, recoverable);
    4ca0:	f10d 0207 	add.w	r2, sp, #7
    4ca4:	2100      	movs	r1, #0
    4ca6:	e7ce      	b.n	4c46 <z_arm_fault+0x66>
		reason = bus_fault(esf, 0, recoverable);
    4ca8:	f10d 0107 	add.w	r1, sp, #7
    4cac:	2000      	movs	r0, #0
    4cae:	e7ec      	b.n	4c8a <z_arm_fault+0xaa>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4cb0:	2400      	movs	r4, #0
    4cb2:	e7cc      	b.n	4c4e <z_arm_fault+0x6e>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    4cb4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    4cb8:	f023 0301 	bic.w	r3, r3, #1
    4cbc:	e7d8      	b.n	4c70 <z_arm_fault+0x90>
    4cbe:	bf00      	nop
    4cc0:	e000ed00 	.word	0xe000ed00
    4cc4:	e000ed29 	.word	0xe000ed29
    4cc8:	e000ed2a 	.word	0xe000ed2a

00004ccc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    4ccc:	4a02      	ldr	r2, [pc, #8]	; (4cd8 <z_arm_fault_init+0xc>)
    4cce:	6953      	ldr	r3, [r2, #20]
    4cd0:	f043 0310 	orr.w	r3, r3, #16
    4cd4:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    4cd6:	4770      	bx	lr
    4cd8:	e000ed00 	.word	0xe000ed00

00004cdc <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    4cdc:	4b04      	ldr	r3, [pc, #16]	; (4cf0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    4cde:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    4ce0:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    4ce2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    4ce4:	d003      	beq.n	4cee <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    4ce6:	4903      	ldr	r1, [pc, #12]	; (4cf4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    4ce8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    4cec:	600a      	str	r2, [r1, #0]

00004cee <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    4cee:	4770      	bx	lr
	ldr r3, =_kernel
    4cf0:	2000272c 	.word	0x2000272c
	ldr r1, =_SCS_ICSR
    4cf4:	e000ed04 	.word	0xe000ed04

00004cf8 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    4cf8:	4a06      	ldr	r2, [pc, #24]	; (4d14 <z_arm_clear_arm_mpu_config+0x1c>)
    4cfa:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
    4cfc:	2300      	movs	r3, #0
	int num_regions =
    4cfe:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    4d02:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    4d04:	428b      	cmp	r3, r1
    4d06:	d100      	bne.n	4d0a <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
    4d08:	4770      	bx	lr
  MPU->RNR = rnr;
    4d0a:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    4d0c:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
    4d0e:	3301      	adds	r3, #1
    4d10:	e7f8      	b.n	4d04 <z_arm_clear_arm_mpu_config+0xc>
    4d12:	bf00      	nop
    4d14:	e000ed90 	.word	0xe000ed90

00004d18 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    4d18:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    4d1a:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    4d1c:	2300      	movs	r3, #0
    4d1e:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    4d22:	f7ff ffe9 	bl	4cf8 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    4d26:	4b14      	ldr	r3, [pc, #80]	; (4d78 <z_arm_init_arch_hw_at_boot+0x60>)
    4d28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4d2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    4d30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    4d34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    4d38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    4d3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    4d40:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    4d44:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    4d48:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    4d4c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    4d50:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    4d54:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    4d58:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    4d5c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    4d60:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    4d64:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    4d68:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    4d6c:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    4d6e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4d72:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    4d76:	bd08      	pop	{r3, pc}
    4d78:	e000e100 	.word	0xe000e100

00004d7c <z_arm_interrupt_init>:
    4d7c:	4804      	ldr	r0, [pc, #16]	; (4d90 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    4d7e:	2300      	movs	r3, #0
    4d80:	2120      	movs	r1, #32
    4d82:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    4d84:	3301      	adds	r3, #1
    4d86:	2b30      	cmp	r3, #48	; 0x30
    4d88:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    4d8c:	d1f9      	bne.n	4d82 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    4d8e:	4770      	bx	lr
    4d90:	e000e100 	.word	0xe000e100

00004d94 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    4d94:	4b06      	ldr	r3, [pc, #24]	; (4db0 <z_impl_k_thread_abort+0x1c>)
    4d96:	689b      	ldr	r3, [r3, #8]
    4d98:	4283      	cmp	r3, r0
    4d9a:	d107      	bne.n	4dac <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4d9c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    4da0:	b123      	cbz	r3, 4dac <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4da2:	4a04      	ldr	r2, [pc, #16]	; (4db4 <z_impl_k_thread_abort+0x20>)
    4da4:	6853      	ldr	r3, [r2, #4]
    4da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    4daa:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    4dac:	f003 bf42 	b.w	8c34 <z_thread_abort>
    4db0:	2000272c 	.word	0x2000272c
    4db4:	e000ed00 	.word	0xe000ed00

00004db8 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    4db8:	4b02      	ldr	r3, [pc, #8]	; (4dc4 <z_arm_configure_static_mpu_regions+0xc>)
    4dba:	4a03      	ldr	r2, [pc, #12]	; (4dc8 <z_arm_configure_static_mpu_regions+0x10>)
    4dbc:	4803      	ldr	r0, [pc, #12]	; (4dcc <z_arm_configure_static_mpu_regions+0x14>)
    4dbe:	2101      	movs	r1, #1
    4dc0:	f000 b868 	b.w	4e94 <arm_core_mpu_configure_static_mpu_regions>
    4dc4:	20040000 	.word	0x20040000
    4dc8:	20000000 	.word	0x20000000
    4dcc:	0000d988 	.word	0x0000d988

00004dd0 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    4dd0:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    4dd2:	4b05      	ldr	r3, [pc, #20]	; (4de8 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    4dd4:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    4dd6:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    4dd8:	4a04      	ldr	r2, [pc, #16]	; (4dec <z_arm_configure_dynamic_mpu_regions+0x1c>)
    4dda:	2120      	movs	r1, #32
    4ddc:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    4de0:	4618      	mov	r0, r3
    4de2:	2101      	movs	r1, #1
    4de4:	f000 b860 	b.w	4ea8 <arm_core_mpu_configure_dynamic_mpu_regions>
    4de8:	200023e8 	.word	0x200023e8
    4dec:	150b0000 	.word	0x150b0000

00004df0 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    4df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    4df2:	4f1e      	ldr	r7, [pc, #120]	; (4e6c <mpu_configure_regions+0x7c>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    4df4:	2600      	movs	r6, #0
    4df6:	428e      	cmp	r6, r1
    4df8:	db01      	blt.n	4dfe <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    4dfa:	4610      	mov	r0, r2
    4dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    4dfe:	6844      	ldr	r4, [r0, #4]
    4e00:	b384      	cbz	r4, 4e64 <mpu_configure_regions+0x74>
		if (do_sanity_check &&
    4e02:	b153      	cbz	r3, 4e1a <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    4e04:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    4e08:	ea14 0f0c 	tst.w	r4, ip
    4e0c:	d118      	bne.n	4e40 <mpu_configure_regions+0x50>
		&&
    4e0e:	2c1f      	cmp	r4, #31
    4e10:	d916      	bls.n	4e40 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    4e12:	6805      	ldr	r5, [r0, #0]
		&&
    4e14:	ea1c 0f05 	tst.w	ip, r5
    4e18:	d112      	bne.n	4e40 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    4e1a:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    4e1c:	6805      	ldr	r5, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    4e1e:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    4e22:	b2d2      	uxtb	r2, r2
    4e24:	d90f      	bls.n	4e46 <mpu_configure_regions+0x56>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    4e26:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    4e2a:	d80e      	bhi.n	4e4a <mpu_configure_regions+0x5a>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    4e2c:	3c01      	subs	r4, #1
    4e2e:	fab4 f484 	clz	r4, r4
    4e32:	f1c4 041f 	rsb	r4, r4, #31
    4e36:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    4e38:	2a07      	cmp	r2, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    4e3a:	ea4c 0404 	orr.w	r4, ip, r4
    4e3e:	d906      	bls.n	4e4e <mpu_configure_regions+0x5e>
			return -EINVAL;
    4e40:	f06f 0215 	mvn.w	r2, #21
    4e44:	e7d9      	b.n	4dfa <mpu_configure_regions+0xa>
		return REGION_32B;
    4e46:	2408      	movs	r4, #8
    4e48:	e7f6      	b.n	4e38 <mpu_configure_regions+0x48>
		return REGION_4G;
    4e4a:	243e      	movs	r4, #62	; 0x3e
    4e4c:	e7f4      	b.n	4e38 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4e4e:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    4e52:	4315      	orrs	r5, r2
    4e54:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4e58:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    4e5c:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4e5e:	60fd      	str	r5, [r7, #12]
		reg_index++;
    4e60:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4e62:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
    4e64:	3601      	adds	r6, #1
    4e66:	300c      	adds	r0, #12
    4e68:	e7c5      	b.n	4df6 <mpu_configure_regions+0x6>
    4e6a:	bf00      	nop
    4e6c:	e000ed90 	.word	0xe000ed90

00004e70 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    4e70:	4b03      	ldr	r3, [pc, #12]	; (4e80 <arm_core_mpu_enable+0x10>)
    4e72:	2205      	movs	r2, #5
    4e74:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    4e76:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4e7a:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    4e7e:	4770      	bx	lr
    4e80:	e000ed90 	.word	0xe000ed90

00004e84 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    4e84:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    4e88:	4b01      	ldr	r3, [pc, #4]	; (4e90 <arm_core_mpu_disable+0xc>)
    4e8a:	2200      	movs	r2, #0
    4e8c:	605a      	str	r2, [r3, #4]
}
    4e8e:	4770      	bx	lr
    4e90:	e000ed90 	.word	0xe000ed90

00004e94 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    4e94:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    4e96:	4c03      	ldr	r4, [pc, #12]	; (4ea4 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    4e98:	2301      	movs	r3, #1
    4e9a:	7822      	ldrb	r2, [r4, #0]
    4e9c:	f7ff ffa8 	bl	4df0 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    4ea0:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    4ea2:	bd10      	pop	{r4, pc}
    4ea4:	20005122 	.word	0x20005122

00004ea8 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    4ea8:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    4eaa:	4a08      	ldr	r2, [pc, #32]	; (4ecc <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
    4eac:	2300      	movs	r3, #0
    4eae:	7812      	ldrb	r2, [r2, #0]
    4eb0:	f7ff ff9e 	bl	4df0 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    4eb4:	f110 0f16 	cmn.w	r0, #22
    4eb8:	d003      	beq.n	4ec2 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
    4eba:	4b05      	ldr	r3, [pc, #20]	; (4ed0 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
    4ebc:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    4ebe:	2807      	cmp	r0, #7
    4ec0:	dd00      	ble.n	4ec4 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    4ec2:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    4ec4:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    4ec6:	611a      	str	r2, [r3, #16]
    4ec8:	3001      	adds	r0, #1
    4eca:	e7f8      	b.n	4ebe <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    4ecc:	20005122 	.word	0x20005122
    4ed0:	e000ed90 	.word	0xe000ed90

00004ed4 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    4ed4:	4913      	ldr	r1, [pc, #76]	; (4f24 <z_arm_mpu_init+0x50>)
    4ed6:	6808      	ldr	r0, [r1, #0]
    4ed8:	2808      	cmp	r0, #8
{
    4eda:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    4edc:	d81e      	bhi.n	4f1c <z_arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    4ede:	f7ff ffd1 	bl	4e84 <arm_core_mpu_disable>
	MPU->RNR = index;
    4ee2:	4c11      	ldr	r4, [pc, #68]	; (4f28 <z_arm_mpu_init+0x54>)
    4ee4:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4ee6:	2200      	movs	r2, #0
    4ee8:	4290      	cmp	r0, r2
    4eea:	f101 010c 	add.w	r1, r1, #12
    4eee:	d105      	bne.n	4efc <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    4ef0:	4b0e      	ldr	r3, [pc, #56]	; (4f2c <z_arm_mpu_init+0x58>)
    4ef2:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    4ef4:	f7ff ffbc 	bl	4e70 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    4ef8:	2000      	movs	r0, #0
}
    4efa:	bd10      	pop	{r4, pc}
    4efc:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4efe:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    4f02:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    4f06:	4313      	orrs	r3, r2
    4f08:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4f0c:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4f0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
    4f12:	f043 0301 	orr.w	r3, r3, #1
    4f16:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4f18:	3201      	adds	r2, #1
    4f1a:	e7e5      	b.n	4ee8 <z_arm_mpu_init+0x14>
		return -1;
    4f1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4f20:	e7eb      	b.n	4efa <z_arm_mpu_init+0x26>
    4f22:	bf00      	nop
    4f24:	0000d994 	.word	0x0000d994
    4f28:	e000ed90 	.word	0xe000ed90
    4f2c:	20005122 	.word	0x20005122

00004f30 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    4f30:	f04f 0320 	mov.w	r3, #32
    4f34:	f3ef 8211 	mrs	r2, BASEPRI
    4f38:	f383 8811 	msr	BASEPRI, r3
    4f3c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    4f40:	4906      	ldr	r1, [pc, #24]	; (4f5c <nordicsemi_nrf52_init+0x2c>)
    4f42:	2301      	movs	r3, #1
    4f44:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    4f48:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    4f4c:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    4f50:	f382 8811 	msr	BASEPRI, r2
    4f54:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    4f58:	2000      	movs	r0, #0
    4f5a:	4770      	bx	lr
    4f5c:	4001e000 	.word	0x4001e000

00004f60 <sys_arch_reboot>:
    *p_gpregret = val;
    4f60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4f64:	b2c0      	uxtb	r0, r0
    4f66:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    4f6a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    4f6e:	4905      	ldr	r1, [pc, #20]	; (4f84 <sys_arch_reboot+0x24>)
    4f70:	4b05      	ldr	r3, [pc, #20]	; (4f88 <sys_arch_reboot+0x28>)
    4f72:	68ca      	ldr	r2, [r1, #12]
    4f74:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4f78:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4f7a:	60cb      	str	r3, [r1, #12]
    4f7c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    4f80:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    4f82:	e7fd      	b.n	4f80 <sys_arch_reboot+0x20>
    4f84:	e000ed00 	.word	0xe000ed00
    4f88:	05fa0004 	.word	0x05fa0004

00004f8c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    4f8c:	b120      	cbz	r0, 4f98 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    4f8e:	4b03      	ldr	r3, [pc, #12]	; (4f9c <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    4f90:	0180      	lsls	r0, r0, #6
    4f92:	f043 0301 	orr.w	r3, r3, #1
    4f96:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    4f98:	4770      	bx	lr
    4f9a:	bf00      	nop
    4f9c:	0000d840 	.word	0x0000d840

00004fa0 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    4fa0:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    4fa2:	4b09      	ldr	r3, [pc, #36]	; (4fc8 <gpio_nrfx_init+0x28>)
    4fa4:	781a      	ldrb	r2, [r3, #0]
    4fa6:	b96a      	cbnz	r2, 4fc4 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    4fa8:	2101      	movs	r1, #1
    4faa:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    4fac:	2006      	movs	r0, #6
    4fae:	2105      	movs	r1, #5
    4fb0:	f7ff fcba 	bl	4928 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    4fb4:	2006      	movs	r0, #6
    4fb6:	f7ff fc85 	bl	48c4 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    4fba:	4b04      	ldr	r3, [pc, #16]	; (4fcc <gpio_nrfx_init+0x2c>)
    4fbc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4fc0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    4fc4:	2000      	movs	r0, #0
    4fc6:	bd08      	pop	{r3, pc}
    4fc8:	20005123 	.word	0x20005123
    4fcc:	40006000 	.word	0x40006000

00004fd0 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4fd0:	4b2b      	ldr	r3, [pc, #172]	; (5080 <gpio_nrfx_config+0xb0>)
{
    4fd2:	b5f0      	push	{r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4fd4:	6844      	ldr	r4, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4fd6:	482b      	ldr	r0, [pc, #172]	; (5084 <gpio_nrfx_config+0xb4>)
    4fd8:	4013      	ands	r3, r2
    4fda:	4283      	cmp	r3, r0
    4fdc:	d041      	beq.n	5062 <gpio_nrfx_config+0x92>
    4fde:	d80d      	bhi.n	4ffc <gpio_nrfx_config+0x2c>
    4fe0:	2b06      	cmp	r3, #6
    4fe2:	d015      	beq.n	5010 <gpio_nrfx_config+0x40>
    4fe4:	d805      	bhi.n	4ff2 <gpio_nrfx_config+0x22>
    4fe6:	b19b      	cbz	r3, 5010 <gpio_nrfx_config+0x40>
    4fe8:	2b02      	cmp	r3, #2
    4fea:	d03c      	beq.n	5066 <gpio_nrfx_config+0x96>
    4fec:	f06f 0015 	mvn.w	r0, #21
    4ff0:	e036      	b.n	5060 <gpio_nrfx_config+0x90>
    4ff2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    4ff6:	d1f9      	bne.n	4fec <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
    4ff8:	2301      	movs	r3, #1
    4ffa:	e009      	b.n	5010 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4ffc:	4822      	ldr	r0, [pc, #136]	; (5088 <gpio_nrfx_config+0xb8>)
    4ffe:	4283      	cmp	r3, r0
    5000:	d033      	beq.n	506a <gpio_nrfx_config+0x9a>
    5002:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    5006:	d032      	beq.n	506e <gpio_nrfx_config+0x9e>
    5008:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    500c:	d1ee      	bne.n	4fec <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
    500e:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    5010:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
    5012:	bf54      	ite	pl
    5014:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
    5018:	2603      	movmi	r6, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    501a:	f482 7580 	eor.w	r5, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
    501e:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
    5020:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    5024:	f3c5 2500 	ubfx	r5, r5, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    5028:	d507      	bpl.n	503a <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    502a:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    502e:	6867      	ldr	r7, [r4, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    5030:	d01f      	beq.n	5072 <gpio_nrfx_config+0xa2>
			nrf_gpio_port_out_set(reg, BIT(pin));
    5032:	2201      	movs	r2, #1
    5034:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    5036:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    503a:	7a22      	ldrb	r2, [r4, #8]
        case 1: return NRF_P1;
    503c:	4c13      	ldr	r4, [pc, #76]	; (508c <gpio_nrfx_config+0xbc>)
    503e:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    5040:	f001 011f 	and.w	r1, r1, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    5044:	ea40 0245 	orr.w	r2, r0, r5, lsl #1
        case 1: return NRF_P1;
    5048:	bf18      	it	ne
    504a:	f04f 44a0 	movne.w	r4, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    504e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    5052:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    5056:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    505a:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
	return 0;
    505e:	2000      	movs	r0, #0
}
    5060:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
    5062:	2307      	movs	r3, #7
    5064:	e7d4      	b.n	5010 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
    5066:	2304      	movs	r3, #4
    5068:	e7d2      	b.n	5010 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
    506a:	2305      	movs	r3, #5
    506c:	e7d0      	b.n	5010 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
    506e:	2303      	movs	r3, #3
    5070:	e7ce      	b.n	5010 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    5072:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    5074:	bf42      	ittt	mi
    5076:	2201      	movmi	r2, #1
    5078:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
    507a:	f8c7 250c 	strmi.w	r2, [r7, #1292]	; 0x50c
}
    507e:	e7dc      	b.n	503a <gpio_nrfx_config+0x6a>
    5080:	00f00006 	.word	0x00f00006
    5084:	00100006 	.word	0x00100006
    5088:	00400002 	.word	0x00400002
    508c:	50000300 	.word	0x50000300

00005090 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
    5090:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    5094:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    5096:	4b08      	ldr	r3, [pc, #32]	; (50b8 <nrf_gpio_cfg_sense_set+0x28>)
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5098:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
    509a:	bf18      	it	ne
    509c:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    50a0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    50a4:	f8d3 2700 	ldr.w	r2, [r3, #1792]	; 0x700
    50a8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    50ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    50b0:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
}
    50b4:	4770      	bx	lr
    50b6:	bf00      	nop
    50b8:	50000300 	.word	0x50000300

000050bc <check_level_trigger_pins>:
{
    50bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct gpio_nrfx_data *data = get_port_data(port);
    50c0:	6903      	ldr	r3, [r0, #16]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    50c2:	f8d0 a004 	ldr.w	sl, [r0, #4]
	uint32_t out = data->pin_int_en;
    50c6:	68de      	ldr	r6, [r3, #12]
        case 1: return NRF_P1;
    50c8:	f8df b07c 	ldr.w	fp, [pc, #124]	; 5148 <check_level_trigger_pins+0x8c>
{
    50cc:	4688      	mov	r8, r1
	out &= ~data->trig_edge & ~data->double_edge;
    50ce:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
    50d2:	430a      	orrs	r2, r1
    50d4:	ea26 0602 	bic.w	r6, r6, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
    50d8:	f8da 2004 	ldr.w	r2, [sl, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    50dc:	691b      	ldr	r3, [r3, #16]
    return p_reg->IN;
    50de:	f8d2 5510 	ldr.w	r5, [r2, #1296]	; 0x510
    50e2:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
    50e4:	ea26 0505 	bic.w	r5, r6, r5
	uint32_t check_pins = level_pins;
    50e8:	4637      	mov	r7, r6
	uint32_t bit = 1U << pin;
    50ea:	2401      	movs	r4, #1
	uint32_t pin = 0U;
    50ec:	f04f 0900 	mov.w	r9, #0
	while (check_pins) {
    50f0:	b917      	cbnz	r7, 50f8 <check_level_trigger_pins+0x3c>
}
    50f2:	4628      	mov	r0, r5
    50f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (check_pins & bit) {
    50f8:	423c      	tst	r4, r7
    50fa:	d021      	beq.n	5140 <check_level_trigger_pins+0x84>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    50fc:	f89a 3008 	ldrb.w	r3, [sl, #8]
    5100:	f009 001f 	and.w	r0, r9, #31
			if (!(level_pins & bit)) {
    5104:	4234      	tst	r4, r6
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    5106:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
			if (!(level_pins & bit)) {
    510a:	d114      	bne.n	5136 <check_level_trigger_pins+0x7a>
    return pin_number >> 5;
    510c:	0942      	lsrs	r2, r0, #5
        case 1: return NRF_P1;
    510e:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    5110:	f000 031f 	and.w	r3, r0, #31
        case 1: return NRF_P1;
    5114:	bf14      	ite	ne
    5116:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    511a:	465a      	moveq	r2, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    511c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    5120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    5124:	f3c3 4301 	ubfx	r3, r3, #16, #2
				if (high) {
    5128:	2b02      	cmp	r3, #2
					*sense_levels |= bit;
    512a:	bf02      	ittt	eq
    512c:	f8d8 3000 	ldreq.w	r3, [r8]
    5130:	4323      	orreq	r3, r4
    5132:	f8c8 3000 	streq.w	r3, [r8]
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    5136:	2100      	movs	r1, #0
    5138:	f7ff ffaa 	bl	5090 <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
    513c:	ea27 0704 	bic.w	r7, r7, r4
		++pin;
    5140:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
    5144:	0064      	lsls	r4, r4, #1
    5146:	e7d3      	b.n	50f0 <check_level_trigger_pins+0x34>
    5148:	50000300 	.word	0x50000300

0000514c <gpio_nrfx_pin_interrupt_configure>:
{
    514c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    514e:	460e      	mov	r6, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    5150:	6841      	ldr	r1, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
    5152:	6907      	ldr	r7, [r0, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    5154:	7a09      	ldrb	r1, [r1, #8]
    5156:	f006 051f 	and.w	r5, r6, #31
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    515a:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    515e:	ea45 1541 	orr.w	r5, r5, r1, lsl #5
    5162:	d110      	bne.n	5186 <gpio_nrfx_pin_interrupt_configure+0x3a>
    return pin_number >> 5;
    5164:	0968      	lsrs	r0, r5, #5
        case 1: return NRF_P1;
    5166:	2801      	cmp	r0, #1
    *p_pin = pin_number & 0x1F;
    5168:	f005 011f 	and.w	r1, r5, #31
        case 1: return NRF_P1;
    516c:	485d      	ldr	r0, [pc, #372]	; (52e4 <CONFIG_USB_DEVICE_PID+0xd5>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    516e:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
        case 1: return NRF_P1;
    5172:	bf18      	it	ne
    5174:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    5178:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    517c:	07c8      	lsls	r0, r1, #31
    517e:	d507      	bpl.n	5190 <gpio_nrfx_pin_interrupt_configure+0x44>
		return -ENOTSUP;
    5180:	f06f 0085 	mvn.w	r0, #133	; 0x85
    5184:	e093      	b.n	52ae <CONFIG_USB_DEVICE_PID+0x9f>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    5186:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    518a:	68f9      	ldr	r1, [r7, #12]
    518c:	f000 8091 	beq.w	52b2 <CONFIG_USB_DEVICE_PID+0xa3>
    5190:	68f8      	ldr	r0, [r7, #12]
    5192:	2101      	movs	r1, #1
    5194:	40b1      	lsls	r1, r6
    5196:	4301      	orrs	r1, r0
    5198:	6978      	ldr	r0, [r7, #20]
    519a:	60f9      	str	r1, [r7, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    519c:	2101      	movs	r1, #1
    519e:	40b1      	lsls	r1, r6
    51a0:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    51a4:	69ba      	ldr	r2, [r7, #24]
    51a6:	bf0c      	ite	eq
    51a8:	4308      	orreq	r0, r1
    51aa:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    51ac:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    51b0:	bf0c      	ite	eq
    51b2:	430a      	orreq	r2, r1
    51b4:	438a      	bicne	r2, r1
    51b6:	61ba      	str	r2, [r7, #24]
    51b8:	693a      	ldr	r2, [r7, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    51ba:	6178      	str	r0, [r7, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    51bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    51c0:	bf0c      	ite	eq
    51c2:	4311      	orreq	r1, r2
    51c4:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    51c8:	4a47      	ldr	r2, [pc, #284]	; (52e8 <CONFIG_USB_DEVICE_PID+0xd9>)
    51ca:	6139      	str	r1, [r7, #16]
    51cc:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    51d0:	2000      	movs	r0, #0
    51d2:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    51d4:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    51d8:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    51dc:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    51e0:	428d      	cmp	r5, r1
    51e2:	d16b      	bne.n	52bc <CONFIG_USB_DEVICE_PID+0xad>
		    && (intenset & BIT(i))) {
    51e4:	fa23 f100 	lsr.w	r1, r3, r0
    51e8:	07c9      	lsls	r1, r1, #31
    51ea:	d567      	bpl.n	52bc <CONFIG_USB_DEVICE_PID+0xad>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    51ec:	0083      	lsls	r3, r0, #2
    51ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    51f2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    51f6:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    51fa:	f021 0101 	bic.w	r1, r1, #1
    51fe:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    5202:	2301      	movs	r3, #1
    5204:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
    5206:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
    520a:	b2c0      	uxtb	r0, r0
    520c:	f000 fe4c 	bl	5ea8 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    5210:	4628      	mov	r0, r5
    5212:	2100      	movs	r1, #0
    5214:	f7ff ff3c 	bl	5090 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
    5218:	68f8      	ldr	r0, [r7, #12]
    521a:	40f0      	lsrs	r0, r6
    521c:	f010 0001 	ands.w	r0, r0, #1
    5220:	d045      	beq.n	52ae <CONFIG_USB_DEVICE_PID+0x9f>
		if (data->trig_edge & BIT(pin)) {
    5222:	6978      	ldr	r0, [r7, #20]
    5224:	40f0      	lsrs	r0, r6
    5226:	f010 0401 	ands.w	r4, r0, #1
    522a:	d04e      	beq.n	52ca <CONFIG_USB_DEVICE_PID+0xbb>
				if (data->double_edge & BIT(pin)) {
    522c:	69bb      	ldr	r3, [r7, #24]
    522e:	40f3      	lsrs	r3, r6
    5230:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    5232:	bf5f      	itttt	pl
    5234:	6939      	ldrpl	r1, [r7, #16]
    5236:	fa21 f606 	lsrpl.w	r6, r1, r6
    523a:	f006 0601 	andpl.w	r6, r6, #1
    523e:	f1c6 0602 	rsbpl	r6, r6, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    5242:	f10d 0007 	add.w	r0, sp, #7
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    5246:	bf54      	ite	pl
    5248:	b2f6      	uxtbpl	r6, r6
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
    524a:	2603      	movmi	r6, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    524c:	f000 fe4e 	bl	5eec <nrfx_gpiote_channel_alloc>
    5250:	4b26      	ldr	r3, [pc, #152]	; (52ec <CONFIG_USB_DEVICE_PID+0xdd>)
    5252:	4298      	cmp	r0, r3
    5254:	d136      	bne.n	52c4 <CONFIG_USB_DEVICE_PID+0xb5>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    5256:	f89d 1007 	ldrb.w	r1, [sp, #7]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    525a:	008b      	lsls	r3, r1, #2
    525c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5260:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5264:	022d      	lsls	r5, r5, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    5266:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    526a:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
    526e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    5272:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5276:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    527a:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
    527e:	4315      	orrs	r5, r2
    return ((uint32_t)p_reg + event);
    5280:	008a      	lsls	r2, r1, #2
    5282:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    5286:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    528a:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    528e:	2000      	movs	r0, #0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5290:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5294:	6010      	str	r0, [r2, #0]
    5296:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    5298:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    529c:	f042 0201 	orr.w	r2, r2, #1
    52a0:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
    52a4:	4a10      	ldr	r2, [pc, #64]	; (52e8 <CONFIG_USB_DEVICE_PID+0xd9>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    52a6:	2301      	movs	r3, #1
    52a8:	408b      	lsls	r3, r1
    52aa:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    52ae:	b003      	add	sp, #12
    52b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    52b2:	2001      	movs	r0, #1
    52b4:	40b0      	lsls	r0, r6
    52b6:	ea21 0100 	bic.w	r1, r1, r0
    52ba:	e76d      	b.n	5198 <gpio_nrfx_pin_interrupt_configure+0x4c>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    52bc:	3001      	adds	r0, #1
    52be:	2808      	cmp	r0, #8
    52c0:	d188      	bne.n	51d4 <gpio_nrfx_pin_interrupt_configure+0x88>
    52c2:	e7a5      	b.n	5210 <CONFIG_USB_DEVICE_PID+0x1>
		return -ENODEV;
    52c4:	f06f 0012 	mvn.w	r0, #18
    52c8:	e7f1      	b.n	52ae <CONFIG_USB_DEVICE_PID+0x9f>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    52ca:	6939      	ldr	r1, [r7, #16]
    52cc:	40f1      	lsrs	r1, r6
    52ce:	f001 0101 	and.w	r1, r1, #1
    52d2:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    52d6:	4628      	mov	r0, r5
    52d8:	b2c9      	uxtb	r1, r1
    52da:	f7ff fed9 	bl	5090 <nrf_gpio_cfg_sense_set>
	int res = 0;
    52de:	4620      	mov	r0, r4
    52e0:	e7e5      	b.n	52ae <CONFIG_USB_DEVICE_PID+0x9f>
    52e2:	bf00      	nop
    52e4:	50000300 	.word	0x50000300
    52e8:	40006000 	.word	0x40006000
    52ec:	0bad0000 	.word	0x0bad0000

000052f0 <gpiote_event_handler>:
{
    52f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    52f2:	2400      	movs	r4, #0
{
    52f4:	b085      	sub	sp, #20
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    52f6:	e9cd 4400 	strd	r4, r4, [sp]
	uint32_t sense_levels[GPIO_COUNT] = {0};
    52fa:	e9cd 4402 	strd	r4, r4, [sp, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    52fe:	4e26      	ldr	r6, [pc, #152]	; (5398 <gpiote_event_handler+0xa8>)
    5300:	6835      	ldr	r5, [r6, #0]
	if (port_event) {
    5302:	b15d      	cbz	r5, 531c <gpiote_event_handler+0x2c>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
    5304:	a902      	add	r1, sp, #8
    5306:	4825      	ldr	r0, [pc, #148]	; (539c <gpiote_event_handler+0xac>)
    5308:	f7ff fed8 	bl	50bc <check_level_trigger_pins>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
    530c:	a903      	add	r1, sp, #12
		fired_triggers[0] =
    530e:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
    5310:	4823      	ldr	r0, [pc, #140]	; (53a0 <gpiote_event_handler+0xb0>)
    5312:	f7ff fed3 	bl	50bc <check_level_trigger_pins>
		fired_triggers[1] =
    5316:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5318:	6034      	str	r4, [r6, #0]
    531a:	6833      	ldr	r3, [r6, #0]
    return p_reg->INTENSET & mask;
    531c:	4c21      	ldr	r4, [pc, #132]	; (53a4 <gpiote_event_handler+0xb4>)
{
    531e:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    5320:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5322:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
    5324:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    5328:	fa06 f102 	lsl.w	r1, r6, r2
    532c:	4219      	tst	r1, r3
    532e:	d01b      	beq.n	5368 <gpiote_event_handler+0x78>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5330:	0091      	lsls	r1, r2, #2
    5332:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    5336:	f501 41c2 	add.w	r1, r1, #24832	; 0x6100
    533a:	680b      	ldr	r3, [r1, #0]
    533c:	b1a3      	cbz	r3, 5368 <gpiote_event_handler+0x78>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    533e:	f502 73a2 	add.w	r3, r2, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    5342:	af04      	add	r7, sp, #16
    5344:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5348:	f8c1 c000 	str.w	ip, [r1]
    534c:	f3c3 3040 	ubfx	r0, r3, #13, #1
    5350:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    5354:	f3c3 2304 	ubfx	r3, r3, #8, #5
    5358:	f850 7c10 	ldr.w	r7, [r0, #-16]
    535c:	fa06 f303 	lsl.w	r3, r6, r3
    5360:	433b      	orrs	r3, r7
    5362:	f840 3c10 	str.w	r3, [r0, #-16]
    5366:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    5368:	3201      	adds	r2, #1
    536a:	2a08      	cmp	r2, #8
    536c:	d1da      	bne.n	5324 <gpiote_event_handler+0x34>
	if (fired_triggers[0]) {
    536e:	9a00      	ldr	r2, [sp, #0]
    5370:	b11a      	cbz	r2, 537a <gpiote_event_handler+0x8a>
	gpio_fire_callbacks(list, port, pins);
    5372:	490a      	ldr	r1, [pc, #40]	; (539c <gpiote_event_handler+0xac>)
    5374:	480c      	ldr	r0, [pc, #48]	; (53a8 <gpiote_event_handler+0xb8>)
    5376:	f005 fccf 	bl	ad18 <gpio_fire_callbacks>
	if (fired_triggers[1]) {
    537a:	9a01      	ldr	r2, [sp, #4]
    537c:	b11a      	cbz	r2, 5386 <gpiote_event_handler+0x96>
	gpio_fire_callbacks(list, port, pins);
    537e:	4908      	ldr	r1, [pc, #32]	; (53a0 <gpiote_event_handler+0xb0>)
    5380:	480a      	ldr	r0, [pc, #40]	; (53ac <gpiote_event_handler+0xbc>)
    5382:	f005 fcc9 	bl	ad18 <gpio_fire_callbacks>
	if (port_event) {
    5386:	b12d      	cbz	r5, 5394 <gpiote_event_handler+0xa4>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
    5388:	4804      	ldr	r0, [pc, #16]	; (539c <gpiote_event_handler+0xac>)
    538a:	f005 fd2f 	bl	adec <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
    538e:	4804      	ldr	r0, [pc, #16]	; (53a0 <gpiote_event_handler+0xb0>)
    5390:	f005 fd2c 	bl	adec <cfg_level_pins>
}
    5394:	b005      	add	sp, #20
    5396:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5398:	4000617c 	.word	0x4000617c
    539c:	2000025c 	.word	0x2000025c
    53a0:	20000274 	.word	0x20000274
    53a4:	40006000 	.word	0x40006000
    53a8:	20002400 	.word	0x20002400
    53ac:	2000241c 	.word	0x2000241c

000053b0 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    53b0:	4b02      	ldr	r3, [pc, #8]	; (53bc <flash_nrf_pages_layout+0xc>)
    53b2:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    53b4:	2301      	movs	r3, #1
    53b6:	6013      	str	r3, [r2, #0]
}
    53b8:	4770      	bx	lr
    53ba:	bf00      	nop
    53bc:	20002438 	.word	0x20002438

000053c0 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
    53c0:	4800      	ldr	r0, [pc, #0]	; (53c4 <flash_nrf_get_parameters+0x4>)
    53c2:	4770      	bx	lr
    53c4:	0000da08 	.word	0x0000da08

000053c8 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
    53c8:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
    53ca:	2201      	movs	r2, #1
    53cc:	4611      	mov	r1, r2
    53ce:	4806      	ldr	r0, [pc, #24]	; (53e8 <nrf_flash_init+0x20>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    53d0:	4c06      	ldr	r4, [pc, #24]	; (53ec <nrf_flash_init+0x24>)
    53d2:	f007 fee2 	bl	d19a <z_impl_k_sem_init>
    53d6:	f006 f806 	bl	b3e6 <nrfx_nvmc_flash_page_count_get>
    53da:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    53dc:	f005 ffff 	bl	b3de <nrfx_nvmc_flash_page_size_get>
    53e0:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
    53e2:	2000      	movs	r0, #0
    53e4:	bd10      	pop	{r4, pc}
    53e6:	bf00      	nop
    53e8:	20002440 	.word	0x20002440
    53ec:	20002438 	.word	0x20002438

000053f0 <restore_pofwarn.part.0>:
    uint32_t pofcon = p_reg->POFCON;
    53f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    53f4:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    uint32_t pofcon = p_reg->POFCON;
    53f8:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
    53fc:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
    5400:	f023 031f 	bic.w	r3, r3, #31
    5404:	430b      	orrs	r3, r1
    pofcon |=
    5406:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
    540a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

	if (pofcon_enabled) {
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
		pofcon_enabled = false;
    540e:	4b02      	ldr	r3, [pc, #8]	; (5418 <restore_pofwarn.part.0+0x28>)
    5410:	2200      	movs	r2, #0
    5412:	701a      	strb	r2, [r3, #0]
	}
}
    5414:	4770      	bx	lr
    5416:	bf00      	nop
    5418:	20005124 	.word	0x20005124

0000541c <suspend_pofwarn.part.0>:
    uint32_t pofcon = p_reg->POFCON;
    541c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    5420:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
	if (enabled) {
    5424:	f012 0001 	ands.w	r0, r2, #1
    5428:	d01a      	beq.n	5460 <suspend_pofwarn.part.0+0x44>
    uint32_t pofcon = p_reg->POFCON;
    542a:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    542e:	4b0d      	ldr	r3, [pc, #52]	; (5464 <suspend_pofwarn.part.0+0x48>)
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
    5430:	f020 001f 	bic.w	r0, r0, #31
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
    5434:	f002 021e 	and.w	r2, r2, #30
    pofcon |=
    5438:	4310      	orrs	r0, r2
    p_reg->POFCON = pofcon;
    543a:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    543e:	6818      	ldr	r0, [r3, #0]
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
    5440:	b158      	cbz	r0, 545a <suspend_pofwarn.part.0+0x3e>
    uint32_t pofcon = p_reg->POFCON;
    5442:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
    5446:	f023 031f 	bic.w	r3, r3, #31
    544a:	4313      	orrs	r3, r2
    pofcon |=
    544c:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
    5450:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
			return -ECANCELED;
    5454:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    5458:	4770      	bx	lr
		pofcon_enabled = enabled;
    545a:	4b03      	ldr	r3, [pc, #12]	; (5468 <suspend_pofwarn.part.0+0x4c>)
    545c:	2201      	movs	r2, #1
    545e:	701a      	strb	r2, [r3, #0]
}
    5460:	4770      	bx	lr
    5462:	bf00      	nop
    5464:	40000108 	.word	0x40000108
    5468:	20005124 	.word	0x20005124

0000546c <flash_nrf_write>:
{
    546c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5470:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
    5472:	4630      	mov	r0, r6
    5474:	4619      	mov	r1, r3
{
    5476:	4617      	mov	r7, r2
    5478:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    547a:	f005 fcdd 	bl	ae38 <is_regular_addr_valid>
    547e:	b3c0      	cbz	r0, 54f2 <flash_nrf_write+0x86>
	return (data & 0x3) ? false : true;
    5480:	ea46 0504 	orr.w	r5, r6, r4
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
    5484:	f015 0503 	ands.w	r5, r5, #3
    5488:	d133      	bne.n	54f2 <flash_nrf_write+0x86>
	if (!len) {
    548a:	b1cc      	cbz	r4, 54c0 <flash_nrf_write+0x54>
	return z_impl_k_sem_take(sem, timeout);
    548c:	481a      	ldr	r0, [pc, #104]	; (54f8 <flash_nrf_write+0x8c>)
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    548e:	f8df 9070 	ldr.w	r9, [pc, #112]	; 5500 <flash_nrf_write+0x94>
	if (pofcon_enabled) {
    5492:	f8df a070 	ldr.w	sl, [pc, #112]	; 5504 <flash_nrf_write+0x98>
    5496:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    549a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    549e:	f002 ff59 	bl	8354 <z_impl_k_sem_take>
static int write_op(void *context)
    54a2:	f024 0403 	bic.w	r4, r4, #3
	while (w_ctx->len >= sizeof(uint32_t)) {
    54a6:	42ac      	cmp	r4, r5
    54a8:	eb06 0805 	add.w	r8, r6, r5
    54ac:	d10b      	bne.n	54c6 <flash_nrf_write+0x5a>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    54ae:	4a13      	ldr	r2, [pc, #76]	; (54fc <flash_nrf_write+0x90>)
    54b0:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
    54b4:	07db      	lsls	r3, r3, #31
    54b6:	d5fb      	bpl.n	54b0 <flash_nrf_write+0x44>
	return FLASH_OP_DONE;
    54b8:	2400      	movs	r4, #0
	z_impl_k_sem_give(sem);
    54ba:	480f      	ldr	r0, [pc, #60]	; (54f8 <flash_nrf_write+0x8c>)
    54bc:	f002 ff2a 	bl	8314 <z_impl_k_sem_give>
}
    54c0:	4620      	mov	r0, r4
    54c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    54c6:	f8d9 3000 	ldr.w	r3, [r9]
    54ca:	2b08      	cmp	r3, #8
    54cc:	d00a      	beq.n	54e4 <flash_nrf_write+0x78>
		nrfx_nvmc_word_write(w_ctx->flash_addr,
    54ce:	5979      	ldr	r1, [r7, r5]
    54d0:	4640      	mov	r0, r8
    54d2:	f000 fd63 	bl	5f9c <nrfx_nvmc_word_write>
	if (pofcon_enabled) {
    54d6:	f89a 3000 	ldrb.w	r3, [sl]
    54da:	b10b      	cbz	r3, 54e0 <flash_nrf_write+0x74>
    54dc:	f7ff ff88 	bl	53f0 <restore_pofwarn.part.0>
	w_ctx->len -= shift;
    54e0:	3504      	adds	r5, #4
}
    54e2:	e7e0      	b.n	54a6 <flash_nrf_write+0x3a>
            {
                switch(var2)
    54e4:	f7ff ff9a 	bl	541c <suspend_pofwarn.part.0>
		if (SUSPEND_POFWARN()) {
    54e8:	2800      	cmp	r0, #0
    54ea:	d0f0      	beq.n	54ce <flash_nrf_write+0x62>
			return -ECANCELED;
    54ec:	f06f 048b 	mvn.w	r4, #139	; 0x8b
    54f0:	e7e3      	b.n	54ba <flash_nrf_write+0x4e>
		return -EINVAL;
    54f2:	f06f 0415 	mvn.w	r4, #21
    54f6:	e7e3      	b.n	54c0 <flash_nrf_write+0x54>
    54f8:	20002440 	.word	0x20002440
    54fc:	4001e000 	.word	0x4001e000
    5500:	10000130 	.word	0x10000130
    5504:	20005124 	.word	0x20005124

00005508 <flash_nrf_erase>:
{
    5508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    550c:	460e      	mov	r6, r1
    550e:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    5510:	f005 ff65 	bl	b3de <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
    5514:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    5516:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
    5518:	4630      	mov	r0, r6
    551a:	f005 fc8d 	bl	ae38 <is_regular_addr_valid>
    551e:	b3a0      	cbz	r0, 558a <flash_nrf_erase+0x82>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    5520:	fbb6 f3f7 	udiv	r3, r6, r7
    5524:	fb07 6313 	mls	r3, r7, r3, r6
    5528:	bb7b      	cbnz	r3, 558a <flash_nrf_erase+0x82>
    552a:	fbb5 f3f7 	udiv	r3, r5, r7
    552e:	fb07 5413 	mls	r4, r7, r3, r5
    5532:	bb54      	cbnz	r4, 558a <flash_nrf_erase+0x82>
		if (!n_pages) {
    5534:	42bd      	cmp	r5, r7
    5536:	d31e      	bcc.n	5576 <flash_nrf_erase+0x6e>
	return z_impl_k_sem_take(sem, timeout);
    5538:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    553c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5540:	4813      	ldr	r0, [pc, #76]	; (5590 <flash_nrf_erase+0x88>)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5542:	4f14      	ldr	r7, [pc, #80]	; (5594 <flash_nrf_erase+0x8c>)
	if (pofcon_enabled) {
    5544:	f8df 8050 	ldr.w	r8, [pc, #80]	; 5598 <flash_nrf_erase+0x90>
    5548:	f002 ff04 	bl	8354 <z_impl_k_sem_take>
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    554c:	f005 ff47 	bl	b3de <nrfx_nvmc_flash_page_size_get>
    5550:	4604      	mov	r4, r0
            if (var1 == 0x08)
    5552:	683b      	ldr	r3, [r7, #0]
    5554:	2b08      	cmp	r3, #8
    5556:	d011      	beq.n	557c <flash_nrf_erase+0x74>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    5558:	4630      	mov	r0, r6
    555a:	f000 fcff 	bl	5f5c <nrfx_nvmc_page_erase>
	if (pofcon_enabled) {
    555e:	f898 3000 	ldrb.w	r3, [r8]
    5562:	b10b      	cbz	r3, 5568 <flash_nrf_erase+0x60>
    5564:	f7ff ff44 	bl	53f0 <restore_pofwarn.part.0>
	} while (e_ctx->len > 0);
    5568:	1b2d      	subs	r5, r5, r4
    556a:	4426      	add	r6, r4
    556c:	d1f1      	bne.n	5552 <flash_nrf_erase+0x4a>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
    556e:	462c      	mov	r4, r5
	z_impl_k_sem_give(sem);
    5570:	4807      	ldr	r0, [pc, #28]	; (5590 <flash_nrf_erase+0x88>)
    5572:	f002 fecf 	bl	8314 <z_impl_k_sem_give>
}
    5576:	4620      	mov	r0, r4
    5578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                switch(var2)
    557c:	f7ff ff4e 	bl	541c <suspend_pofwarn.part.0>
		if (SUSPEND_POFWARN()) {
    5580:	2800      	cmp	r0, #0
    5582:	d0e9      	beq.n	5558 <flash_nrf_erase+0x50>
			return -ECANCELED;
    5584:	f06f 048b 	mvn.w	r4, #139	; 0x8b
    5588:	e7f2      	b.n	5570 <flash_nrf_erase+0x68>
		return -EINVAL;
    558a:	f06f 0415 	mvn.w	r4, #21
    558e:	e7f2      	b.n	5576 <flash_nrf_erase+0x6e>
    5590:	20002440 	.word	0x20002440
    5594:	10000130 	.word	0x10000130
    5598:	20005124 	.word	0x20005124

0000559c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    559c:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    559e:	794b      	ldrb	r3, [r1, #5]
    55a0:	2b01      	cmp	r3, #1
    55a2:	d02a      	beq.n	55fa <uarte_nrfx_configure+0x5e>
    55a4:	2b03      	cmp	r3, #3
    55a6:	d125      	bne.n	55f4 <uarte_nrfx_configure+0x58>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    55a8:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    55aa:	798b      	ldrb	r3, [r1, #6]
    55ac:	2b03      	cmp	r3, #3
    55ae:	d121      	bne.n	55f4 <uarte_nrfx_configure+0x58>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    55b0:	79cc      	ldrb	r4, [r1, #7]
    55b2:	b12c      	cbz	r4, 55c0 <uarte_nrfx_configure+0x24>
    55b4:	2c01      	cmp	r4, #1
    55b6:	d11d      	bne.n	55f4 <uarte_nrfx_configure+0x58>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
    55b8:	6843      	ldr	r3, [r0, #4]
    55ba:	685b      	ldr	r3, [r3, #4]
    55bc:	079b      	lsls	r3, r3, #30
    55be:	d019      	beq.n	55f4 <uarte_nrfx_configure+0x58>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    55c0:	790a      	ldrb	r2, [r1, #4]
    55c2:	b112      	cbz	r2, 55ca <uarte_nrfx_configure+0x2e>
    55c4:	2a02      	cmp	r2, #2
    55c6:	d115      	bne.n	55f4 <uarte_nrfx_configure+0x58>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    55c8:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    55ca:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    55cc:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    55ce:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    55d2:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    55d4:	d065      	beq.n	56a2 <uarte_nrfx_configure+0x106>
    55d6:	d82d      	bhi.n	5634 <uarte_nrfx_configure+0x98>
    55d8:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    55dc:	d064      	beq.n	56a8 <uarte_nrfx_configure+0x10c>
    55de:	d816      	bhi.n	560e <uarte_nrfx_configure+0x72>
    55e0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    55e4:	d062      	beq.n	56ac <uarte_nrfx_configure+0x110>
    55e6:	d80a      	bhi.n	55fe <uarte_nrfx_configure+0x62>
    55e8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    55ec:	d061      	beq.n	56b2 <uarte_nrfx_configure+0x116>
    55ee:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    55f2:	d061      	beq.n	56b8 <uarte_nrfx_configure+0x11c>
    55f4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    55f8:	e052      	b.n	56a0 <uarte_nrfx_configure+0x104>
	switch (cfg->stop_bits) {
    55fa:	2600      	movs	r6, #0
    55fc:	e7d5      	b.n	55aa <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    55fe:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    5602:	d05c      	beq.n	56be <uarte_nrfx_configure+0x122>
    5604:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    5608:	d1f4      	bne.n	55f4 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    560a:	4b37      	ldr	r3, [pc, #220]	; (56e8 <uarte_nrfx_configure+0x14c>)
    560c:	e03c      	b.n	5688 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    560e:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    5612:	d057      	beq.n	56c4 <uarte_nrfx_configure+0x128>
    5614:	d807      	bhi.n	5626 <uarte_nrfx_configure+0x8a>
    5616:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    561a:	d055      	beq.n	56c8 <uarte_nrfx_configure+0x12c>
    561c:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    5620:	d1e8      	bne.n	55f4 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    5622:	4b32      	ldr	r3, [pc, #200]	; (56ec <uarte_nrfx_configure+0x150>)
    5624:	e030      	b.n	5688 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    5626:	f647 2712 	movw	r7, #31250	; 0x7a12
    562a:	42bb      	cmp	r3, r7
    562c:	d1e2      	bne.n	55f4 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    562e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    5632:	e029      	b.n	5688 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    5634:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    5638:	d048      	beq.n	56cc <uarte_nrfx_configure+0x130>
    563a:	d813      	bhi.n	5664 <uarte_nrfx_configure+0xc8>
    563c:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    5640:	d047      	beq.n	56d2 <uarte_nrfx_configure+0x136>
    5642:	d809      	bhi.n	5658 <uarte_nrfx_configure+0xbc>
    5644:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    5648:	42bb      	cmp	r3, r7
    564a:	d044      	beq.n	56d6 <uarte_nrfx_configure+0x13a>
    564c:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    5650:	d1d0      	bne.n	55f4 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    5652:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    5656:	e017      	b.n	5688 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    5658:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    565c:	d1ca      	bne.n	55f4 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    565e:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    5662:	e011      	b.n	5688 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    5664:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    5668:	d038      	beq.n	56dc <uarte_nrfx_configure+0x140>
    566a:	d808      	bhi.n	567e <uarte_nrfx_configure+0xe2>
    566c:	4f20      	ldr	r7, [pc, #128]	; (56f0 <uarte_nrfx_configure+0x154>)
    566e:	42bb      	cmp	r3, r7
    5670:	d037      	beq.n	56e2 <uarte_nrfx_configure+0x146>
    5672:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    5676:	d1bd      	bne.n	55f4 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    5678:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    567c:	e004      	b.n	5688 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    567e:	4f1d      	ldr	r7, [pc, #116]	; (56f4 <uarte_nrfx_configure+0x158>)
    5680:	42bb      	cmp	r3, r7
    5682:	d1b7      	bne.n	55f4 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    5684:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    5688:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    568c:	6903      	ldr	r3, [r0, #16]
    568e:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    5690:	4334      	orrs	r4, r6
    5692:	4322      	orrs	r2, r4
    5694:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    5696:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    569a:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    569e:	2000      	movs	r0, #0
}
    56a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    56a2:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    56a6:	e7ef      	b.n	5688 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    56a8:	4b13      	ldr	r3, [pc, #76]	; (56f8 <uarte_nrfx_configure+0x15c>)
    56aa:	e7ed      	b.n	5688 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    56ac:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    56b0:	e7ea      	b.n	5688 <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00014000;
    56b2:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    56b6:	e7e7      	b.n	5688 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    56b8:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    56bc:	e7e4      	b.n	5688 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    56be:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    56c2:	e7e1      	b.n	5688 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    56c4:	4b0d      	ldr	r3, [pc, #52]	; (56fc <uarte_nrfx_configure+0x160>)
    56c6:	e7df      	b.n	5688 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    56c8:	4b0d      	ldr	r3, [pc, #52]	; (5700 <uarte_nrfx_configure+0x164>)
    56ca:	e7dd      	b.n	5688 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    56cc:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    56d0:	e7da      	b.n	5688 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    56d2:	4b0c      	ldr	r3, [pc, #48]	; (5704 <uarte_nrfx_configure+0x168>)
    56d4:	e7d8      	b.n	5688 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    56d6:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    56da:	e7d5      	b.n	5688 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    56dc:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    56e0:	e7d2      	b.n	5688 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    56e2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    56e6:	e7cf      	b.n	5688 <uarte_nrfx_configure+0xec>
    56e8:	0013b000 	.word	0x0013b000
    56ec:	004ea000 	.word	0x004ea000
    56f0:	0003d090 	.word	0x0003d090
    56f4:	000f4240 	.word	0x000f4240
    56f8:	00275000 	.word	0x00275000
    56fc:	0075c000 	.word	0x0075c000
    5700:	003af000 	.word	0x003af000
    5704:	013a9000 	.word	0x013a9000

00005708 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    5708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    570a:	6906      	ldr	r6, [r0, #16]
{
    570c:	4605      	mov	r5, r0
    570e:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    5710:	f007 fcb3 	bl	d07a <k_is_in_isr>
    5714:	b910      	cbnz	r0, 571c <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    5716:	4b20      	ldr	r3, [pc, #128]	; (5798 <uarte_nrfx_poll_out+0x90>)
	int key;

	if (isr_mode) {
    5718:	781b      	ldrb	r3, [r3, #0]
    571a:	b983      	cbnz	r3, 573e <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    571c:	f04f 0320 	mov.w	r3, #32
    5720:	f3ef 8411 	mrs	r4, BASEPRI
    5724:	f383 8811 	msr	BASEPRI, r3
    5728:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    572c:	4628      	mov	r0, r5
    572e:	f005 fc89 	bl	b044 <is_tx_ready>
    5732:	bb28      	cbnz	r0, 5780 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    5734:	f384 8811 	msr	BASEPRI, r4
    5738:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    573c:	e7ee      	b.n	571c <uarte_nrfx_poll_out+0x14>
{
    573e:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    5740:	4628      	mov	r0, r5
    5742:	f005 fc7f 	bl	b044 <is_tx_ready>
    5746:	b970      	cbnz	r0, 5766 <uarte_nrfx_poll_out+0x5e>
    5748:	2001      	movs	r0, #1
    574a:	f005 fe40 	bl	b3ce <nrfx_busy_wait>
    574e:	3c01      	subs	r4, #1
    5750:	d1f6      	bne.n	5740 <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
    5752:	2100      	movs	r1, #0
    5754:	2021      	movs	r0, #33	; 0x21
    5756:	f003 fa35 	bl	8bc4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    575a:	e7f0      	b.n	573e <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    575c:	f384 8811 	msr	BASEPRI, r4
    5760:	f3bf 8f6f 	isb	sy
}
    5764:	e7f5      	b.n	5752 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    5766:	f04f 0320 	mov.w	r3, #32
    576a:	f3ef 8411 	mrs	r4, BASEPRI
    576e:	f383 8811 	msr	BASEPRI, r3
    5772:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    5776:	4628      	mov	r0, r5
    5778:	f005 fc64 	bl	b044 <is_tx_ready>
    577c:	2800      	cmp	r0, #0
    577e:	d0ed      	beq.n	575c <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    5780:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
    5782:	2201      	movs	r2, #1
	data->char_out = c;
    5784:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    5788:	4628      	mov	r0, r5
    578a:	f005 fcee 	bl	b16a <tx_start>
	__asm__ volatile(
    578e:	f384 8811 	msr	BASEPRI, r4
    5792:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    5796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5798:	2000516b 	.word	0x2000516b

0000579c <nrf_gpio_cfg_output>:
    *p_pin = pin_number & 0x1F;
    579c:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    57a0:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    57a2:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
    57a4:	4b04      	ldr	r3, [pc, #16]	; (57b8 <nrf_gpio_cfg_output+0x1c>)
    reg->PIN_CNF[pin_number] = cnf;
    57a6:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
    57aa:	bf18      	it	ne
    57ac:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    57b0:	2103      	movs	r1, #3
    57b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    57b6:	4770      	bx	lr
    57b8:	50000300 	.word	0x50000300

000057bc <nrf_gpio_pin_set>:
    *p_pin = pin_number & 0x1F;
    57bc:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    57c0:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    57c2:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
    57c4:	4b04      	ldr	r3, [pc, #16]	; (57d8 <nrf_gpio_pin_set+0x1c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    57c6:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
    57ca:	bf18      	it	ne
    57cc:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    57d0:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    57d2:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
    57d6:	4770      	bx	lr
    57d8:	50000300 	.word	0x50000300

000057dc <uarte_instance_init.isra.0>:
	return config->uarte_regs;
    57dc:	6843      	ldr	r3, [r0, #4]
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    57de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
    57e2:	681c      	ldr	r4, [r3, #0]
			       const struct uarte_init_config *config,
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
    57e4:	6907      	ldr	r7, [r0, #16]
static int uarte_instance_init(const struct device *dev,
    57e6:	460d      	mov	r5, r1
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    57e8:	2300      	movs	r3, #0
    57ea:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    57ee:	4606      	mov	r6, r0

	nrf_uarte_disable(uarte);

	data->dev = dev;
    57f0:	6038      	str	r0, [r7, #0]
        nrf_gpio_pin_set(pin_number);
    57f2:	6808      	ldr	r0, [r1, #0]
    57f4:	f7ff ffe2 	bl	57bc <nrf_gpio_pin_set>

	nrf_gpio_pin_write(config->pseltxd, 1);
	nrf_gpio_cfg_output(config->pseltxd);
    57f8:	6828      	ldr	r0, [r5, #0]
    57fa:	f7ff ffcf 	bl	579c <nrf_gpio_cfg_output>

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    57fe:	686a      	ldr	r2, [r5, #4]
    5800:	1c51      	adds	r1, r2, #1
    5802:	d00c      	beq.n	581e <uarte_instance_init.isra.0+0x42>
    return pin_number >> 5;
    5804:	0951      	lsrs	r1, r2, #5
        case 1: return NRF_P1;
    5806:	2901      	cmp	r1, #1
    *p_pin = pin_number & 0x1F;
    5808:	f002 031f 	and.w	r3, r2, #31
        case 1: return NRF_P1;
    580c:	4940      	ldr	r1, [pc, #256]	; (5910 <uarte_instance_init.isra.0+0x134>)
    reg->PIN_CNF[pin_number] = cnf;
    580e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    5812:	bf18      	it	ne
    5814:	f04f 41a0 	movne.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    5818:	200c      	movs	r0, #12
    581a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_PULLUP);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);
    581e:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
    5820:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
    5824:	68ab      	ldr	r3, [r5, #8]
    p_reg->PSEL.RXD = pselrxd;
    5826:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    582a:	1c5a      	adds	r2, r3, #1
    582c:	d00c      	beq.n	5848 <uarte_instance_init.isra.0+0x6c>
    *p_pin = pin_number & 0x1F;
    582e:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    5832:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
    5834:	2b01      	cmp	r3, #1
    reg->PIN_CNF[pin_number] = cnf;
    5836:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
    583a:	4b35      	ldr	r3, [pc, #212]	; (5910 <uarte_instance_init.isra.0+0x134>)
    583c:	bf18      	it	ne
    583e:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    5842:	210c      	movs	r1, #12
    5844:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_PULLUP);
	}

	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    5848:	68e8      	ldr	r0, [r5, #12]
    584a:	1c43      	adds	r3, r0, #1
    584c:	d004      	beq.n	5858 <uarte_instance_init.isra.0+0x7c>
        nrf_gpio_pin_set(pin_number);
    584e:	f7ff ffb5 	bl	57bc <nrf_gpio_pin_set>
		nrf_gpio_pin_write(config->pselrts, 1);
		nrf_gpio_cfg_output(config->pselrts);
    5852:	68e8      	ldr	r0, [r5, #12]
    5854:	f7ff ffa2 	bl	579c <nrf_gpio_cfg_output>
	}

	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);
    5858:	e9d5 3202 	ldrd	r3, r2, [r5, #8]

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    585c:	6931      	ldr	r1, [r6, #16]
    p_reg->PSEL.RTS = pselrts;
    585e:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
    5862:	3104      	adds	r1, #4
    p_reg->PSEL.CTS = pselcts;
    5864:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    5868:	4630      	mov	r0, r6
    586a:	f7ff fe97 	bl	559c <uarte_nrfx_configure>
	if (err) {
    586e:	4680      	mov	r8, r0
    5870:	2800      	cmp	r0, #0
    5872:	d147      	bne.n	5904 <uarte_instance_init.isra.0+0x128>
#ifdef CONFIG_PM_DEVICE
	data->pm_state = PM_DEVICE_STATE_ACTIVE;
#endif

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    5874:	6873      	ldr	r3, [r6, #4]
    5876:	685b      	ldr	r3, [r3, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    5878:	0719      	lsls	r1, r3, #28
    587a:	d519      	bpl.n	58b0 <uarte_instance_init.isra.0+0xd4>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    587c:	f107 0016 	add.w	r0, r7, #22
    5880:	f000 fc40 	bl	6104 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    5884:	4b23      	ldr	r3, [pc, #140]	; (5914 <uarte_instance_init.isra.0+0x138>)
    5886:	4298      	cmp	r0, r3
    5888:	d13f      	bne.n	590a <uarte_instance_init.isra.0+0x12e>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    588a:	7db8      	ldrb	r0, [r7, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    588c:	00c3      	lsls	r3, r0, #3
    588e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5892:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    5896:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    589a:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    589e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    58a2:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    58a6:	4a1c      	ldr	r2, [pc, #112]	; (5918 <uarte_instance_init.isra.0+0x13c>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    58a8:	2301      	movs	r3, #1
    58aa:	4083      	lsls	r3, r0
    58ac:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    58b0:	2308      	movs	r3, #8
    58b2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    58b6:	686b      	ldr	r3, [r5, #4]
    58b8:	3301      	adds	r3, #1
    58ba:	d00c      	beq.n	58d6 <uarte_instance_init.isra.0+0xfa>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    58bc:	2300      	movs	r3, #0
    58be:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    58c2:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    58c6:	f107 0315 	add.w	r3, r7, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    58ca:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    58ce:	2301      	movs	r3, #1
    58d0:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    58d4:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    58d6:	6873      	ldr	r3, [r6, #4]
    58d8:	685b      	ldr	r3, [r3, #4]
    58da:	071a      	lsls	r2, r3, #28
    p_reg->INTENSET = mask;
    58dc:	bf5c      	itt	pl
    58de:	f44f 7280 	movpl.w	r2, #256	; 0x100
    58e2:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    58e6:	06db      	lsls	r3, r3, #27
    58e8:	bf44      	itt	mi
    58ea:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    58ee:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    58f2:	3714      	adds	r7, #20
    p_reg->TXD.MAXCNT = length;
    58f4:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    58f6:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    58fa:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    58fe:	2301      	movs	r3, #1
    5900:	60a3      	str	r3, [r4, #8]
    5902:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    5904:	4640      	mov	r0, r8
    5906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EIO;
    590a:	f06f 0804 	mvn.w	r8, #4
    590e:	e7f9      	b.n	5904 <uarte_instance_init.isra.0+0x128>
    5910:	50000300 	.word	0x50000300
    5914:	0bad0000 	.word	0x0bad0000
    5918:	4001f000 	.word	0x4001f000

0000591c <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    591c:	b530      	push	{r4, r5, lr}
    591e:	4b0a      	ldr	r3, [pc, #40]	; (5948 <uarte_0_init+0x2c>)
    5920:	4605      	mov	r5, r0
    5922:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    5924:	b085      	sub	sp, #20
    5926:	466c      	mov	r4, sp
    5928:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    592c:	2200      	movs	r2, #0
    592e:	2101      	movs	r1, #1
    5930:	2002      	movs	r0, #2
    5932:	f7fe fff9 	bl	4928 <z_arm_irq_priority_set>
    5936:	2002      	movs	r0, #2
    5938:	f7fe ffc4 	bl	48c4 <arch_irq_enable>
    593c:	4621      	mov	r1, r4
    593e:	4628      	mov	r0, r5
    5940:	f7ff ff4c 	bl	57dc <uarte_instance_init.isra.0>
    5944:	b005      	add	sp, #20
    5946:	bd30      	pop	{r4, r5, pc}
    5948:	0000d810 	.word	0x0000d810

0000594c <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    594c:	b530      	push	{r4, r5, lr}
    594e:	4b0a      	ldr	r3, [pc, #40]	; (5978 <uarte_1_init+0x2c>)
    5950:	4605      	mov	r5, r0
    5952:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    5954:	b085      	sub	sp, #20
    5956:	466c      	mov	r4, sp
    5958:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    595c:	2200      	movs	r2, #0
    595e:	2101      	movs	r1, #1
    5960:	2028      	movs	r0, #40	; 0x28
    5962:	f7fe ffe1 	bl	4928 <z_arm_irq_priority_set>
    5966:	2028      	movs	r0, #40	; 0x28
    5968:	f7fe ffac 	bl	48c4 <arch_irq_enable>
    596c:	4621      	mov	r1, r4
    596e:	4628      	mov	r0, r5
    5970:	f7ff ff34 	bl	57dc <uarte_instance_init.isra.0>
    5974:	b005      	add	sp, #20
    5976:	bd30      	pop	{r4, r5, pc}
    5978:	0000d820 	.word	0x0000d820

0000597c <fprotect_set_permission>:
	return 0;
}

static int fprotect_set_permission(uint32_t start, size_t length,
				   size_t permission)
{
    597c:	b5f0      	push	{r4, r5, r6, r7, lr}
    597e:	4c28      	ldr	r4, [pc, #160]	; (5a20 <fprotect_set_permission+0xa4>)
}

NRF_STATIC_INLINE nrf_acl_perm_t nrf_acl_region_perm_get(NRF_ACL_Type const * p_reg,
                                                         uint32_t             region_id)
{
    return (nrf_acl_perm_t)p_reg->ACL[region_id].PERM;
    5980:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 5a24 <fprotect_set_permission+0xa8>
    5984:	6823      	ldr	r3, [r4, #0]
	while (nrf_acl_region_perm_get(NRF_ACL, idx) != 0) {
    5986:	2600      	movs	r6, #0
    5988:	eb0c 1703 	add.w	r7, ip, r3, lsl #4
    598c:	011d      	lsls	r5, r3, #4
    598e:	f8d7 7808 	ldr.w	r7, [r7, #2056]	; 0x808
    5992:	f017 0fff 	tst.w	r7, #255	; 0xff
    5996:	d10c      	bne.n	59b2 <fprotect_set_permission+0x36>
    5998:	b106      	cbz	r6, 599c <fprotect_set_permission+0x20>
    599a:	6023      	str	r3, [r4, #0]
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
    599c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    59a0:	691e      	ldr	r6, [r3, #16]

	if (result != 0) {
		return result;
	}

	if (start % nrf_ficr_codepagesize_get(NRF_FICR) != 0 ||
    59a2:	fbb0 f4f6 	udiv	r4, r0, r6
    59a6:	fb06 0414 	mls	r4, r6, r4, r0
    59aa:	b15c      	cbz	r4, 59c4 <fprotect_set_permission+0x48>
	    length % nrf_ficr_codepagesize_get(NRF_FICR) != 0 ||
	    length > NRF_ACL_REGION_SIZE_MAX || length == 0) {
		return -EINVAL;
    59ac:	f06f 0015 	mvn.w	r0, #21
    59b0:	e007      	b.n	59c2 <fprotect_set_permission+0x46>
		idx++;
    59b2:	3301      	adds	r3, #1
		if (idx >= ACL_REGIONS_COUNT) {
    59b4:	2b07      	cmp	r3, #7
    59b6:	f04f 0601 	mov.w	r6, #1
    59ba:	d9e5      	bls.n	5988 <fprotect_set_permission+0xc>
    59bc:	6023      	str	r3, [r4, #0]
			return -ENOSPC;
    59be:	f06f 001b 	mvn.w	r0, #27
		|| (nrf_acl_region_perm_get(NRF_ACL, region_idx) != permission)) {
		return -EFAULT;
	}

	return 0;
}
    59c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    59c4:	691e      	ldr	r6, [r3, #16]
	    length % nrf_ficr_codepagesize_get(NRF_FICR) != 0 ||
    59c6:	fbb1 f4f6 	udiv	r4, r1, r6
    59ca:	fb06 1414 	mls	r4, r6, r4, r1
	if (start % nrf_ficr_codepagesize_get(NRF_FICR) != 0 ||
    59ce:	2c00      	cmp	r4, #0
    59d0:	d1ec      	bne.n	59ac <fprotect_set_permission+0x30>
    59d2:	691c      	ldr	r4, [r3, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
    59d4:	695b      	ldr	r3, [r3, #20]
	    length > NRF_ACL_REGION_SIZE_MAX || length == 0) {
    59d6:	4363      	muls	r3, r4
	    length % nrf_ficr_codepagesize_get(NRF_FICR) != 0 ||
    59d8:	428b      	cmp	r3, r1
    59da:	d3e7      	bcc.n	59ac <fprotect_set_permission+0x30>
	    length > NRF_ACL_REGION_SIZE_MAX || length == 0) {
    59dc:	2900      	cmp	r1, #0
    59de:	d0e5      	beq.n	59ac <fprotect_set_permission+0x30>
    p_reg->ACL[region_id].ADDR = address;
    59e0:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
    59e4:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
    p_reg->ACL[region_id].PERM = perm;
    59e8:	461c      	mov	r4, r3
    p_reg->ACL[region_id].ADDR = address;
    59ea:	f8c3 0800 	str.w	r0, [r3, #2048]	; 0x800
    p_reg->ACL[region_id].SIZE = size;
    59ee:	f8c3 1804 	str.w	r1, [r3, #2052]	; 0x804
    p_reg->ACL[region_id].PERM = perm;
    59f2:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
    return (uint32_t)p_reg->ACL[region_id].ADDR;
    59f6:	f8d3 5800 	ldr.w	r5, [r3, #2048]	; 0x800
	if ((nrf_acl_region_address_get(NRF_ACL, region_idx) != start)
    59fa:	42a8      	cmp	r0, r5
    59fc:	d10c      	bne.n	5a18 <fprotect_set_permission+0x9c>
    return (size_t)p_reg->ACL[region_id].SIZE;
    59fe:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
		|| (nrf_acl_region_size_get(NRF_ACL, region_idx) != length)
    5a02:	4299      	cmp	r1, r3
    5a04:	d108      	bne.n	5a18 <fprotect_set_permission+0x9c>
    return (nrf_acl_perm_t)p_reg->ACL[region_id].PERM;
    5a06:	f8d4 3808 	ldr.w	r3, [r4, #2056]	; 0x808
		|| (nrf_acl_region_perm_get(NRF_ACL, region_idx) != permission)) {
    5a0a:	b2db      	uxtb	r3, r3
		return -EFAULT;
    5a0c:	4293      	cmp	r3, r2
    5a0e:	bf0c      	ite	eq
    5a10:	2000      	moveq	r0, #0
    5a12:	f06f 000d 	mvnne.w	r0, #13
    5a16:	e7d4      	b.n	59c2 <fprotect_set_permission+0x46>
    5a18:	f06f 000d 	mvn.w	r0, #13
    5a1c:	e7d1      	b.n	59c2 <fprotect_set_permission+0x46>
    5a1e:	bf00      	nop
    5a20:	20002458 	.word	0x20002458
    5a24:	4001e000 	.word	0x4001e000

00005a28 <boot_write_magic>:
}

static inline uint32_t
boot_magic_off(const struct flash_area *fap)
{
    return fap->fa_size - BOOT_MAGIC_SZ;
    5a28:	6881      	ldr	r1, [r0, #8]
    off = boot_magic_off(fap);

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
    5a2a:	4a05      	ldr	r2, [pc, #20]	; (5a40 <boot_write_magic+0x18>)
{
    5a2c:	b508      	push	{r3, lr}
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
    5a2e:	3910      	subs	r1, #16
    5a30:	2310      	movs	r3, #16
    5a32:	f004 fe28 	bl	a686 <flash_area_write>
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
    5a36:	3800      	subs	r0, #0
    5a38:	bf18      	it	ne
    5a3a:	2001      	movne	r0, #1
    5a3c:	bd08      	pop	{r3, pc}
    5a3e:	bf00      	nop
    5a40:	0000da74 	.word	0x0000da74

00005a44 <boot_read_swap_state>:
{
    5a44:	b530      	push	{r4, r5, lr}
    5a46:	460c      	mov	r4, r1
    return fap->fa_size - BOOT_MAGIC_SZ;
    5a48:	6881      	ldr	r1, [r0, #8]
{
    5a4a:	b087      	sub	sp, #28
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    5a4c:	2310      	movs	r3, #16
    5a4e:	aa02      	add	r2, sp, #8
    5a50:	3910      	subs	r1, #16
{
    5a52:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    5a54:	f004 fdfa 	bl	a64c <flash_area_read>
    if (rc < 0) {
    5a58:	2800      	cmp	r0, #0
    5a5a:	db11      	blt.n	5a80 <boot_read_swap_state+0x3c>
    if (buffer == NULL || len == 0) {
    5a5c:	2210      	movs	r2, #16
    5a5e:	a902      	add	r1, sp, #8
    5a60:	4628      	mov	r0, r5
    5a62:	f005 fc0b 	bl	b27c <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
    5a66:	b168      	cbz	r0, 5a84 <boot_read_swap_state+0x40>
        state->magic = BOOT_MAGIC_UNSET;
    5a68:	2303      	movs	r3, #3
        state->magic = boot_magic_decode(magic);
    5a6a:	7023      	strb	r3, [r4, #0]
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    5a6c:	68a9      	ldr	r1, [r5, #8]
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    5a6e:	2301      	movs	r3, #1
    5a70:	f10d 0207 	add.w	r2, sp, #7
    5a74:	3928      	subs	r1, #40	; 0x28
    5a76:	4628      	mov	r0, r5
    5a78:	f004 fde8 	bl	a64c <flash_area_read>
    if (rc < 0) {
    5a7c:	2800      	cmp	r0, #0
    5a7e:	da0b      	bge.n	5a98 <boot_read_swap_state+0x54>
        return BOOT_EFLASH;
    5a80:	2001      	movs	r0, #1
    5a82:	e02a      	b.n	5ada <boot_read_swap_state+0x96>
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    5a84:	4916      	ldr	r1, [pc, #88]	; (5ae0 <boot_read_swap_state+0x9c>)
    5a86:	2210      	movs	r2, #16
    5a88:	a802      	add	r0, sp, #8
    5a8a:	f005 f8c7 	bl	ac1c <memcmp>
    5a8e:	2800      	cmp	r0, #0
        return BOOT_MAGIC_GOOD;
    5a90:	bf14      	ite	ne
    5a92:	2302      	movne	r3, #2
    5a94:	2301      	moveq	r3, #1
    5a96:	e7e8      	b.n	5a6a <boot_read_swap_state+0x26>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    5a98:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5a9c:	f003 020f 	and.w	r2, r3, #15
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    5aa0:	091b      	lsrs	r3, r3, #4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    5aa2:	7062      	strb	r2, [r4, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    5aa4:	7123      	strb	r3, [r4, #4]
    if (buffer == NULL || len == 0) {
    5aa6:	2201      	movs	r2, #1
    5aa8:	f10d 0107 	add.w	r1, sp, #7
    5aac:	4628      	mov	r0, r5
    5aae:	f005 fbe5 	bl	b27c <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    5ab2:	b910      	cbnz	r0, 5aba <boot_read_swap_state+0x76>
    5ab4:	7863      	ldrb	r3, [r4, #1]
    5ab6:	2b04      	cmp	r3, #4
    5ab8:	d903      	bls.n	5ac2 <boot_read_swap_state+0x7e>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    5aba:	2301      	movs	r3, #1
    5abc:	7063      	strb	r3, [r4, #1]
        state->image_num = 0;
    5abe:	2300      	movs	r3, #0
    5ac0:	7123      	strb	r3, [r4, #4]
    return boot_image_ok_off(fap) - BOOT_MAX_ALIGN;
    5ac2:	68aa      	ldr	r2, [r5, #8]
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
    5ac4:	1ca1      	adds	r1, r4, #2
    5ac6:	3a20      	subs	r2, #32
    5ac8:	4628      	mov	r0, r5
    5aca:	f005 fbff 	bl	b2cc <boot_read_flag>
    if (rc) {
    5ace:	2800      	cmp	r0, #0
    5ad0:	d1d6      	bne.n	5a80 <boot_read_swap_state+0x3c>
    return boot_read_image_ok(fap, &state->image_ok);
    5ad2:	1ce1      	adds	r1, r4, #3
    5ad4:	4628      	mov	r0, r5
    5ad6:	f005 fc52 	bl	b37e <boot_read_image_ok>
}
    5ada:	b007      	add	sp, #28
    5adc:	bd30      	pop	{r4, r5, pc}
    5ade:	bf00      	nop
    5ae0:	0000da74 	.word	0x0000da74

00005ae4 <boot_swap_type_multi>:
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
}

int
boot_swap_type_multi(int image_index)
{
    5ae4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5ae8:	b085      	sub	sp, #20
    struct boot_swap_state primary_slot;
    struct boot_swap_state secondary_slot;
    int rc;
    size_t i;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    5aea:	4669      	mov	r1, sp
    5aec:	2002      	movs	r0, #2
    5aee:	f005 fc4a 	bl	b386 <boot_read_swap_state_by_id>
                                    &primary_slot);
    if (rc) {
    5af2:	bb58      	cbnz	r0, 5b4c <boot_swap_type_multi+0x68>
        return BOOT_SWAP_TYPE_PANIC;
    }

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    5af4:	a902      	add	r1, sp, #8
    5af6:	2005      	movs	r0, #5
    5af8:	f005 fc45 	bl	b386 <boot_read_swap_state_by_id>
                                    &secondary_slot);
    if (rc) {
    5afc:	4602      	mov	r2, r0
    5afe:	bb28      	cbnz	r0, 5b4c <boot_swap_type_multi+0x68>
    }

    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
        table = boot_swap_tables + i;

        if (boot_magic_compatible_check(table->magic_primary_slot,
    5b00:	f89d 5000 	ldrb.w	r5, [sp]
                                        primary_slot.magic) &&
            boot_magic_compatible_check(table->magic_secondary_slot,
    5b04:	f89d 6008 	ldrb.w	r6, [sp, #8]
                                        secondary_slot.magic) &&
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    5b08:	f89d 7003 	ldrb.w	r7, [sp, #3]
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    5b0c:	f89d 800b 	ldrb.w	r8, [sp, #11]
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
                table->copy_done_primary_slot == primary_slot.copy_done)) {
    5b10:	f89d 9002 	ldrb.w	r9, [sp, #2]
    5b14:	4c14      	ldr	r4, [pc, #80]	; (5b68 <boot_swap_type_multi+0x84>)
        if (boot_magic_compatible_check(table->magic_primary_slot,
    5b16:	7820      	ldrb	r0, [r4, #0]
    5b18:	4629      	mov	r1, r5
    5b1a:	f005 fbc3 	bl	b2a4 <boot_magic_compatible_check>
    5b1e:	b1c8      	cbz	r0, 5b54 <boot_swap_type_multi+0x70>
            boot_magic_compatible_check(table->magic_secondary_slot,
    5b20:	7860      	ldrb	r0, [r4, #1]
    5b22:	4631      	mov	r1, r6
    5b24:	f005 fbbe 	bl	b2a4 <boot_magic_compatible_check>
                                        primary_slot.magic) &&
    5b28:	b1a0      	cbz	r0, 5b54 <boot_swap_type_multi+0x70>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    5b2a:	78a3      	ldrb	r3, [r4, #2]
                                        secondary_slot.magic) &&
    5b2c:	2b04      	cmp	r3, #4
    5b2e:	d001      	beq.n	5b34 <boot_swap_type_multi+0x50>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    5b30:	42bb      	cmp	r3, r7
    5b32:	d10f      	bne.n	5b54 <boot_swap_type_multi+0x70>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    5b34:	78e3      	ldrb	r3, [r4, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    5b36:	2b04      	cmp	r3, #4
    5b38:	d001      	beq.n	5b3e <boot_swap_type_multi+0x5a>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    5b3a:	4543      	cmp	r3, r8
    5b3c:	d10a      	bne.n	5b54 <boot_swap_type_multi+0x70>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    5b3e:	7923      	ldrb	r3, [r4, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    5b40:	2b04      	cmp	r3, #4
    5b42:	d105      	bne.n	5b50 <boot_swap_type_multi+0x6c>
            BOOT_LOG_INF("Swap type: %s",
    5b44:	7960      	ldrb	r0, [r4, #5]
                         table->swap_type == BOOT_SWAP_TYPE_TEST   ? "test"   :
                         table->swap_type == BOOT_SWAP_TYPE_PERM   ? "perm"   :
                         table->swap_type == BOOT_SWAP_TYPE_REVERT ? "revert" :
                         "BUG; can't happen");
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    5b46:	1e83      	subs	r3, r0, #2
    5b48:	2b02      	cmp	r3, #2
    5b4a:	d909      	bls.n	5b60 <boot_swap_type_multi+0x7c>
        return BOOT_SWAP_TYPE_PANIC;
    5b4c:	20ff      	movs	r0, #255	; 0xff
    5b4e:	e007      	b.n	5b60 <boot_swap_type_multi+0x7c>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    5b50:	454b      	cmp	r3, r9
    5b52:	d0f7      	beq.n	5b44 <boot_swap_type_multi+0x60>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    5b54:	3201      	adds	r2, #1
    5b56:	2a03      	cmp	r2, #3
    5b58:	f104 0406 	add.w	r4, r4, #6
    5b5c:	d1db      	bne.n	5b16 <boot_swap_type_multi+0x32>
            return table->swap_type;
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
    5b5e:	2001      	movs	r0, #1
}
    5b60:	b005      	add	sp, #20
    5b62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5b66:	bf00      	nop
    5b68:	0000dfb7 	.word	0x0000dfb7

00005b6c <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5b6c:	4b03      	ldr	r3, [pc, #12]	; (5b7c <nrf52_errata_136+0x10>)
            if (var1 == 0x08)
    5b6e:	6818      	ldr	r0, [r3, #0]
}
    5b70:	f1a0 0308 	sub.w	r3, r0, #8
    5b74:	4258      	negs	r0, r3
    5b76:	4158      	adcs	r0, r3
    5b78:	4770      	bx	lr
    5b7a:	bf00      	nop
    5b7c:	10000130 	.word	0x10000130

00005b80 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5b80:	4b06      	ldr	r3, [pc, #24]	; (5b9c <nrf52_errata_103+0x1c>)
            if (var1 == 0x08)
    5b82:	681b      	ldr	r3, [r3, #0]
    5b84:	2b08      	cmp	r3, #8
    5b86:	d106      	bne.n	5b96 <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5b88:	4b05      	ldr	r3, [pc, #20]	; (5ba0 <nrf52_errata_103+0x20>)
    5b8a:	681b      	ldr	r3, [r3, #0]
                switch(var2)
    5b8c:	2b05      	cmp	r3, #5
    5b8e:	d802      	bhi.n	5b96 <nrf52_errata_103+0x16>
    5b90:	4a04      	ldr	r2, [pc, #16]	; (5ba4 <nrf52_errata_103+0x24>)
    5b92:	5cd0      	ldrb	r0, [r2, r3]
    5b94:	4770      	bx	lr
        return false;
    5b96:	2000      	movs	r0, #0
}
    5b98:	4770      	bx	lr
    5b9a:	bf00      	nop
    5b9c:	10000130 	.word	0x10000130
    5ba0:	10000134 	.word	0x10000134
    5ba4:	0000dfcf 	.word	0x0000dfcf

00005ba8 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    5ba8:	b508      	push	{r3, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    5baa:	f7ff ffdf 	bl	5b6c <nrf52_errata_136>
    5bae:	b140      	cbz	r0, 5bc2 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    5bb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5bb4:	2200      	movs	r2, #0
    5bb6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    5bba:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    5bbe:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    5bc2:	f7ff ffd3 	bl	5b6c <nrf52_errata_136>
    5bc6:	2800      	cmp	r0, #0
    5bc8:	d046      	beq.n	5c58 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    5bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5bce:	4b45      	ldr	r3, [pc, #276]	; (5ce4 <SystemInit+0x13c>)
    5bd0:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    5bd4:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    5bd8:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    5bdc:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    5be0:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    5be4:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    5be8:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    5bec:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    5bf0:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    5bf4:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    5bf8:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    5bfc:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    5c00:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    5c04:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    5c08:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    5c0c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    5c10:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    5c14:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    5c18:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    5c1c:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    5c20:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    5c24:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    5c28:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    5c2c:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    5c30:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    5c34:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    5c38:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    5c3c:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    5c40:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    5c44:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    5c48:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    5c4c:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    5c50:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    5c54:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    5c58:	f7ff ff92 	bl	5b80 <nrf52_errata_103>
    5c5c:	b110      	cbz	r0, 5c64 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    5c5e:	4b22      	ldr	r3, [pc, #136]	; (5ce8 <SystemInit+0x140>)
    5c60:	4a22      	ldr	r2, [pc, #136]	; (5cec <SystemInit+0x144>)
    5c62:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    5c64:	f7ff ff8c 	bl	5b80 <nrf52_errata_103>
    5c68:	b118      	cbz	r0, 5c72 <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    5c6a:	4b21      	ldr	r3, [pc, #132]	; (5cf0 <SystemInit+0x148>)
    5c6c:	22fb      	movs	r2, #251	; 0xfb
    5c6e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    5c72:	f7ff ff85 	bl	5b80 <nrf52_errata_103>
    5c76:	b148      	cbz	r0, 5c8c <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    5c78:	491e      	ldr	r1, [pc, #120]	; (5cf4 <SystemInit+0x14c>)
    5c7a:	4b1f      	ldr	r3, [pc, #124]	; (5cf8 <SystemInit+0x150>)
    5c7c:	680a      	ldr	r2, [r1, #0]
    5c7e:	681b      	ldr	r3, [r3, #0]
    5c80:	f022 020f 	bic.w	r2, r2, #15
    5c84:	f003 030f 	and.w	r3, r3, #15
    5c88:	4313      	orrs	r3, r2
    5c8a:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    5c8c:	f7ff ff78 	bl	5b80 <nrf52_errata_103>
    5c90:	b118      	cbz	r0, 5c9a <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    5c92:	4b1a      	ldr	r3, [pc, #104]	; (5cfc <SystemInit+0x154>)
    5c94:	f44f 7200 	mov.w	r2, #512	; 0x200
    5c98:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    5c9a:	f7ff ff67 	bl	5b6c <nrf52_errata_136>
    5c9e:	b148      	cbz	r0, 5cb4 <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    5ca0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5ca4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    5ca8:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    5caa:	bf44      	itt	mi
    5cac:	f06f 0201 	mvnmi.w	r2, #1
    5cb0:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5cb4:	4b12      	ldr	r3, [pc, #72]	; (5d00 <SystemInit+0x158>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    5cb6:	681b      	ldr	r3, [r3, #0]
    5cb8:	2b08      	cmp	r3, #8
    5cba:	d10e      	bne.n	5cda <SystemInit+0x132>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5cbc:	4b11      	ldr	r3, [pc, #68]	; (5d04 <SystemInit+0x15c>)
    5cbe:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
    5cc0:	2b05      	cmp	r3, #5
    5cc2:	d802      	bhi.n	5cca <SystemInit+0x122>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
    5cc4:	4a10      	ldr	r2, [pc, #64]	; (5d08 <SystemInit+0x160>)
    5cc6:	5cd3      	ldrb	r3, [r2, r3]
    5cc8:	b13b      	cbz	r3, 5cda <SystemInit+0x132>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    5cca:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    5cce:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    5cd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5cd6:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    5cda:	4b0c      	ldr	r3, [pc, #48]	; (5d0c <SystemInit+0x164>)
    5cdc:	4a0c      	ldr	r2, [pc, #48]	; (5d10 <SystemInit+0x168>)
    5cde:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    5ce0:	bd08      	pop	{r3, pc}
    5ce2:	bf00      	nop
    5ce4:	4000c000 	.word	0x4000c000
    5ce8:	4000568c 	.word	0x4000568c
    5cec:	00038148 	.word	0x00038148
    5cf0:	4000f000 	.word	0x4000f000
    5cf4:	40000ee4 	.word	0x40000ee4
    5cf8:	10000258 	.word	0x10000258
    5cfc:	40029640 	.word	0x40029640
    5d00:	10000130 	.word	0x10000130
    5d04:	10000134 	.word	0x10000134
    5d08:	0000dfc9 	.word	0x0000dfc9
    5d0c:	20000180 	.word	0x20000180
    5d10:	03d09000 	.word	0x03d09000

00005d14 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    5d14:	4b04      	ldr	r3, [pc, #16]	; (5d28 <nrfx_clock_init+0x14>)
    5d16:	791a      	ldrb	r2, [r3, #4]
    5d18:	b922      	cbnz	r2, 5d24 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    5d1a:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    5d1c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    5d1e:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    5d20:	4802      	ldr	r0, [pc, #8]	; (5d2c <nrfx_clock_init+0x18>)
    5d22:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    5d24:	4802      	ldr	r0, [pc, #8]	; (5d30 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    5d26:	4770      	bx	lr
    5d28:	2000245c 	.word	0x2000245c
    5d2c:	0bad0000 	.word	0x0bad0000
    5d30:	0bad000c 	.word	0x0bad000c

00005d34 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    5d34:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    5d36:	2000      	movs	r0, #0
    5d38:	f7fe fde8 	bl	490c <arch_irq_is_enabled>
    5d3c:	b908      	cbnz	r0, 5d42 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    5d3e:	f7fe fdc1 	bl	48c4 <arch_irq_enable>
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
    5d42:	4b02      	ldr	r3, [pc, #8]	; (5d4c <nrfx_clock_enable+0x18>)
    5d44:	2201      	movs	r2, #1
    5d46:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    5d48:	bd08      	pop	{r3, pc}
    5d4a:	bf00      	nop
    5d4c:	20005165 	.word	0x20005165

00005d50 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    5d50:	b110      	cbz	r0, 5d58 <nrfx_clock_start+0x8>
    5d52:	2801      	cmp	r0, #1
    5d54:	d020      	beq.n	5d98 <nrfx_clock_start+0x48>
    5d56:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5d58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5d5c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5d60:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    5d64:	f411 3f80 	tst.w	r1, #65536	; 0x10000
    5d68:	4619      	mov	r1, r3
    5d6a:	d011      	beq.n	5d90 <nrfx_clock_start+0x40>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    5d6c:	f002 0203 	and.w	r2, r2, #3
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    5d70:	2a01      	cmp	r2, #1
    5d72:	d10d      	bne.n	5d90 <nrfx_clock_start+0x40>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5d74:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5d78:	4b0c      	ldr	r3, [pc, #48]	; (5dac <nrfx_clock_start+0x5c>)
    5d7a:	2200      	movs	r2, #0
    5d7c:	601a      	str	r2, [r3, #0]
    5d7e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    5d80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5d84:	2202      	movs	r2, #2
    5d86:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5d8a:	2201      	movs	r2, #1
    5d8c:	609a      	str	r2, [r3, #8]
}
    5d8e:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
    5d90:	2300      	movs	r3, #0
    5d92:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
}
    5d96:	e7ef      	b.n	5d78 <nrfx_clock_start+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5d98:	4b05      	ldr	r3, [pc, #20]	; (5db0 <nrfx_clock_start+0x60>)
    5d9a:	2200      	movs	r2, #0
    5d9c:	601a      	str	r2, [r3, #0]
    5d9e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    5da0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5da4:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5da8:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    5daa:	4770      	bx	lr
    5dac:	40000104 	.word	0x40000104
    5db0:	40000100 	.word	0x40000100

00005db4 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    5db4:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    5db6:	b110      	cbz	r0, 5dbe <nrfx_clock_stop+0xa>
    5db8:	2801      	cmp	r0, #1
    5dba:	d018      	beq.n	5dee <nrfx_clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    5dbc:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    5dbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5dc2:	2202      	movs	r2, #2
    5dc4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5dc8:	4a18      	ldr	r2, [pc, #96]	; (5e2c <nrfx_clock_stop+0x78>)
    5dca:	6010      	str	r0, [r2, #0]
    5dcc:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5dce:	4a18      	ldr	r2, [pc, #96]	; (5e30 <nrfx_clock_stop+0x7c>)
    5dd0:	2101      	movs	r1, #1
    5dd2:	6011      	str	r1, [r2, #0]
    5dd4:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5dd8:	461c      	mov	r4, r3
    5dda:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    5dde:	03db      	lsls	r3, r3, #15
    5de0:	d5ec      	bpl.n	5dbc <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    5de2:	2001      	movs	r0, #1
    5de4:	f005 faf3 	bl	b3ce <nrfx_busy_wait>
    5de8:	3d01      	subs	r5, #1
    5dea:	d1f6      	bne.n	5dda <nrfx_clock_stop+0x26>
    5dec:	e7e6      	b.n	5dbc <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5dee:	4b11      	ldr	r3, [pc, #68]	; (5e34 <nrfx_clock_stop+0x80>)
    p_reg->INTENCLR = mask;
    5df0:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5df4:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    5df6:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5dfa:	601a      	str	r2, [r3, #0]
    5dfc:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5dfe:	4b0e      	ldr	r3, [pc, #56]	; (5e38 <nrfx_clock_stop+0x84>)
    5e00:	f242 7510 	movw	r5, #10000	; 0x2710
    5e04:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    5e06:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    5e0a:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
    5e0e:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    5e10:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    5e14:	d505      	bpl.n	5e22 <nrfx_clock_stop+0x6e>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    5e16:	b123      	cbz	r3, 5e22 <nrfx_clock_stop+0x6e>
    5e18:	2001      	movs	r0, #1
    5e1a:	f005 fad8 	bl	b3ce <nrfx_busy_wait>
    5e1e:	3d01      	subs	r5, #1
    5e20:	d1f1      	bne.n	5e06 <nrfx_clock_stop+0x52>
            m_clock_cb.hfclk_started = false;
    5e22:	4b06      	ldr	r3, [pc, #24]	; (5e3c <nrfx_clock_stop+0x88>)
    5e24:	2200      	movs	r2, #0
    5e26:	715a      	strb	r2, [r3, #5]
    5e28:	e7c8      	b.n	5dbc <nrfx_clock_stop+0x8>
    5e2a:	bf00      	nop
    5e2c:	40000104 	.word	0x40000104
    5e30:	4000000c 	.word	0x4000000c
    5e34:	40000100 	.word	0x40000100
    5e38:	40000004 	.word	0x40000004
    5e3c:	2000245c 	.word	0x2000245c

00005e40 <nrfx_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5e40:	4b16      	ldr	r3, [pc, #88]	; (5e9c <nrfx_clock_irq_handler+0x5c>)
    5e42:	681a      	ldr	r2, [r3, #0]
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    5e44:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    5e46:	b16a      	cbz	r2, 5e64 <nrfx_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5e48:	2200      	movs	r2, #0
    5e4a:	601a      	str	r2, [r3, #0]
    5e4c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    5e4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5e52:	2201      	movs	r2, #1
    5e54:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    5e58:	4b11      	ldr	r3, [pc, #68]	; (5ea0 <nrfx_clock_irq_handler+0x60>)
    5e5a:	7958      	ldrb	r0, [r3, #5]
    5e5c:	b910      	cbnz	r0, 5e64 <nrfx_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
    5e5e:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    5e60:	681b      	ldr	r3, [r3, #0]
    5e62:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5e64:	4b0f      	ldr	r3, [pc, #60]	; (5ea4 <nrfx_clock_irq_handler+0x64>)
    5e66:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    5e68:	b172      	cbz	r2, 5e88 <nrfx_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5e6a:	2200      	movs	r2, #0
    5e6c:	601a      	str	r2, [r3, #0]
    5e6e:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5e70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5e74:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5e78:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    5e7c:	0792      	lsls	r2, r2, #30
    5e7e:	d104      	bne.n	5e8a <nrfx_clock_irq_handler+0x4a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5e80:	2201      	movs	r2, #1
    5e82:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5e86:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    5e88:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    5e8a:	2202      	movs	r2, #2
    5e8c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    5e90:	4b03      	ldr	r3, [pc, #12]	; (5ea0 <nrfx_clock_irq_handler+0x60>)
}
    5e92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    5e96:	681b      	ldr	r3, [r3, #0]
    5e98:	2001      	movs	r0, #1
    5e9a:	4718      	bx	r3
    5e9c:	40000100 	.word	0x40000100
    5ea0:	2000245c 	.word	0x2000245c
    5ea4:	40000104 	.word	0x40000104

00005ea8 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
    5ea8:	2301      	movs	r3, #1
    5eaa:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
    5eae:	f010 0fff 	tst.w	r0, #255	; 0xff
    5eb2:	d012      	beq.n	5eda <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
    5eb4:	f04f 0320 	mov.w	r3, #32
    5eb8:	f3ef 8111 	mrs	r1, BASEPRI
    5ebc:	f383 8811 	msr	BASEPRI, r3
    5ec0:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
    5ec4:	4a06      	ldr	r2, [pc, #24]	; (5ee0 <nrfx_gpiote_channel_free+0x38>)
    5ec6:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    5ec8:	ea23 0000 	bic.w	r0, r3, r0
    5ecc:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
    5ece:	f381 8811 	msr	BASEPRI, r1
    5ed2:	f3bf 8f6f 	isb	sy
    5ed6:	4803      	ldr	r0, [pc, #12]	; (5ee4 <nrfx_gpiote_channel_free+0x3c>)
    5ed8:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    5eda:	4803      	ldr	r0, [pc, #12]	; (5ee8 <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    5edc:	4770      	bx	lr
    5ede:	bf00      	nop
    5ee0:	20002464 	.word	0x20002464
    5ee4:	0bad0000 	.word	0x0bad0000
    5ee8:	0bad0004 	.word	0x0bad0004

00005eec <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
    5eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5ef0:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
    5ef2:	f8df e060 	ldr.w	lr, [pc, #96]	; 5f54 <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    5ef6:	4816      	ldr	r0, [pc, #88]	; (5f50 <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
    5ef8:	f8df 805c 	ldr.w	r8, [pc, #92]	; 5f58 <nrfx_gpiote_channel_alloc+0x6c>
{
    5efc:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
    5efe:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
    5f00:	2601      	movs	r6, #1
    5f02:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
    5f04:	f04f 0120 	mov.w	r1, #32
    5f08:	f3ef 8c11 	mrs	ip, BASEPRI
    5f0c:	f381 8811 	msr	BASEPRI, r1
    5f10:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    5f14:	fa22 f103 	lsr.w	r1, r2, r3
    5f18:	07c9      	lsls	r1, r1, #31
    5f1a:	d50a      	bpl.n	5f32 <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
    5f1c:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
    5f20:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    5f24:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
    5f26:	bf01      	itttt	eq
    5f28:	4339      	orreq	r1, r7
    5f2a:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            err_code = NRFX_SUCCESS;
    5f2e:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
    5f30:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
    5f32:	f38c 8811 	msr	BASEPRI, ip
    5f36:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
    5f3a:	4540      	cmp	r0, r8
    5f3c:	d005      	beq.n	5f4a <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
    5f3e:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    5f42:	439a      	bics	r2, r3
    5f44:	f104 0401 	add.w	r4, r4, #1
    5f48:	d1db      	bne.n	5f02 <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    5f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5f4e:	bf00      	nop
    5f50:	0bad0002 	.word	0x0bad0002
    5f54:	20002464 	.word	0x20002464
    5f58:	0bad0000 	.word	0x0bad0000

00005f5c <nrfx_nvmc_page_erase>:
    return p_reg->CODEPAGESIZE;
    5f5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5f60:	691a      	ldr	r2, [r3, #16]
}

static bool is_page_aligned_check(uint32_t addr)
{
    /* If the modulo operation returns '0', then the address is aligned. */
    return !(addr % flash_page_size_get());
    5f62:	fbb0 f3f2 	udiv	r3, r0, r2
    5f66:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
    5f6a:	b973      	cbnz	r3, 5f8a <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
    5f6c:	4b08      	ldr	r3, [pc, #32]	; (5f90 <nrfx_nvmc_page_erase+0x34>)
    5f6e:	2202      	movs	r2, #2
    5f70:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
    5f74:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    5f78:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    5f7c:	07d2      	lsls	r2, r2, #31
    5f7e:	d5fb      	bpl.n	5f78 <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
    5f80:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
    5f82:	4804      	ldr	r0, [pc, #16]	; (5f94 <nrfx_nvmc_page_erase+0x38>)
    5f84:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    5f88:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
    5f8a:	4803      	ldr	r0, [pc, #12]	; (5f98 <nrfx_nvmc_page_erase+0x3c>)
}
    5f8c:	4770      	bx	lr
    5f8e:	bf00      	nop
    5f90:	4001e000 	.word	0x4001e000
    5f94:	0bad0000 	.word	0x0bad0000
    5f98:	0bad000a 	.word	0x0bad000a

00005f9c <nrfx_nvmc_word_write>:
    5f9c:	4b07      	ldr	r3, [pc, #28]	; (5fbc <nrfx_nvmc_word_write+0x20>)
    5f9e:	2201      	movs	r2, #1
    5fa0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    5fa4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    5fa8:	07d2      	lsls	r2, r2, #31
    5faa:	d5fb      	bpl.n	5fa4 <nrfx_nvmc_word_write+0x8>
    *(volatile uint32_t *)addr = value;
    5fac:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    5fae:	f3bf 8f5f 	dmb	sy
    p_reg->CONFIG = (uint32_t)mode;
    5fb2:	2200      	movs	r2, #0
    5fb4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nvmc_write_mode_set();

    nvmc_word_write(addr, value);

    nvmc_readonly_mode_set();
}
    5fb8:	4770      	bx	lr
    5fba:	bf00      	nop
    5fbc:	4001e000 	.word	0x4001e000

00005fc0 <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
    5fc0:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
    5fc2:	4c16      	ldr	r4, [pc, #88]	; (601c <nrfx_power_init+0x5c>)
    5fc4:	7823      	ldrb	r3, [r4, #0]
    5fc6:	bb33      	cbnz	r3, 6016 <nrfx_power_init+0x56>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
    5fc8:	7802      	ldrb	r2, [r0, #0]
    if (enable && nrf52_errata_197())
    5fca:	0791      	lsls	r1, r2, #30
    5fcc:	f3c2 0340 	ubfx	r3, r2, #1, #1
    5fd0:	d50d      	bpl.n	5fee <nrfx_power_init+0x2e>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5fd2:	4b13      	ldr	r3, [pc, #76]	; (6020 <nrfx_power_init+0x60>)
            if (var1 == 0x08)
    5fd4:	681b      	ldr	r3, [r3, #0]
    5fd6:	2b08      	cmp	r3, #8
    5fd8:	d11b      	bne.n	6012 <nrfx_power_init+0x52>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5fda:	4b12      	ldr	r3, [pc, #72]	; (6024 <nrfx_power_init+0x64>)
    5fdc:	681b      	ldr	r3, [r3, #0]
                switch(var2)
    5fde:	2b05      	cmp	r3, #5
    5fe0:	d817      	bhi.n	6012 <nrfx_power_init+0x52>
    5fe2:	4911      	ldr	r1, [pc, #68]	; (6028 <nrfx_power_init+0x68>)
    5fe4:	5cc9      	ldrb	r1, [r1, r3]
    5fe6:	2301      	movs	r3, #1
    5fe8:	b109      	cbz	r1, 5fee <nrfx_power_init+0x2e>
        *(volatile uint32_t *)0x40000638ul = 1ul;
    5fea:	4910      	ldr	r1, [pc, #64]	; (602c <nrfx_power_init+0x6c>)
    5fec:	600b      	str	r3, [r1, #0]
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    5fee:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    5ff2:	f002 0201 	and.w	r2, r2, #1
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    5ff6:	f8c1 3580 	str.w	r3, [r1, #1408]	; 0x580
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    5ffa:	2000      	movs	r0, #0
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    5ffc:	f8c1 2578 	str.w	r2, [r1, #1400]	; 0x578
    6000:	f7fe fc84 	bl	490c <arch_irq_is_enabled>
    6004:	b908      	cbnz	r0, 600a <nrfx_power_init+0x4a>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    6006:	f7fe fc5d 	bl	48c4 <arch_irq_enable>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
    600a:	2301      	movs	r3, #1
    return NRFX_SUCCESS;
    600c:	4808      	ldr	r0, [pc, #32]	; (6030 <nrfx_power_init+0x70>)
    m_initialized = true;
    600e:	7023      	strb	r3, [r4, #0]
}
    6010:	bd10      	pop	{r4, pc}
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    6012:	2301      	movs	r3, #1
    6014:	e7eb      	b.n	5fee <nrfx_power_init+0x2e>
        return NRFX_ERROR_ALREADY_INITIALIZED;
    6016:	4807      	ldr	r0, [pc, #28]	; (6034 <nrfx_power_init+0x74>)
    6018:	e7fa      	b.n	6010 <nrfx_power_init+0x50>
    601a:	bf00      	nop
    601c:	20005166 	.word	0x20005166
    6020:	10000130 	.word	0x10000130
    6024:	10000134 	.word	0x10000134
    6028:	0000dfd5 	.word	0x0000dfd5
    602c:	40000638 	.word	0x40000638
    6030:	0bad0000 	.word	0x0bad0000
    6034:	0bad000c 	.word	0x0bad000c

00006038 <nrfx_power_usbevt_uninit>:
    p_reg->INTENCLR = mask;
    6038:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    603c:	f44f 7260 	mov.w	r2, #896	; 0x380
    6040:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}

void nrfx_power_usbevt_uninit(void)
{
    nrfx_power_usbevt_disable();
    m_usbevt_handler = NULL;
    6044:	4b01      	ldr	r3, [pc, #4]	; (604c <nrfx_power_usbevt_uninit+0x14>)
    6046:	2200      	movs	r2, #0
    6048:	601a      	str	r2, [r3, #0]
}
    604a:	4770      	bx	lr
    604c:	200024cc 	.word	0x200024cc

00006050 <nrfx_power_usbevt_init>:
{
    6050:	b508      	push	{r3, lr}
    nrfx_power_usbevt_uninit();
    6052:	f7ff fff1 	bl	6038 <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
    6056:	6803      	ldr	r3, [r0, #0]
    6058:	b10b      	cbz	r3, 605e <nrfx_power_usbevt_init+0xe>
        m_usbevt_handler = p_config->handler;
    605a:	4a01      	ldr	r2, [pc, #4]	; (6060 <nrfx_power_usbevt_init+0x10>)
    605c:	6013      	str	r3, [r2, #0]
}
    605e:	bd08      	pop	{r3, pc}
    6060:	200024cc 	.word	0x200024cc

00006064 <nrfx_power_irq_handler>:
    return p_reg->INTENSET;
    6064:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
    6068:	b510      	push	{r4, lr}
    606a:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    606e:	0762      	lsls	r2, r4, #29
    6070:	d507      	bpl.n	6082 <nrfx_power_irq_handler+0x1e>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
    6072:	f44f 7084 	mov.w	r0, #264	; 0x108
    6076:	f005 f9ba 	bl	b3ee <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    607a:	b110      	cbz	r0, 6082 <nrfx_power_irq_handler+0x1e>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
    607c:	4b1e      	ldr	r3, [pc, #120]	; (60f8 <nrfx_power_irq_handler+0x94>)
    607e:	681b      	ldr	r3, [r3, #0]
    6080:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    6082:	06a3      	lsls	r3, r4, #26
    6084:	d508      	bpl.n	6098 <nrfx_power_irq_handler+0x34>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
    6086:	f44f 708a 	mov.w	r0, #276	; 0x114
    608a:	f005 f9b0 	bl	b3ee <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    608e:	b118      	cbz	r0, 6098 <nrfx_power_irq_handler+0x34>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
    6090:	4b1a      	ldr	r3, [pc, #104]	; (60fc <nrfx_power_irq_handler+0x98>)
    6092:	2000      	movs	r0, #0
    6094:	681b      	ldr	r3, [r3, #0]
    6096:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    6098:	0660      	lsls	r0, r4, #25
    609a:	d508      	bpl.n	60ae <nrfx_power_irq_handler+0x4a>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
    609c:	f44f 708c 	mov.w	r0, #280	; 0x118
    60a0:	f005 f9a5 	bl	b3ee <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    60a4:	b118      	cbz	r0, 60ae <nrfx_power_irq_handler+0x4a>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
    60a6:	4b15      	ldr	r3, [pc, #84]	; (60fc <nrfx_power_irq_handler+0x98>)
    60a8:	2001      	movs	r0, #1
    60aa:	681b      	ldr	r3, [r3, #0]
    60ac:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    60ae:	0621      	lsls	r1, r4, #24
    60b0:	d508      	bpl.n	60c4 <nrfx_power_irq_handler+0x60>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
    60b2:	f44f 708e 	mov.w	r0, #284	; 0x11c
    60b6:	f005 f99a 	bl	b3ee <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    60ba:	b118      	cbz	r0, 60c4 <nrfx_power_irq_handler+0x60>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
    60bc:	4b10      	ldr	r3, [pc, #64]	; (6100 <nrfx_power_irq_handler+0x9c>)
    60be:	2000      	movs	r0, #0
    60c0:	681b      	ldr	r3, [r3, #0]
    60c2:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    60c4:	05e2      	lsls	r2, r4, #23
    60c6:	d508      	bpl.n	60da <nrfx_power_irq_handler+0x76>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
    60c8:	f44f 7090 	mov.w	r0, #288	; 0x120
    60cc:	f005 f98f 	bl	b3ee <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    60d0:	b118      	cbz	r0, 60da <nrfx_power_irq_handler+0x76>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
    60d2:	4b0b      	ldr	r3, [pc, #44]	; (6100 <nrfx_power_irq_handler+0x9c>)
    60d4:	2001      	movs	r0, #1
    60d6:	681b      	ldr	r3, [r3, #0]
    60d8:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    60da:	05a3      	lsls	r3, r4, #22
    60dc:	d50a      	bpl.n	60f4 <nrfx_power_irq_handler+0x90>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
    60de:	f44f 7092 	mov.w	r0, #292	; 0x124
    60e2:	f005 f984 	bl	b3ee <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    60e6:	b128      	cbz	r0, 60f4 <nrfx_power_irq_handler+0x90>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    60e8:	4b05      	ldr	r3, [pc, #20]	; (6100 <nrfx_power_irq_handler+0x9c>)
    }
#endif
}
    60ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    60ee:	681b      	ldr	r3, [r3, #0]
    60f0:	2002      	movs	r0, #2
    60f2:	4718      	bx	r3
}
    60f4:	bd10      	pop	{r4, pc}
    60f6:	bf00      	nop
    60f8:	200024c4 	.word	0x200024c4
    60fc:	200024c8 	.word	0x200024c8
    6100:	200024cc 	.word	0x200024cc

00006104 <nrfx_ppi_channel_alloc>:
    group_allocated_clr_all();
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    6104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
    6108:	4a14      	ldr	r2, [pc, #80]	; (615c <nrfx_ppi_channel_alloc+0x58>)
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    610a:	4e15      	ldr	r6, [pc, #84]	; (6160 <nrfx_ppi_channel_alloc+0x5c>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
            *p_channel = channel;
            err_code   = NRFX_SUCCESS;
    610c:	4f15      	ldr	r7, [pc, #84]	; (6164 <nrfx_ppi_channel_alloc+0x60>)
{
    610e:	4605      	mov	r5, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    6110:	4815      	ldr	r0, [pc, #84]	; (6168 <nrfx_ppi_channel_alloc+0x64>)
{
    6112:	2400      	movs	r4, #0
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
    6114:	f04f 0e01 	mov.w	lr, #1
    6118:	fa5f fc84 	uxtb.w	ip, r4
	__asm__ volatile(
    611c:	f04f 0320 	mov.w	r3, #32
    6120:	f3ef 8811 	mrs	r8, BASEPRI
    6124:	f383 8811 	msr	BASEPRI, r3
    6128:	f3bf 8f6f 	isb	sy
    612c:	fa0e f30c 	lsl.w	r3, lr, ip
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    6130:	4213      	tst	r3, r2
    6132:	d007      	beq.n	6144 <nrfx_ppi_channel_alloc+0x40>
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    6134:	6831      	ldr	r1, [r6, #0]
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    6136:	420b      	tst	r3, r1
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
    6138:	bf01      	itttt	eq
    613a:	4319      	orreq	r1, r3
    613c:	6031      	streq	r1, [r6, #0]
            *p_channel = channel;
    613e:	f885 c000 	strbeq.w	ip, [r5]
            err_code   = NRFX_SUCCESS;
    6142:	4638      	moveq	r0, r7
	__asm__ volatile(
    6144:	f388 8811 	msr	BASEPRI, r8
    6148:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();
        if (err_code == NRFX_SUCCESS)
    614c:	42b8      	cmp	r0, r7
    614e:	d003      	beq.n	6158 <nrfx_ppi_channel_alloc+0x54>
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    6150:	439a      	bics	r2, r3
    6152:	f104 0401 	add.w	r4, r4, #1
    6156:	d1df      	bne.n	6118 <nrfx_ppi_channel_alloc+0x14>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    6158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    615c:	000fffff 	.word	0x000fffff
    6160:	200024d0 	.word	0x200024d0
    6164:	0bad0000 	.word	0x0bad0000
    6168:	0bad0002 	.word	0x0bad0002

0000616c <nrf52_errata_166>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    616c:	4b03      	ldr	r3, [pc, #12]	; (617c <nrf52_errata_166+0x10>)
            if (var1 == 0x08)
    616e:	6818      	ldr	r0, [r3, #0]
}
    6170:	f1a0 0308 	sub.w	r3, r0, #8
    6174:	4258      	negs	r0, r3
    6176:	4158      	adcs	r0, r3
    6178:	4770      	bx	lr
    617a:	bf00      	nop
    617c:	10000130 	.word	0x10000130

00006180 <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6180:	4b07      	ldr	r3, [pc, #28]	; (61a0 <nrf52_errata_187+0x20>)
            if (var1 == 0x08)
    6182:	681b      	ldr	r3, [r3, #0]
    6184:	2b08      	cmp	r3, #8
    6186:	d106      	bne.n	6196 <nrf52_errata_187+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    6188:	4b06      	ldr	r3, [pc, #24]	; (61a4 <nrf52_errata_187+0x24>)
    618a:	681b      	ldr	r3, [r3, #0]
                switch(var2)
    618c:	2b05      	cmp	r3, #5
    618e:	d804      	bhi.n	619a <nrf52_errata_187+0x1a>
    6190:	4a05      	ldr	r2, [pc, #20]	; (61a8 <nrf52_errata_187+0x28>)
    6192:	5cd0      	ldrb	r0, [r2, r3]
    6194:	4770      	bx	lr
        return false;
    6196:	2000      	movs	r0, #0
    6198:	4770      	bx	lr
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    619a:	2001      	movs	r0, #1
}
    619c:	4770      	bx	lr
    619e:	bf00      	nop
    61a0:	10000130 	.word	0x10000130
    61a4:	10000134 	.word	0x10000134
    61a8:	0000dfdb 	.word	0x0000dfdb

000061ac <ep_state_access>:
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    61ac:	4b05      	ldr	r3, [pc, #20]	; (61c4 <ep_state_access+0x18>)
    61ae:	f010 0f80 	tst.w	r0, #128	; 0x80
    61b2:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
    61b6:	bf08      	it	eq
    61b8:	4613      	moveq	r3, r2
        NRF_USBD_EP_NR_GET(ep));
    61ba:	f000 000f 	and.w	r0, r0, #15
}
    61be:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    61c2:	4770      	bx	lr
    61c4:	20002644 	.word	0x20002644

000061c8 <usbd_dma_pending_clear>:
 *
 * Internal function to clear the flag informing about EasyDMA transfer pending.
 * This function is called always just after the finished EasyDMA transfer is detected.
 */
static inline void usbd_dma_pending_clear(void)
{
    61c8:	b508      	push	{r3, lr}
}

/* Errata: USBD cannot receive tasks during DMA. **/
static inline bool nrfx_usbd_errata_199(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
    61ca:	f7ff ffcf 	bl	616c <nrf52_errata_166>
    if (nrfx_usbd_errata_199())
    61ce:	b110      	cbz	r0, 61d6 <usbd_dma_pending_clear+0xe>
    {
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    61d0:	4b03      	ldr	r3, [pc, #12]	; (61e0 <usbd_dma_pending_clear+0x18>)
    61d2:	2200      	movs	r2, #0
    61d4:	601a      	str	r2, [r3, #0]
    }
    m_dma_pending = false;
    61d6:	4b03      	ldr	r3, [pc, #12]	; (61e4 <usbd_dma_pending_clear+0x1c>)
    61d8:	2200      	movs	r2, #0
    61da:	701a      	strb	r2, [r3, #0]
}
    61dc:	bd08      	pop	{r3, pc}
    61de:	bf00      	nop
    61e0:	40027c1c 	.word	0x40027c1c
    61e4:	20005168 	.word	0x20005168

000061e8 <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
    61e8:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
    61ea:	4a09      	ldr	r2, [pc, #36]	; (6210 <ev_usbreset_handler+0x28>)
    61ec:	2300      	movs	r3, #0
    61ee:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    61f0:	4a08      	ldr	r2, [pc, #32]	; (6214 <ev_usbreset_handler+0x2c>)

    const nrfx_usbd_evt_t evt = {
    61f2:	f8ad 3005 	strh.w	r3, [sp, #5]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    61f6:	7013      	strb	r3, [r2, #0]
    const nrfx_usbd_evt_t evt = {
    61f8:	f88d 3007 	strb.w	r3, [sp, #7]
    61fc:	2301      	movs	r3, #1
    61fe:	f88d 3004 	strb.w	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
    6202:	4b05      	ldr	r3, [pc, #20]	; (6218 <ev_usbreset_handler+0x30>)
    6204:	a801      	add	r0, sp, #4
    6206:	681b      	ldr	r3, [r3, #0]
    6208:	4798      	blx	r3
}
    620a:	b003      	add	sp, #12
    620c:	f85d fb04 	ldr.w	pc, [sp], #4
    6210:	20005167 	.word	0x20005167
    6214:	2000516a 	.word	0x2000516a
    6218:	200026d4 	.word	0x200026d4

0000621c <usbd_errata_187_211_begin>:

/**
 * @brief Begin erratas 187 and 211.
 */
static inline void usbd_errata_187_211_begin(void)
{
    621c:	b510      	push	{r4, lr}
	__asm__ volatile(
    621e:	f04f 0320 	mov.w	r3, #32
    6222:	f3ef 8411 	mrs	r4, BASEPRI
    6226:	f383 8811 	msr	BASEPRI, r3
    622a:	f3bf 8f6f 	isb	sy
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    622e:	4b08      	ldr	r3, [pc, #32]	; (6250 <usbd_errata_187_211_begin+0x34>)
    6230:	4a08      	ldr	r2, [pc, #32]	; (6254 <usbd_errata_187_211_begin+0x38>)
    6232:	6818      	ldr	r0, [r3, #0]
    6234:	2103      	movs	r1, #3
    6236:	b948      	cbnz	r0, 624c <usbd_errata_187_211_begin+0x30>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    6238:	f249 3075 	movw	r0, #37749	; 0x9375
    623c:	6018      	str	r0, [r3, #0]
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    623e:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    6240:	6018      	str	r0, [r3, #0]
	__asm__ volatile(
    6242:	f384 8811 	msr	BASEPRI, r4
    6246:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    624a:	bd10      	pop	{r4, pc}
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    624c:	6011      	str	r1, [r2, #0]
    624e:	e7f8      	b.n	6242 <usbd_errata_187_211_begin+0x26>
    6250:	4006ec00 	.word	0x4006ec00
    6254:	4006ed14 	.word	0x4006ed14

00006258 <usbd_errata_187_211_end>:

/**
 * @brief End erratas 187 and 211.
 */
static inline void usbd_errata_187_211_end(void)
{
    6258:	b510      	push	{r4, lr}
	__asm__ volatile(
    625a:	f04f 0320 	mov.w	r3, #32
    625e:	f3ef 8411 	mrs	r4, BASEPRI
    6262:	f383 8811 	msr	BASEPRI, r3
    6266:	f3bf 8f6f 	isb	sy
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    626a:	4b08      	ldr	r3, [pc, #32]	; (628c <usbd_errata_187_211_end+0x34>)
    626c:	4a08      	ldr	r2, [pc, #32]	; (6290 <usbd_errata_187_211_end+0x38>)
    626e:	6818      	ldr	r0, [r3, #0]
    6270:	b948      	cbnz	r0, 6286 <usbd_errata_187_211_end+0x2e>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    6272:	f249 3175 	movw	r1, #37749	; 0x9375
    6276:	6019      	str	r1, [r3, #0]
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    6278:	6010      	str	r0, [r2, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    627a:	6019      	str	r1, [r3, #0]
	__asm__ volatile(
    627c:	f384 8811 	msr	BASEPRI, r4
    6280:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    6284:	bd10      	pop	{r4, pc}
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    6286:	2300      	movs	r3, #0
    6288:	6013      	str	r3, [r2, #0]
    628a:	e7f7      	b.n	627c <usbd_errata_187_211_end+0x24>
    628c:	4006ec00 	.word	0x4006ec00
    6290:	4006ed14 	.word	0x4006ed14

00006294 <nrfx_usbd_feeder_flash>:
{
    6294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t tx_size  = p_transfer->size;
    6296:	684d      	ldr	r5, [r1, #4]
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    6298:	4f0b      	ldr	r7, [pc, #44]	; (62c8 <nrfx_usbd_feeder_flash+0x34>)
    629a:	4295      	cmp	r5, r2
    629c:	bf28      	it	cs
    629e:	4615      	movcs	r5, r2
{
    62a0:	460c      	mov	r4, r1
    62a2:	4606      	mov	r6, r0
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    62a4:	462a      	mov	r2, r5
    62a6:	6809      	ldr	r1, [r1, #0]
    62a8:	4638      	mov	r0, r7
    62aa:	f004 fcc7 	bl	ac3c <memcpy>
    p_transfer->size -= tx_size;
    62ae:	6860      	ldr	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    62b0:	6822      	ldr	r2, [r4, #0]
    p_transfer->size -= tx_size;
    62b2:	1b40      	subs	r0, r0, r5
    p_next->size = tx_size;
    62b4:	e9c6 7500 	strd	r7, r5, [r6]
    p_transfer->p_data.addr += tx_size;
    62b8:	442a      	add	r2, r5
    p_transfer->size -= tx_size;
    62ba:	6060      	str	r0, [r4, #4]
}
    62bc:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
    62be:	6022      	str	r2, [r4, #0]
}
    62c0:	bf18      	it	ne
    62c2:	2001      	movne	r0, #1
    62c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    62c6:	bf00      	nop
    62c8:	200026d8 	.word	0x200026d8

000062cc <nrfx_usbd_feeder_flash_zlp>:
{
    62cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t tx_size  = p_transfer->size;
    62ce:	684c      	ldr	r4, [r1, #4]
    if (tx_size > ep_size)
    62d0:	4294      	cmp	r4, r2
    62d2:	bf28      	it	cs
    62d4:	4614      	movcs	r4, r2
{
    62d6:	4606      	mov	r6, r0
    62d8:	460d      	mov	r5, r1
    if (tx_size != 0)
    62da:	b18c      	cbz	r4, 6300 <nrfx_usbd_feeder_flash_zlp+0x34>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    62dc:	4f09      	ldr	r7, [pc, #36]	; (6304 <nrfx_usbd_feeder_flash_zlp+0x38>)
    62de:	6809      	ldr	r1, [r1, #0]
    62e0:	4622      	mov	r2, r4
    62e2:	4638      	mov	r0, r7
    62e4:	f004 fcaa 	bl	ac3c <memcpy>
        p_next->p_data.tx = p_buffer;
    62e8:	6037      	str	r7, [r6, #0]
    p_transfer->size -= tx_size;
    62ea:	686b      	ldr	r3, [r5, #4]
    p_next->size = tx_size;
    62ec:	6074      	str	r4, [r6, #4]
    p_transfer->size -= tx_size;
    62ee:	1b1b      	subs	r3, r3, r4
    62f0:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
    62f2:	682b      	ldr	r3, [r5, #0]
}
    62f4:	1e20      	subs	r0, r4, #0
    p_transfer->p_data.addr += tx_size;
    62f6:	4423      	add	r3, r4
    62f8:	602b      	str	r3, [r5, #0]
}
    62fa:	bf18      	it	ne
    62fc:	2001      	movne	r0, #1
    62fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        p_next->p_data.tx = NULL;
    6300:	6004      	str	r4, [r0, #0]
    6302:	e7f2      	b.n	62ea <nrfx_usbd_feeder_flash_zlp+0x1e>
    6304:	200026d8 	.word	0x200026d8

00006308 <ev_usbevent_handler>:
    return p_reg->EVENTCAUSE;
    6308:	4b21      	ldr	r3, [pc, #132]	; (6390 <ev_usbevent_handler+0x88>)
{
    630a:	b513      	push	{r0, r1, r4, lr}
    630c:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
    6310:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
    6314:	05e1      	lsls	r1, r4, #23
    (void) p_reg->EVENTCAUSE;
    6316:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    631a:	d50e      	bpl.n	633a <ev_usbevent_handler+0x32>
        m_bus_suspend = true;
    631c:	4b1d      	ldr	r3, [pc, #116]	; (6394 <ev_usbevent_handler+0x8c>)
    631e:	2201      	movs	r2, #1
    6320:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    6322:	2300      	movs	r3, #0
    6324:	f8ad 3005 	strh.w	r3, [sp, #5]
    6328:	f88d 3007 	strb.w	r3, [sp, #7]
    632c:	2302      	movs	r3, #2
    632e:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    6332:	4b19      	ldr	r3, [pc, #100]	; (6398 <ev_usbevent_handler+0x90>)
    6334:	a801      	add	r0, sp, #4
    6336:	681b      	ldr	r3, [r3, #0]
    6338:	4798      	blx	r3
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    633a:	05a2      	lsls	r2, r4, #22
    633c:	d50d      	bpl.n	635a <ev_usbevent_handler+0x52>
        m_bus_suspend = false;
    633e:	4a15      	ldr	r2, [pc, #84]	; (6394 <ev_usbevent_handler+0x8c>)
    6340:	2300      	movs	r3, #0
    6342:	7013      	strb	r3, [r2, #0]
        const nrfx_usbd_evt_t evt = {
    6344:	f8ad 3005 	strh.w	r3, [sp, #5]
    6348:	f88d 3007 	strb.w	r3, [sp, #7]
    634c:	2303      	movs	r3, #3
    634e:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    6352:	4b11      	ldr	r3, [pc, #68]	; (6398 <ev_usbevent_handler+0x90>)
    6354:	a801      	add	r0, sp, #4
    6356:	681b      	ldr	r3, [r3, #0]
    6358:	4798      	blx	r3
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
    635a:	0563      	lsls	r3, r4, #21
    635c:	d516      	bpl.n	638c <ev_usbevent_handler+0x84>
        if (m_bus_suspend)
    635e:	4a0d      	ldr	r2, [pc, #52]	; (6394 <ev_usbevent_handler+0x8c>)
    6360:	7813      	ldrb	r3, [r2, #0]
    6362:	b19b      	cbz	r3, 638c <ev_usbevent_handler+0x84>
            m_bus_suspend = false;
    6364:	2300      	movs	r3, #0
    6366:	7013      	strb	r3, [r2, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
    6368:	4a09      	ldr	r2, [pc, #36]	; (6390 <ev_usbevent_handler+0x88>)
    636a:	2101      	movs	r1, #1
    636c:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    6370:	6591      	str	r1, [r2, #88]	; 0x58
    6372:	3258      	adds	r2, #88	; 0x58
            m_event_handler(&evt);
    6374:	a801      	add	r0, sp, #4
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    6376:	6812      	ldr	r2, [r2, #0]
            const nrfx_usbd_evt_t evt = {
    6378:	f8ad 3005 	strh.w	r3, [sp, #5]
    637c:	f88d 3007 	strb.w	r3, [sp, #7]
    6380:	2304      	movs	r3, #4
    6382:	f88d 3004 	strb.w	r3, [sp, #4]
            m_event_handler(&evt);
    6386:	4b04      	ldr	r3, [pc, #16]	; (6398 <ev_usbevent_handler+0x90>)
    6388:	681b      	ldr	r3, [r3, #0]
    638a:	4798      	blx	r3
}
    638c:	b002      	add	sp, #8
    638e:	bd10      	pop	{r4, pc}
    6390:	40027000 	.word	0x40027000
    6394:	20005167 	.word	0x20005167
    6398:	200026d4 	.word	0x200026d4

0000639c <ev_sof_handler>:
{
    639c:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
    639e:	2300      	movs	r3, #0
    63a0:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
    63a4:	4b0b      	ldr	r3, [pc, #44]	; (63d4 <ev_sof_handler+0x38>)
    63a6:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
    63aa:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
    63ae:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    m_ep_ready |= iso_ready_mask;
    63b2:	4a09      	ldr	r2, [pc, #36]	; (63d8 <ev_sof_handler+0x3c>)
    if (size_isoout == 0)
    63b4:	2b00      	cmp	r3, #0
    63b6:	6813      	ldr	r3, [r2, #0]
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
    63b8:	bf0c      	ite	eq
    63ba:	f44f 7180 	moveq.w	r1, #256	; 0x100
    63be:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
    m_ep_ready |= iso_ready_mask;
    63c2:	430b      	orrs	r3, r1
    63c4:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
    63c6:	4b05      	ldr	r3, [pc, #20]	; (63dc <ev_sof_handler+0x40>)
    63c8:	a801      	add	r0, sp, #4
    63ca:	681b      	ldr	r3, [r3, #0]
    63cc:	4798      	blx	r3
}
    63ce:	b003      	add	sp, #12
    63d0:	f85d fb04 	ldr.w	pc, [sp], #4
    63d4:	40027000 	.word	0x40027000
    63d8:	200025b0 	.word	0x200025b0
    63dc:	200026d4 	.word	0x200026d4

000063e0 <atomic_and.constprop.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    63e0:	4b07      	ldr	r3, [pc, #28]	; (6400 <atomic_and.constprop.0+0x20>)
}
    63e2:	f3bf 8f5b 	dmb	ish
    63e6:	4602      	mov	r2, r0
    63e8:	e853 0f00 	ldrex	r0, [r3]
    63ec:	ea00 0102 	and.w	r1, r0, r2
    63f0:	e843 1c00 	strex	ip, r1, [r3]
    63f4:	f1bc 0f00 	cmp.w	ip, #0
    63f8:	d1f6      	bne.n	63e8 <atomic_and.constprop.0+0x8>
    63fa:	f3bf 8f5b 	dmb	ish
    63fe:	4770      	bx	lr
    6400:	20002540 	.word	0x20002540

00006404 <nrf_usbd_ep0in_dma_handler>:
{
    6404:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
    6406:	f7ff fedf 	bl	61c8 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    640a:	4b08      	ldr	r3, [pc, #32]	; (642c <nrf_usbd_ep0in_dma_handler+0x28>)
    640c:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
    6410:	2a03      	cmp	r2, #3
    6412:	d105      	bne.n	6420 <nrf_usbd_ep0in_dma_handler+0x1c>
}
    6414:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    6418:	f06f 0001 	mvn.w	r0, #1
    641c:	f7ff bfe0 	b.w	63e0 <atomic_and.constprop.0>
    else if (p_state->handler.feeder == NULL)
    6420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    6424:	2b00      	cmp	r3, #0
    6426:	d0f5      	beq.n	6414 <nrf_usbd_ep0in_dma_handler+0x10>
}
    6428:	bd08      	pop	{r3, pc}
    642a:	bf00      	nop
    642c:	200025b4 	.word	0x200025b4

00006430 <usbd_ep_data_handler>:
{
    6430:	b573      	push	{r0, r1, r4, r5, r6, lr}
    6432:	460d      	mov	r5, r1
    m_ep_ready |= (1U << bitpos);
    6434:	491f      	ldr	r1, [pc, #124]	; (64b4 <usbd_ep_data_handler+0x84>)
    6436:	2201      	movs	r2, #1
    6438:	680e      	ldr	r6, [r1, #0]
    643a:	fa02 f305 	lsl.w	r3, r2, r5
    643e:	4333      	orrs	r3, r6
    if (NRF_USBD_EPIN_CHECK(ep))
    6440:	f010 0f80 	tst.w	r0, #128	; 0x80
    6444:	4e1c      	ldr	r6, [pc, #112]	; (64b8 <usbd_ep_data_handler+0x88>)
    m_ep_ready |= (1U << bitpos);
    6446:	600b      	str	r3, [r1, #0]
{
    6448:	4604      	mov	r4, r0
    if (NRF_USBD_EPIN_CHECK(ep))
    644a:	d026      	beq.n	649a <usbd_ep_data_handler+0x6a>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    644c:	f000 020f 	and.w	r2, r0, #15
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    6450:	4b1a      	ldr	r3, [pc, #104]	; (64bc <usbd_ep_data_handler+0x8c>)
    6452:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    6456:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    645a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    645e:	681a      	ldr	r2, [r3, #0]
    if (ret)
    6460:	b132      	cbz	r2, 6470 <usbd_ep_data_handler+0x40>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    6462:	2200      	movs	r2, #0
    6464:	601a      	str	r2, [r3, #0]
            if (ep != NRFX_USBD_EPIN0)
    6466:	2880      	cmp	r0, #128	; 0x80
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    6468:	681b      	ldr	r3, [r3, #0]
    646a:	d013      	beq.n	6494 <usbd_ep_data_handler+0x64>
                nrf_usbd_epin_dma_handler(ep);
    646c:	f005 f829 	bl	b4c2 <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    6470:	6831      	ldr	r1, [r6, #0]
    6472:	40e9      	lsrs	r1, r5
    6474:	f011 0101 	ands.w	r1, r1, #1
    6478:	d10a      	bne.n	6490 <usbd_ep_data_handler+0x60>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    647a:	2306      	movs	r3, #6
    647c:	f88d 3004 	strb.w	r3, [sp, #4]
    6480:	f88d 4006 	strb.w	r4, [sp, #6]
    6484:	f88d 1007 	strb.w	r1, [sp, #7]
            m_event_handler(&evt);
    6488:	4b0d      	ldr	r3, [pc, #52]	; (64c0 <usbd_ep_data_handler+0x90>)
    648a:	a801      	add	r0, sp, #4
    648c:	681b      	ldr	r3, [r3, #0]
    648e:	4798      	blx	r3
}
    6490:	b002      	add	sp, #8
    6492:	bd70      	pop	{r4, r5, r6, pc}
                nrf_usbd_ep0in_dma_handler();
    6494:	f7ff ffb6 	bl	6404 <nrf_usbd_ep0in_dma_handler>
    6498:	e7ea      	b.n	6470 <usbd_ep_data_handler+0x40>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    649a:	6831      	ldr	r1, [r6, #0]
    649c:	40e9      	lsrs	r1, r5
    649e:	07cb      	lsls	r3, r1, #31
    64a0:	d4f6      	bmi.n	6490 <usbd_ep_data_handler+0x60>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
    64a2:	2306      	movs	r3, #6
    64a4:	f88d 3004 	strb.w	r3, [sp, #4]
    64a8:	f88d 0006 	strb.w	r0, [sp, #6]
    64ac:	f88d 2007 	strb.w	r2, [sp, #7]
    64b0:	e7ea      	b.n	6488 <usbd_ep_data_handler+0x58>
    64b2:	bf00      	nop
    64b4:	200025b0 	.word	0x200025b0
    64b8:	20002540 	.word	0x20002540
    64bc:	0000dc88 	.word	0x0000dc88
    64c0:	200026d4 	.word	0x200026d4

000064c4 <ev_setup_data_handler>:
{
    64c4:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    64c6:	4b05      	ldr	r3, [pc, #20]	; (64dc <ev_setup_data_handler+0x18>)
    64c8:	781a      	ldrb	r2, [r3, #0]
    64ca:	4610      	mov	r0, r2
    64cc:	f004 ffed 	bl	b4aa <ep2bit>
}
    64d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    64d4:	4601      	mov	r1, r0
    64d6:	4610      	mov	r0, r2
    64d8:	f7ff bfaa 	b.w	6430 <usbd_ep_data_handler>
    64dc:	2000516a 	.word	0x2000516a

000064e0 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    64e0:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
    64e2:	f7ff fe71 	bl	61c8 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    64e6:	4b0f      	ldr	r3, [pc, #60]	; (6524 <ev_dma_epin8_handler+0x44>)
    64e8:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
    64ec:	2a03      	cmp	r2, #3
    64ee:	d106      	bne.n	64fe <ev_dma_epin8_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    64f0:	f46f 7080 	mvn.w	r0, #256	; 0x100
    64f4:	f7ff ff74 	bl	63e0 <atomic_and.constprop.0>
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    64f8:	b003      	add	sp, #12
    64fa:	f85d fb04 	ldr.w	pc, [sp], #4
    else if (p_state->handler.feeder == NULL)
    64fe:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    6502:	2b00      	cmp	r3, #0
    6504:	d1f8      	bne.n	64f8 <ev_dma_epin8_handler+0x18>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    6506:	f46f 7080 	mvn.w	r0, #256	; 0x100
    650a:	f7ff ff69 	bl	63e0 <atomic_and.constprop.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    650e:	2306      	movs	r3, #6
    6510:	f88d 3004 	strb.w	r3, [sp, #4]
    6514:	2388      	movs	r3, #136	; 0x88
    6516:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    651a:	4b03      	ldr	r3, [pc, #12]	; (6528 <ev_dma_epin8_handler+0x48>)
    651c:	a801      	add	r0, sp, #4
    651e:	681b      	ldr	r3, [r3, #0]
    6520:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    6522:	e7e9      	b.n	64f8 <ev_dma_epin8_handler+0x18>
    6524:	200025b4 	.word	0x200025b4
    6528:	200026d4 	.word	0x200026d4

0000652c <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    652c:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
    652e:	f7ff fe4b 	bl	61c8 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    6532:	4b0c      	ldr	r3, [pc, #48]	; (6564 <ev_dma_epout8_handler+0x38>)
    6534:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
    6538:	2a03      	cmp	r2, #3
    653a:	d010      	beq.n	655e <ev_dma_epout8_handler+0x32>
    else if (p_state->handler.consumer == NULL)
    653c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    6540:	b96b      	cbnz	r3, 655e <ev_dma_epout8_handler+0x32>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    6542:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
    6546:	f7ff ff4b 	bl	63e0 <atomic_and.constprop.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    654a:	2306      	movs	r3, #6
    654c:	f88d 3004 	strb.w	r3, [sp, #4]
    6550:	2308      	movs	r3, #8
    6552:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    6556:	4b04      	ldr	r3, [pc, #16]	; (6568 <ev_dma_epout8_handler+0x3c>)
    6558:	a801      	add	r0, sp, #4
    655a:	681b      	ldr	r3, [r3, #0]
    655c:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    655e:	b003      	add	sp, #12
    6560:	f85d fb04 	ldr.w	pc, [sp], #4
    6564:	200025b4 	.word	0x200025b4
    6568:	200026d4 	.word	0x200026d4

0000656c <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
    656c:	4a02      	ldr	r2, [pc, #8]	; (6578 <nrfx_usbd_uninit+0xc>)
    656e:	2300      	movs	r3, #0
    6570:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
    6572:	4a02      	ldr	r2, [pc, #8]	; (657c <nrfx_usbd_uninit+0x10>)
    6574:	7013      	strb	r3, [r2, #0]
    return;
}
    6576:	4770      	bx	lr
    6578:	200026d4 	.word	0x200026d4
    657c:	20005169 	.word	0x20005169

00006580 <nrfx_usbd_enable>:
    p_reg->EVENTCAUSE = flags;
    6580:	4b43      	ldr	r3, [pc, #268]	; (6690 <nrfx_usbd_enable+0x110>)
    6582:	f44f 6200 	mov.w	r2, #2048	; 0x800


void nrfx_usbd_enable(void)
{
    6586:	b510      	push	{r4, lr}
    6588:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    658c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    6590:	f7ff fdf6 	bl	6180 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
    6594:	b108      	cbz	r0, 659a <nrfx_usbd_enable+0x1a>
        usbd_errata_187_211_begin();
    6596:	f7ff fe41 	bl	621c <usbd_errata_187_211_begin>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_171();
    659a:	f7ff fde7 	bl	616c <nrf52_errata_166>
    if (nrfx_usbd_errata_171())
    659e:	b1b0      	cbz	r0, 65ce <nrfx_usbd_enable+0x4e>
	__asm__ volatile(
    65a0:	f04f 0320 	mov.w	r3, #32
    65a4:	f3ef 8411 	mrs	r4, BASEPRI
    65a8:	f383 8811 	msr	BASEPRI, r3
    65ac:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    65b0:	4b38      	ldr	r3, [pc, #224]	; (6694 <nrfx_usbd_enable+0x114>)
    65b2:	4a39      	ldr	r2, [pc, #228]	; (6698 <nrfx_usbd_enable+0x118>)
    65b4:	6818      	ldr	r0, [r3, #0]
    65b6:	21c0      	movs	r1, #192	; 0xc0
    65b8:	2800      	cmp	r0, #0
    65ba:	d163      	bne.n	6684 <nrfx_usbd_enable+0x104>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    65bc:	f249 3075 	movw	r0, #37749	; 0x9375
    65c0:	6018      	str	r0, [r3, #0]
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    65c2:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    65c4:	6018      	str	r0, [r3, #0]
	__asm__ volatile(
    65c6:	f384 8811 	msr	BASEPRI, r4
    65ca:	f3bf 8f6f 	isb	sy
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
    65ce:	4b30      	ldr	r3, [pc, #192]	; (6690 <nrfx_usbd_enable+0x110>)
    65d0:	2201      	movs	r2, #1
    65d2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    65d6:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
    65da:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
    65de:	0512      	lsls	r2, r2, #20
    65e0:	d5fb      	bpl.n	65da <nrfx_usbd_enable+0x5a>
    p_reg->EVENTCAUSE = flags;
    65e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    65e6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    65ea:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    65ee:	f7ff fdbd 	bl	616c <nrf52_errata_166>
    if (nrfx_usbd_errata_171())
    65f2:	b1a8      	cbz	r0, 6620 <nrfx_usbd_enable+0xa0>
	__asm__ volatile(
    65f4:	f04f 0320 	mov.w	r3, #32
    65f8:	f3ef 8411 	mrs	r4, BASEPRI
    65fc:	f383 8811 	msr	BASEPRI, r3
    6600:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    6604:	4b23      	ldr	r3, [pc, #140]	; (6694 <nrfx_usbd_enable+0x114>)
    6606:	4a24      	ldr	r2, [pc, #144]	; (6698 <nrfx_usbd_enable+0x118>)
    6608:	6818      	ldr	r0, [r3, #0]
    660a:	2800      	cmp	r0, #0
    660c:	d13c      	bne.n	6688 <nrfx_usbd_enable+0x108>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    660e:	f249 3175 	movw	r1, #37749	; 0x9375
    6612:	6019      	str	r1, [r3, #0]
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    6614:	6010      	str	r0, [r2, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    6616:	6019      	str	r1, [r3, #0]
	__asm__ volatile(
    6618:	f384 8811 	msr	BASEPRI, r4
    661c:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    6620:	f7ff fdae 	bl	6180 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
    6624:	b130      	cbz	r0, 6634 <nrfx_usbd_enable+0xb4>
        usbd_errata_187_211_end();
    6626:	f7ff fe17 	bl	6258 <usbd_errata_187_211_end>
    662a:	f7ff fda9 	bl	6180 <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    662e:	b108      	cbz	r0, 6634 <nrfx_usbd_enable+0xb4>
#endif
    {
        usbd_errata_187_211_begin();
    6630:	f7ff fdf4 	bl	621c <usbd_errata_187_211_begin>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_166();
    6634:	f7ff fd9a 	bl	616c <nrf52_errata_166>
    }

    if (nrfx_usbd_errata_166())
    6638:	b148      	cbz	r0, 664e <nrfx_usbd_enable+0xce>
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
    663a:	4b18      	ldr	r3, [pc, #96]	; (669c <nrfx_usbd_enable+0x11c>)
    663c:	f240 72e3 	movw	r2, #2019	; 0x7e3
    6640:	601a      	str	r2, [r3, #0]
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
    6642:	2240      	movs	r2, #64	; 0x40
    6644:	605a      	str	r2, [r3, #4]
  __ASM volatile ("isb 0xF":::"memory");
    6646:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    664a:	f3bf 8f4f 	dsb	sy
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
    664e:	4b10      	ldr	r3, [pc, #64]	; (6690 <nrfx_usbd_enable+0x110>)
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    6650:	2100      	movs	r1, #0
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
    6652:	2280      	movs	r2, #128	; 0x80
    6654:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    6658:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    665c:	4b10      	ldr	r3, [pc, #64]	; (66a0 <nrfx_usbd_enable+0x120>)
    665e:	f240 12ff 	movw	r2, #511	; 0x1ff
    6662:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
    6664:	4b0f      	ldr	r3, [pc, #60]	; (66a4 <nrfx_usbd_enable+0x124>)
    6666:	6019      	str	r1, [r3, #0]
    usbd_dma_pending_clear();
    6668:	f7ff fdae 	bl	61c8 <usbd_dma_pending_clear>
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    666c:	4b0e      	ldr	r3, [pc, #56]	; (66a8 <nrfx_usbd_enable+0x128>)
    666e:	7019      	strb	r1, [r3, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
    6670:	4b0e      	ldr	r3, [pc, #56]	; (66ac <nrfx_usbd_enable+0x12c>)
    6672:	2202      	movs	r2, #2
    6674:	701a      	strb	r2, [r3, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    6676:	f7ff fd83 	bl	6180 <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    667a:	b140      	cbz	r0, 668e <nrfx_usbd_enable+0x10e>
#endif
    {
        usbd_errata_187_211_end();
    }
}
    667c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        usbd_errata_187_211_end();
    6680:	f7ff bdea 	b.w	6258 <usbd_errata_187_211_end>
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    6684:	6011      	str	r1, [r2, #0]
    6686:	e79e      	b.n	65c6 <nrfx_usbd_enable+0x46>
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    6688:	2300      	movs	r3, #0
    668a:	6013      	str	r3, [r2, #0]
    668c:	e7c4      	b.n	6618 <nrfx_usbd_enable+0x98>
}
    668e:	bd10      	pop	{r4, pc}
    6690:	40027000 	.word	0x40027000
    6694:	4006ec00 	.word	0x4006ec00
    6698:	4006ec14 	.word	0x4006ec14
    669c:	40027800 	.word	0x40027800
    66a0:	200025b0 	.word	0x200025b0
    66a4:	20002540 	.word	0x20002540
    66a8:	2000516a 	.word	0x2000516a
    66ac:	20005169 	.word	0x20005169

000066b0 <nrfx_usbd_start>:
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
    66b0:	4b0a      	ldr	r3, [pc, #40]	; (66dc <nrfx_usbd_start+0x2c>)
    66b2:	2200      	movs	r2, #0
{
    66b4:	b510      	push	{r4, lr}
    m_bus_suspend = false;
    66b6:	701a      	strb	r2, [r3, #0]
       NRF_USBD_INT_EP0SETUP_MASK     |
       NRF_USBD_INT_DATAEP_MASK;

   if (enable_sof)
   {
       ints_to_enable |= NRF_USBD_INT_SOF_MASK;
    66b8:	4a09      	ldr	r2, [pc, #36]	; (66e0 <nrfx_usbd_start+0x30>)
    66ba:	4b0a      	ldr	r3, [pc, #40]	; (66e4 <nrfx_usbd_start+0x34>)
    p_reg->INTENSET = mask;
    66bc:	4c0a      	ldr	r4, [pc, #40]	; (66e8 <nrfx_usbd_start+0x38>)
    66be:	2800      	cmp	r0, #0
    66c0:	bf18      	it	ne
    66c2:	4613      	movne	r3, r2
    66c4:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
    66c8:	2027      	movs	r0, #39	; 0x27
    66ca:	f7fe f8fb 	bl	48c4 <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
    66ce:	2301      	movs	r3, #1
    66d0:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    66d4:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
    66d8:	bd10      	pop	{r4, pc}
    66da:	bf00      	nop
    66dc:	20005167 	.word	0x20005167
    66e0:	01e01407 	.word	0x01e01407
    66e4:	01c01407 	.word	0x01c01407
    66e8:	40027000 	.word	0x40027000

000066ec <nrfx_usbd_is_initialized>:
    }
}

bool nrfx_usbd_is_initialized(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
    66ec:	4b02      	ldr	r3, [pc, #8]	; (66f8 <nrfx_usbd_is_initialized+0xc>)
    66ee:	7818      	ldrb	r0, [r3, #0]
}
    66f0:	3800      	subs	r0, #0
    66f2:	bf18      	it	ne
    66f4:	2001      	movne	r0, #1
    66f6:	4770      	bx	lr
    66f8:	20005169 	.word	0x20005169

000066fc <nrfx_usbd_is_enabled>:

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
    66fc:	4b03      	ldr	r3, [pc, #12]	; (670c <nrfx_usbd_is_enabled+0x10>)
    66fe:	7818      	ldrb	r0, [r3, #0]
}
    6700:	2801      	cmp	r0, #1
    6702:	bf94      	ite	ls
    6704:	2000      	movls	r0, #0
    6706:	2001      	movhi	r0, #1
    6708:	4770      	bx	lr
    670a:	bf00      	nop
    670c:	20005169 	.word	0x20005169

00006710 <nrfx_usbd_init>:
{
    6710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
    6714:	4b1d      	ldr	r3, [pc, #116]	; (678c <nrfx_usbd_init+0x7c>)
    6716:	781c      	ldrb	r4, [r3, #0]
    6718:	2c00      	cmp	r4, #0
    671a:	d135      	bne.n	6788 <nrfx_usbd_init+0x78>
    m_event_handler = event_handler;
    671c:	4a1c      	ldr	r2, [pc, #112]	; (6790 <nrfx_usbd_init+0x80>)
    671e:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    6720:	2201      	movs	r2, #1
    6722:	701a      	strb	r2, [r3, #0]
    6724:	4625      	mov	r5, r4
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    6726:	f240 18ff 	movw	r8, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
    672a:	4627      	mov	r7, r4
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    672c:	f065 067f 	orn	r6, r5, #127	; 0x7f
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    6730:	f015 0f08 	tst.w	r5, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    6734:	b2f6      	uxtb	r6, r6
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    6736:	bf14      	ite	ne
    6738:	4641      	movne	r1, r8
    673a:	2140      	moveq	r1, #64	; 0x40
    673c:	4630      	mov	r0, r6
    673e:	f004 feee 	bl	b51e <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    6742:	4630      	mov	r0, r6
    6744:	f7ff fd32 	bl	61ac <ep_state_access>
        p_state->status = NRFX_USBD_EP_OK;
    6748:	3501      	adds	r5, #1
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    674a:	2d09      	cmp	r5, #9
        p_state->status = NRFX_USBD_EP_OK;
    674c:	7387      	strb	r7, [r0, #14]
        p_state->handler.feeder = NULL;
    674e:	6007      	str	r7, [r0, #0]
        p_state->transfer_cnt = 0;
    6750:	6087      	str	r7, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    6752:	d1eb      	bne.n	672c <nrfx_usbd_init+0x1c>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    6754:	2140      	movs	r1, #64	; 0x40
        p_state->status = NRFX_USBD_EP_OK;
    6756:	2500      	movs	r5, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    6758:	f240 16ff 	movw	r6, #511	; 0x1ff
    675c:	4620      	mov	r0, r4
    675e:	f004 fede 	bl	b51e <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    6762:	4620      	mov	r0, r4
    6764:	f7ff fd22 	bl	61ac <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    6768:	3401      	adds	r4, #1
    676a:	b2e4      	uxtb	r4, r4
    676c:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
    676e:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
    6770:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
    6772:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    6774:	d102      	bne.n	677c <nrfx_usbd_init+0x6c>
    return NRFX_SUCCESS;
    6776:	4807      	ldr	r0, [pc, #28]	; (6794 <nrfx_usbd_init+0x84>)
}
    6778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    677c:	f014 0f08 	tst.w	r4, #8
    6780:	bf14      	ite	ne
    6782:	4631      	movne	r1, r6
    6784:	2140      	moveq	r1, #64	; 0x40
    6786:	e7e9      	b.n	675c <nrfx_usbd_init+0x4c>
        return NRFX_ERROR_INVALID_STATE;
    6788:	4803      	ldr	r0, [pc, #12]	; (6798 <nrfx_usbd_init+0x88>)
    678a:	e7f5      	b.n	6778 <nrfx_usbd_init+0x68>
    678c:	20005169 	.word	0x20005169
    6790:	200026d4 	.word	0x200026d4
    6794:	0bad0000 	.word	0x0bad0000
    6798:	0bad0005 	.word	0x0bad0005

0000679c <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
    679c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    67a0:	4605      	mov	r5, r0
	__asm__ volatile(
    67a2:	f04f 0320 	mov.w	r3, #32
    67a6:	f3ef 8711 	mrs	r7, BASEPRI
    67aa:	f383 8811 	msr	BASEPRI, r3
    67ae:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
    67b2:	f010 040f 	ands.w	r4, r0, #15
    67b6:	d103      	bne.n	67c0 <nrfx_usbd_ep_transfer+0x24>
    67b8:	4b28      	ldr	r3, [pc, #160]	; (685c <nrfx_usbd_ep_transfer+0xc0>)
    67ba:	781b      	ldrb	r3, [r3, #0]
    67bc:	4283      	cmp	r3, r0
    67be:	d149      	bne.n	6854 <nrfx_usbd_ep_transfer+0xb8>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    67c0:	4b27      	ldr	r3, [pc, #156]	; (6860 <nrfx_usbd_ep_transfer+0xc4>)
    67c2:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 6890 <nrfx_usbd_ep_transfer+0xf4>
    67c6:	681a      	ldr	r2, [r3, #0]
    67c8:	f8d9 6000 	ldr.w	r6, [r9]
    67cc:	43d2      	mvns	r2, r2
    67ce:	b292      	uxth	r2, r2
    const uint8_t ep_bitpos = ep2bit(ep);
    67d0:	4628      	mov	r0, r5
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    67d2:	4332      	orrs	r2, r6
    const uint8_t ep_bitpos = ep2bit(ep);
    67d4:	f004 fe69 	bl	b4aa <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    67d8:	f04f 0801 	mov.w	r8, #1
    67dc:	fa08 f800 	lsl.w	r8, r8, r0
    67e0:	ea12 0f08 	tst.w	r2, r8
    67e4:	d138      	bne.n	6858 <nrfx_usbd_ep_transfer+0xbc>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    67e6:	4628      	mov	r0, r5
    67e8:	f7ff fce0 	bl	61ac <ep_state_access>
    67ec:	220c      	movs	r2, #12
    67ee:	4354      	muls	r4, r2
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
    67f0:	062a      	lsls	r2, r5, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    67f2:	4603      	mov	r3, r0
        if (NRF_USBD_EPIN_CHECK(ep))
    67f4:	d52a      	bpl.n	684c <nrfx_usbd_ep_transfer+0xb0>
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    67f6:	4a1b      	ldr	r2, [pc, #108]	; (6864 <nrfx_usbd_ep_transfer+0xc8>)

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    67f8:	6808      	ldr	r0, [r1, #0]
    67fa:	4414      	add	r4, r2
    67fc:	f000 4060 	and.w	r0, r0, #3758096384	; 0xe0000000
    6800:	688a      	ldr	r2, [r1, #8]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    6802:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
    6806:	f002 0201 	and.w	r2, r2, #1
    680a:	d11a      	bne.n	6842 <nrfx_usbd_ep_transfer+0xa6>
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    680c:	b9ba      	cbnz	r2, 683e <nrfx_usbd_ep_transfer+0xa2>
                {
                    p_state->handler.feeder = nrfx_usbd_feeder_ram;
    680e:	4a16      	ldr	r2, [pc, #88]	; (6868 <nrfx_usbd_ep_transfer+0xcc>)
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
    6810:	601a      	str	r2, [r3, #0]
        }
        *p_context = *p_transfer;
    6812:	c907      	ldmia	r1, {r0, r1, r2}
    6814:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        p_state->p_context = p_context;

        p_state->transfer_cnt = 0;
    6818:	2200      	movs	r2, #0
    681a:	609a      	str	r2, [r3, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
    681c:	739a      	strb	r2, [r3, #14]
        p_state->p_context = p_context;
    681e:	605c      	str	r4, [r3, #4]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6820:	4b12      	ldr	r3, [pc, #72]	; (686c <nrfx_usbd_ep_transfer+0xd0>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
        ret = NRFX_SUCCESS;
    6822:	4813      	ldr	r0, [pc, #76]	; (6870 <nrfx_usbd_ep_transfer+0xd4>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    6824:	ea46 0608 	orr.w	r6, r6, r8
    6828:	2280      	movs	r2, #128	; 0x80
    682a:	f8c9 6000 	str.w	r6, [r9]
    682e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
    6832:	f387 8811 	msr	BASEPRI, r7
    6836:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    683a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                    p_state->handler.feeder = nrfx_usbd_feeder_ram_zlp;
    683e:	4a0d      	ldr	r2, [pc, #52]	; (6874 <nrfx_usbd_ep_transfer+0xd8>)
    6840:	e7e6      	b.n	6810 <nrfx_usbd_ep_transfer+0x74>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    6842:	b90a      	cbnz	r2, 6848 <nrfx_usbd_ep_transfer+0xac>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash;
    6844:	4a0c      	ldr	r2, [pc, #48]	; (6878 <nrfx_usbd_ep_transfer+0xdc>)
    6846:	e7e3      	b.n	6810 <nrfx_usbd_ep_transfer+0x74>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash_zlp;
    6848:	4a0c      	ldr	r2, [pc, #48]	; (687c <nrfx_usbd_ep_transfer+0xe0>)
    684a:	e7e1      	b.n	6810 <nrfx_usbd_ep_transfer+0x74>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
    684c:	4a0c      	ldr	r2, [pc, #48]	; (6880 <nrfx_usbd_ep_transfer+0xe4>)
    684e:	4414      	add	r4, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
    6850:	4a0c      	ldr	r2, [pc, #48]	; (6884 <nrfx_usbd_ep_transfer+0xe8>)
    6852:	e7dd      	b.n	6810 <nrfx_usbd_ep_transfer+0x74>
        ret = NRFX_ERROR_INVALID_ADDR;
    6854:	480c      	ldr	r0, [pc, #48]	; (6888 <nrfx_usbd_ep_transfer+0xec>)
    6856:	e7ec      	b.n	6832 <nrfx_usbd_ep_transfer+0x96>
        ret = NRFX_ERROR_BUSY;
    6858:	480c      	ldr	r0, [pc, #48]	; (688c <nrfx_usbd_ep_transfer+0xf0>)
    685a:	e7ea      	b.n	6832 <nrfx_usbd_ep_transfer+0x96>
    685c:	2000516a 	.word	0x2000516a
    6860:	200025b0 	.word	0x200025b0
    6864:	20002544 	.word	0x20002544
    6868:	0000b45f 	.word	0x0000b45f
    686c:	e000e100 	.word	0xe000e100
    6870:	0bad0000 	.word	0x0bad0000
    6874:	0000b481 	.word	0x0000b481
    6878:	00006295 	.word	0x00006295
    687c:	000062cd 	.word	0x000062cd
    6880:	200024d4 	.word	0x200024d4
    6884:	0000b431 	.word	0x0000b431
    6888:	0bad000a 	.word	0x0bad000a
    688c:	0bad000b 	.word	0x0bad000b
    6890:	20002540 	.word	0x20002540

00006894 <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
    6894:	f010 0f08 	tst.w	r0, #8
    6898:	4b07      	ldr	r3, [pc, #28]	; (68b8 <nrfx_usbd_epout_size_get+0x24>)
    689a:	d006      	beq.n	68aa <nrfx_usbd_epout_size_get+0x16>
        size_t size_isoout = p_reg->SIZE.ISOOUT;
    689c:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
        if ((size_isoout & USBD_SIZE_ISOOUT_ZERO_Msk) ==
    68a0:	f410 3f80 	tst.w	r0, #65536	; 0x10000
            size_isoout = 0;
    68a4:	bf18      	it	ne
    68a6:	2000      	movne	r0, #0
    68a8:	4770      	bx	lr
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    68aa:	f000 000f 	and.w	r0, r0, #15
    68ae:	f500 7094 	add.w	r0, r0, #296	; 0x128
    68b2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
    68b6:	4770      	bx	lr
    68b8:	40027000 	.word	0x40027000

000068bc <usbd_dmareq_process>:
{
    68bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
    68c0:	4b59      	ldr	r3, [pc, #356]	; (6a28 <usbd_dmareq_process+0x16c>)
{
    68c2:	b087      	sub	sp, #28
    if (!m_dma_pending)
    68c4:	781a      	ldrb	r2, [r3, #0]
    68c6:	9301      	str	r3, [sp, #4]
    68c8:	2a00      	cmp	r2, #0
    68ca:	d16a      	bne.n	69a2 <usbd_dmareq_process+0xe6>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
    68cc:	f8df 9174 	ldr.w	r9, [pc, #372]	; 6a44 <usbd_dmareq_process+0x188>
    68d0:	f8df b174 	ldr.w	fp, [pc, #372]	; 6a48 <usbd_dmareq_process+0x18c>
    68d4:	46ca      	mov	sl, r9
    68d6:	f8db 1000 	ldr.w	r1, [fp]
    68da:	f8d9 6000 	ldr.w	r6, [r9]
    68de:	4031      	ands	r1, r6
    68e0:	d05f      	beq.n	69a2 <usbd_dmareq_process+0xe6>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
    68e2:	f011 2601 	ands.w	r6, r1, #16777472	; 0x1000100
    68e6:	d05f      	beq.n	69a8 <usbd_dmareq_process+0xec>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
    68e8:	fa96 f1a6 	rbit	r1, r6
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
    68ec:	2900      	cmp	r1, #0
    68ee:	d05e      	beq.n	69ae <usbd_dmareq_process+0xf2>
  {
    return 32U;
  }
  return __builtin_clz(value);
    68f0:	fab1 f181 	clz	r1, r1
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    68f4:	290f      	cmp	r1, #15
    68f6:	d95c      	bls.n	69b2 <usbd_dmareq_process+0xf6>
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
    68f8:	f1a1 0410 	sub.w	r4, r1, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    68fc:	b2e4      	uxtb	r4, r4
            usbd_ep_state_t * p_state = ep_state_access(ep);
    68fe:	4620      	mov	r0, r4
    6900:	f7ff fc54 	bl	61ac <ep_state_access>
    6904:	2601      	movs	r6, #1
            if (NRF_USBD_EPIN_CHECK(ep))
    6906:	fa4f f884 	sxtb.w	r8, r4
    690a:	408e      	lsls	r6, r1
    690c:	43f3      	mvns	r3, r6
    690e:	f1b8 0f00 	cmp.w	r8, #0
            usbd_ep_state_t * p_state = ep_state_access(ep);
    6912:	4605      	mov	r5, r0
            if (NRF_USBD_EPIN_CHECK(ep))
    6914:	9300      	str	r3, [sp, #0]
    6916:	da4f      	bge.n	69b8 <usbd_dmareq_process+0xfc>
                continue_transfer = p_state->handler.feeder(
    6918:	6803      	ldr	r3, [r0, #0]
    691a:	8982      	ldrh	r2, [r0, #12]
    691c:	6841      	ldr	r1, [r0, #4]
    691e:	a804      	add	r0, sp, #16
    6920:	4798      	blx	r3
                if (!continue_transfer)
    6922:	b900      	cbnz	r0, 6926 <usbd_dmareq_process+0x6a>
                    p_state->handler.consumer = NULL;
    6924:	6028      	str	r0, [r5, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
    6926:	f7ff fc21 	bl	616c <nrf52_errata_166>
    if (nrfx_usbd_errata_199())
    692a:	b110      	cbz	r0, 6932 <usbd_dmareq_process+0x76>
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
    692c:	4b3f      	ldr	r3, [pc, #252]	; (6a2c <usbd_dmareq_process+0x170>)
    692e:	2282      	movs	r2, #130	; 0x82
    6930:	601a      	str	r2, [r3, #0]
    m_dma_pending = true;
    6932:	9a01      	ldr	r2, [sp, #4]
            m_ep_ready &= ~(1U << pos);
    6934:	9e00      	ldr	r6, [sp, #0]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
    6936:	9804      	ldr	r0, [sp, #16]
    m_dma_pending = true;
    6938:	2301      	movs	r3, #1
    693a:	7013      	strb	r3, [r2, #0]
            m_ep_ready &= ~(1U << pos);
    693c:	f8da 3000 	ldr.w	r3, [sl]
            p_state->transfer_cnt += transfer.size;
    6940:	9a05      	ldr	r2, [sp, #20]
            m_ep_ready &= ~(1U << pos);
    6942:	401e      	ands	r6, r3
            p_state->transfer_cnt += transfer.size;
    6944:	68ab      	ldr	r3, [r5, #8]
            m_ep_ready &= ~(1U << pos);
    6946:	f8ca 6000 	str.w	r6, [sl]
            p_state->transfer_cnt += transfer.size;
    694a:	4413      	add	r3, r2
    if (NRF_USBD_EPIN_CHECK(ep))
    694c:	f1b8 0f00 	cmp.w	r8, #0
    6950:	60ab      	str	r3, [r5, #8]
    6952:	f004 0108 	and.w	r1, r4, #8
    6956:	4b36      	ldr	r3, [pc, #216]	; (6a30 <usbd_dmareq_process+0x174>)
    6958:	f004 040f 	and.w	r4, r4, #15
    695c:	da55      	bge.n	6a0a <usbd_dmareq_process+0x14e>
        if (NRF_USBD_EPISO_CHECK(ep))
    695e:	2900      	cmp	r1, #0
    6960:	d04b      	beq.n	69fa <usbd_dmareq_process+0x13e>
            p_reg->ISOIN.PTR    = ptr;
    6962:	f8c3 06a0 	str.w	r0, [r3, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
    6966:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    return (nrf_usbd_task_t)(
    696a:	2304      	movs	r3, #4
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    696c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    6970:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6974:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    6978:	2201      	movs	r2, #1
    697a:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    697c:	681b      	ldr	r3, [r3, #0]
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    697e:	4a2d      	ldr	r2, [pc, #180]	; (6a34 <usbd_dmareq_process+0x178>)
    6980:	4b2d      	ldr	r3, [pc, #180]	; (6a38 <usbd_dmareq_process+0x17c>)
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    6982:	492e      	ldr	r1, [pc, #184]	; (6a3c <usbd_dmareq_process+0x180>)
    6984:	ea13 0828 	ands.w	r8, r3, r8, asr #32
    6988:	bf38      	it	cc
    698a:	4690      	movcc	r8, r2
    698c:	f838 3014 	ldrh.w	r3, [r8, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    6990:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6994:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    6998:	681a      	ldr	r2, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
    699a:	b912      	cbnz	r2, 69a2 <usbd_dmareq_process+0xe6>
    699c:	680a      	ldr	r2, [r1, #0]
    699e:	2a00      	cmp	r2, #0
    69a0:	d0fa      	beq.n	6998 <usbd_dmareq_process+0xdc>
}
    69a2:	b007      	add	sp, #28
    69a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
    69a8:	fa91 f1a1 	rbit	r1, r1
    69ac:	e79e      	b.n	68ec <usbd_dmareq_process+0x30>
    return 32U;
    69ae:	2120      	movs	r1, #32
    69b0:	e7a2      	b.n	68f8 <usbd_dmareq_process+0x3c>
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    69b2:	f041 0480 	orr.w	r4, r1, #128	; 0x80
    69b6:	e7a2      	b.n	68fe <usbd_dmareq_process+0x42>
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    69b8:	4620      	mov	r0, r4
    69ba:	f7ff ff6b 	bl	6894 <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
    69be:	89aa      	ldrh	r2, [r5, #12]
    69c0:	6869      	ldr	r1, [r5, #4]
    69c2:	682e      	ldr	r6, [r5, #0]
    69c4:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    69c6:	4607      	mov	r7, r0
                continue_transfer = p_state->handler.consumer(
    69c8:	a804      	add	r0, sp, #16
    69ca:	47b0      	blx	r6
                if (transfer.p_data.rx == NULL)
    69cc:	9a04      	ldr	r2, [sp, #16]
    69ce:	2a00      	cmp	r2, #0
    69d0:	d0a7      	beq.n	6922 <usbd_dmareq_process+0x66>
                else if (transfer.size < rx_size)
    69d2:	9a05      	ldr	r2, [sp, #20]
    69d4:	4297      	cmp	r7, r2
    69d6:	d9a4      	bls.n	6922 <usbd_dmareq_process+0x66>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    69d8:	2702      	movs	r7, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    69da:	9800      	ldr	r0, [sp, #0]
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    69dc:	73af      	strb	r7, [r5, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    69de:	f7ff fcff 	bl	63e0 <atomic_and.constprop.0>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    69e2:	2306      	movs	r3, #6
    69e4:	f88d 300c 	strb.w	r3, [sp, #12]
                    m_event_handler(&evt);
    69e8:	4b15      	ldr	r3, [pc, #84]	; (6a40 <usbd_dmareq_process+0x184>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    69ea:	f88d 400e 	strb.w	r4, [sp, #14]
                    m_event_handler(&evt);
    69ee:	681b      	ldr	r3, [r3, #0]
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    69f0:	f88d 700f 	strb.w	r7, [sp, #15]
                    m_event_handler(&evt);
    69f4:	a803      	add	r0, sp, #12
    69f6:	4798      	blx	r3
                    continue;
    69f8:	e76d      	b.n	68d6 <usbd_dmareq_process+0x1a>
            p_reg->EPIN[epnr].PTR    = ptr;
    69fa:	2114      	movs	r1, #20
    69fc:	fb01 3304 	mla	r3, r1, r4, r3
    6a00:	f8c3 0600 	str.w	r0, [r3, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
    6a04:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
    6a08:	e7af      	b.n	696a <usbd_dmareq_process+0xae>
        if (NRF_USBD_EPISO_CHECK(ep))
    6a0a:	b129      	cbz	r1, 6a18 <usbd_dmareq_process+0x15c>
            p_reg->ISOOUT.PTR    = ptr;
    6a0c:	f8c3 07a0 	str.w	r0, [r3, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
    6a10:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
    return (nrf_usbd_task_t)(
    6a14:	2328      	movs	r3, #40	; 0x28
    6a16:	e7a9      	b.n	696c <usbd_dmareq_process+0xb0>
            p_reg->EPOUT[epnr].PTR    = ptr;
    6a18:	2114      	movs	r1, #20
    6a1a:	fb01 3304 	mla	r3, r1, r4, r3
    6a1e:	f8c3 0700 	str.w	r0, [r3, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
    6a22:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
    6a26:	e7f5      	b.n	6a14 <usbd_dmareq_process+0x158>
    6a28:	20005168 	.word	0x20005168
    6a2c:	40027c1c 	.word	0x40027c1c
    6a30:	40027000 	.word	0x40027000
    6a34:	0000dc9a 	.word	0x0000dc9a
    6a38:	0000dc88 	.word	0x0000dc88
    6a3c:	40027100 	.word	0x40027100
    6a40:	200026d4 	.word	0x200026d4
    6a44:	200025b0 	.word	0x200025b0
    6a48:	20002540 	.word	0x20002540

00006a4c <ev_epdata_handler>:
{
    6a4c:	b538      	push	{r3, r4, r5, lr}
    return p_reg->EPDATASTATUS;
    6a4e:	4b11      	ldr	r3, [pc, #68]	; (6a94 <ev_epdata_handler+0x48>)
    6a50:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
    6a54:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
        dataepstatus &= ~(1UL << bitpos);
    6a58:	2501      	movs	r5, #1
    while (dataepstatus)
    6a5a:	b91c      	cbnz	r4, 6a64 <ev_epdata_handler+0x18>
}
    6a5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
    6a60:	f7ff bf2c 	b.w	68bc <usbd_dmareq_process>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
    6a64:	fa94 f1a4 	rbit	r1, r4
  if (value == 0U)
    6a68:	b171      	cbz	r1, 6a88 <ev_epdata_handler+0x3c>
  return __builtin_clz(value);
    6a6a:	fab1 f381 	clz	r3, r1
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    6a6e:	2b0f      	cmp	r3, #15
    6a70:	4619      	mov	r1, r3
    6a72:	dd0b      	ble.n	6a8c <ev_epdata_handler+0x40>
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
    6a74:	f1a1 0010 	sub.w	r0, r1, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    6a78:	b2c0      	uxtb	r0, r0
        dataepstatus &= ~(1UL << bitpos);
    6a7a:	fa05 f301 	lsl.w	r3, r5, r1
    6a7e:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
    6a82:	f7ff fcd5 	bl	6430 <usbd_ep_data_handler>
    6a86:	e7e8      	b.n	6a5a <ev_epdata_handler+0xe>
    return 32U;
    6a88:	2120      	movs	r1, #32
    6a8a:	e7f3      	b.n	6a74 <ev_epdata_handler+0x28>
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    6a8c:	f043 0080 	orr.w	r0, r3, #128	; 0x80
    6a90:	e7f3      	b.n	6a7a <ev_epdata_handler+0x2e>
    6a92:	bf00      	nop
    6a94:	40027000 	.word	0x40027000

00006a98 <nrf_usbd_epout_dma_handler>:
{
    6a98:	b537      	push	{r0, r1, r2, r4, r5, lr}
    6a9a:	4604      	mov	r4, r0
    usbd_dma_pending_clear();
    6a9c:	f7ff fb94 	bl	61c8 <usbd_dma_pending_clear>
    usbd_ep_state_t * p_state = ep_state_access(ep);
    6aa0:	4620      	mov	r0, r4
    6aa2:	f7ff fb83 	bl	61ac <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    6aa6:	7b83      	ldrb	r3, [r0, #14]
    6aa8:	2b03      	cmp	r3, #3
    6aaa:	d10c      	bne.n	6ac6 <nrf_usbd_epout_dma_handler+0x2e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    6aac:	4620      	mov	r0, r4
    6aae:	f004 fcfc 	bl	b4aa <ep2bit>
    6ab2:	2301      	movs	r3, #1
    6ab4:	fa03 f000 	lsl.w	r0, r3, r0
    6ab8:	43c0      	mvns	r0, r0
    6aba:	f7ff fc91 	bl	63e0 <atomic_and.constprop.0>
    usbd_dmareq_process();
    6abe:	f7ff fefd 	bl	68bc <usbd_dmareq_process>
}
    6ac2:	b003      	add	sp, #12
    6ac4:	bd30      	pop	{r4, r5, pc}
    else if (p_state->handler.consumer == NULL)
    6ac6:	6805      	ldr	r5, [r0, #0]
    6ac8:	2d00      	cmp	r5, #0
    6aca:	d1f8      	bne.n	6abe <nrf_usbd_epout_dma_handler+0x26>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    6acc:	4620      	mov	r0, r4
    6ace:	f004 fcec 	bl	b4aa <ep2bit>
    6ad2:	2301      	movs	r3, #1
    6ad4:	fa03 f000 	lsl.w	r0, r3, r0
    6ad8:	43c0      	mvns	r0, r0
    6ada:	f7ff fc81 	bl	63e0 <atomic_and.constprop.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    6ade:	2306      	movs	r3, #6
    6ae0:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    6ae4:	4b04      	ldr	r3, [pc, #16]	; (6af8 <nrf_usbd_epout_dma_handler+0x60>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    6ae6:	f88d 4006 	strb.w	r4, [sp, #6]
        m_event_handler(&evt);
    6aea:	681b      	ldr	r3, [r3, #0]
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    6aec:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
    6af0:	a801      	add	r0, sp, #4
    6af2:	4798      	blx	r3
    6af4:	e7e3      	b.n	6abe <nrf_usbd_epout_dma_handler+0x26>
    6af6:	bf00      	nop
    6af8:	200026d4 	.word	0x200026d4

00006afc <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
    6afc:	4b02      	ldr	r3, [pc, #8]	; (6b08 <nrfx_usbd_ep_stall+0xc>)
    6afe:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    6b02:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
    6b06:	4770      	bx	lr
    6b08:	40027000 	.word	0x40027000

00006b0c <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
    6b0c:	0702      	lsls	r2, r0, #28
    6b0e:	d413      	bmi.n	6b38 <nrfx_usbd_ep_stall_check+0x2c>
    if (NRF_USBD_EPIN_CHECK(ep))
    6b10:	f000 030f 	and.w	r3, r0, #15
    6b14:	f010 0f80 	tst.w	r0, #128	; 0x80
    6b18:	4a08      	ldr	r2, [pc, #32]	; (6b3c <nrfx_usbd_ep_stall_check+0x30>)
        return p_reg->HALTED.EPOUT[epnr];
    6b1a:	bf0b      	itete	eq
    6b1c:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return p_reg->HALTED.EPIN[epnr];
    6b20:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return p_reg->HALTED.EPOUT[epnr];
    6b24:	eb02 0383 	addeq.w	r3, r2, r3, lsl #2
        return p_reg->HALTED.EPIN[epnr];
    6b28:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return p_reg->HALTED.EPOUT[epnr];
    6b2c:	bf08      	it	eq
    6b2e:	6858      	ldreq	r0, [r3, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
    6b30:	1e43      	subs	r3, r0, #1
    6b32:	4258      	negs	r0, r3
    6b34:	4158      	adcs	r0, r3
    6b36:	4770      	bx	lr
        return false;
    6b38:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
    6b3a:	4770      	bx	lr
    6b3c:	40027000 	.word	0x40027000

00006b40 <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
    6b40:	4b04      	ldr	r3, [pc, #16]	; (6b54 <nrfx_usbd_ep_dtoggle_clear+0x14>)
    6b42:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
    6b46:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    6b4a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
    6b4e:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
    6b52:	4770      	bx	lr
    6b54:	40027000 	.word	0x40027000

00006b58 <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
    6b58:	b510      	push	{r4, lr}
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    6b5a:	2208      	movs	r2, #8
    6b5c:	2100      	movs	r1, #0
{
    6b5e:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    6b60:	f004 f897 	bl	ac92 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    6b64:	4b0e      	ldr	r3, [pc, #56]	; (6ba0 <nrfx_usbd_setup_get+0x48>)
    6b66:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    6b6a:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
    6b6c:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    6b70:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
    6b72:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    6b76:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    6b7a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
    6b7e:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
    6b80:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    6b84:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    6b88:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
    6b8c:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
    6b8e:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    6b92:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    6b96:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
    6b9a:	80e3      	strh	r3, [r4, #6]
}
    6b9c:	bd10      	pop	{r4, pc}
    6b9e:	bf00      	nop
    6ba0:	40027000 	.word	0x40027000

00006ba4 <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    6ba4:	4b02      	ldr	r3, [pc, #8]	; (6bb0 <nrfx_usbd_setup_data_clear+0xc>)
    6ba6:	2201      	movs	r2, #1
    6ba8:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    6baa:	681b      	ldr	r3, [r3, #0]

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
    6bac:	4770      	bx	lr
    6bae:	bf00      	nop
    6bb0:	4002704c 	.word	0x4002704c

00006bb4 <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    6bb4:	b513      	push	{r0, r1, r4, lr}
    usbd_dma_pending_clear();
    6bb6:	f7ff fb07 	bl	61c8 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    6bba:	4b0e      	ldr	r3, [pc, #56]	; (6bf4 <ev_dma_epout0_handler+0x40>)
    6bbc:	7b9a      	ldrb	r2, [r3, #14]
    6bbe:	2a03      	cmp	r2, #3
    6bc0:	d105      	bne.n	6bce <ev_dma_epout0_handler+0x1a>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    6bc2:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
    6bc6:	f7ff fc0b 	bl	63e0 <atomic_and.constprop.0>
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    6bca:	b002      	add	sp, #8
    6bcc:	bd10      	pop	{r4, pc}
    else if (p_state->handler.consumer == NULL)
    6bce:	681c      	ldr	r4, [r3, #0]
    6bd0:	b96c      	cbnz	r4, 6bee <ev_dma_epout0_handler+0x3a>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    6bd2:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
    6bd6:	f7ff fc03 	bl	63e0 <atomic_and.constprop.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    6bda:	2306      	movs	r3, #6
    6bdc:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    6be0:	4b05      	ldr	r3, [pc, #20]	; (6bf8 <ev_dma_epout0_handler+0x44>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    6be2:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
    6be6:	681b      	ldr	r3, [r3, #0]
    6be8:	a801      	add	r0, sp, #4
    6bea:	4798      	blx	r3
    6bec:	e7ed      	b.n	6bca <ev_dma_epout0_handler+0x16>
        nrfx_usbd_setup_data_clear();
    6bee:	f7ff ffd9 	bl	6ba4 <nrfx_usbd_setup_data_clear>
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    6bf2:	e7ea      	b.n	6bca <ev_dma_epout0_handler+0x16>
    6bf4:	200025b4 	.word	0x200025b4
    6bf8:	200026d4 	.word	0x200026d4

00006bfc <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    6bfc:	4b02      	ldr	r3, [pc, #8]	; (6c08 <nrfx_usbd_setup_clear+0xc>)
    6bfe:	2201      	movs	r2, #1
    6c00:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    6c02:	681b      	ldr	r3, [r3, #0]

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
    6c04:	4770      	bx	lr
    6c06:	bf00      	nop
    6c08:	40027050 	.word	0x40027050

00006c0c <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    6c0c:	4b02      	ldr	r3, [pc, #8]	; (6c18 <nrfx_usbd_setup_stall+0xc>)
    6c0e:	2201      	movs	r2, #1
    6c10:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    6c12:	681b      	ldr	r3, [r3, #0]

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
    6c14:	4770      	bx	lr
    6c16:	bf00      	nop
    6c18:	40027054 	.word	0x40027054

00006c1c <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
    6c1c:	4b01      	ldr	r3, [pc, #4]	; (6c24 <nrfx_usbd_last_setup_dir_get+0x8>)
    6c1e:	7818      	ldrb	r0, [r3, #0]
    6c20:	4770      	bx	lr
    6c22:	bf00      	nop
    6c24:	2000516a 	.word	0x2000516a

00006c28 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
    6c28:	b510      	push	{r4, lr}
    6c2a:	4602      	mov	r2, r0
	__asm__ volatile(
    6c2c:	f04f 0320 	mov.w	r3, #32
    6c30:	f3ef 8411 	mrs	r4, BASEPRI
    6c34:	f383 8811 	msr	BASEPRI, r3
    6c38:	f3bf 8f6f 	isb	sy
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
    6c3c:	f004 fc35 	bl	b4aa <ep2bit>
    6c40:	490d      	ldr	r1, [pc, #52]	; (6c78 <nrfx_usbd_transfer_out_drop+0x50>)
    6c42:	2301      	movs	r3, #1
    6c44:	fa03 f000 	lsl.w	r0, r3, r0
    6c48:	680b      	ldr	r3, [r1, #0]
    6c4a:	ea23 0300 	bic.w	r3, r3, r0
    6c4e:	600b      	str	r3, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
    6c50:	f012 0108 	ands.w	r1, r2, #8
    6c54:	d10a      	bne.n	6c6c <nrfx_usbd_transfer_out_drop+0x44>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
    6c56:	f002 030f 	and.w	r3, r2, #15
    6c5a:	009b      	lsls	r3, r3, #2
    6c5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6c60:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    6c64:	f8c3 14a0 	str.w	r1, [r3, #1184]	; 0x4a0
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    6c68:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
	__asm__ volatile(
    6c6c:	f384 8811 	msr	BASEPRI, r4
    6c70:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    6c74:	bd10      	pop	{r4, pc}
    6c76:	bf00      	nop
    6c78:	200025b0 	.word	0x200025b0

00006c7c <usbd_ep_abort>:
{
    6c7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6c7e:	4601      	mov	r1, r0
	__asm__ volatile(
    6c80:	f04f 0320 	mov.w	r3, #32
    6c84:	f3ef 8411 	mrs	r4, BASEPRI
    6c88:	f383 8811 	msr	BASEPRI, r3
    6c8c:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
    6c90:	f7ff fa8c 	bl	61ac <ep_state_access>
    6c94:	4605      	mov	r5, r0
    if (NRF_USBD_EPOUT_CHECK(ep))
    6c96:	4608      	mov	r0, r1
    6c98:	f004 fc07 	bl	b4aa <ep2bit>
    6c9c:	f011 0f80 	tst.w	r1, #128	; 0x80
    6ca0:	4e2f      	ldr	r6, [pc, #188]	; (6d60 <usbd_ep_abort+0xe4>)
    6ca2:	d11d      	bne.n	6ce0 <usbd_ep_abort+0x64>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    6ca4:	6832      	ldr	r2, [r6, #0]
    6ca6:	43d3      	mvns	r3, r2
    6ca8:	40c3      	lsrs	r3, r0
    6caa:	f013 0301 	ands.w	r3, r3, #1
    6cae:	d00a      	beq.n	6cc6 <usbd_ep_abort+0x4a>
            nrfx_usbd_transfer_out_drop(ep);
    6cb0:	4608      	mov	r0, r1
    6cb2:	f7ff ffb9 	bl	6c28 <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
    6cb6:	2303      	movs	r3, #3
    6cb8:	73ab      	strb	r3, [r5, #14]
	__asm__ volatile(
    6cba:	f384 8811 	msr	BASEPRI, r4
    6cbe:	f3bf 8f6f 	isb	sy
}
    6cc2:	b003      	add	sp, #12
    6cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            p_state->handler.consumer = NULL;
    6cc6:	602b      	str	r3, [r5, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    6cc8:	2301      	movs	r3, #1
    6cca:	fa03 f000 	lsl.w	r0, r3, r0
    6cce:	ea22 0200 	bic.w	r2, r2, r0
    6cd2:	6032      	str	r2, [r6, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    6cd4:	4a23      	ldr	r2, [pc, #140]	; (6d64 <usbd_ep_abort+0xe8>)
    6cd6:	6813      	ldr	r3, [r2, #0]
    6cd8:	ea23 0000 	bic.w	r0, r3, r0
    6cdc:	6010      	str	r0, [r2, #0]
    6cde:	e7ea      	b.n	6cb6 <usbd_ep_abort+0x3a>
        if(!NRF_USBD_EPISO_CHECK(ep))
    6ce0:	070b      	lsls	r3, r1, #28
    6ce2:	d411      	bmi.n	6d08 <usbd_ep_abort+0x8c>
            if(ep != NRFX_USBD_EPIN0)
    6ce4:	2980      	cmp	r1, #128	; 0x80
    6ce6:	4f20      	ldr	r7, [pc, #128]	; (6d68 <usbd_ep_abort+0xec>)
    6ce8:	4b20      	ldr	r3, [pc, #128]	; (6d6c <usbd_ep_abort+0xf0>)
    6cea:	d02f      	beq.n	6d4c <usbd_ep_abort+0xd0>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    6cec:	f001 020f 	and.w	r2, r1, #15
    6cf0:	f202 32da 	addw	r2, r2, #986	; 0x3da
    6cf4:	0052      	lsls	r2, r2, #1
    6cf6:	603a      	str	r2, [r7, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    6cf8:	681a      	ldr	r2, [r3, #0]
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    6cfa:	681f      	ldr	r7, [r3, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    6cfc:	b2d2      	uxtb	r2, r2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    6cfe:	f042 0202 	orr.w	r2, r2, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    6d02:	433a      	orrs	r2, r7
    6d04:	601a      	str	r2, [r3, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    6d06:	681b      	ldr	r3, [r3, #0]
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    6d08:	f8df c058 	ldr.w	ip, [pc, #88]	; 6d64 <usbd_ep_abort+0xe8>
    6d0c:	6837      	ldr	r7, [r6, #0]
    6d0e:	f8dc 2000 	ldr.w	r2, [ip]
    6d12:	2301      	movs	r3, #1
    6d14:	fa03 f000 	lsl.w	r0, r3, r0
    6d18:	ea67 0302 	orn	r3, r7, r2
    6d1c:	4203      	tst	r3, r0
    6d1e:	d0cc      	beq.n	6cba <usbd_ep_abort+0x3e>
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    6d20:	ea27 0700 	bic.w	r7, r7, r0
            p_state->handler.feeder = NULL;
    6d24:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    6d26:	6037      	str	r7, [r6, #0]
            p_state->handler.feeder = NULL;
    6d28:	602b      	str	r3, [r5, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    6d2a:	2303      	movs	r3, #3
    6d2c:	73ab      	strb	r3, [r5, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    6d2e:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    6d32:	4b0f      	ldr	r3, [pc, #60]	; (6d70 <usbd_ep_abort+0xf4>)
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    6d34:	f88d 1006 	strb.w	r1, [sp, #6]
            m_ep_ready       |=   1U << ep2bit(ep) ;
    6d38:	4310      	orrs	r0, r2
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    6d3a:	2206      	movs	r2, #6
            m_ep_ready       |=   1U << ep2bit(ep) ;
    6d3c:	f8cc 0000 	str.w	r0, [ip]
            m_event_handler(&evt);
    6d40:	681b      	ldr	r3, [r3, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    6d42:	f88d 2004 	strb.w	r2, [sp, #4]
            m_event_handler(&evt);
    6d46:	a801      	add	r0, sp, #4
    6d48:	4798      	blx	r3
    6d4a:	e7b6      	b.n	6cba <usbd_ep_abort+0x3e>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    6d4c:	f240 72b4 	movw	r2, #1972	; 0x7b4
    6d50:	603a      	str	r2, [r7, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    6d52:	681a      	ldr	r2, [r3, #0]
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    6d54:	681f      	ldr	r7, [r3, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    6d56:	b2d2      	uxtb	r2, r2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    6d58:	f042 0204 	orr.w	r2, r2, #4
    6d5c:	e7d1      	b.n	6d02 <usbd_ep_abort+0x86>
    6d5e:	bf00      	nop
    6d60:	20002540 	.word	0x20002540
    6d64:	200025b0 	.word	0x200025b0
    6d68:	40027800 	.word	0x40027800
    6d6c:	40027804 	.word	0x40027804
    6d70:	200026d4 	.word	0x200026d4

00006d74 <ev_setup_handler>:
{
    6d74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    6d76:	4b17      	ldr	r3, [pc, #92]	; (6dd4 <ev_setup_handler+0x60>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    6d78:	4c17      	ldr	r4, [pc, #92]	; (6dd8 <ev_setup_handler+0x64>)
    6d7a:	f8d3 6480 	ldr.w	r6, [r3, #1152]	; 0x480
    6d7e:	6823      	ldr	r3, [r4, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
    6d80:	4d16      	ldr	r5, [pc, #88]	; (6ddc <ev_setup_handler+0x68>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    6d82:	43da      	mvns	r2, r3
    6d84:	4b16      	ldr	r3, [pc, #88]	; (6de0 <ev_setup_handler+0x6c>)
        & (1U <<ep2bit(m_last_setup_dir)))
    6d86:	782f      	ldrb	r7, [r5, #0]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    6d88:	681b      	ldr	r3, [r3, #0]
    6d8a:	b292      	uxth	r2, r2
        & (1U <<ep2bit(m_last_setup_dir)))
    6d8c:	4638      	mov	r0, r7
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    6d8e:	431a      	orrs	r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
    6d90:	f004 fb8b 	bl	b4aa <ep2bit>
    6d94:	2301      	movs	r3, #1
    6d96:	4083      	lsls	r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    6d98:	4213      	tst	r3, r2
    6d9a:	d002      	beq.n	6da2 <ev_setup_handler+0x2e>
        usbd_ep_abort(m_last_setup_dir);
    6d9c:	4638      	mov	r0, r7
    6d9e:	f7ff ff6d 	bl	6c7c <usbd_ep_abort>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    6da2:	f006 0680 	and.w	r6, r6, #128	; 0x80
    (void)(NRFX_ATOMIC_FETCH_AND(
    6da6:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
    m_last_setup_dir =
    6daa:	702e      	strb	r6, [r5, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
    6dac:	f7ff fb18 	bl	63e0 <atomic_and.constprop.0>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
    6db0:	6823      	ldr	r3, [r4, #0]
    6db2:	f043 0301 	orr.w	r3, r3, #1
    6db6:	6023      	str	r3, [r4, #0]
    const nrfx_usbd_evt_t evt = {
    6db8:	2300      	movs	r3, #0
    6dba:	f8ad 3005 	strh.w	r3, [sp, #5]
    6dbe:	f88d 3007 	strb.w	r3, [sp, #7]
    6dc2:	2305      	movs	r3, #5
    6dc4:	f88d 3004 	strb.w	r3, [sp, #4]
    m_event_handler(&evt);
    6dc8:	4b06      	ldr	r3, [pc, #24]	; (6de4 <ev_setup_handler+0x70>)
    6dca:	a801      	add	r0, sp, #4
    6dcc:	681b      	ldr	r3, [r3, #0]
    6dce:	4798      	blx	r3
}
    6dd0:	b003      	add	sp, #12
    6dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6dd4:	40027000 	.word	0x40027000
    6dd8:	200025b0 	.word	0x200025b0
    6ddc:	2000516a 	.word	0x2000516a
    6de0:	20002540 	.word	0x20002540
    6de4:	200026d4 	.word	0x200026d4

00006de8 <nrfx_usbd_irq_handler>:
    return p_reg->INTENSET;
    6de8:	4b1b      	ldr	r3, [pc, #108]	; (6e58 <nrfx_usbd_irq_handler+0x70>)
    6dea:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    uint32_t active = 0;
    6dee:	2300      	movs	r3, #0
{
    6df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6df4:	2401      	movs	r4, #1
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    6df6:	461d      	mov	r5, r3
    while (to_process)
    6df8:	b970      	cbnz	r0, 6e18 <nrfx_usbd_irq_handler+0x30>
        m_isr[event_nr]();
    6dfa:	4f18      	ldr	r7, [pc, #96]	; (6e5c <nrfx_usbd_irq_handler+0x74>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
    6dfc:	f403 0600 	and.w	r6, r3, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
    6e00:	f423 0400 	bic.w	r4, r3, #8388608	; 0x800000
        active &= ~(1UL << event_nr);
    6e04:	f04f 0801 	mov.w	r8, #1
    while (active)
    6e08:	b9bc      	cbnz	r4, 6e3a <nrfx_usbd_irq_handler+0x52>
    usbd_dmareq_process();
    6e0a:	f7ff fd57 	bl	68bc <usbd_dmareq_process>
    if (setup_active)
    6e0e:	b306      	cbz	r6, 6e52 <nrfx_usbd_irq_handler+0x6a>
}
    6e10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
    6e14:	f7ff bfae 	b.w	6d74 <ev_setup_handler>
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    6e18:	4911      	ldr	r1, [pc, #68]	; (6e60 <nrfx_usbd_irq_handler+0x78>)
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
    6e1a:	fa90 f2a0 	rbit	r2, r0
  return __builtin_clz(value);
    6e1e:	fab2 f282 	clz	r2, r2
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
    6e22:	0096      	lsls	r6, r2, #2
    6e24:	4431      	add	r1, r6
    6e26:	fa04 f202 	lsl.w	r2, r4, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    6e2a:	680e      	ldr	r6, [r1, #0]
    if (ret)
    6e2c:	b116      	cbz	r6, 6e34 <nrfx_usbd_irq_handler+0x4c>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    6e2e:	600d      	str	r5, [r1, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    6e30:	6809      	ldr	r1, [r1, #0]
            active |= 1UL << event_nr;
    6e32:	4313      	orrs	r3, r2
        to_process &= ~(1UL << event_nr);
    6e34:	ea20 0002 	bic.w	r0, r0, r2
    6e38:	e7de      	b.n	6df8 <nrfx_usbd_irq_handler+0x10>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
    6e3a:	fa94 f5a4 	rbit	r5, r4
  return __builtin_clz(value);
    6e3e:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
    6e42:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
    6e46:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
    6e4a:	4798      	blx	r3
        active &= ~(1UL << event_nr);
    6e4c:	ea24 0405 	bic.w	r4, r4, r5
    6e50:	e7da      	b.n	6e08 <nrfx_usbd_irq_handler+0x20>
}
    6e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6e56:	bf00      	nop
    6e58:	40027000 	.word	0x40027000
    6e5c:	0000da84 	.word	0x0000da84
    6e60:	40027100 	.word	0x40027100

00006e64 <usbd_ep_abort_all>:
{
    6e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
    6e66:	4e13      	ldr	r6, [pc, #76]	; (6eb4 <usbd_ep_abort_all+0x50>)
    6e68:	4a13      	ldr	r2, [pc, #76]	; (6eb8 <usbd_ep_abort_all+0x54>)
    6e6a:	6834      	ldr	r4, [r6, #0]
    6e6c:	6812      	ldr	r2, [r2, #0]
    6e6e:	0c24      	lsrs	r4, r4, #16
    6e70:	0424      	lsls	r4, r4, #16
    6e72:	4314      	orrs	r4, r2
        ep_waiting &= ~(1U << bitpos);
    6e74:	2701      	movs	r7, #1
    while (0 != ep_waiting)
    6e76:	b91c      	cbnz	r4, 6e80 <usbd_ep_abort_all+0x1c>
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    6e78:	f240 13ff 	movw	r3, #511	; 0x1ff
    6e7c:	6033      	str	r3, [r6, #0]
}
    6e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
    6e80:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
    6e84:	b185      	cbz	r5, 6ea8 <usbd_ep_abort_all+0x44>
  return __builtin_clz(value);
    6e86:	fab5 f385 	clz	r3, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    6e8a:	2b0f      	cmp	r3, #15
    6e8c:	461d      	mov	r5, r3
    6e8e:	dd0d      	ble.n	6eac <usbd_ep_abort_all+0x48>
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
    6e90:	f1a5 0010 	sub.w	r0, r5, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    6e94:	b2c0      	uxtb	r0, r0
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
    6e96:	0703      	lsls	r3, r0, #28
    6e98:	d401      	bmi.n	6e9e <usbd_ep_abort_all+0x3a>
            usbd_ep_abort(bit2ep(bitpos));
    6e9a:	f7ff feef 	bl	6c7c <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
    6e9e:	fa07 f505 	lsl.w	r5, r7, r5
    6ea2:	ea24 0405 	bic.w	r4, r4, r5
    6ea6:	e7e6      	b.n	6e76 <usbd_ep_abort_all+0x12>
    return 32U;
    6ea8:	2520      	movs	r5, #32
    6eaa:	e7f1      	b.n	6e90 <usbd_ep_abort_all+0x2c>
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    6eac:	f043 0080 	orr.w	r0, r3, #128	; 0x80
    6eb0:	e7f1      	b.n	6e96 <usbd_ep_abort_all+0x32>
    6eb2:	bf00      	nop
    6eb4:	200025b0 	.word	0x200025b0
    6eb8:	20002540 	.word	0x20002540

00006ebc <nrfx_usbd_stop>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6ebc:	4b0c      	ldr	r3, [pc, #48]	; (6ef0 <nrfx_usbd_stop+0x34>)
    6ebe:	2280      	movs	r2, #128	; 0x80
{
    6ec0:	b510      	push	{r4, lr}
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
    6ec2:	2027      	movs	r0, #39	; 0x27
    6ec4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    6ec8:	f7fd fd20 	bl	490c <arch_irq_is_enabled>
    6ecc:	b170      	cbz	r0, 6eec <nrfx_usbd_stop+0x30>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
    6ece:	4c09      	ldr	r4, [pc, #36]	; (6ef4 <nrfx_usbd_stop+0x38>)
        usbd_ep_abort_all();
    6ed0:	f7ff ffc8 	bl	6e64 <usbd_ep_abort_all>
    6ed4:	2300      	movs	r3, #0
    6ed6:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
        NRFX_IRQ_DISABLE(USBD_IRQn);
    6eda:	2027      	movs	r0, #39	; 0x27
    (void) p_reg->USBPULLUP;
    6edc:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
    6ee0:	f7fd fd00 	bl	48e4 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    6ee4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6ee8:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
}
    6eec:	bd10      	pop	{r4, pc}
    6eee:	bf00      	nop
    6ef0:	e000e100 	.word	0xe000e100
    6ef4:	40027000 	.word	0x40027000

00006ef8 <nrfx_usbd_disable>:
{
    6ef8:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
    6efa:	f7ff ffdf 	bl	6ebc <nrfx_usbd_stop>
    return p_reg->INTENSET;
    6efe:	4b08      	ldr	r3, [pc, #32]	; (6f20 <nrfx_usbd_disable+0x28>)
    6f00:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
    6f04:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    6f08:	2200      	movs	r2, #0
    6f0a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    6f0e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    usbd_dma_pending_clear();
    6f12:	f7ff f959 	bl	61c8 <usbd_dma_pending_clear>
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    6f16:	4b03      	ldr	r3, [pc, #12]	; (6f24 <nrfx_usbd_disable+0x2c>)
    6f18:	2201      	movs	r2, #1
    6f1a:	701a      	strb	r2, [r3, #0]
}
    6f1c:	bd08      	pop	{r3, pc}
    6f1e:	bf00      	nop
    6f20:	40027000 	.word	0x40027000
    6f24:	20005169 	.word	0x20005169

00006f28 <nrfx_usbd_suspend>:
{
    6f28:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    6f2a:	f04f 0320 	mov.w	r3, #32
    6f2e:	f3ef 8511 	mrs	r5, BASEPRI
    6f32:	f383 8811 	msr	BASEPRI, r3
    6f36:	f3bf 8f6f 	isb	sy
    if (m_bus_suspend)
    6f3a:	4b11      	ldr	r3, [pc, #68]	; (6f80 <nrfx_usbd_suspend+0x58>)
    6f3c:	781b      	ldrb	r3, [r3, #0]
    6f3e:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    6f42:	b933      	cbnz	r3, 6f52 <nrfx_usbd_suspend+0x2a>
    bool suspended = false;
    6f44:	2400      	movs	r4, #0
	__asm__ volatile(
    6f46:	f385 8811 	msr	BASEPRI, r5
    6f4a:	f3bf 8f6f 	isb	sy
}
    6f4e:	4620      	mov	r0, r4
    6f50:	bd38      	pop	{r3, r4, r5, pc}
        usbd_ep_abort_all();
    6f52:	f7ff ff87 	bl	6e64 <usbd_ep_abort_all>
    return p_reg->EVENTCAUSE;
    6f56:	4b0b      	ldr	r3, [pc, #44]	; (6f84 <nrfx_usbd_suspend+0x5c>)
    6f58:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
    6f5c:	f412 7200 	ands.w	r2, r2, #512	; 0x200
    6f60:	d1f0      	bne.n	6f44 <nrfx_usbd_suspend+0x1c>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
    6f62:	2101      	movs	r1, #1
    6f64:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    6f68:	f8d3 152c 	ldr.w	r1, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
    6f6c:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    6f70:	0589      	lsls	r1, r1, #22
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
    6f72:	bf42      	ittt	mi
    6f74:	f8c3 252c 	strmi.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    6f78:	f8d3 352c 	ldrmi.w	r3, [r3, #1324]	; 0x52c
    bool suspended = false;
    6f7c:	4614      	movmi	r4, r2
}
    6f7e:	e7e2      	b.n	6f46 <nrfx_usbd_suspend+0x1e>
    6f80:	20005167 	.word	0x20005167
    6f84:	40027000 	.word	0x40027000

00006f88 <nrfx_usbd_ep_disable>:
{
    6f88:	b510      	push	{r4, lr}
    6f8a:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
    6f8c:	f7ff fe76 	bl	6c7c <usbd_ep_abort>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    6f90:	4a10      	ldr	r2, [pc, #64]	; (6fd4 <nrfx_usbd_ep_disable+0x4c>)
    if (NRF_USBD_EPIN_CHECK(ep))
    6f92:	f014 0f80 	tst.w	r4, #128	; 0x80
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    6f96:	f004 000f 	and.w	r0, r4, #15
        p_reg->EPINEN &= ~(1UL << epnr);
    6f9a:	f04f 0301 	mov.w	r3, #1
    6f9e:	bf14      	ite	ne
    6fa0:	f8d2 1510 	ldrne.w	r1, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    6fa4:	f8d2 1514 	ldreq.w	r1, [r2, #1300]	; 0x514
    6fa8:	fa03 f300 	lsl.w	r3, r3, r0
    6fac:	ea6f 0303 	mvn.w	r3, r3
        p_reg->EPINEN &= ~(1UL << epnr);
    6fb0:	bf15      	itete	ne
    6fb2:	400b      	andne	r3, r1
        p_reg->EPOUTEN &= ~(1UL << epnr);
    6fb4:	400b      	andeq	r3, r1
        p_reg->EPINEN &= ~(1UL << epnr);
    6fb6:	f8c2 3510 	strne.w	r3, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    6fba:	f8c2 3514 	streq.w	r3, [r2, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    6fbe:	bf14      	ite	ne
    6fc0:	4b05      	ldrne	r3, [pc, #20]	; (6fd8 <nrfx_usbd_ep_disable+0x50>)
    6fc2:	4b06      	ldreq	r3, [pc, #24]	; (6fdc <nrfx_usbd_ep_disable+0x54>)
    6fc4:	5c1a      	ldrb	r2, [r3, r0]
    6fc6:	2301      	movs	r3, #1
    6fc8:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
    6fca:	4a02      	ldr	r2, [pc, #8]	; (6fd4 <nrfx_usbd_ep_disable+0x4c>)
    6fcc:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    6fd0:	bd10      	pop	{r4, pc}
    6fd2:	bf00      	nop
    6fd4:	40027000 	.word	0x40027000
    6fd8:	0000dfe1 	.word	0x0000dfe1
    6fdc:	0000dfea 	.word	0x0000dfea

00006fe0 <nrfx_usbd_ep_enable>:
{
    6fe0:	b570      	push	{r4, r5, r6, lr}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    6fe2:	b243      	sxtb	r3, r0
    6fe4:	2b00      	cmp	r3, #0
    6fe6:	4b23      	ldr	r3, [pc, #140]	; (7074 <nrfx_usbd_ep_enable+0x94>)
    6fe8:	4a23      	ldr	r2, [pc, #140]	; (7078 <nrfx_usbd_ep_enable+0x98>)
    6fea:	bfa8      	it	ge
    6fec:	461a      	movge	r2, r3
    6fee:	f000 030f 	and.w	r3, r0, #15
    6ff2:	f04f 0401 	mov.w	r4, #1
    6ff6:	5cd1      	ldrb	r1, [r2, r3]
    p_reg->INTENSET = mask;
    6ff8:	4a20      	ldr	r2, [pc, #128]	; (707c <nrfx_usbd_ep_enable+0x9c>)
    6ffa:	fa04 f101 	lsl.w	r1, r4, r1
{
    6ffe:	4605      	mov	r5, r0
    7000:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
    if (NRF_USBD_EPIN_CHECK(ep))
    7004:	da0c      	bge.n	7020 <nrfx_usbd_ep_enable+0x40>
        return 0 != (p_reg->EPINEN & (1UL << epnr));
    7006:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    700a:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    700c:	07c8      	lsls	r0, r1, #31
    700e:	d406      	bmi.n	701e <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPINEN |= 1UL << epnr;
    7010:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    7014:	fa04 f303 	lsl.w	r3, r4, r3
    7018:	4303      	orrs	r3, r0
    701a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
    701e:	bd70      	pop	{r4, r5, r6, pc}
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
    7020:	f8d2 1514 	ldr.w	r1, [r2, #1300]	; 0x514
    7024:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    7026:	07c9      	lsls	r1, r1, #31
    7028:	d4f9      	bmi.n	701e <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPOUTEN |= 1UL << epnr;
    702a:	f8d2 6514 	ldr.w	r6, [r2, #1300]	; 0x514
    702e:	fa04 f103 	lsl.w	r1, r4, r3
    7032:	4331      	orrs	r1, r6
    7034:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
    7038:	2b00      	cmp	r3, #0
    703a:	d0f0      	beq.n	701e <nrfx_usbd_ep_enable+0x3e>
        NRF_USBD_EPOUT_CHECK(ep) &&
    703c:	0703      	lsls	r3, r0, #28
    703e:	d4ee      	bmi.n	701e <nrfx_usbd_ep_enable+0x3e>
	__asm__ volatile(
    7040:	f04f 0320 	mov.w	r3, #32
    7044:	f3ef 8611 	mrs	r6, BASEPRI
    7048:	f383 8811 	msr	BASEPRI, r3
    704c:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
    7050:	f7ff fdea 	bl	6c28 <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    7054:	4628      	mov	r0, r5
    7056:	f004 fa28 	bl	b4aa <ep2bit>
    705a:	4a09      	ldr	r2, [pc, #36]	; (7080 <nrfx_usbd_ep_enable+0xa0>)
    705c:	6813      	ldr	r3, [r2, #0]
    705e:	fa04 f000 	lsl.w	r0, r4, r0
    7062:	ea23 0000 	bic.w	r0, r3, r0
    7066:	6010      	str	r0, [r2, #0]
	__asm__ volatile(
    7068:	f386 8811 	msr	BASEPRI, r6
    706c:	f3bf 8f6f 	isb	sy
}
    7070:	e7d5      	b.n	701e <nrfx_usbd_ep_enable+0x3e>
    7072:	bf00      	nop
    7074:	0000dfea 	.word	0x0000dfea
    7078:	0000dfe1 	.word	0x0000dfe1
    707c:	40027000 	.word	0x40027000
    7080:	20002540 	.word	0x20002540

00007084 <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    7084:	0603      	lsls	r3, r0, #24
{
    7086:	b510      	push	{r4, lr}
    7088:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    708a:	d405      	bmi.n	7098 <nrfx_usbd_ep_stall_clear+0x14>
    708c:	f7ff fd3e 	bl	6b0c <nrfx_usbd_ep_stall_check>
    7090:	b110      	cbz	r0, 7098 <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
    7092:	4620      	mov	r0, r4
    7094:	f7ff fdc8 	bl	6c28 <nrfx_usbd_transfer_out_drop>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
    7098:	4b01      	ldr	r3, [pc, #4]	; (70a0 <nrfx_usbd_ep_stall_clear+0x1c>)
    709a:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
    709e:	bd10      	pop	{r4, pc}
    70a0:	40027000 	.word	0x40027000

000070a4 <verify_header>:
}
#endif /* MBEDTLS_MEMORY_DEBUG */

static int verify_header( memory_header *hdr )
{
    if( hdr->magic1 != MAGIC1 )
    70a4:	6801      	ldr	r1, [r0, #0]
    70a6:	4a0e      	ldr	r2, [pc, #56]	; (70e0 <verify_header+0x3c>)
    70a8:	4291      	cmp	r1, r2
{
    70aa:	4603      	mov	r3, r0
    if( hdr->magic1 != MAGIC1 )
    70ac:	d115      	bne.n	70da <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: MAGIC1 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->magic2 != MAGIC2 )
    70ae:	69c1      	ldr	r1, [r0, #28]
    70b0:	f1a2 2210 	sub.w	r2, r2, #268439552	; 0x10001000
    70b4:	f1a2 12ef 	sub.w	r2, r2, #15663343	; 0xef00ef
    70b8:	4291      	cmp	r1, r2
    70ba:	d10e      	bne.n	70da <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: MAGIC2 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->alloc > 1 )
    70bc:	6882      	ldr	r2, [r0, #8]
    70be:	2a01      	cmp	r2, #1
    70c0:	d80b      	bhi.n	70da <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: alloc has illegal value\n" );
#endif
        return( 1 );
    }

    if( hdr->prev != NULL && hdr->prev == hdr->next )
    70c2:	68c2      	ldr	r2, [r0, #12]
    70c4:	b112      	cbz	r2, 70cc <verify_header+0x28>
    70c6:	6901      	ldr	r1, [r0, #16]
    70c8:	428a      	cmp	r2, r1
    70ca:	d006      	beq.n	70da <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: prev == next\n" );
#endif
        return( 1 );
    }

    if( hdr->prev_free != NULL && hdr->prev_free == hdr->next_free )
    70cc:	6958      	ldr	r0, [r3, #20]
    70ce:	b128      	cbz	r0, 70dc <verify_header+0x38>
    70d0:	699b      	ldr	r3, [r3, #24]
    70d2:	1a1b      	subs	r3, r3, r0
    70d4:	4258      	negs	r0, r3
    70d6:	4158      	adcs	r0, r3
    70d8:	4770      	bx	lr
        return( 1 );
    70da:	2001      	movs	r0, #1
#endif
        return( 1 );
    }

    return( 0 );
}
    70dc:	4770      	bx	lr
    70de:	bf00      	nop
    70e0:	ff00aa55 	.word	0xff00aa55

000070e4 <verify_chain>:

static int verify_chain( void )
{
    memory_header *prv = heap.first, *cur;
    70e4:	4b0d      	ldr	r3, [pc, #52]	; (711c <verify_chain+0x38>)
{
    70e6:	b570      	push	{r4, r5, r6, lr}
    memory_header *prv = heap.first, *cur;
    70e8:	689e      	ldr	r6, [r3, #8]

    if( prv == NULL || verify_header( prv ) != 0 )
    70ea:	b1a6      	cbz	r6, 7116 <verify_chain+0x32>
    70ec:	4630      	mov	r0, r6
    70ee:	f7ff ffd9 	bl	70a4 <verify_header>
    70f2:	4604      	mov	r4, r0
    70f4:	b978      	cbnz	r0, 7116 <verify_chain+0x32>
                                  "failed\n" );
#endif
        return( 1 );
    }

    if( heap.first->prev != NULL )
    70f6:	68f3      	ldr	r3, [r6, #12]
    70f8:	b96b      	cbnz	r3, 7116 <verify_chain+0x32>
                                  "first->prev != NULL\n" );
#endif
        return( 1 );
    }

    cur = heap.first->next;
    70fa:	6935      	ldr	r5, [r6, #16]

    while( cur != NULL )
    70fc:	b90d      	cbnz	r5, 7102 <verify_chain+0x1e>
        prv = cur;
        cur = cur->next;
    }

    return( 0 );
}
    70fe:	4620      	mov	r0, r4
    7100:	bd70      	pop	{r4, r5, r6, pc}
        if( verify_header( cur ) != 0 )
    7102:	4628      	mov	r0, r5
    7104:	f7ff ffce 	bl	70a4 <verify_header>
    7108:	b928      	cbnz	r0, 7116 <verify_chain+0x32>
        if( cur->prev != prv )
    710a:	68eb      	ldr	r3, [r5, #12]
    710c:	42b3      	cmp	r3, r6
    710e:	d102      	bne.n	7116 <verify_chain+0x32>
        cur = cur->next;
    7110:	462e      	mov	r6, r5
    7112:	692d      	ldr	r5, [r5, #16]
    7114:	e7f2      	b.n	70fc <verify_chain+0x18>
        return( 1 );
    7116:	2401      	movs	r4, #1
    7118:	e7f1      	b.n	70fe <verify_chain+0x1a>
    711a:	bf00      	nop
    711c:	20002718 	.word	0x20002718

00007120 <buffer_alloc_calloc>:

static void *buffer_alloc_calloc( size_t n, size_t size )
{
    7120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if defined(MBEDTLS_MEMORY_BACKTRACE)
    void *trace_buffer[MAX_BT];
    size_t trace_cnt;
#endif

    if( heap.buf == NULL || heap.first == NULL )
    7124:	4d40      	ldr	r5, [pc, #256]	; (7228 <buffer_alloc_calloc+0x108>)
    7126:	682c      	ldr	r4, [r5, #0]
    7128:	b1d4      	cbz	r4, 7160 <buffer_alloc_calloc+0x40>
    712a:	68ac      	ldr	r4, [r5, #8]
    712c:	b1c4      	cbz	r4, 7160 <buffer_alloc_calloc+0x40>
        return( NULL );

    original_len = len = n * size;

    if( n == 0 || size == 0 || len / n != size )
    712e:	2800      	cmp	r0, #0
    7130:	d04d      	beq.n	71ce <buffer_alloc_calloc+0xae>
    7132:	2900      	cmp	r1, #0
    7134:	d04b      	beq.n	71ce <buffer_alloc_calloc+0xae>
    original_len = len = n * size;
    7136:	fb01 f600 	mul.w	r6, r1, r0
    if( n == 0 || size == 0 || len / n != size )
    713a:	fbb6 f0f0 	udiv	r0, r6, r0
    713e:	4288      	cmp	r0, r1
    7140:	d145      	bne.n	71ce <buffer_alloc_calloc+0xae>
        return( NULL );
    else if( len > (size_t)-MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    7142:	1d30      	adds	r0, r6, #4
    7144:	d843      	bhi.n	71ce <buffer_alloc_calloc+0xae>
        return( NULL );

    if( len % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    7146:	07b1      	lsls	r1, r6, #30
    7148:	d00d      	beq.n	7166 <buffer_alloc_calloc+0x46>
    {
        len -= len % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    714a:	f026 0703 	bic.w	r7, r6, #3
        len += MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    714e:	3704      	adds	r7, #4
    memory_header *new, *cur = heap.first_free;
    7150:	68ec      	ldr	r4, [r5, #12]
    7152:	e003      	b.n	715c <buffer_alloc_calloc+0x3c>

    // Find block that fits
    //
    while( cur != NULL )
    {
        if( cur->size >= len )
    7154:	6863      	ldr	r3, [r4, #4]
    7156:	42bb      	cmp	r3, r7
    7158:	d23b      	bcs.n	71d2 <buffer_alloc_calloc+0xb2>
            break;

        cur = cur->next_free;
    715a:	69a4      	ldr	r4, [r4, #24]
    while( cur != NULL )
    715c:	2c00      	cmp	r4, #0
    715e:	d1f9      	bne.n	7154 <buffer_alloc_calloc+0x34>

    ret = (unsigned char *) cur + sizeof( memory_header );
    memset( ret, 0, original_len );

    return( ret );
}
    7160:	4620      	mov	r0, r4
    7162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7166:	4637      	mov	r7, r6
    7168:	e7f2      	b.n	7150 <buffer_alloc_calloc+0x30>
            heap.first_free = cur->next_free;
    716a:	60e8      	str	r0, [r5, #12]
    716c:	e044      	b.n	71f8 <buffer_alloc_calloc+0xd8>
    p = ( (unsigned char *) cur ) + sizeof(memory_header) + len;
    716e:	f107 0c20 	add.w	ip, r7, #32
    7172:	eb04 030c 	add.w	r3, r4, ip
    new->size = cur->size - len - sizeof(memory_header);
    7176:	3920      	subs	r1, #32
    7178:	6059      	str	r1, [r3, #4]
    new->alloc = 0;
    717a:	2100      	movs	r1, #0
    new->prev = cur;
    717c:	e9c3 1402 	strd	r1, r4, [r3, #8]
    new->magic1 = MAGIC1;
    7180:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 7230 <buffer_alloc_calloc+0x110>
    new->next = cur->next;
    7184:	6921      	ldr	r1, [r4, #16]
    7186:	6119      	str	r1, [r3, #16]
    new->magic1 = MAGIC1;
    7188:	f844 e00c 	str.w	lr, [r4, ip]
    new->magic2 = MAGIC2;
    718c:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 7234 <buffer_alloc_calloc+0x114>
    7190:	f8c3 c01c 	str.w	ip, [r3, #28]
    if( new->next != NULL )
    7194:	b101      	cbz	r1, 7198 <buffer_alloc_calloc+0x78>
        new->next->prev = new;
    7196:	60cb      	str	r3, [r1, #12]
    new->next_free = cur->next_free;
    7198:	e9c3 2005 	strd	r2, r0, [r3, #20]
    if( new->prev_free != NULL )
    719c:	b1aa      	cbz	r2, 71ca <buffer_alloc_calloc+0xaa>
        new->prev_free->next_free = new;
    719e:	6193      	str	r3, [r2, #24]
    if( new->next_free != NULL )
    71a0:	699a      	ldr	r2, [r3, #24]
    71a2:	b102      	cbz	r2, 71a6 <buffer_alloc_calloc+0x86>
        new->next_free->prev_free = new;
    71a4:	6153      	str	r3, [r2, #20]
    cur->next = new;
    71a6:	6123      	str	r3, [r4, #16]
    cur->prev_free = NULL;
    71a8:	2300      	movs	r3, #0
    cur->next_free = NULL;
    71aa:	e9c4 3305 	strd	r3, r3, [r4, #20]
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    71ae:	692b      	ldr	r3, [r5, #16]
    cur->alloc = 1;
    71b0:	f04f 0901 	mov.w	r9, #1
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    71b4:	07db      	lsls	r3, r3, #31
    cur->size = len;
    71b6:	e9c4 7901 	strd	r7, r9, [r4, #4]
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    71ba:	d52d      	bpl.n	7218 <buffer_alloc_calloc+0xf8>
    71bc:	f7ff ff92 	bl	70e4 <verify_chain>
    71c0:	b350      	cbz	r0, 7218 <buffer_alloc_calloc+0xf8>
        mbedtls_exit( 1 );
    71c2:	4b1a      	ldr	r3, [pc, #104]	; (722c <buffer_alloc_calloc+0x10c>)
    71c4:	4648      	mov	r0, r9
    71c6:	681b      	ldr	r3, [r3, #0]
    71c8:	e025      	b.n	7216 <buffer_alloc_calloc+0xf6>
        heap.first_free = new;
    71ca:	60eb      	str	r3, [r5, #12]
    71cc:	e7e8      	b.n	71a0 <buffer_alloc_calloc+0x80>
        return( NULL );
    71ce:	2400      	movs	r4, #0
    71d0:	e7c6      	b.n	7160 <buffer_alloc_calloc+0x40>
    if( cur->alloc != 0 )
    71d2:	68a3      	ldr	r3, [r4, #8]
    71d4:	b11b      	cbz	r3, 71de <buffer_alloc_calloc+0xbe>
        mbedtls_exit( 1 );
    71d6:	4b15      	ldr	r3, [pc, #84]	; (722c <buffer_alloc_calloc+0x10c>)
    71d8:	2001      	movs	r0, #1
    71da:	681b      	ldr	r3, [r3, #0]
    71dc:	4798      	blx	r3
    if( cur->size - len < sizeof(memory_header) +
    71de:	6861      	ldr	r1, [r4, #4]
    71e0:	1bc9      	subs	r1, r1, r7
    71e2:	2923      	cmp	r1, #35	; 0x23
    71e4:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
    71e8:	f104 0820 	add.w	r8, r4, #32
    71ec:	d8bf      	bhi.n	716e <buffer_alloc_calloc+0x4e>
        cur->alloc = 1;
    71ee:	2301      	movs	r3, #1
    71f0:	60a3      	str	r3, [r4, #8]
        if( cur->prev_free != NULL )
    71f2:	2a00      	cmp	r2, #0
    71f4:	d0b9      	beq.n	716a <buffer_alloc_calloc+0x4a>
            cur->prev_free->next_free = cur->next_free;
    71f6:	6190      	str	r0, [r2, #24]
        if( cur->next_free != NULL )
    71f8:	69a3      	ldr	r3, [r4, #24]
    71fa:	b103      	cbz	r3, 71fe <buffer_alloc_calloc+0xde>
            cur->next_free->prev_free = cur->prev_free;
    71fc:	615a      	str	r2, [r3, #20]
        cur->prev_free = NULL;
    71fe:	2300      	movs	r3, #0
        cur->next_free = NULL;
    7200:	e9c4 3305 	strd	r3, r3, [r4, #20]
        if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    7204:	692b      	ldr	r3, [r5, #16]
    7206:	07da      	lsls	r2, r3, #31
    7208:	d506      	bpl.n	7218 <buffer_alloc_calloc+0xf8>
    720a:	f7ff ff6b 	bl	70e4 <verify_chain>
    720e:	b118      	cbz	r0, 7218 <buffer_alloc_calloc+0xf8>
            mbedtls_exit( 1 );
    7210:	4b06      	ldr	r3, [pc, #24]	; (722c <buffer_alloc_calloc+0x10c>)
    7212:	681b      	ldr	r3, [r3, #0]
    7214:	2001      	movs	r0, #1
        mbedtls_exit( 1 );
    7216:	4798      	blx	r3
    memset( ret, 0, original_len );
    7218:	4632      	mov	r2, r6
    721a:	2100      	movs	r1, #0
    721c:	4640      	mov	r0, r8
    ret = (unsigned char *) cur + sizeof( memory_header );
    721e:	4644      	mov	r4, r8
    memset( ret, 0, original_len );
    7220:	f003 fd37 	bl	ac92 <memset>
    return( ret );
    7224:	e79c      	b.n	7160 <buffer_alloc_calloc+0x40>
    7226:	bf00      	nop
    7228:	20002718 	.word	0x20002718
    722c:	20000188 	.word	0x20000188
    7230:	ff00aa55 	.word	0xff00aa55
    7234:	ee119966 	.word	0xee119966

00007238 <buffer_alloc_free>:

static void buffer_alloc_free( void *ptr )
{
    7238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    memory_header *hdr, *old = NULL;
    unsigned char *p = (unsigned char *) ptr;

    if( ptr == NULL || heap.buf == NULL || heap.first == NULL )
    723c:	4605      	mov	r5, r0
    723e:	2800      	cmp	r0, #0
    7240:	d07c      	beq.n	733c <buffer_alloc_free+0x104>
    7242:	4e3f      	ldr	r6, [pc, #252]	; (7340 <buffer_alloc_free+0x108>)
    7244:	6833      	ldr	r3, [r6, #0]
    7246:	2b00      	cmp	r3, #0
    7248:	d078      	beq.n	733c <buffer_alloc_free+0x104>
    724a:	68b2      	ldr	r2, [r6, #8]
    724c:	2a00      	cmp	r2, #0
    724e:	d075      	beq.n	733c <buffer_alloc_free+0x104>
        return;

    if( p < heap.buf || p >= heap.buf + heap.len )
    7250:	4283      	cmp	r3, r0
    7252:	d803      	bhi.n	725c <buffer_alloc_free+0x24>
    7254:	6872      	ldr	r2, [r6, #4]
    7256:	4413      	add	r3, r2
    7258:	4298      	cmp	r0, r3
    725a:	d303      	bcc.n	7264 <buffer_alloc_free+0x2c>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() outside of managed "
                                  "space\n" );
#endif
        mbedtls_exit( 1 );
    725c:	4b39      	ldr	r3, [pc, #228]	; (7344 <buffer_alloc_free+0x10c>)
    725e:	2001      	movs	r0, #1
    7260:	681b      	ldr	r3, [r3, #0]
    7262:	4798      	blx	r3
    }

    p -= sizeof(memory_header);
    7264:	f1a5 0420 	sub.w	r4, r5, #32
    hdr = (memory_header *) p;

    if( verify_header( hdr ) != 0 )
    7268:	4620      	mov	r0, r4
    726a:	f7ff ff1b 	bl	70a4 <verify_header>
    726e:	b118      	cbz	r0, 7278 <buffer_alloc_free+0x40>
        mbedtls_exit( 1 );
    7270:	4b34      	ldr	r3, [pc, #208]	; (7344 <buffer_alloc_free+0x10c>)
    7272:	2001      	movs	r0, #1
    7274:	681b      	ldr	r3, [r3, #0]
    7276:	4798      	blx	r3

    if( hdr->alloc != 1 )
    7278:	f855 3c18 	ldr.w	r3, [r5, #-24]
    727c:	2b01      	cmp	r3, #1
    727e:	d003      	beq.n	7288 <buffer_alloc_free+0x50>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() on unallocated "
                                  "data\n" );
#endif
        mbedtls_exit( 1 );
    7280:	4b30      	ldr	r3, [pc, #192]	; (7344 <buffer_alloc_free+0x10c>)
    7282:	2001      	movs	r0, #1
    7284:	681b      	ldr	r3, [r3, #0]
    7286:	4798      	blx	r3
    hdr->trace_count = 0;
#endif

    // Regroup with block before
    //
    if( hdr->prev != NULL && hdr->prev->alloc == 0 )
    7288:	f855 7c14 	ldr.w	r7, [r5, #-20]
    hdr->alloc = 0;
    728c:	2300      	movs	r3, #0
    728e:	f845 3c18 	str.w	r3, [r5, #-24]
    if( hdr->prev != NULL && hdr->prev->alloc == 0 )
    7292:	b1af      	cbz	r7, 72c0 <buffer_alloc_free+0x88>
    7294:	68ba      	ldr	r2, [r7, #8]
    7296:	b992      	cbnz	r2, 72be <buffer_alloc_free+0x86>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        heap.header_count--;
#endif
        hdr->prev->size += sizeof(memory_header) + hdr->size;
    7298:	f855 3c1c 	ldr.w	r3, [r5, #-28]
    729c:	f103 0220 	add.w	r2, r3, #32
    72a0:	687b      	ldr	r3, [r7, #4]
    72a2:	4413      	add	r3, r2
    72a4:	607b      	str	r3, [r7, #4]
        hdr->prev->next = hdr->next;
    72a6:	f855 3c10 	ldr.w	r3, [r5, #-16]
    72aa:	613b      	str	r3, [r7, #16]
        old = hdr;
        hdr = hdr->prev;

        if( hdr->next != NULL )
    72ac:	b103      	cbz	r3, 72b0 <buffer_alloc_free+0x78>
            hdr->next->prev = hdr;
    72ae:	60df      	str	r7, [r3, #12]

        memset( old, 0, sizeof(memory_header) );
    72b0:	4620      	mov	r0, r4
    72b2:	2220      	movs	r2, #32
    72b4:	2100      	movs	r1, #0
    72b6:	f003 fcec 	bl	ac92 <memset>
    72ba:	4623      	mov	r3, r4
    72bc:	463c      	mov	r4, r7
    memory_header *hdr, *old = NULL;
    72be:	461f      	mov	r7, r3
    }

    // Regroup with block after
    //
    if( hdr->next != NULL && hdr->next->alloc == 0 )
    72c0:	6920      	ldr	r0, [r4, #16]
    72c2:	2800      	cmp	r0, #0
    72c4:	d032      	beq.n	732c <buffer_alloc_free+0xf4>
    72c6:	6883      	ldr	r3, [r0, #8]
    72c8:	2b00      	cmp	r3, #0
    72ca:	d12f      	bne.n	732c <buffer_alloc_free+0xf4>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        heap.header_count--;
#endif
        hdr->size += sizeof(memory_header) + hdr->next->size;
    72cc:	6863      	ldr	r3, [r4, #4]
    72ce:	6842      	ldr	r2, [r0, #4]
    72d0:	3320      	adds	r3, #32
    72d2:	4413      	add	r3, r2
    72d4:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
    72d8:	6063      	str	r3, [r4, #4]
        old = hdr->next;
        hdr->next = hdr->next->next;
    72da:	6903      	ldr	r3, [r0, #16]
    72dc:	6123      	str	r3, [r4, #16]

        if( hdr->prev_free != NULL || hdr->next_free != NULL )
    72de:	b9da      	cbnz	r2, 7318 <buffer_alloc_free+0xe0>
    72e0:	bb01      	cbnz	r1, 7324 <buffer_alloc_free+0xec>

            if( hdr->next_free != NULL )
                hdr->next_free->prev_free = hdr->prev_free;
        }

        hdr->prev_free = old->prev_free;
    72e2:	6942      	ldr	r2, [r0, #20]
        hdr->next_free = old->next_free;
    72e4:	6981      	ldr	r1, [r0, #24]
        hdr->prev_free = old->prev_free;
    72e6:	6162      	str	r2, [r4, #20]
        hdr->next_free = old->next_free;
    72e8:	61a1      	str	r1, [r4, #24]

        if( hdr->prev_free != NULL )
    72ea:	b1ea      	cbz	r2, 7328 <buffer_alloc_free+0xf0>
            hdr->prev_free->next_free = hdr;
    72ec:	6194      	str	r4, [r2, #24]
        else
            heap.first_free = hdr;

        if( hdr->next_free != NULL )
    72ee:	69a2      	ldr	r2, [r4, #24]
    72f0:	b102      	cbz	r2, 72f4 <buffer_alloc_free+0xbc>
            hdr->next_free->prev_free = hdr;
    72f2:	6154      	str	r4, [r2, #20]

        if( hdr->next != NULL )
    72f4:	b103      	cbz	r3, 72f8 <buffer_alloc_free+0xc0>
            hdr->next->prev = hdr;
    72f6:	60dc      	str	r4, [r3, #12]

        memset( old, 0, sizeof(memory_header) );
    72f8:	2220      	movs	r2, #32
    72fa:	2100      	movs	r1, #0
    72fc:	f003 fcc9 	bl	ac92 <memset>
        if( heap.first_free != NULL )
            heap.first_free->prev_free = hdr;
        heap.first_free = hdr;
    }

    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_FREE ) && verify_chain() != 0 )
    7300:	6933      	ldr	r3, [r6, #16]
    7302:	079b      	lsls	r3, r3, #30
    7304:	d51a      	bpl.n	733c <buffer_alloc_free+0x104>
    7306:	f7ff feed 	bl	70e4 <verify_chain>
    730a:	b1b8      	cbz	r0, 733c <buffer_alloc_free+0x104>
        mbedtls_exit( 1 );
    730c:	4b0d      	ldr	r3, [pc, #52]	; (7344 <buffer_alloc_free+0x10c>)
}
    730e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        mbedtls_exit( 1 );
    7312:	681b      	ldr	r3, [r3, #0]
    7314:	2001      	movs	r0, #1
    7316:	4718      	bx	r3
                hdr->prev_free->next_free = hdr->next_free;
    7318:	6191      	str	r1, [r2, #24]
            if( hdr->next_free != NULL )
    731a:	69a1      	ldr	r1, [r4, #24]
    731c:	2900      	cmp	r1, #0
    731e:	d0e0      	beq.n	72e2 <buffer_alloc_free+0xaa>
                hdr->next_free->prev_free = hdr->prev_free;
    7320:	614a      	str	r2, [r1, #20]
    7322:	e7de      	b.n	72e2 <buffer_alloc_free+0xaa>
                heap.first_free = hdr->next_free;
    7324:	60f1      	str	r1, [r6, #12]
    7326:	e7f8      	b.n	731a <buffer_alloc_free+0xe2>
            heap.first_free = hdr;
    7328:	60f4      	str	r4, [r6, #12]
    732a:	e7e0      	b.n	72ee <buffer_alloc_free+0xb6>
    if( old == NULL )
    732c:	2f00      	cmp	r7, #0
    732e:	d1e7      	bne.n	7300 <buffer_alloc_free+0xc8>
        hdr->next_free = heap.first_free;
    7330:	68f3      	ldr	r3, [r6, #12]
    7332:	61a3      	str	r3, [r4, #24]
        if( heap.first_free != NULL )
    7334:	b103      	cbz	r3, 7338 <buffer_alloc_free+0x100>
            heap.first_free->prev_free = hdr;
    7336:	615c      	str	r4, [r3, #20]
        heap.first_free = hdr;
    7338:	60f4      	str	r4, [r6, #12]
    733a:	e7e1      	b.n	7300 <buffer_alloc_free+0xc8>
}
    733c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7340:	20002718 	.word	0x20002718
    7344:	20000188 	.word	0x20000188

00007348 <mbedtls_memory_buffer_alloc_init>:
    (void) mbedtls_mutex_unlock( &heap.mutex );
}
#endif /* MBEDTLS_THREADING_C */

void mbedtls_memory_buffer_alloc_init( unsigned char *buf, size_t len )
{
    7348:	b538      	push	{r3, r4, r5, lr}
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
    734a:	2214      	movs	r2, #20
{
    734c:	460d      	mov	r5, r1
    734e:	4604      	mov	r4, r0
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
    7350:	2100      	movs	r1, #0
    7352:	4812      	ldr	r0, [pc, #72]	; (739c <mbedtls_memory_buffer_alloc_init+0x54>)
    7354:	f003 fc9d 	bl	ac92 <memset>
#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &heap.mutex );
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc_mutexed,
                              buffer_alloc_free_mutexed );
#else
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc, buffer_alloc_free );
    7358:	4911      	ldr	r1, [pc, #68]	; (73a0 <mbedtls_memory_buffer_alloc_init+0x58>)
    735a:	4812      	ldr	r0, [pc, #72]	; (73a4 <mbedtls_memory_buffer_alloc_init+0x5c>)
    735c:	f000 f832 	bl	73c4 <mbedtls_platform_set_calloc_free>
#endif

    if( len < sizeof( memory_header ) + MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    7360:	2d23      	cmp	r5, #35	; 0x23
    7362:	d91a      	bls.n	739a <mbedtls_memory_buffer_alloc_init+0x52>
        return;
    else if( (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    7364:	f014 0303 	ands.w	r3, r4, #3
    {
        /* Adjust len first since buf is used in the computation */
        len -= MBEDTLS_MEMORY_ALIGN_MULTIPLE
    7368:	bf1f      	itttt	ne
    736a:	3d04      	subne	r5, #4
    736c:	18ed      	addne	r5, r5, r3
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    736e:	f1c3 0304 	rsbne	r3, r3, #4
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
    7372:	18e4      	addne	r4, r4, r3
    }

    memset( buf, 0, len );
    7374:	462a      	mov	r2, r5
    7376:	2100      	movs	r1, #0
    7378:	4620      	mov	r0, r4
    737a:	f003 fc8a 	bl	ac92 <memset>

    heap.buf = buf;
    737e:	4b07      	ldr	r3, [pc, #28]	; (739c <mbedtls_memory_buffer_alloc_init+0x54>)
    heap.len = len;

    heap.first = (memory_header *)buf;
    heap.first->size = len - sizeof( memory_header );
    heap.first->magic1 = MAGIC1;
    7380:	4a09      	ldr	r2, [pc, #36]	; (73a8 <mbedtls_memory_buffer_alloc_init+0x60>)
    heap.first = (memory_header *)buf;
    7382:	609c      	str	r4, [r3, #8]
    heap.len = len;
    7384:	e9c3 4500 	strd	r4, r5, [r3]
    heap.first->magic1 = MAGIC1;
    7388:	6022      	str	r2, [r4, #0]
    heap.first->magic2 = MAGIC2;
    738a:	f1a2 2210 	sub.w	r2, r2, #268439552	; 0x10001000
    heap.first->size = len - sizeof( memory_header );
    738e:	3d20      	subs	r5, #32
    heap.first->magic2 = MAGIC2;
    7390:	f1a2 12ef 	sub.w	r2, r2, #15663343	; 0xef00ef
    heap.first->size = len - sizeof( memory_header );
    7394:	6065      	str	r5, [r4, #4]
    heap.first->magic2 = MAGIC2;
    7396:	61e2      	str	r2, [r4, #28]
    heap.first_free = heap.first;
    7398:	60dc      	str	r4, [r3, #12]
}
    739a:	bd38      	pop	{r3, r4, r5, pc}
    739c:	20002718 	.word	0x20002718
    73a0:	00007239 	.word	0x00007239
    73a4:	00007121 	.word	0x00007121
    73a8:	ff00aa55 	.word	0xff00aa55

000073ac <mbedtls_calloc>:
static void * (*mbedtls_calloc_func)( size_t, size_t ) = MBEDTLS_PLATFORM_STD_CALLOC;
static void (*mbedtls_free_func)( void * ) = MBEDTLS_PLATFORM_STD_FREE;

void * mbedtls_calloc( size_t nmemb, size_t size )
{
    return (*mbedtls_calloc_func)( nmemb, size );
    73ac:	4b01      	ldr	r3, [pc, #4]	; (73b4 <mbedtls_calloc+0x8>)
    73ae:	681b      	ldr	r3, [r3, #0]
    73b0:	4718      	bx	r3
    73b2:	bf00      	nop
    73b4:	20000184 	.word	0x20000184

000073b8 <mbedtls_free>:
}

void mbedtls_free( void * ptr )
{
    (*mbedtls_free_func)( ptr );
    73b8:	4b01      	ldr	r3, [pc, #4]	; (73c0 <mbedtls_free+0x8>)
    73ba:	681b      	ldr	r3, [r3, #0]
    73bc:	4718      	bx	r3
    73be:	bf00      	nop
    73c0:	2000018c 	.word	0x2000018c

000073c4 <mbedtls_platform_set_calloc_free>:
}

int mbedtls_platform_set_calloc_free( void * (*calloc_func)( size_t, size_t ),
                              void (*free_func)( void * ) )
{
    mbedtls_calloc_func = calloc_func;
    73c4:	4b02      	ldr	r3, [pc, #8]	; (73d0 <mbedtls_platform_set_calloc_free+0xc>)
    73c6:	6018      	str	r0, [r3, #0]
    mbedtls_free_func = free_func;
    73c8:	4b02      	ldr	r3, [pc, #8]	; (73d4 <mbedtls_platform_set_calloc_free+0x10>)
    return( 0 );
}
    73ca:	2000      	movs	r0, #0
    mbedtls_free_func = free_func;
    73cc:	6019      	str	r1, [r3, #0]
}
    73ce:	4770      	bx	lr
    73d0:	20000184 	.word	0x20000184
    73d4:	2000018c 	.word	0x2000018c

000073d8 <mbedtls_platform_zeroize>:

void mbedtls_platform_zeroize( void *buf, size_t len )
{
    MBEDTLS_INTERNAL_VALIDATE( len == 0 || buf != NULL );

    if( len > 0 )
    73d8:	460a      	mov	r2, r1
    73da:	b119      	cbz	r1, 73e4 <mbedtls_platform_zeroize+0xc>
        memset_func( buf, 0, len );
    73dc:	4b02      	ldr	r3, [pc, #8]	; (73e8 <mbedtls_platform_zeroize+0x10>)
    73de:	2100      	movs	r1, #0
    73e0:	681b      	ldr	r3, [r3, #0]
    73e2:	4718      	bx	r3
}
    73e4:	4770      	bx	lr
    73e6:	bf00      	nop
    73e8:	20000190 	.word	0x20000190

000073ec <rsa_check_context.isra.0>:
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    73ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    73ee:	f100 0608 	add.w	r6, r0, #8
    73f2:	6847      	ldr	r7, [r0, #4]
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    73f4:	4604      	mov	r4, r0
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    73f6:	4630      	mov	r0, r6
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    73f8:	460d      	mov	r5, r1
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    73fa:	f004 fcfb 	bl	bdf4 <mbedtls_mpi_size>
    73fe:	4287      	cmp	r7, r0
    7400:	d116      	bne.n	7430 <rsa_check_context.isra.0+0x44>
    7402:	6863      	ldr	r3, [r4, #4]
    7404:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    7408:	d812      	bhi.n	7430 <rsa_check_context.isra.0+0x44>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
    740a:	2100      	movs	r1, #0
    740c:	4630      	mov	r0, r6
    740e:	f004 fe68 	bl	c0e2 <mbedtls_mpi_cmp_int>
    7412:	2800      	cmp	r0, #0
    7414:	dd0c      	ble.n	7430 <rsa_check_context.isra.0+0x44>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
    7416:	2100      	movs	r1, #0
    7418:	4630      	mov	r0, r6
    741a:	f004 fcbe 	bl	bd9a <mbedtls_mpi_get_bit>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
    741e:	b138      	cbz	r0, 7430 <rsa_check_context.isra.0+0x44>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
    7420:	b945      	cbnz	r5, 7434 <rsa_check_context.isra.0+0x48>
    /*
     * 2. Exponents must be positive
     */

    /* Always need E for public key operations */
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
    7422:	2100      	movs	r1, #0
    7424:	f104 0014 	add.w	r0, r4, #20
    7428:	f004 fe5b 	bl	c0e2 <mbedtls_mpi_cmp_int>
    742c:	2800      	cmp	r0, #0
    742e:	dc1e      	bgt.n	746e <rsa_check_context.isra.0+0x82>
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    7430:	481b      	ldr	r0, [pc, #108]	; (74a0 <rsa_check_context.isra.0+0xb4>)
    7432:	e01e      	b.n	7472 <rsa_check_context.isra.0+0x86>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
    7434:	f104 062c 	add.w	r6, r4, #44	; 0x2c
    7438:	2100      	movs	r1, #0
    743a:	4630      	mov	r0, r6
    743c:	f004 fe51 	bl	c0e2 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    7440:	2800      	cmp	r0, #0
    7442:	ddf5      	ble.n	7430 <rsa_check_context.isra.0+0x44>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
    7444:	2100      	movs	r1, #0
    7446:	4630      	mov	r0, r6
    7448:	f004 fca7 	bl	bd9a <mbedtls_mpi_get_bit>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
    744c:	2800      	cmp	r0, #0
    744e:	d0ef      	beq.n	7430 <rsa_check_context.isra.0+0x44>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
    7450:	f104 0638 	add.w	r6, r4, #56	; 0x38
    7454:	2100      	movs	r1, #0
    7456:	4630      	mov	r0, r6
    7458:	f004 fe43 	bl	c0e2 <mbedtls_mpi_cmp_int>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
    745c:	2800      	cmp	r0, #0
    745e:	dde7      	ble.n	7430 <rsa_check_context.isra.0+0x44>
          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
    7460:	2100      	movs	r1, #0
    7462:	4630      	mov	r0, r6
    7464:	f004 fc99 	bl	bd9a <mbedtls_mpi_get_bit>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
    7468:	2800      	cmp	r0, #0
    746a:	d1da      	bne.n	7422 <rsa_check_context.isra.0+0x36>
    746c:	e7e0      	b.n	7430 <rsa_check_context.isra.0+0x44>
    if( is_priv &&
    746e:	b90d      	cbnz	r5, 7474 <rsa_check_context.isra.0+0x88>
    }
#endif

    return( 0 );
    7470:	2000      	movs	r0, #0
}
    7472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
    7474:	2100      	movs	r1, #0
    7476:	f104 0044 	add.w	r0, r4, #68	; 0x44
    747a:	f004 fe32 	bl	c0e2 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    747e:	2800      	cmp	r0, #0
    7480:	ddd6      	ble.n	7430 <rsa_check_context.isra.0+0x44>
          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
    7482:	2100      	movs	r1, #0
    7484:	f104 0050 	add.w	r0, r4, #80	; 0x50
    7488:	f004 fe2b 	bl	c0e2 <mbedtls_mpi_cmp_int>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
    748c:	2800      	cmp	r0, #0
    748e:	ddcf      	ble.n	7430 <rsa_check_context.isra.0+0x44>
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
    7490:	2100      	movs	r1, #0
    7492:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    7496:	f004 fe24 	bl	c0e2 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    749a:	2800      	cmp	r0, #0
    749c:	dce8      	bgt.n	7470 <rsa_check_context.isra.0+0x84>
    749e:	e7c7      	b.n	7430 <rsa_check_context.isra.0+0x44>
    74a0:	ffffbf80 	.word	0xffffbf80

000074a4 <mbedtls_rsa_check_pubkey>:

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
    74a4:	b570      	push	{r4, r5, r6, lr}
    RSA_VALIDATE_RET( ctx != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
    74a6:	2100      	movs	r1, #0
{
    74a8:	4604      	mov	r4, r0
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
    74aa:	f7ff ff9f 	bl	73ec <rsa_check_context.isra.0>
    74ae:	4605      	mov	r5, r0
    74b0:	b9b8      	cbnz	r0, 74e2 <mbedtls_rsa_check_pubkey+0x3e>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );

    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
    74b2:	f104 0608 	add.w	r6, r4, #8
    74b6:	4630      	mov	r0, r6
    74b8:	f004 fc80 	bl	bdbc <mbedtls_mpi_bitlen>
    74bc:	287f      	cmp	r0, #127	; 0x7f
    74be:	d910      	bls.n	74e2 <mbedtls_rsa_check_pubkey+0x3e>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
    74c0:	3414      	adds	r4, #20
    74c2:	4629      	mov	r1, r5
    74c4:	4620      	mov	r0, r4
    74c6:	f004 fc68 	bl	bd9a <mbedtls_mpi_get_bit>
    74ca:	b150      	cbz	r0, 74e2 <mbedtls_rsa_check_pubkey+0x3e>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
    74cc:	4620      	mov	r0, r4
    74ce:	f004 fc75 	bl	bdbc <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
    74d2:	2801      	cmp	r0, #1
    74d4:	d905      	bls.n	74e2 <mbedtls_rsa_check_pubkey+0x3e>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
    74d6:	4631      	mov	r1, r6
    74d8:	4620      	mov	r0, r4
    74da:	f004 fdbf 	bl	c05c <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
    74de:	2800      	cmp	r0, #0
    74e0:	db00      	blt.n	74e4 <mbedtls_rsa_check_pubkey+0x40>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    74e2:	4d01      	ldr	r5, [pc, #4]	; (74e8 <mbedtls_rsa_check_pubkey+0x44>)
    }

    return( 0 );
}
    74e4:	4628      	mov	r0, r5
    74e6:	bd70      	pop	{r4, r5, r6, pc}
    74e8:	ffffbe00 	.word	0xffffbe00

000074ec <mbedtls_rsa_public>:
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
    74ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    74ee:	460c      	mov	r4, r1
    74f0:	b087      	sub	sp, #28
    mbedtls_mpi T;
    RSA_VALIDATE_RET( ctx != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( output != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
    74f2:	2100      	movs	r1, #0
{
    74f4:	4605      	mov	r5, r0
    74f6:	4616      	mov	r6, r2
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
    74f8:	f7ff ff78 	bl	73ec <rsa_check_context.isra.0>
    74fc:	bb80      	cbnz	r0, 7560 <mbedtls_rsa_public+0x74>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    mbedtls_mpi_init( &T );
    74fe:	a803      	add	r0, sp, #12
    7500:	f004 fbc5 	bl	bc8e <mbedtls_mpi_init>
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
    7504:	4621      	mov	r1, r4
    7506:	686a      	ldr	r2, [r5, #4]
    7508:	a803      	add	r0, sp, #12
    750a:	f004 fc79 	bl	be00 <mbedtls_mpi_read_binary>
    750e:	4604      	mov	r4, r0
    7510:	b9d0      	cbnz	r0, 7548 <mbedtls_rsa_public+0x5c>

    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
    7512:	f105 0408 	add.w	r4, r5, #8
    7516:	4621      	mov	r1, r4
    7518:	a803      	add	r0, sp, #12
    751a:	f004 fd9f 	bl	c05c <mbedtls_mpi_cmp_mpi>
    751e:	2800      	cmp	r0, #0
    7520:	da1b      	bge.n	755a <mbedtls_rsa_public+0x6e>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
        goto cleanup;
    }

    olen = ctx->len;
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
    7522:	f105 0368 	add.w	r3, r5, #104	; 0x68
    7526:	a903      	add	r1, sp, #12
    7528:	9300      	str	r3, [sp, #0]
    752a:	f105 0214 	add.w	r2, r5, #20
    752e:	4623      	mov	r3, r4
    7530:	4608      	mov	r0, r1
    olen = ctx->len;
    7532:	686f      	ldr	r7, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
    7534:	f005 f91f 	bl	c776 <mbedtls_mpi_exp_mod>
    7538:	4604      	mov	r4, r0
    753a:	b928      	cbnz	r0, 7548 <mbedtls_rsa_public+0x5c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
    753c:	463a      	mov	r2, r7
    753e:	4631      	mov	r1, r6
    7540:	a803      	add	r0, sp, #12
    7542:	f004 fc95 	bl	be70 <mbedtls_mpi_write_binary>
    7546:	4604      	mov	r4, r0
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &T );
    7548:	a803      	add	r0, sp, #12
    754a:	f004 fba6 	bl	bc9a <mbedtls_mpi_free>

    if( ret != 0 )
    754e:	b10c      	cbz	r4, 7554 <mbedtls_rsa_public+0x68>
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );
    7550:	f5a4 4485 	sub.w	r4, r4, #17024	; 0x4280

    return( 0 );
}
    7554:	4620      	mov	r0, r4
    7556:	b007      	add	sp, #28
    7558:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
    755a:	f06f 0403 	mvn.w	r4, #3
    755e:	e7f3      	b.n	7548 <mbedtls_rsa_public+0x5c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    7560:	4c00      	ldr	r4, [pc, #0]	; (7564 <mbedtls_rsa_public+0x78>)
    7562:	e7f7      	b.n	7554 <mbedtls_rsa_public+0x68>
    7564:	ffffbf80 	.word	0xffffbf80

00007568 <mbedtls_sha256_starts_ret>:
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
    7568:	2300      	movs	r3, #0
    ctx->total[1] = 0;
    756a:	e9c0 3300 	strd	r3, r3, [r0]

    if( is224 == 0 )
    756e:	b9c1      	cbnz	r1, 75a2 <mbedtls_sha256_starts_ret+0x3a>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
        ctx->state[1] = 0xBB67AE85;
    7570:	4a19      	ldr	r2, [pc, #100]	; (75d8 <mbedtls_sha256_starts_ret+0x70>)
    7572:	4b1a      	ldr	r3, [pc, #104]	; (75dc <mbedtls_sha256_starts_ret+0x74>)
        ctx->state[2] = 0x3C6EF372;
        ctx->state[3] = 0xA54FF53A;
    7574:	f8df c08c 	ldr.w	ip, [pc, #140]	; 7604 <mbedtls_sha256_starts_ret+0x9c>
        ctx->state[1] = 0xBB67AE85;
    7578:	e9c0 2302 	strd	r2, r3, [r0, #8]
        ctx->state[3] = 0xA54FF53A;
    757c:	4b18      	ldr	r3, [pc, #96]	; (75e0 <mbedtls_sha256_starts_ret+0x78>)
        ctx->state[4] = 0x510E527F;
        ctx->state[5] = 0x9B05688C;
    757e:	4a19      	ldr	r2, [pc, #100]	; (75e4 <mbedtls_sha256_starts_ret+0x7c>)
        ctx->state[3] = 0xA54FF53A;
    7580:	e9c0 c304 	strd	ip, r3, [r0, #16]
        ctx->state[5] = 0x9B05688C;
    7584:	4b18      	ldr	r3, [pc, #96]	; (75e8 <mbedtls_sha256_starts_ret+0x80>)
    7586:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[6] = 0x1F83D9AB;
    758a:	4b18      	ldr	r3, [pc, #96]	; (75ec <mbedtls_sha256_starts_ret+0x84>)
    758c:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
    758e:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    7592:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    7596:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
        ctx->state[2] = 0x3070DD17;
        ctx->state[3] = 0xF70E5939;
        ctx->state[4] = 0xFFC00B31;
        ctx->state[5] = 0x68581511;
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
    759a:	6243      	str	r3, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
    759c:	6681      	str	r1, [r0, #104]	; 0x68

    return( 0 );
}
    759e:	2000      	movs	r0, #0
    75a0:	4770      	bx	lr
        ctx->state[1] = 0x367CD507;
    75a2:	4b13      	ldr	r3, [pc, #76]	; (75f0 <mbedtls_sha256_starts_ret+0x88>)
    75a4:	4a13      	ldr	r2, [pc, #76]	; (75f4 <mbedtls_sha256_starts_ret+0x8c>)
        ctx->state[4] = 0xFFC00B31;
    75a6:	f8df c060 	ldr.w	ip, [pc, #96]	; 7608 <mbedtls_sha256_starts_ret+0xa0>
        ctx->state[1] = 0x367CD507;
    75aa:	e9c0 2302 	strd	r2, r3, [r0, #8]
        ctx->state[2] = 0x3070DD17;
    75ae:	f103 4379 	add.w	r3, r3, #4177526784	; 0xf9000000
    75b2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
    75b6:	f503 6301 	add.w	r3, r3, #2064	; 0x810
    75ba:	6103      	str	r3, [r0, #16]
        ctx->state[4] = 0xFFC00B31;
    75bc:	4b0e      	ldr	r3, [pc, #56]	; (75f8 <mbedtls_sha256_starts_ret+0x90>)
    75be:	e9c0 c305 	strd	ip, r3, [r0, #20]
        ctx->state[5] = 0x68581511;
    75c2:	f103 43d1 	add.w	r3, r3, #1753219072	; 0x68800000
    75c6:	f503 13c0 	add.w	r3, r3, #1572864	; 0x180000
    75ca:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
    75ce:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
    75d0:	4b0a      	ldr	r3, [pc, #40]	; (75fc <mbedtls_sha256_starts_ret+0x94>)
    75d2:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
    75d4:	4b0a      	ldr	r3, [pc, #40]	; (7600 <mbedtls_sha256_starts_ret+0x98>)
    75d6:	e7e0      	b.n	759a <mbedtls_sha256_starts_ret+0x32>
    75d8:	6a09e667 	.word	0x6a09e667
    75dc:	bb67ae85 	.word	0xbb67ae85
    75e0:	a54ff53a 	.word	0xa54ff53a
    75e4:	510e527f 	.word	0x510e527f
    75e8:	9b05688c 	.word	0x9b05688c
    75ec:	1f83d9ab 	.word	0x1f83d9ab
    75f0:	367cd507 	.word	0x367cd507
    75f4:	c1059ed8 	.word	0xc1059ed8
    75f8:	ffc00b31 	.word	0xffc00b31
    75fc:	64f98fa7 	.word	0x64f98fa7
    7600:	befa4fa4 	.word	0xbefa4fa4
    7604:	3c6ef372 	.word	0x3c6ef372
    7608:	f70e5939 	.word	0xf70e5939

0000760c <mbedtls_internal_sha256_process>:
        (d) += local.temp1; (h) = local.temp1 + local.temp2;        \
    } while( 0 )

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
    760c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7610:	b0d3      	sub	sp, #332	; 0x14c
    7612:	f100 0308 	add.w	r3, r0, #8
    7616:	9304      	str	r3, [sp, #16]
    7618:	ab4a      	add	r3, sp, #296	; 0x128
    761a:	9305      	str	r3, [sp, #20]
    761c:	f100 0328 	add.w	r3, r0, #40	; 0x28
    7620:	9306      	str	r3, [sp, #24]
    7622:	e9dd 3204 	ldrd	r3, r2, [sp, #16]

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
        local.A[i] = ctx->state[i];
    7626:	f853 0b04 	ldr.w	r0, [r3], #4
    762a:	f842 0b04 	str.w	r0, [r2], #4
    for( i = 0; i < 8; i++ )
    762e:	9806      	ldr	r0, [sp, #24]
    7630:	4298      	cmp	r0, r3
    7632:	d1f8      	bne.n	7626 <mbedtls_internal_sha256_process+0x1a>
    7634:	aa0a      	add	r2, sp, #40	; 0x28
    7636:	f101 0040 	add.w	r0, r1, #64	; 0x40
        local.A[2] = local.A[1]; local.A[1] = local.A[0];
        local.A[0] = local.temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( local.W[i], data, 4 * i );
    763a:	784b      	ldrb	r3, [r1, #1]
    763c:	780c      	ldrb	r4, [r1, #0]
    763e:	041b      	lsls	r3, r3, #16
    7640:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    7644:	78cc      	ldrb	r4, [r1, #3]
    7646:	4323      	orrs	r3, r4
    7648:	788c      	ldrb	r4, [r1, #2]
    764a:	3104      	adds	r1, #4
    764c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    for( i = 0; i < 16; i++ )
    7650:	4288      	cmp	r0, r1
        GET_UINT32_BE( local.W[i], data, 4 * i );
    7652:	f842 3b04 	str.w	r3, [r2], #4
    for( i = 0; i < 16; i++ )
    7656:	d1f0      	bne.n	763a <mbedtls_internal_sha256_process+0x2e>
    7658:	9b50      	ldr	r3, [sp, #320]	; 0x140
    765a:	48a4      	ldr	r0, [pc, #656]	; (78ec <mbedtls_internal_sha256_process+0x2e0>)
    765c:	9300      	str	r3, [sp, #0]
    765e:	e9dd 724a 	ldrd	r7, r2, [sp, #296]	; 0x128
    7662:	e9dd 314c 	ldrd	r3, r1, [sp, #304]	; 0x130
    7666:	f10d 0b20 	add.w	fp, sp, #32
    766a:	f8dd c144 	ldr.w	ip, [sp, #324]	; 0x144
    766e:	f8dd a138 	ldr.w	sl, [sp, #312]	; 0x138
    7672:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
    7674:	9001      	str	r0, [sp, #4]
    7676:	46de      	mov	lr, fp
    7678:	4681      	mov	r9, r0

    for( i = 0; i < 16; i += 8 )
    {
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    767a:	f8de 4008 	ldr.w	r4, [lr, #8]
    767e:	f8d9 0000 	ldr.w	r0, [r9]
    7682:	ea4f 25fa 	mov.w	r5, sl, ror #11
    7686:	ea85 15ba 	eor.w	r5, r5, sl, ror #6
    768a:	4420      	add	r0, r4
    768c:	ea85 657a 	eor.w	r5, r5, sl, ror #25
    7690:	4405      	add	r5, r0
    7692:	9800      	ldr	r0, [sp, #0]
    7694:	9c00      	ldr	r4, [sp, #0]
    7696:	4070      	eors	r0, r6
    7698:	ea00 000a 	and.w	r0, r0, sl
    769c:	4060      	eors	r0, r4
    769e:	4405      	add	r5, r0
    76a0:	ea47 0402 	orr.w	r4, r7, r2
    76a4:	ea4f 3077 	mov.w	r0, r7, ror #13
    76a8:	44ac      	add	ip, r5
    76aa:	ea80 00b7 	eor.w	r0, r0, r7, ror #2
    76ae:	ea07 0502 	and.w	r5, r7, r2
    76b2:	401c      	ands	r4, r3
    76b4:	ea80 50b7 	eor.w	r0, r0, r7, ror #22
    76b8:	432c      	orrs	r4, r5
    76ba:	4404      	add	r4, r0
           local.A[5], local.A[6], local.A[7], local.W[i+0], K[i+0] );
        P( local.A[7], local.A[0], local.A[1], local.A[2], local.A[3],
    76bc:	f8d9 5004 	ldr.w	r5, [r9, #4]
    76c0:	f8de 000c 	ldr.w	r0, [lr, #12]
    76c4:	4405      	add	r5, r0
    76c6:	9800      	ldr	r0, [sp, #0]
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    76c8:	4461      	add	r1, ip
    76ca:	44a4      	add	ip, r4
        P( local.A[7], local.A[0], local.A[1], local.A[2], local.A[3],
    76cc:	ea8a 0406 	eor.w	r4, sl, r6
    76d0:	4405      	add	r5, r0
    76d2:	400c      	ands	r4, r1
    76d4:	ea4f 20f1 	mov.w	r0, r1, ror #11
    76d8:	4074      	eors	r4, r6
    76da:	ea80 10b1 	eor.w	r0, r0, r1, ror #6
    76de:	4425      	add	r5, r4
    76e0:	ea80 6071 	eor.w	r0, r0, r1, ror #25
    76e4:	4428      	add	r0, r5
    76e6:	ea4c 0407 	orr.w	r4, ip, r7
    76ea:	ea4f 357c 	mov.w	r5, ip, ror #13
    76ee:	ea0c 0807 	and.w	r8, ip, r7
    76f2:	ea85 05bc 	eor.w	r5, r5, ip, ror #2
    76f6:	4014      	ands	r4, r2
    76f8:	ea44 0408 	orr.w	r4, r4, r8
    76fc:	ea85 55bc 	eor.w	r5, r5, ip, ror #22
    7700:	4425      	add	r5, r4
    7702:	4405      	add	r5, r0
    7704:	4403      	add	r3, r0
           local.A[4], local.A[5], local.A[6], local.W[i+1], K[i+1] );
        P( local.A[6], local.A[7], local.A[0], local.A[1], local.A[2],
    7706:	f8d9 4008 	ldr.w	r4, [r9, #8]
    770a:	f8de 0010 	ldr.w	r0, [lr, #16]
    770e:	4404      	add	r4, r0
    7710:	4426      	add	r6, r4
    7712:	ea81 040a 	eor.w	r4, r1, sl
    7716:	401c      	ands	r4, r3
    7718:	ea84 080a 	eor.w	r8, r4, sl
    771c:	eb06 0408 	add.w	r4, r6, r8
    7720:	ea4f 26f3 	mov.w	r6, r3, ror #11
    7724:	ea86 16b3 	eor.w	r6, r6, r3, ror #6
    7728:	ea86 6673 	eor.w	r6, r6, r3, ror #25
    772c:	4426      	add	r6, r4
    772e:	ea4c 0005 	orr.w	r0, ip, r5
    7732:	ea4f 3475 	mov.w	r4, r5, ror #13
    7736:	ea0c 0805 	and.w	r8, ip, r5
    773a:	ea84 04b5 	eor.w	r4, r4, r5, ror #2
    773e:	4038      	ands	r0, r7
    7740:	ea40 0008 	orr.w	r0, r0, r8
    7744:	ea84 54b5 	eor.w	r4, r4, r5, ror #22
    7748:	4404      	add	r4, r0
    774a:	4434      	add	r4, r6
    774c:	4432      	add	r2, r6
           local.A[3], local.A[4], local.A[5], local.W[i+2], K[i+2] );
        P( local.A[5], local.A[6], local.A[7], local.A[0], local.A[1],
    774e:	f8d9 000c 	ldr.w	r0, [r9, #12]
    7752:	f8de 6014 	ldr.w	r6, [lr, #20]
    7756:	4430      	add	r0, r6
    7758:	4482      	add	sl, r0
    775a:	ea81 0003 	eor.w	r0, r1, r3
    775e:	4010      	ands	r0, r2
    7760:	ea80 0801 	eor.w	r8, r0, r1
    7764:	eb0a 0008 	add.w	r0, sl, r8
    7768:	ea4f 2af2 	mov.w	sl, r2, ror #11
    776c:	ea8a 1ab2 	eor.w	sl, sl, r2, ror #6
    7770:	ea8a 6a72 	eor.w	sl, sl, r2, ror #25
    7774:	4482      	add	sl, r0
    7776:	ea45 0604 	orr.w	r6, r5, r4
    777a:	ea4f 3074 	mov.w	r0, r4, ror #13
    777e:	eb0a 0807 	add.w	r8, sl, r7
    7782:	ea80 00b4 	eor.w	r0, r0, r4, ror #2
    7786:	ea05 0704 	and.w	r7, r5, r4
    778a:	ea06 060c 	and.w	r6, r6, ip
    778e:	433e      	orrs	r6, r7
    7790:	ea80 50b4 	eor.w	r0, r0, r4, ror #22
           local.A[2], local.A[3], local.A[4], local.W[i+3], K[i+3] );
        P( local.A[4], local.A[5], local.A[6], local.A[7], local.A[0],
    7794:	f8de 7018 	ldr.w	r7, [lr, #24]
        P( local.A[5], local.A[6], local.A[7], local.A[0], local.A[1],
    7798:	4430      	add	r0, r6
        P( local.A[4], local.A[5], local.A[6], local.A[7], local.A[0],
    779a:	f8d9 6010 	ldr.w	r6, [r9, #16]
        P( local.A[5], local.A[6], local.A[7], local.A[0], local.A[1],
    779e:	4450      	add	r0, sl
        P( local.A[4], local.A[5], local.A[6], local.A[7], local.A[0],
    77a0:	443e      	add	r6, r7
    77a2:	ea83 0a02 	eor.w	sl, r3, r2
    77a6:	4431      	add	r1, r6
    77a8:	ea0a 0a08 	and.w	sl, sl, r8
    77ac:	ea4f 26f8 	mov.w	r6, r8, ror #11
    77b0:	ea8a 0a03 	eor.w	sl, sl, r3
    77b4:	ea86 16b8 	eor.w	r6, r6, r8, ror #6
    77b8:	4451      	add	r1, sl
    77ba:	ea86 6678 	eor.w	r6, r6, r8, ror #25
    77be:	440e      	add	r6, r1
    77c0:	ea44 0700 	orr.w	r7, r4, r0
    77c4:	ea4f 3170 	mov.w	r1, r0, ror #13
    77c8:	ea04 0a00 	and.w	sl, r4, r0
    77cc:	ea81 01b0 	eor.w	r1, r1, r0, ror #2
    77d0:	402f      	ands	r7, r5
    77d2:	ea47 070a 	orr.w	r7, r7, sl
    77d6:	ea81 51b0 	eor.w	r1, r1, r0, ror #22
    77da:	4439      	add	r1, r7
    77dc:	4431      	add	r1, r6
    77de:	44b4      	add	ip, r6
           local.A[1], local.A[2], local.A[3], local.W[i+4], K[i+4] );
        P( local.A[3], local.A[4], local.A[5], local.A[6], local.A[7],
    77e0:	f8de 701c 	ldr.w	r7, [lr, #28]
    77e4:	f8d9 6014 	ldr.w	r6, [r9, #20]
    77e8:	ea82 0a08 	eor.w	sl, r2, r8
    77ec:	443e      	add	r6, r7
    77ee:	4433      	add	r3, r6
    77f0:	ea0a 0a0c 	and.w	sl, sl, ip
    77f4:	ea4f 26fc 	mov.w	r6, ip, ror #11
    77f8:	ea8a 0a02 	eor.w	sl, sl, r2
    77fc:	ea86 16bc 	eor.w	r6, r6, ip, ror #6
    7800:	4453      	add	r3, sl
    7802:	ea86 667c 	eor.w	r6, r6, ip, ror #25
    7806:	441e      	add	r6, r3
    7808:	19ab      	adds	r3, r5, r6
    780a:	9300      	str	r3, [sp, #0]
    780c:	ea40 0501 	orr.w	r5, r0, r1
    7810:	ea4f 3371 	mov.w	r3, r1, ror #13
    7814:	ea00 0701 	and.w	r7, r0, r1
    7818:	4025      	ands	r5, r4
    781a:	ea83 03b1 	eor.w	r3, r3, r1, ror #2
    781e:	433d      	orrs	r5, r7
    7820:	ea83 53b1 	eor.w	r3, r3, r1, ror #22
    7824:	442b      	add	r3, r5
    7826:	4433      	add	r3, r6
           local.A[0], local.A[1], local.A[2], local.W[i+5], K[i+5] );
        P( local.A[2], local.A[3], local.A[4], local.A[5], local.A[6],
    7828:	f8d9 5018 	ldr.w	r5, [r9, #24]
    782c:	f8de 6020 	ldr.w	r6, [lr, #32]
    7830:	4435      	add	r5, r6
    7832:	9e00      	ldr	r6, [sp, #0]
    7834:	4415      	add	r5, r2
    7836:	ea88 020c 	eor.w	r2, r8, ip
    783a:	4032      	ands	r2, r6
    783c:	ea82 0708 	eor.w	r7, r2, r8
    7840:	19ea      	adds	r2, r5, r7
    7842:	ea4f 25f6 	mov.w	r5, r6, ror #11
    7846:	ea85 15b6 	eor.w	r5, r5, r6, ror #6
    784a:	ea85 6576 	eor.w	r5, r5, r6, ror #25
    784e:	4415      	add	r5, r2
    7850:	1966      	adds	r6, r4, r5
    7852:	ea4f 3273 	mov.w	r2, r3, ror #13
    7856:	ea41 0403 	orr.w	r4, r1, r3
    785a:	4004      	ands	r4, r0
    785c:	ea01 0703 	and.w	r7, r1, r3
    7860:	ea82 02b3 	eor.w	r2, r2, r3, ror #2
    7864:	433c      	orrs	r4, r7
    7866:	ea82 52b3 	eor.w	r2, r2, r3, ror #22
    786a:	4422      	add	r2, r4
    786c:	442a      	add	r2, r5
           local.A[7], local.A[0], local.A[1], local.W[i+6], K[i+6] );
        P( local.A[1], local.A[2], local.A[3], local.A[4], local.A[5],
    786e:	f8d9 401c 	ldr.w	r4, [r9, #28]
    7872:	f8de 5024 	ldr.w	r5, [lr, #36]	; 0x24
    7876:	442c      	add	r4, r5
    7878:	44a0      	add	r8, r4
    787a:	9c00      	ldr	r4, [sp, #0]
    787c:	ea8c 0404 	eor.w	r4, ip, r4
    7880:	4034      	ands	r4, r6
    7882:	ea84 070c 	eor.w	r7, r4, ip
    7886:	eb08 0407 	add.w	r4, r8, r7
    788a:	ea4f 28f6 	mov.w	r8, r6, ror #11
    788e:	ea88 18b6 	eor.w	r8, r8, r6, ror #6
    7892:	ea4f 3572 	mov.w	r5, r2, ror #13
    7896:	ea88 6876 	eor.w	r8, r8, r6, ror #25
    789a:	ea85 05b2 	eor.w	r5, r5, r2, ror #2
    789e:	ea43 0702 	orr.w	r7, r3, r2
    78a2:	4444      	add	r4, r8
    78a4:	400f      	ands	r7, r1
    78a6:	ea85 58b2 	eor.w	r8, r5, r2, ror #22
    78aa:	ea03 0502 	and.w	r5, r3, r2
    78ae:	433d      	orrs	r5, r7
    78b0:	eb00 0a04 	add.w	sl, r0, r4
    78b4:	f10e 0e20 	add.w	lr, lr, #32
    for( i = 0; i < 16; i += 8 )
    78b8:	a818      	add	r0, sp, #96	; 0x60
        P( local.A[1], local.A[2], local.A[3], local.A[4], local.A[5],
    78ba:	4445      	add	r5, r8
    for( i = 0; i < 16; i += 8 )
    78bc:	4570      	cmp	r0, lr
        P( local.A[1], local.A[2], local.A[3], local.A[4], local.A[5],
    78be:	eb04 0705 	add.w	r7, r4, r5
    for( i = 0; i < 16; i += 8 )
    78c2:	f109 0920 	add.w	r9, r9, #32
    78c6:	f47f aed8 	bne.w	767a <mbedtls_internal_sha256_process+0x6e>
    78ca:	9800      	ldr	r0, [sp, #0]
    78cc:	f8cd c144 	str.w	ip, [sp, #324]	; 0x144
    78d0:	e9cd 724a 	strd	r7, r2, [sp, #296]	; 0x128
    78d4:	e9cd 314c 	strd	r3, r1, [sp, #304]	; 0x130
    78d8:	e9cd 4508 	strd	r4, r5, [sp, #32]
    78dc:	e9cd 604f 	strd	r6, r0, [sp, #316]	; 0x13c
    78e0:	a838      	add	r0, sp, #224	; 0xe0
    78e2:	f8cd a138 	str.w	sl, [sp, #312]	; 0x138
    78e6:	9007      	str	r0, [sp, #28]
    78e8:	e002      	b.n	78f0 <mbedtls_internal_sha256_process+0x2e4>
    78ea:	bf00      	nop
    78ec:	0000dae8 	.word	0x0000dae8
           local.A[6], local.A[7], local.A[0], local.W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    78f0:	f8db 0040 	ldr.w	r0, [fp, #64]	; 0x40
    78f4:	f8db 500c 	ldr.w	r5, [fp, #12]
    78f8:	f8db 4008 	ldr.w	r4, [fp, #8]
    78fc:	ea4f 4ef0 	mov.w	lr, r0, ror #19
    7900:	ea8e 4e70 	eor.w	lr, lr, r0, ror #17
    7904:	ea8e 2e90 	eor.w	lr, lr, r0, lsr #10
    7908:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
    790c:	ea4f 48b5 	mov.w	r8, r5, ror #18
    7910:	4420      	add	r0, r4
    7912:	ea88 18f5 	eor.w	r8, r8, r5, ror #7
    7916:	ea4f 24fa 	mov.w	r4, sl, ror #11
    791a:	ea88 08d5 	eor.w	r8, r8, r5, lsr #3
    791e:	ea84 14ba 	eor.w	r4, r4, sl, ror #6
    7922:	4486      	add	lr, r0
    7924:	eb0e 0008 	add.w	r0, lr, r8
    7928:	ea84 6e7a 	eor.w	lr, r4, sl, ror #25
    792c:	9c00      	ldr	r4, [sp, #0]
    792e:	9003      	str	r0, [sp, #12]
    7930:	4074      	eors	r4, r6
    7932:	9800      	ldr	r0, [sp, #0]
    7934:	ea04 040a 	and.w	r4, r4, sl
    7938:	4044      	eors	r4, r0
    793a:	9801      	ldr	r0, [sp, #4]
    793c:	6c00      	ldr	r0, [r0, #64]	; 0x40
    793e:	4474      	add	r4, lr
    7940:	4420      	add	r0, r4
    7942:	9c03      	ldr	r4, [sp, #12]
    7944:	f8cb 4048 	str.w	r4, [fp, #72]	; 0x48
    7948:	4420      	add	r0, r4
    794a:	4484      	add	ip, r0
    794c:	eb01 080c 	add.w	r8, r1, ip
    7950:	ea47 0002 	orr.w	r0, r7, r2
    7954:	ea4f 3177 	mov.w	r1, r7, ror #13
    7958:	ea07 0402 	and.w	r4, r7, r2
    795c:	ea81 01b7 	eor.w	r1, r1, r7, ror #2
    7960:	4018      	ands	r0, r3
    7962:	ea81 51b7 	eor.w	r1, r1, r7, ror #22
    7966:	4320      	orrs	r0, r4
    7968:	4408      	add	r0, r1
           local.A[5], local.A[6], local.A[7], R(i+0), K[i+0] );
        P( local.A[7], local.A[0], local.A[1], local.A[2], local.A[3],
    796a:	f8db 1044 	ldr.w	r1, [fp, #68]	; 0x44
    796e:	f8db 4010 	ldr.w	r4, [fp, #16]
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    7972:	4484      	add	ip, r0
        P( local.A[7], local.A[0], local.A[1], local.A[2], local.A[3],
    7974:	ea4f 40f1 	mov.w	r0, r1, ror #19
    7978:	ea80 4071 	eor.w	r0, r0, r1, ror #17
    797c:	ea80 2091 	eor.w	r0, r0, r1, lsr #10
    7980:	f8db 1030 	ldr.w	r1, [fp, #48]	; 0x30
    7984:	4429      	add	r1, r5
    7986:	ea4f 45b4 	mov.w	r5, r4, ror #18
    798a:	4401      	add	r1, r0
    798c:	ea85 15f4 	eor.w	r5, r5, r4, ror #7
    7990:	9801      	ldr	r0, [sp, #4]
    7992:	ea85 05d4 	eor.w	r5, r5, r4, lsr #3
    7996:	4429      	add	r1, r5
    7998:	6c40      	ldr	r0, [r0, #68]	; 0x44
    799a:	9d00      	ldr	r5, [sp, #0]
    799c:	f8cb 104c 	str.w	r1, [fp, #76]	; 0x4c
    79a0:	ea8a 0e06 	eor.w	lr, sl, r6
    79a4:	ea0e 0e08 	and.w	lr, lr, r8
    79a8:	4428      	add	r0, r5
    79aa:	ea4f 25f8 	mov.w	r5, r8, ror #11
    79ae:	4408      	add	r0, r1
    79b0:	ea8e 0e06 	eor.w	lr, lr, r6
    79b4:	ea85 15b8 	eor.w	r5, r5, r8, ror #6
    79b8:	ea85 6578 	eor.w	r5, r5, r8, ror #25
    79bc:	4486      	add	lr, r0
    79be:	eb05 000e 	add.w	r0, r5, lr
    79c2:	4403      	add	r3, r0
    79c4:	9300      	str	r3, [sp, #0]
    79c6:	ea4f 357c 	mov.w	r5, ip, ror #13
    79ca:	ea47 030c 	orr.w	r3, r7, ip
    79ce:	ea07 0e0c 	and.w	lr, r7, ip
    79d2:	ea85 05bc 	eor.w	r5, r5, ip, ror #2
    79d6:	4013      	ands	r3, r2
    79d8:	ea43 030e 	orr.w	r3, r3, lr
    79dc:	ea85 55bc 	eor.w	r5, r5, ip, ror #22
    79e0:	441d      	add	r5, r3
           local.A[4], local.A[5], local.A[6], R(i+1), K[i+1] );
        P( local.A[6], local.A[7], local.A[0], local.A[1], local.A[2],
    79e2:	9b03      	ldr	r3, [sp, #12]
    79e4:	f8db e014 	ldr.w	lr, [fp, #20]
        P( local.A[7], local.A[0], local.A[1], local.A[2], local.A[3],
    79e8:	4405      	add	r5, r0
        P( local.A[6], local.A[7], local.A[0], local.A[1], local.A[2],
    79ea:	ea4f 40f3 	mov.w	r0, r3, ror #19
    79ee:	ea80 4073 	eor.w	r0, r0, r3, ror #17
    79f2:	ea80 2093 	eor.w	r0, r0, r3, lsr #10
    79f6:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
    79fa:	4423      	add	r3, r4
    79fc:	4403      	add	r3, r0
    79fe:	9800      	ldr	r0, [sp, #0]
    7a00:	ea8a 0908 	eor.w	r9, sl, r8
    7a04:	ea09 0900 	and.w	r9, r9, r0
    7a08:	9801      	ldr	r0, [sp, #4]
    7a0a:	ea4f 44be 	mov.w	r4, lr, ror #18
    7a0e:	6c80      	ldr	r0, [r0, #72]	; 0x48
    7a10:	ea84 14fe 	eor.w	r4, r4, lr, ror #7
    7a14:	ea84 04de 	eor.w	r4, r4, lr, lsr #3
    7a18:	4423      	add	r3, r4
    7a1a:	4430      	add	r0, r6
    7a1c:	4418      	add	r0, r3
    7a1e:	ea89 090a 	eor.w	r9, r9, sl
    7a22:	4481      	add	r9, r0
    7a24:	9800      	ldr	r0, [sp, #0]
    7a26:	f8cb 3050 	str.w	r3, [fp, #80]	; 0x50
    7a2a:	ea4f 24f0 	mov.w	r4, r0, ror #11
    7a2e:	ea84 14b0 	eor.w	r4, r4, r0, ror #6
    7a32:	ea84 6470 	eor.w	r4, r4, r0, ror #25
    7a36:	eb04 0009 	add.w	r0, r4, r9
    7a3a:	4402      	add	r2, r0
    7a3c:	ea4c 0405 	orr.w	r4, ip, r5
    7a40:	ea4f 3675 	mov.w	r6, r5, ror #13
    7a44:	9202      	str	r2, [sp, #8]
    7a46:	ea86 06b5 	eor.w	r6, r6, r5, ror #2
    7a4a:	ea0c 0205 	and.w	r2, ip, r5
    7a4e:	403c      	ands	r4, r7
    7a50:	ea86 56b5 	eor.w	r6, r6, r5, ror #22
    7a54:	4314      	orrs	r4, r2
    7a56:	4434      	add	r4, r6
    7a58:	4404      	add	r4, r0
           local.A[3], local.A[4], local.A[5], R(i+2), K[i+2] );
        P( local.A[5], local.A[6], local.A[7], local.A[0], local.A[1],
    7a5a:	ea4f 40f1 	mov.w	r0, r1, ror #19
    7a5e:	ea80 4071 	eor.w	r0, r0, r1, ror #17
    7a62:	ea80 2191 	eor.w	r1, r0, r1, lsr #10
    7a66:	f8db 0038 	ldr.w	r0, [fp, #56]	; 0x38
    7a6a:	f8db 2018 	ldr.w	r2, [fp, #24]
    7a6e:	4486      	add	lr, r0
    7a70:	4471      	add	r1, lr
    7a72:	ea4f 4eb2 	mov.w	lr, r2, ror #18
    7a76:	ea8e 1ef2 	eor.w	lr, lr, r2, ror #7
    7a7a:	ea8e 0ed2 	eor.w	lr, lr, r2, lsr #3
    7a7e:	448e      	add	lr, r1
    7a80:	9900      	ldr	r1, [sp, #0]
    7a82:	9802      	ldr	r0, [sp, #8]
    7a84:	ea88 0101 	eor.w	r1, r8, r1
    7a88:	4001      	ands	r1, r0
    7a8a:	9801      	ldr	r0, [sp, #4]
    7a8c:	f8cb e054 	str.w	lr, [fp, #84]	; 0x54
    7a90:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
    7a92:	9802      	ldr	r0, [sp, #8]
    7a94:	4456      	add	r6, sl
    7a96:	4476      	add	r6, lr
    7a98:	ea81 0108 	eor.w	r1, r1, r8
    7a9c:	4431      	add	r1, r6
    7a9e:	9e02      	ldr	r6, [sp, #8]
    7aa0:	ea4f 20f0 	mov.w	r0, r0, ror #11
    7aa4:	ea80 10b6 	eor.w	r0, r0, r6, ror #6
    7aa8:	ea80 6076 	eor.w	r0, r0, r6, ror #25
    7aac:	1846      	adds	r6, r0, r1
    7aae:	ea45 0004 	orr.w	r0, r5, r4
    7ab2:	ea05 0104 	and.w	r1, r5, r4
    7ab6:	ea4f 3a74 	mov.w	sl, r4, ror #13
    7aba:	ea00 000c 	and.w	r0, r0, ip
    7abe:	ea8a 0ab4 	eor.w	sl, sl, r4, ror #2
    7ac2:	4308      	orrs	r0, r1
           local.A[2], local.A[3], local.A[4], R(i+3), K[i+3] );
        P( local.A[4], local.A[5], local.A[6], local.A[7], local.A[0],
    7ac4:	ea4f 41f3 	mov.w	r1, r3, ror #19
        P( local.A[5], local.A[6], local.A[7], local.A[0], local.A[1],
    7ac8:	ea8a 5ab4 	eor.w	sl, sl, r4, ror #22
        P( local.A[4], local.A[5], local.A[6], local.A[7], local.A[0],
    7acc:	ea81 4173 	eor.w	r1, r1, r3, ror #17
        P( local.A[5], local.A[6], local.A[7], local.A[0], local.A[1],
    7ad0:	4450      	add	r0, sl
        P( local.A[4], local.A[5], local.A[6], local.A[7], local.A[0],
    7ad2:	ea81 2393 	eor.w	r3, r1, r3, lsr #10
    7ad6:	f8db 103c 	ldr.w	r1, [fp, #60]	; 0x3c
        P( local.A[5], local.A[6], local.A[7], local.A[0], local.A[1],
    7ada:	4430      	add	r0, r6
    7adc:	eb07 0906 	add.w	r9, r7, r6
        P( local.A[4], local.A[5], local.A[6], local.A[7], local.A[0],
    7ae0:	f8db 601c 	ldr.w	r6, [fp, #28]
    7ae4:	440a      	add	r2, r1
    7ae6:	4413      	add	r3, r2
    7ae8:	ea4f 42b6 	mov.w	r2, r6, ror #18
    7aec:	ea82 12f6 	eor.w	r2, r2, r6, ror #7
    7af0:	ea82 02d6 	eor.w	r2, r2, r6, lsr #3
    7af4:	441a      	add	r2, r3
    7af6:	9902      	ldr	r1, [sp, #8]
    7af8:	9b00      	ldr	r3, [sp, #0]
    7afa:	f8cb 2058 	str.w	r2, [fp, #88]	; 0x58
    7afe:	ea83 0701 	eor.w	r7, r3, r1
    7b02:	ea07 0709 	and.w	r7, r7, r9
    7b06:	405f      	eors	r7, r3
    7b08:	9b01      	ldr	r3, [sp, #4]
    7b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    7b0c:	ea4f 21f9 	mov.w	r1, r9, ror #11
    7b10:	4413      	add	r3, r2
    7b12:	4443      	add	r3, r8
    7b14:	ea81 11b9 	eor.w	r1, r1, r9, ror #6
    7b18:	441f      	add	r7, r3
    7b1a:	ea81 6179 	eor.w	r1, r1, r9, ror #25
    7b1e:	19cb      	adds	r3, r1, r7
    7b20:	ea44 0700 	orr.w	r7, r4, r0
    7b24:	ea4f 3170 	mov.w	r1, r0, ror #13
    7b28:	ea04 0800 	and.w	r8, r4, r0
    7b2c:	ea81 01b0 	eor.w	r1, r1, r0, ror #2
    7b30:	402f      	ands	r7, r5
    7b32:	ea47 0708 	orr.w	r7, r7, r8
    7b36:	ea81 51b0 	eor.w	r1, r1, r0, ror #22
    7b3a:	4439      	add	r1, r7
    7b3c:	4419      	add	r1, r3
           local.A[1], local.A[2], local.A[3], R(i+4), K[i+4] );
        P( local.A[3], local.A[4], local.A[5], local.A[6], local.A[7],
    7b3e:	f8db 8020 	ldr.w	r8, [fp, #32]
        P( local.A[4], local.A[5], local.A[6], local.A[7], local.A[0],
    7b42:	449c      	add	ip, r3
        P( local.A[3], local.A[4], local.A[5], local.A[6], local.A[7],
    7b44:	ea4f 47fe 	mov.w	r7, lr, ror #19
    7b48:	f8db 3040 	ldr.w	r3, [fp, #64]	; 0x40
    7b4c:	ea87 477e 	eor.w	r7, r7, lr, ror #17
    7b50:	ea87 2e9e 	eor.w	lr, r7, lr, lsr #10
    7b54:	199f      	adds	r7, r3, r6
    7b56:	ea4f 43b8 	mov.w	r3, r8, ror #18
    7b5a:	ea83 13f8 	eor.w	r3, r3, r8, ror #7
    7b5e:	ea83 03d8 	eor.w	r3, r3, r8, lsr #3
    7b62:	4477      	add	r7, lr
    7b64:	441f      	add	r7, r3
    7b66:	9b02      	ldr	r3, [sp, #8]
    7b68:	9e00      	ldr	r6, [sp, #0]
    7b6a:	f8cb 705c 	str.w	r7, [fp, #92]	; 0x5c
    7b6e:	ea83 0e09 	eor.w	lr, r3, r9
    7b72:	ea0e 0e0c 	and.w	lr, lr, ip
    7b76:	ea8e 0e03 	eor.w	lr, lr, r3
    7b7a:	9b01      	ldr	r3, [sp, #4]
    7b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    7b7e:	443b      	add	r3, r7
    7b80:	4433      	add	r3, r6
    7b82:	449e      	add	lr, r3
    7b84:	ea4f 23fc 	mov.w	r3, ip, ror #11
    7b88:	ea83 13bc 	eor.w	r3, r3, ip, ror #6
    7b8c:	ea83 637c 	eor.w	r3, r3, ip, ror #25
    7b90:	eb03 060e 	add.w	r6, r3, lr
    7b94:	19ab      	adds	r3, r5, r6
    7b96:	9300      	str	r3, [sp, #0]
    7b98:	ea40 0501 	orr.w	r5, r0, r1
    7b9c:	ea4f 3371 	mov.w	r3, r1, ror #13
    7ba0:	ea00 0e01 	and.w	lr, r0, r1
    7ba4:	4025      	ands	r5, r4
    7ba6:	ea83 03b1 	eor.w	r3, r3, r1, ror #2
    7baa:	ea45 050e 	orr.w	r5, r5, lr
    7bae:	ea83 53b1 	eor.w	r3, r3, r1, ror #22
    7bb2:	442b      	add	r3, r5
    7bb4:	4433      	add	r3, r6
           local.A[0], local.A[1], local.A[2], R(i+5), K[i+5] );
        P( local.A[2], local.A[3], local.A[4], local.A[5], local.A[6],
    7bb6:	f8db 5044 	ldr.w	r5, [fp, #68]	; 0x44
    7bba:	f8db e024 	ldr.w	lr, [fp, #36]	; 0x24
    7bbe:	ea4f 46f2 	mov.w	r6, r2, ror #19
    7bc2:	ea86 4672 	eor.w	r6, r6, r2, ror #17
    7bc6:	ea86 2292 	eor.w	r2, r6, r2, lsr #10
    7bca:	eb05 0608 	add.w	r6, r5, r8
    7bce:	4416      	add	r6, r2
    7bd0:	ea4f 42be 	mov.w	r2, lr, ror #18
    7bd4:	ea82 12fe 	eor.w	r2, r2, lr, ror #7
    7bd8:	ea82 02de 	eor.w	r2, r2, lr, lsr #3
    7bdc:	4416      	add	r6, r2
    7bde:	9a00      	ldr	r2, [sp, #0]
    7be0:	f8cb 6060 	str.w	r6, [fp, #96]	; 0x60
    7be4:	ea89 080c 	eor.w	r8, r9, ip
    7be8:	ea08 0802 	and.w	r8, r8, r2
    7bec:	9a01      	ldr	r2, [sp, #4]
    7bee:	6d95      	ldr	r5, [r2, #88]	; 0x58
    7bf0:	9a02      	ldr	r2, [sp, #8]
    7bf2:	4435      	add	r5, r6
    7bf4:	4415      	add	r5, r2
    7bf6:	9a00      	ldr	r2, [sp, #0]
    7bf8:	9e00      	ldr	r6, [sp, #0]
    7bfa:	ea4f 22f2 	mov.w	r2, r2, ror #11
    7bfe:	ea88 0809 	eor.w	r8, r8, r9
    7c02:	ea82 12b6 	eor.w	r2, r2, r6, ror #6
    7c06:	ea82 6276 	eor.w	r2, r2, r6, ror #25
    7c0a:	4445      	add	r5, r8
    7c0c:	4415      	add	r5, r2
    7c0e:	1966      	adds	r6, r4, r5
    7c10:	ea4f 3273 	mov.w	r2, r3, ror #13
    7c14:	ea41 0403 	orr.w	r4, r1, r3
    7c18:	4004      	ands	r4, r0
    7c1a:	ea82 02b3 	eor.w	r2, r2, r3, ror #2
    7c1e:	ea01 0803 	and.w	r8, r1, r3
    7c22:	ea44 0408 	orr.w	r4, r4, r8
    7c26:	ea82 52b3 	eor.w	r2, r2, r3, ror #22
    7c2a:	4422      	add	r2, r4
           local.A[7], local.A[0], local.A[1], R(i+6), K[i+6] );
        P( local.A[1], local.A[2], local.A[3], local.A[4], local.A[5],
    7c2c:	ea4f 44f7 	mov.w	r4, r7, ror #19
    7c30:	ea84 4477 	eor.w	r4, r4, r7, ror #17
        P( local.A[2], local.A[3], local.A[4], local.A[5], local.A[6],
    7c34:	442a      	add	r2, r5
        P( local.A[1], local.A[2], local.A[3], local.A[4], local.A[5],
    7c36:	ea84 2797 	eor.w	r7, r4, r7, lsr #10
    7c3a:	f8db 5028 	ldr.w	r5, [fp, #40]	; 0x28
    7c3e:	9c03      	ldr	r4, [sp, #12]
    7c40:	44a6      	add	lr, r4
    7c42:	ea4f 44b5 	mov.w	r4, r5, ror #18
    7c46:	ea84 14f5 	eor.w	r4, r4, r5, ror #7
    7c4a:	ea84 05d5 	eor.w	r5, r4, r5, lsr #3
    7c4e:	9c00      	ldr	r4, [sp, #0]
    7c50:	4477      	add	r7, lr
    7c52:	ea8c 0e04 	eor.w	lr, ip, r4
    7c56:	9c01      	ldr	r4, [sp, #4]
    7c58:	443d      	add	r5, r7
    7c5a:	6de7      	ldr	r7, [r4, #92]	; 0x5c
    7c5c:	f8cb 5064 	str.w	r5, [fp, #100]	; 0x64
    7c60:	442f      	add	r7, r5
    7c62:	ea0e 0e06 	and.w	lr, lr, r6
    7c66:	ea4f 24f6 	mov.w	r4, r6, ror #11
    7c6a:	ea8e 0e0c 	eor.w	lr, lr, ip
    7c6e:	444f      	add	r7, r9
    7c70:	ea84 14b6 	eor.w	r4, r4, r6, ror #6
    7c74:	4477      	add	r7, lr
    7c76:	ea84 6476 	eor.w	r4, r4, r6, ror #25
    7c7a:	443c      	add	r4, r7
    7c7c:	eb00 0a04 	add.w	sl, r0, r4
    7c80:	9801      	ldr	r0, [sp, #4]
    7c82:	ea4f 3572 	mov.w	r5, r2, ror #13
    7c86:	ea85 05b2 	eor.w	r5, r5, r2, ror #2
    7c8a:	3020      	adds	r0, #32
    7c8c:	ea43 0702 	orr.w	r7, r3, r2
    7c90:	ea85 5eb2 	eor.w	lr, r5, r2, ror #22
    7c94:	400f      	ands	r7, r1
    7c96:	ea03 0502 	and.w	r5, r3, r2
    7c9a:	9001      	str	r0, [sp, #4]
    for( i = 16; i < 64; i += 8 )
    7c9c:	9807      	ldr	r0, [sp, #28]
        P( local.A[1], local.A[2], local.A[3], local.A[4], local.A[5],
    7c9e:	433d      	orrs	r5, r7
    7ca0:	f10b 0b20 	add.w	fp, fp, #32
    7ca4:	4475      	add	r5, lr
    for( i = 16; i < 64; i += 8 )
    7ca6:	4558      	cmp	r0, fp
        P( local.A[1], local.A[2], local.A[3], local.A[4], local.A[5],
    7ca8:	eb04 0705 	add.w	r7, r4, r5
    for( i = 16; i < 64; i += 8 )
    7cac:	f47f ae20 	bne.w	78f0 <mbedtls_internal_sha256_process+0x2e4>
    7cb0:	9800      	ldr	r0, [sp, #0]
    7cb2:	f8cd c144 	str.w	ip, [sp, #324]	; 0x144
    7cb6:	e9cd 604f 	strd	r6, r0, [sp, #316]	; 0x13c
    7cba:	e9cd 724a 	strd	r7, r2, [sp, #296]	; 0x128
    7cbe:	e9cd 314c 	strd	r3, r1, [sp, #304]	; 0x130
    7cc2:	e9cd 4508 	strd	r4, r5, [sp, #32]
    7cc6:	f8cd a138 	str.w	sl, [sp, #312]	; 0x138
           local.A[6], local.A[7], local.A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += local.A[i];
    7cca:	9b04      	ldr	r3, [sp, #16]
    7ccc:	9905      	ldr	r1, [sp, #20]
    7cce:	681b      	ldr	r3, [r3, #0]
    7cd0:	f851 2b04 	ldr.w	r2, [r1], #4
    7cd4:	9105      	str	r1, [sp, #20]
    7cd6:	4413      	add	r3, r2
    7cd8:	9a04      	ldr	r2, [sp, #16]
    7cda:	f842 3b04 	str.w	r3, [r2], #4
    for( i = 0; i < 8; i++ )
    7cde:	9b06      	ldr	r3, [sp, #24]
        ctx->state[i] += local.A[i];
    7ce0:	9204      	str	r2, [sp, #16]
    for( i = 0; i < 8; i++ )
    7ce2:	4293      	cmp	r3, r2
    7ce4:	d1f1      	bne.n	7cca <mbedtls_internal_sha256_process+0x6be>

    /* Zeroise buffers and variables to clear sensitive data from memory. */
    mbedtls_platform_zeroize( &local, sizeof( local ) );
    7ce6:	a808      	add	r0, sp, #32
    7ce8:	f44f 7194 	mov.w	r1, #296	; 0x128
    7cec:	f7ff fb74 	bl	73d8 <mbedtls_platform_zeroize>

    return( 0 );
}
    7cf0:	2000      	movs	r0, #0
    7cf2:	b053      	add	sp, #332	; 0x14c
    7cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00007cf8 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    7cf8:	4b0e      	ldr	r3, [pc, #56]	; (7d34 <z_sys_init_run_level+0x3c>)
{
    7cfa:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    7cfc:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    7d00:	3001      	adds	r0, #1
    7d02:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    7d06:	42a6      	cmp	r6, r4
    7d08:	d800      	bhi.n	7d0c <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    7d0a:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    7d0c:	e9d4 3500 	ldrd	r3, r5, [r4]
    7d10:	4628      	mov	r0, r5
    7d12:	4798      	blx	r3
		if (dev != NULL) {
    7d14:	b165      	cbz	r5, 7d30 <z_sys_init_run_level+0x38>
			if (rc != 0) {
    7d16:	68eb      	ldr	r3, [r5, #12]
    7d18:	b130      	cbz	r0, 7d28 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    7d1a:	2800      	cmp	r0, #0
    7d1c:	bfb8      	it	lt
    7d1e:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    7d20:	28ff      	cmp	r0, #255	; 0xff
    7d22:	bfa8      	it	ge
    7d24:	20ff      	movge	r0, #255	; 0xff
    7d26:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    7d28:	785a      	ldrb	r2, [r3, #1]
    7d2a:	f042 0201 	orr.w	r2, r2, #1
    7d2e:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    7d30:	3408      	adds	r4, #8
    7d32:	e7e8      	b.n	7d06 <z_sys_init_run_level+0xe>
    7d34:	0000dbe8 	.word	0x0000dbe8

00007d38 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    7d38:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    7d3a:	4605      	mov	r5, r0
    7d3c:	b910      	cbnz	r0, 7d44 <z_impl_device_get_binding+0xc>
		return NULL;
    7d3e:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    7d40:	4620      	mov	r0, r4
    7d42:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    7d44:	7803      	ldrb	r3, [r0, #0]
    7d46:	2b00      	cmp	r3, #0
    7d48:	d0f9      	beq.n	7d3e <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    7d4a:	4a0f      	ldr	r2, [pc, #60]	; (7d88 <z_impl_device_get_binding+0x50>)
    7d4c:	4c0f      	ldr	r4, [pc, #60]	; (7d8c <z_impl_device_get_binding+0x54>)
    7d4e:	4616      	mov	r6, r2
    7d50:	4294      	cmp	r4, r2
    7d52:	d108      	bne.n	7d66 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    7d54:	4c0d      	ldr	r4, [pc, #52]	; (7d8c <z_impl_device_get_binding+0x54>)
    7d56:	42b4      	cmp	r4, r6
    7d58:	d0f1      	beq.n	7d3e <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    7d5a:	4620      	mov	r0, r4
    7d5c:	f005 f925 	bl	cfaa <z_device_ready>
    7d60:	b950      	cbnz	r0, 7d78 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
    7d62:	3418      	adds	r4, #24
    7d64:	e7f7      	b.n	7d56 <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
    7d66:	4620      	mov	r0, r4
    7d68:	f005 f91f 	bl	cfaa <z_device_ready>
    7d6c:	b110      	cbz	r0, 7d74 <z_impl_device_get_binding+0x3c>
    7d6e:	6823      	ldr	r3, [r4, #0]
    7d70:	42ab      	cmp	r3, r5
    7d72:	d0e5      	beq.n	7d40 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    7d74:	3418      	adds	r4, #24
    7d76:	e7eb      	b.n	7d50 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    7d78:	6821      	ldr	r1, [r4, #0]
    7d7a:	4628      	mov	r0, r5
    7d7c:	f002 ff42 	bl	ac04 <strcmp>
    7d80:	2800      	cmp	r0, #0
    7d82:	d1ee      	bne.n	7d62 <z_impl_device_get_binding+0x2a>
    7d84:	e7dc      	b.n	7d40 <z_impl_device_get_binding+0x8>
    7d86:	bf00      	nop
    7d88:	200002bc 	.word	0x200002bc
    7d8c:	200001fc 	.word	0x200001fc

00007d90 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    7d90:	4802      	ldr	r0, [pc, #8]	; (7d9c <z_bss_zero+0xc>)
    7d92:	4a03      	ldr	r2, [pc, #12]	; (7da0 <z_bss_zero+0x10>)
    7d94:	2100      	movs	r1, #0
    7d96:	1a12      	subs	r2, r2, r0
    7d98:	f002 bf7b 	b.w	ac92 <memset>
    7d9c:	20000430 	.word	0x20000430
    7da0:	2000516c 	.word	0x2000516c

00007da4 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    7da4:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    7da6:	4b0a      	ldr	r3, [pc, #40]	; (7dd0 <bg_thread_main+0x2c>)
    7da8:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    7daa:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    7dac:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    7dae:	f7ff ffa3 	bl	7cf8 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    7db2:	f005 fb8d 	bl	d4d0 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    7db6:	2003      	movs	r0, #3
    7db8:	f7ff ff9e 	bl	7cf8 <z_sys_init_run_level>

	z_init_static_threads();
    7dbc:	f000 f944 	bl	8048 <z_init_static_threads>
	z_sys_init_run_level(_SYS_INIT_LEVEL_SMP);
#endif

	extern void main(void);

	main();
    7dc0:	f7f8 fb18 	bl	3f4 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    7dc4:	4a03      	ldr	r2, [pc, #12]	; (7dd4 <bg_thread_main+0x30>)
    7dc6:	7b13      	ldrb	r3, [r2, #12]
    7dc8:	f023 0301 	bic.w	r3, r3, #1
    7dcc:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    7dce:	bd08      	pop	{r3, pc}
    7dd0:	2000516b 	.word	0x2000516b
    7dd4:	200005f0 	.word	0x200005f0

00007dd8 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    7dd8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    7ddc:	f8df 9100 	ldr.w	r9, [pc, #256]	; 7ee0 <z_cstart+0x108>
    7de0:	b0a7      	sub	sp, #156	; 0x9c
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    7de2:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    7de6:	4d36      	ldr	r5, [pc, #216]	; (7ec0 <z_cstart+0xe8>)
	_kernel.ready_q.cache = &z_main_thread;
    7de8:	4e36      	ldr	r6, [pc, #216]	; (7ec4 <z_cstart+0xec>)
    7dea:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    7dec:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 7ee4 <z_cstart+0x10c>
	z_setup_new_thread(thread, stack,
    7df0:	4f35      	ldr	r7, [pc, #212]	; (7ec8 <z_cstart+0xf0>)
    7df2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7df6:	2400      	movs	r4, #0
    7df8:	616b      	str	r3, [r5, #20]
    7dfa:	23e0      	movs	r3, #224	; 0xe0
    7dfc:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    7e00:	77ec      	strb	r4, [r5, #31]
    7e02:	762c      	strb	r4, [r5, #24]
    7e04:	766c      	strb	r4, [r5, #25]
    7e06:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    7e08:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    7e0a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    7e0e:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    7e10:	f7fc ff5c 	bl	4ccc <z_arm_fault_init>
	z_arm_cpu_idle_init();
    7e14:	f7fc fdec 	bl	49f0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    7e18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7e1c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    7e1e:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    7e20:	f7fd f858 	bl	4ed4 <z_arm_mpu_init>
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    7e24:	4d29      	ldr	r5, [pc, #164]	; (7ecc <z_cstart+0xf4>)
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    7e26:	f7fc ffc7 	bl	4db8 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    7e2a:	f240 1301 	movw	r3, #257	; 0x101
    7e2e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    7e32:	ab06      	add	r3, sp, #24
    7e34:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
    7e36:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    7e3a:	f005 f8b5 	bl	cfa8 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    7e3e:	4620      	mov	r0, r4
    7e40:	f7ff ff5a 	bl	7cf8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    7e44:	2001      	movs	r0, #1
    7e46:	f7ff ff57 	bl	7cf8 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    7e4a:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
    7e4e:	f000 fe5b 	bl	8b08 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    7e52:	4b1f      	ldr	r3, [pc, #124]	; (7ed0 <z_cstart+0xf8>)
	_kernel.ready_q.cache = &z_main_thread;
    7e54:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    7e56:	491f      	ldr	r1, [pc, #124]	; (7ed4 <z_cstart+0xfc>)
    7e58:	9305      	str	r3, [sp, #20]
    7e5a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
    7e5e:	4653      	mov	r3, sl
    7e60:	e9cd 4b03 	strd	r4, fp, [sp, #12]
    7e64:	e9cd 4401 	strd	r4, r4, [sp, #4]
    7e68:	9400      	str	r4, [sp, #0]
    7e6a:	4630      	mov	r0, r6
    7e6c:	f000 f88e 	bl	7f8c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    7e70:	7b73      	ldrb	r3, [r6, #13]
    7e72:	4680      	mov	r8, r0
    7e74:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
    7e78:	4630      	mov	r0, r6
    7e7a:	7373      	strb	r3, [r6, #13]
    7e7c:	f005 fa39 	bl	d2f2 <z_ready_thread>
	z_setup_new_thread(thread, stack,
    7e80:	230f      	movs	r3, #15
    7e82:	e9cd 4302 	strd	r4, r3, [sp, #8]
    7e86:	4914      	ldr	r1, [pc, #80]	; (7ed8 <z_cstart+0x100>)
    7e88:	4b14      	ldr	r3, [pc, #80]	; (7edc <z_cstart+0x104>)
    7e8a:	f44f 72a0 	mov.w	r2, #320	; 0x140
    7e8e:	e9cd b404 	strd	fp, r4, [sp, #16]
    7e92:	e9cd 5400 	strd	r5, r4, [sp]
    7e96:	4638      	mov	r0, r7
    7e98:	f000 f878 	bl	7f8c <z_setup_new_thread>
    7e9c:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    7e9e:	60ef      	str	r7, [r5, #12]
    7ea0:	f023 0304 	bic.w	r3, r3, #4
    7ea4:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    7ea6:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
    7eaa:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
    7eae:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
    7eb0:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    7eb4:	4652      	mov	r2, sl
    7eb6:	4641      	mov	r1, r8
    7eb8:	4630      	mov	r0, r6
    7eba:	f7fc fd83 	bl	49c4 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    7ebe:	bf00      	nop
    7ec0:	e000ed00 	.word	0xe000ed00
    7ec4:	200005f0 	.word	0x200005f0
    7ec8:	20000570 	.word	0x20000570
    7ecc:	2000272c 	.word	0x2000272c
    7ed0:	0000dff3 	.word	0x0000dff3
    7ed4:	200059c0 	.word	0x200059c0
    7ed8:	200081e0 	.word	0x200081e0
    7edc:	00008105 	.word	0x00008105
    7ee0:	20008b60 	.word	0x20008b60
    7ee4:	00007da5 	.word	0x00007da5

00007ee8 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    7ee8:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    7eea:	4b0e      	ldr	r3, [pc, #56]	; (7f24 <init_mem_slab_module+0x3c>)
    7eec:	4c0e      	ldr	r4, [pc, #56]	; (7f28 <init_mem_slab_module+0x40>)
    7eee:	42a3      	cmp	r3, r4
    7ef0:	d301      	bcc.n	7ef6 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
    7ef2:	2000      	movs	r0, #0
	return rc;
}
    7ef4:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    7ef6:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    7efa:	ea41 0200 	orr.w	r2, r1, r0
    7efe:	f012 0203 	ands.w	r2, r2, #3
    7f02:	d10b      	bne.n	7f1c <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    7f04:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    7f06:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    7f08:	42aa      	cmp	r2, r5
    7f0a:	d101      	bne.n	7f10 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    7f0c:	331c      	adds	r3, #28
    7f0e:	e7ee      	b.n	7eee <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    7f10:	695e      	ldr	r6, [r3, #20]
    7f12:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    7f14:	3201      	adds	r2, #1
		slab->free_list = p;
    7f16:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    7f18:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    7f1a:	e7f5      	b.n	7f08 <init_mem_slab_module+0x20>
		return -EINVAL;
    7f1c:	f06f 0015 	mvn.w	r0, #21
	return rc;
    7f20:	e7e8      	b.n	7ef4 <init_mem_slab_module+0xc>
    7f22:	bf00      	nop
    7f24:	200002bc 	.word	0x200002bc
    7f28:	200002d8 	.word	0x200002d8

00007f2c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    7f2c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
    7f2e:	460c      	mov	r4, r1
    7f30:	4616      	mov	r6, r2
    7f32:	461f      	mov	r7, r3
	__asm__ volatile(
    7f34:	f04f 0320 	mov.w	r3, #32
    7f38:	f3ef 8111 	mrs	r1, BASEPRI
    7f3c:	f383 8811 	msr	BASEPRI, r3
    7f40:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    7f44:	6943      	ldr	r3, [r0, #20]
    7f46:	b15b      	cbz	r3, 7f60 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
    7f48:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    7f4a:	681b      	ldr	r3, [r3, #0]
    7f4c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    7f4e:	6983      	ldr	r3, [r0, #24]
    7f50:	3301      	adds	r3, #1
    7f52:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    7f54:	2000      	movs	r0, #0
	__asm__ volatile(
    7f56:	f381 8811 	msr	BASEPRI, r1
    7f5a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    7f5e:	e011      	b.n	7f84 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    7f60:	ea56 0207 	orrs.w	r2, r6, r7
    7f64:	d103      	bne.n	7f6e <k_mem_slab_alloc+0x42>
		*mem = NULL;
    7f66:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    7f68:	f06f 000b 	mvn.w	r0, #11
    7f6c:	e7f3      	b.n	7f56 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    7f6e:	4602      	mov	r2, r0
    7f70:	e9cd 6700 	strd	r6, r7, [sp]
    7f74:	3008      	adds	r0, #8
    7f76:	f000 fc09 	bl	878c <z_pend_curr>
		if (result == 0) {
    7f7a:	b918      	cbnz	r0, 7f84 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
    7f7c:	4b02      	ldr	r3, [pc, #8]	; (7f88 <k_mem_slab_alloc+0x5c>)
    7f7e:	689b      	ldr	r3, [r3, #8]
    7f80:	695b      	ldr	r3, [r3, #20]
    7f82:	6023      	str	r3, [r4, #0]
}
    7f84:	b002      	add	sp, #8
    7f86:	bdd0      	pop	{r4, r6, r7, pc}
    7f88:	2000272c 	.word	0x2000272c

00007f8c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    7f8c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    7f90:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    7f92:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    7f94:	2604      	movs	r6, #4
    7f96:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    7f98:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    7f9a:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    7f9c:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    7fa0:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    7fa2:	1dd6      	adds	r6, r2, #7
    7fa4:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7fa8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    7faa:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    7fac:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    7fb0:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    7fb2:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    7fb6:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    7fba:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    7fbc:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    7fbe:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    7fc0:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7fc4:	9202      	str	r2, [sp, #8]
    7fc6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7fc8:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    7fca:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7fcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7fce:	9200      	str	r2, [sp, #0]
    7fd0:	4642      	mov	r2, r8
{
    7fd2:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7fd4:	f7fc fcc0 	bl	4958 <arch_new_thread>
	if (!_current) {
    7fd8:	4b04      	ldr	r3, [pc, #16]	; (7fec <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    7fda:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    7fdc:	689b      	ldr	r3, [r3, #8]
    7fde:	b103      	cbz	r3, 7fe2 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    7fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    7fe2:	6723      	str	r3, [r4, #112]	; 0x70
}
    7fe4:	4640      	mov	r0, r8
    7fe6:	b004      	add	sp, #16
    7fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7fec:	2000272c 	.word	0x2000272c

00007ff0 <z_impl_k_thread_create>:
{
    7ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
    7ff2:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    7ff4:	2500      	movs	r5, #0
    7ff6:	9505      	str	r5, [sp, #20]
    7ff8:	9d10      	ldr	r5, [sp, #64]	; 0x40
    7ffa:	9504      	str	r5, [sp, #16]
    7ffc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    7ffe:	9503      	str	r5, [sp, #12]
    8000:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    8002:	9502      	str	r5, [sp, #8]
{
    8004:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    8008:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    800a:	9501      	str	r5, [sp, #4]
    800c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    800e:	9500      	str	r5, [sp, #0]
{
    8010:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    8012:	f7ff ffbb 	bl	7f8c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    8016:	1c7b      	adds	r3, r7, #1
    8018:	bf08      	it	eq
    801a:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    801e:	d005      	beq.n	802c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    8020:	ea56 0307 	orrs.w	r3, r6, r7
    8024:	d105      	bne.n	8032 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x32>
	z_sched_start(thread);
    8026:	4620      	mov	r0, r4
    8028:	f000 fd04 	bl	8a34 <z_sched_start>
}
    802c:	4620      	mov	r0, r4
    802e:	b007      	add	sp, #28
    8030:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    8032:	4904      	ldr	r1, [pc, #16]	; (8044 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44>)
    8034:	4632      	mov	r2, r6
    8036:	463b      	mov	r3, r7
    8038:	f104 0018 	add.w	r0, r4, #24
    803c:	f000 fec8 	bl	8dd0 <z_add_timeout>
    8040:	e7f4      	b.n	802c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c>
    8042:	bf00      	nop
    8044:	0000d313 	.word	0x0000d313

00008048 <z_init_static_threads>:
{
    8048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    804c:	4e2a      	ldr	r6, [pc, #168]	; (80f8 <z_init_static_threads+0xb0>)
    804e:	4d2b      	ldr	r5, [pc, #172]	; (80fc <z_init_static_threads+0xb4>)
{
    8050:	b086      	sub	sp, #24
    8052:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
    8054:	42b5      	cmp	r5, r6
    8056:	f105 0430 	add.w	r4, r5, #48	; 0x30
    805a:	d310      	bcc.n	807e <z_init_static_threads+0x36>
	k_sched_lock();
    805c:	f000 fb24 	bl	86a8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    8060:	4c26      	ldr	r4, [pc, #152]	; (80fc <z_init_static_threads+0xb4>)
    8062:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8100 <z_init_static_threads+0xb8>
		} else {
			return (t * to_hz + off) / from_hz;
    8066:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    806a:	f240 36e7 	movw	r6, #999	; 0x3e7
    806e:	2700      	movs	r7, #0
    8070:	4544      	cmp	r4, r8
    8072:	d321      	bcc.n	80b8 <z_init_static_threads+0x70>
}
    8074:	b006      	add	sp, #24
    8076:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
    807a:	f000 bc07 	b.w	888c <k_sched_unlock>
		z_setup_new_thread(
    807e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    8082:	9305      	str	r3, [sp, #20]
    8084:	f854 3c10 	ldr.w	r3, [r4, #-16]
    8088:	9304      	str	r3, [sp, #16]
    808a:	f854 3c14 	ldr.w	r3, [r4, #-20]
    808e:	9303      	str	r3, [sp, #12]
    8090:	f854 3c18 	ldr.w	r3, [r4, #-24]
    8094:	9302      	str	r3, [sp, #8]
    8096:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    809a:	9301      	str	r3, [sp, #4]
    809c:	f854 3c20 	ldr.w	r3, [r4, #-32]
    80a0:	9300      	str	r3, [sp, #0]
    80a2:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    80a6:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    80aa:	f7ff ff6f 	bl	7f8c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    80ae:	f854 3c30 	ldr.w	r3, [r4, #-48]
    80b2:	655d      	str	r5, [r3, #84]	; 0x54
    80b4:	4625      	mov	r5, r4
    80b6:	e7cd      	b.n	8054 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    80b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    80ba:	1c5a      	adds	r2, r3, #1
    80bc:	d00d      	beq.n	80da <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
    80be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    80c2:	4630      	mov	r0, r6
    80c4:	4639      	mov	r1, r7
    80c6:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    80ca:	42b9      	cmp	r1, r7
    80cc:	bf08      	it	eq
    80ce:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
    80d0:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    80d2:	d104      	bne.n	80de <z_init_static_threads+0x96>
	z_sched_start(thread);
    80d4:	4628      	mov	r0, r5
    80d6:	f000 fcad 	bl	8a34 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    80da:	3430      	adds	r4, #48	; 0x30
    80dc:	e7c8      	b.n	8070 <z_init_static_threads+0x28>
    80de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    80e2:	2300      	movs	r3, #0
    80e4:	f7f8 f80c 	bl	100 <__aeabi_uldivmod>
    80e8:	4602      	mov	r2, r0
    80ea:	460b      	mov	r3, r1
    80ec:	f105 0018 	add.w	r0, r5, #24
    80f0:	4651      	mov	r1, sl
    80f2:	f000 fe6d 	bl	8dd0 <z_add_timeout>
    80f6:	e7f0      	b.n	80da <z_init_static_threads+0x92>
    80f8:	200002bc 	.word	0x200002bc
    80fc:	200002bc 	.word	0x200002bc
    8100:	0000d313 	.word	0x0000d313

00008104 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    8104:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    8106:	4c09      	ldr	r4, [pc, #36]	; (812c <idle+0x28>)
	__asm__ volatile(
    8108:	f04f 0220 	mov.w	r2, #32
    810c:	f3ef 8311 	mrs	r3, BASEPRI
    8110:	f382 8811 	msr	BASEPRI, r2
    8114:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
    8118:	f005 f978 	bl	d40c <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
    811c:	6220      	str	r0, [r4, #32]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
    811e:	f7fa fd07 	bl	2b30 <pm_system_suspend>
    8122:	2800      	cmp	r0, #0
    8124:	d1f0      	bne.n	8108 <idle+0x4>
	arch_cpu_idle();
    8126:	f7fc fc69 	bl	49fc <arch_cpu_idle>
}
    812a:	e7ed      	b.n	8108 <idle+0x4>
    812c:	2000272c 	.word	0x2000272c

00008130 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    8130:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    8134:	4604      	mov	r4, r0
    8136:	4616      	mov	r6, r2
    8138:	461f      	mov	r7, r3
    813a:	f04f 0320 	mov.w	r3, #32
    813e:	f3ef 8811 	mrs	r8, BASEPRI
    8142:	f383 8811 	msr	BASEPRI, r3
    8146:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    814a:	68c3      	ldr	r3, [r0, #12]
    814c:	4a32      	ldr	r2, [pc, #200]	; (8218 <z_impl_k_mutex_lock+0xe8>)
    814e:	b16b      	cbz	r3, 816c <z_impl_k_mutex_lock+0x3c>
    8150:	6880      	ldr	r0, [r0, #8]
    8152:	6891      	ldr	r1, [r2, #8]
    8154:	4288      	cmp	r0, r1
    8156:	d019      	beq.n	818c <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    8158:	ea56 0307 	orrs.w	r3, r6, r7
    815c:	d118      	bne.n	8190 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    815e:	f388 8811 	msr	BASEPRI, r8
    8162:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    8166:	f06f 000f 	mvn.w	r0, #15
    816a:	e00c      	b.n	8186 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    816c:	6891      	ldr	r1, [r2, #8]
    816e:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    8172:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    8174:	3301      	adds	r3, #1
    8176:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    8178:	6893      	ldr	r3, [r2, #8]
    817a:	60a3      	str	r3, [r4, #8]
    817c:	f388 8811 	msr	BASEPRI, r8
    8180:	f3bf 8f6f 	isb	sy
		return 0;
    8184:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    8186:	b002      	add	sp, #8
    8188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    818c:	6921      	ldr	r1, [r4, #16]
    818e:	e7f0      	b.n	8172 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    8190:	f990 300e 	ldrsb.w	r3, [r0, #14]
    8194:	f991 100e 	ldrsb.w	r1, [r1, #14]
    8198:	4299      	cmp	r1, r3
    819a:	bfa8      	it	ge
    819c:	4619      	movge	r1, r3
    819e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    81a2:	428b      	cmp	r3, r1
    81a4:	dd2c      	ble.n	8200 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
    81a6:	f000 fc63 	bl	8a70 <z_set_prio>
    81aa:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    81ac:	e9cd 6700 	strd	r6, r7, [sp]
    81b0:	481a      	ldr	r0, [pc, #104]	; (821c <z_impl_k_mutex_lock+0xec>)
    81b2:	4622      	mov	r2, r4
    81b4:	4641      	mov	r1, r8
    81b6:	f000 fae9 	bl	878c <z_pend_curr>
	if (got_mutex == 0) {
    81ba:	2800      	cmp	r0, #0
    81bc:	d0e3      	beq.n	8186 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    81be:	f04f 0320 	mov.w	r3, #32
    81c2:	f3ef 8611 	mrs	r6, BASEPRI
    81c6:	f383 8811 	msr	BASEPRI, r3
    81ca:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    81ce:	6823      	ldr	r3, [r4, #0]
    81d0:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    81d2:	429c      	cmp	r4, r3
    81d4:	d007      	beq.n	81e6 <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    81d6:	b133      	cbz	r3, 81e6 <z_impl_k_mutex_lock+0xb6>
    81d8:	f993 300e 	ldrsb.w	r3, [r3, #14]
    81dc:	4299      	cmp	r1, r3
    81de:	bfa8      	it	ge
    81e0:	4619      	movge	r1, r3
    81e2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    81e6:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    81e8:	f990 300e 	ldrsb.w	r3, [r0, #14]
    81ec:	4299      	cmp	r1, r3
    81ee:	d109      	bne.n	8204 <z_impl_k_mutex_lock+0xd4>
	if (resched) {
    81f0:	b16d      	cbz	r5, 820e <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    81f2:	480a      	ldr	r0, [pc, #40]	; (821c <z_impl_k_mutex_lock+0xec>)
    81f4:	4631      	mov	r1, r6
    81f6:	f000 fa45 	bl	8684 <z_reschedule>
	return -EAGAIN;
    81fa:	f06f 000a 	mvn.w	r0, #10
    81fe:	e7c2      	b.n	8186 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    8200:	2500      	movs	r5, #0
    8202:	e7d3      	b.n	81ac <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
    8204:	f000 fc34 	bl	8a70 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    8208:	2800      	cmp	r0, #0
    820a:	d1f2      	bne.n	81f2 <z_impl_k_mutex_lock+0xc2>
    820c:	e7f0      	b.n	81f0 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
    820e:	f386 8811 	msr	BASEPRI, r6
    8212:	f3bf 8f6f 	isb	sy
    8216:	e7f0      	b.n	81fa <z_impl_k_mutex_lock+0xca>
    8218:	2000272c 	.word	0x2000272c
    821c:	2000516c 	.word	0x2000516c

00008220 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    8220:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    8222:	6883      	ldr	r3, [r0, #8]
{
    8224:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    8226:	2b00      	cmp	r3, #0
    8228:	d036      	beq.n	8298 <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    822a:	4a1e      	ldr	r2, [pc, #120]	; (82a4 <z_impl_k_mutex_unlock+0x84>)
    822c:	6892      	ldr	r2, [r2, #8]
    822e:	4293      	cmp	r3, r2
    8230:	d135      	bne.n	829e <z_impl_k_mutex_unlock+0x7e>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    8232:	7bda      	ldrb	r2, [r3, #15]
    8234:	3a01      	subs	r2, #1
    8236:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
    8238:	68c3      	ldr	r3, [r0, #12]
    823a:	2b01      	cmp	r3, #1
    823c:	d005      	beq.n	824a <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    823e:	3b01      	subs	r3, #1
    8240:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
    8242:	f000 fb23 	bl	888c <k_sched_unlock>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    8246:	2000      	movs	r0, #0
}
    8248:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    824a:	f04f 0320 	mov.w	r3, #32
    824e:	f3ef 8511 	mrs	r5, BASEPRI
    8252:	f383 8811 	msr	BASEPRI, r3
    8256:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    825a:	6901      	ldr	r1, [r0, #16]
    825c:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    825e:	f990 300e 	ldrsb.w	r3, [r0, #14]
    8262:	4299      	cmp	r1, r3
    8264:	d001      	beq.n	826a <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
    8266:	f000 fc03 	bl	8a70 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    826a:	4620      	mov	r0, r4
    826c:	f005 f873 	bl	d356 <z_unpend_first_thread>
	mutex->owner = new_owner;
    8270:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    8272:	b158      	cbz	r0, 828c <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
    8274:	f990 200e 	ldrsb.w	r2, [r0, #14]
    8278:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    827a:	2200      	movs	r2, #0
    827c:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    827e:	f005 f838 	bl	d2f2 <z_ready_thread>
		z_reschedule(&lock, key);
    8282:	4809      	ldr	r0, [pc, #36]	; (82a8 <z_impl_k_mutex_unlock+0x88>)
    8284:	4629      	mov	r1, r5
    8286:	f000 f9fd 	bl	8684 <z_reschedule>
    828a:	e7da      	b.n	8242 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    828c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    828e:	f385 8811 	msr	BASEPRI, r5
    8292:	f3bf 8f6f 	isb	sy
    8296:	e7d4      	b.n	8242 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    8298:	f06f 0015 	mvn.w	r0, #21
    829c:	e7d4      	b.n	8248 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    829e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    82a2:	e7d1      	b.n	8248 <z_impl_k_mutex_unlock+0x28>
    82a4:	2000272c 	.word	0x2000272c
    82a8:	2000516c 	.word	0x2000516c

000082ac <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    82ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    82ae:	4616      	mov	r6, r2
    82b0:	461f      	mov	r7, r3
	__asm__ volatile(
    82b2:	f04f 0320 	mov.w	r3, #32
    82b6:	f3ef 8511 	mrs	r5, BASEPRI
    82ba:	f383 8811 	msr	BASEPRI, r3
    82be:	f3bf 8f6f 	isb	sy
    82c2:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    82c4:	b19c      	cbz	r4, 82ee <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    82c6:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    82c8:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    82ca:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    82ce:	4294      	cmp	r4, r2
	list->head = node;
    82d0:	6003      	str	r3, [r0, #0]
	list->tail = node;
    82d2:	bf08      	it	eq
    82d4:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    82d6:	2101      	movs	r1, #1
    82d8:	4620      	mov	r0, r4
    82da:	f004 ff47 	bl	d16c <z_queue_node_peek>
    82de:	4604      	mov	r4, r0
	__asm__ volatile(
    82e0:	f385 8811 	msr	BASEPRI, r5
    82e4:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    82e8:	4620      	mov	r0, r4
    82ea:	b003      	add	sp, #12
    82ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    82ee:	ea56 0307 	orrs.w	r3, r6, r7
    82f2:	d0f5      	beq.n	82e0 <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    82f4:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    82f8:	e9cd 6700 	strd	r6, r7, [sp]
    82fc:	4629      	mov	r1, r5
    82fe:	4610      	mov	r0, r2
    8300:	f000 fa44 	bl	878c <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    8304:	2800      	cmp	r0, #0
    8306:	d1ef      	bne.n	82e8 <z_impl_k_queue_get+0x3c>
    8308:	4b01      	ldr	r3, [pc, #4]	; (8310 <z_impl_k_queue_get+0x64>)
    830a:	689b      	ldr	r3, [r3, #8]
    830c:	695c      	ldr	r4, [r3, #20]
    830e:	e7eb      	b.n	82e8 <z_impl_k_queue_get+0x3c>
    8310:	2000272c 	.word	0x2000272c

00008314 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    8314:	b538      	push	{r3, r4, r5, lr}
    8316:	4604      	mov	r4, r0
	__asm__ volatile(
    8318:	f04f 0320 	mov.w	r3, #32
    831c:	f3ef 8511 	mrs	r5, BASEPRI
    8320:	f383 8811 	msr	BASEPRI, r3
    8324:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    8328:	f005 f815 	bl	d356 <z_unpend_first_thread>

	if (thread != NULL) {
    832c:	b148      	cbz	r0, 8342 <z_impl_k_sem_give+0x2e>
    832e:	2200      	movs	r2, #0
    8330:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    8332:	f004 ffde 	bl	d2f2 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    8336:	4629      	mov	r1, r5
    8338:	4805      	ldr	r0, [pc, #20]	; (8350 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    833a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    833e:	f000 b9a1 	b.w	8684 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    8342:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    8346:	429a      	cmp	r2, r3
    8348:	bf18      	it	ne
    834a:	3301      	addne	r3, #1
    834c:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
    834e:	e7f2      	b.n	8336 <z_impl_k_sem_give+0x22>
    8350:	2000516c 	.word	0x2000516c

00008354 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    8354:	b537      	push	{r0, r1, r2, r4, r5, lr}
    8356:	4614      	mov	r4, r2
    8358:	461d      	mov	r5, r3
    835a:	f04f 0320 	mov.w	r3, #32
    835e:	f3ef 8111 	mrs	r1, BASEPRI
    8362:	f383 8811 	msr	BASEPRI, r3
    8366:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    836a:	6883      	ldr	r3, [r0, #8]
    836c:	b143      	cbz	r3, 8380 <z_impl_k_sem_take+0x2c>
		sem->count--;
    836e:	3b01      	subs	r3, #1
    8370:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    8372:	f381 8811 	msr	BASEPRI, r1
    8376:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    837a:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    837c:	b003      	add	sp, #12
    837e:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    8380:	ea54 0305 	orrs.w	r3, r4, r5
    8384:	d106      	bne.n	8394 <z_impl_k_sem_take+0x40>
    8386:	f381 8811 	msr	BASEPRI, r1
    838a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    838e:	f06f 000f 	mvn.w	r0, #15
    8392:	e7f3      	b.n	837c <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    8394:	4602      	mov	r2, r0
    8396:	e9cd 4500 	strd	r4, r5, [sp]
    839a:	4802      	ldr	r0, [pc, #8]	; (83a4 <z_impl_k_sem_take+0x50>)
    839c:	f000 f9f6 	bl	878c <z_pend_curr>
	return ret;
    83a0:	e7ec      	b.n	837c <z_impl_k_sem_take+0x28>
    83a2:	bf00      	nop
    83a4:	2000516c 	.word	0x2000516c

000083a8 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    83a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    83ac:	4e4b      	ldr	r6, [pc, #300]	; (84dc <work_queue_main+0x134>)
{
    83ae:	b085      	sub	sp, #20
    83b0:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    83b2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    83b6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
    83ba:	f04f 0320 	mov.w	r3, #32
    83be:	f3ef 8711 	mrs	r7, BASEPRI
    83c2:	f383 8811 	msr	BASEPRI, r3
    83c6:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
    83ca:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
	return list->head;
    83ce:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
Z_GENLIST_GET(slist, snode)
    83d2:	b985      	cbnz	r5, 83f6 <work_queue_main+0x4e>
	*flagp &= ~BIT(bit);
    83d4:	f023 0204 	bic.w	r2, r3, #4
		} else if (flag_test_and_clear(&queue->flags,
    83d8:	075d      	lsls	r5, r3, #29
	*flagp &= ~BIT(bit);
    83da:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
    83de:	d433      	bmi.n	8448 <work_queue_main+0xa0>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    83e0:	2300      	movs	r3, #0
    83e2:	e9cd 8900 	strd	r8, r9, [sp]
    83e6:	9302      	str	r3, [sp, #8]
    83e8:	f104 0288 	add.w	r2, r4, #136	; 0x88
    83ec:	4639      	mov	r1, r7
    83ee:	483c      	ldr	r0, [pc, #240]	; (84e0 <work_queue_main+0x138>)
    83f0:	f000 fc72 	bl	8cd8 <z_sched_wait>
			continue;
    83f4:	e7e1      	b.n	83ba <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    83f6:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
    83fa:	6829      	ldr	r1, [r5, #0]
	list->head = node;
    83fc:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8400:	4295      	cmp	r5, r2
    8402:	d101      	bne.n	8408 <work_queue_main+0x60>
	list->tail = node;
    8404:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    8408:	f043 0302 	orr.w	r3, r3, #2
    840c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
    8410:	68eb      	ldr	r3, [r5, #12]
    8412:	f023 0304 	bic.w	r3, r3, #4
    8416:	f043 0301 	orr.w	r3, r3, #1
    841a:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    841c:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    841e:	f387 8811 	msr	BASEPRI, r7
    8422:	f3bf 8f6f 	isb	sy

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
			handler(work);
    8426:	4628      	mov	r0, r5
    8428:	4798      	blx	r3
	__asm__ volatile(
    842a:	f04f 0320 	mov.w	r3, #32
    842e:	f3ef 8b11 	mrs	fp, BASEPRI
    8432:	f383 8811 	msr	BASEPRI, r3
    8436:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    843a:	68eb      	ldr	r3, [r5, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    843c:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    843e:	f023 0201 	bic.w	r2, r3, #1
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    8442:	d40b      	bmi.n	845c <work_queue_main+0xb4>
	*flagp &= ~BIT(bit);
    8444:	60ea      	str	r2, [r5, #12]
    8446:	e00e      	b.n	8466 <work_queue_main+0xbe>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    8448:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    844c:	2200      	movs	r2, #0
    844e:	2101      	movs	r1, #1
    8450:	4628      	mov	r0, r5
    8452:	f004 ffa8 	bl	d3a6 <z_sched_wake>
    8456:	2800      	cmp	r0, #0
    8458:	d1f8      	bne.n	844c <work_queue_main+0xa4>
    845a:	e7c1      	b.n	83e0 <work_queue_main+0x38>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    845c:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    845e:	f023 0303 	bic.w	r3, r3, #3
    8462:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    8464:	b970      	cbnz	r0, 8484 <work_queue_main+0xdc>
	*flagp &= ~BIT(bit);
    8466:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    846a:	f023 0302 	bic.w	r3, r3, #2
    846e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
    8472:	f38b 8811 	msr	BASEPRI, fp
    8476:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
    847a:	05d8      	lsls	r0, r3, #23
    847c:	d49d      	bmi.n	83ba <work_queue_main+0x12>
	z_impl_k_yield();
    847e:	f000 fb4f 	bl	8b20 <z_impl_k_yield>
}
    8482:	e79a      	b.n	83ba <work_queue_main+0x12>
	return node->next;
    8484:	6807      	ldr	r7, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    8486:	f04f 0a00 	mov.w	sl, #0
    848a:	2f00      	cmp	r7, #0
    848c:	bf38      	it	cc
    848e:	2700      	movcc	r7, #0
	parent->next = child;
    8490:	4653      	mov	r3, sl
		if (wc->work == work) {
    8492:	6842      	ldr	r2, [r0, #4]
    8494:	4295      	cmp	r5, r2
    8496:	4601      	mov	r1, r0
    8498:	d10e      	bne.n	84b8 <work_queue_main+0x110>
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    849a:	6801      	ldr	r1, [r0, #0]
    849c:	f1ba 0f00 	cmp.w	sl, #0
    84a0:	d114      	bne.n	84cc <work_queue_main+0x124>
    84a2:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    84a4:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    84a6:	4290      	cmp	r0, r2
    84a8:	d100      	bne.n	84ac <work_queue_main+0x104>
	list->tail = node;
    84aa:	6071      	str	r1, [r6, #4]
	parent->next = child;
    84ac:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    84b0:	f7ff ff30 	bl	8314 <z_impl_k_sem_give>
}
    84b4:	4651      	mov	r1, sl
    84b6:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    84b8:	2f00      	cmp	r7, #0
    84ba:	d0d4      	beq.n	8466 <work_queue_main+0xbe>
	return node->next;
    84bc:	683a      	ldr	r2, [r7, #0]
    84be:	2a00      	cmp	r2, #0
    84c0:	bf38      	it	cc
    84c2:	2200      	movcc	r2, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    84c4:	4638      	mov	r0, r7
    84c6:	468a      	mov	sl, r1
    84c8:	4617      	mov	r7, r2
    84ca:	e7e2      	b.n	8492 <work_queue_main+0xea>
	parent->next = child;
    84cc:	f8ca 1000 	str.w	r1, [sl]
Z_GENLIST_REMOVE(slist, snode)
    84d0:	6872      	ldr	r2, [r6, #4]
    84d2:	4290      	cmp	r0, r2
	list->tail = node;
    84d4:	bf08      	it	eq
    84d6:	f8c6 a004 	streq.w	sl, [r6, #4]
}
    84da:	e7e7      	b.n	84ac <work_queue_main+0x104>
    84dc:	2000275c 	.word	0x2000275c
    84e0:	2000516c 	.word	0x2000516c

000084e4 <submit_to_queue_locked>:
{
    84e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    84e6:	68c3      	ldr	r3, [r0, #12]
    84e8:	079a      	lsls	r2, r3, #30
{
    84ea:	4604      	mov	r4, r0
    84ec:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    84ee:	f3c3 0540 	ubfx	r5, r3, #1, #1
    84f2:	d41f      	bmi.n	8534 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    84f4:	075f      	lsls	r7, r3, #29
    84f6:	d41f      	bmi.n	8538 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
    84f8:	680a      	ldr	r2, [r1, #0]
    84fa:	b90a      	cbnz	r2, 8500 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    84fc:	6882      	ldr	r2, [r0, #8]
    84fe:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    8500:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
    8502:	bf44      	itt	mi
    8504:	68a3      	ldrmi	r3, [r4, #8]
    8506:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
    8508:	6837      	ldr	r7, [r6, #0]
			ret = 2;
    850a:	bf4c      	ite	mi
    850c:	2502      	movmi	r5, #2
		ret = 1;
    850e:	2501      	movpl	r5, #1
	if (queue == NULL) {
    8510:	b37f      	cbz	r7, 8572 <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    8512:	4b1b      	ldr	r3, [pc, #108]	; (8580 <submit_to_queue_locked+0x9c>)
    8514:	689b      	ldr	r3, [r3, #8]
    8516:	42bb      	cmp	r3, r7
    8518:	d111      	bne.n	853e <submit_to_queue_locked+0x5a>
    851a:	f004 fdae 	bl	d07a <k_is_in_isr>
    851e:	f080 0001 	eor.w	r0, r0, #1
    8522:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
    8524:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    8528:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    852a:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    852e:	d523      	bpl.n	8578 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
    8530:	b13a      	cbz	r2, 8542 <submit_to_queue_locked+0x5e>
    8532:	b940      	cbnz	r0, 8546 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
    8534:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
    8538:	2300      	movs	r3, #0
    853a:	6033      	str	r3, [r6, #0]
	return ret;
    853c:	e013      	b.n	8566 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    853e:	2000      	movs	r0, #0
    8540:	e7f0      	b.n	8524 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
    8542:	071b      	lsls	r3, r3, #28
    8544:	d4f6      	bmi.n	8534 <submit_to_queue_locked+0x50>
	parent->next = child;
    8546:	2300      	movs	r3, #0
    8548:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
    854a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    854e:	b963      	cbnz	r3, 856a <submit_to_queue_locked+0x86>
	list->head = node;
    8550:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
    8554:	4638      	mov	r0, r7
    8556:	f004 fe2c 	bl	d1b2 <notify_queue_locked>
	*flagp |= BIT(bit);
    855a:	68e3      	ldr	r3, [r4, #12]
    855c:	f043 0304 	orr.w	r3, r3, #4
    8560:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    8562:	6833      	ldr	r3, [r6, #0]
    8564:	60a3      	str	r3, [r4, #8]
}
    8566:	4628      	mov	r0, r5
    8568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    856a:	601c      	str	r4, [r3, #0]
	list->tail = node;
    856c:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
    8570:	e7f0      	b.n	8554 <submit_to_queue_locked+0x70>
		return -EINVAL;
    8572:	f06f 0515 	mvn.w	r5, #21
    8576:	e7df      	b.n	8538 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
    8578:	f06f 0512 	mvn.w	r5, #18
    857c:	e7dc      	b.n	8538 <submit_to_queue_locked+0x54>
    857e:	bf00      	nop
    8580:	2000272c 	.word	0x2000272c

00008584 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    8584:	b5f0      	push	{r4, r5, r6, r7, lr}
    8586:	b089      	sub	sp, #36	; 0x24
    8588:	4604      	mov	r4, r0
	list->head = NULL;
    858a:	2000      	movs	r0, #0
	list->tail = NULL;
    858c:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
    8590:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    8592:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    8596:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
    859a:	f104 0090 	add.w	r0, r4, #144	; 0x90
    859e:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    85a2:	b31d      	cbz	r5, 85ec <k_work_queue_start+0x68>
    85a4:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    85a6:	2800      	cmp	r0, #0
    85a8:	f240 1001 	movw	r0, #257	; 0x101
    85ac:	bf08      	it	eq
    85ae:	2001      	moveq	r0, #1
	*flagp = flags;
    85b0:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    85b4:	2000      	movs	r0, #0
    85b6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    85ba:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    85be:	e9cd 3003 	strd	r3, r0, [sp, #12]
    85c2:	e9cd 0001 	strd	r0, r0, [sp, #4]
    85c6:	e9cd 6706 	strd	r6, r7, [sp, #24]
    85ca:	4b09      	ldr	r3, [pc, #36]	; (85f0 <k_work_queue_start+0x6c>)
    85cc:	9400      	str	r4, [sp, #0]
    85ce:	4620      	mov	r0, r4
    85d0:	f7ff fd0e 	bl	7ff0 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    85d4:	b125      	cbz	r5, 85e0 <k_work_queue_start+0x5c>
    85d6:	6829      	ldr	r1, [r5, #0]
    85d8:	b111      	cbz	r1, 85e0 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    85da:	4620      	mov	r0, r4
    85dc:	f004 fd53 	bl	d086 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    85e0:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    85e2:	b009      	add	sp, #36	; 0x24
    85e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    85e8:	f004 bd50 	b.w	d08c <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    85ec:	2001      	movs	r0, #1
    85ee:	e7df      	b.n	85b0 <k_work_queue_start+0x2c>
    85f0:	000083a9 	.word	0x000083a9

000085f4 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    85f4:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    85f6:	4c08      	ldr	r4, [pc, #32]	; (8618 <z_reset_time_slice+0x24>)
    85f8:	6823      	ldr	r3, [r4, #0]
    85fa:	b15b      	cbz	r3, 8614 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    85fc:	f7fb fb46 	bl	3c8c <sys_clock_elapsed>
    8600:	4603      	mov	r3, r0
    8602:	6820      	ldr	r0, [r4, #0]
    8604:	4a05      	ldr	r2, [pc, #20]	; (861c <z_reset_time_slice+0x28>)
    8606:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    8608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    860c:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    860e:	2100      	movs	r1, #0
    8610:	f004 bf0c 	b.w	d42c <z_set_timeout_expiry>
}
    8614:	bd10      	pop	{r4, pc}
    8616:	bf00      	nop
    8618:	2000276c 	.word	0x2000276c
    861c:	2000272c 	.word	0x2000272c

00008620 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    8620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8622:	4604      	mov	r4, r0
    8624:	460d      	mov	r5, r1
	__asm__ volatile(
    8626:	f04f 0320 	mov.w	r3, #32
    862a:	f3ef 8611 	mrs	r6, BASEPRI
    862e:	f383 8811 	msr	BASEPRI, r3
    8632:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    8636:	4b10      	ldr	r3, [pc, #64]	; (8678 <k_sched_time_slice_set+0x58>)
    8638:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    863a:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    863e:	f240 30e7 	movw	r0, #999	; 0x3e7
    8642:	2100      	movs	r1, #0
    8644:	611a      	str	r2, [r3, #16]
    8646:	fbe7 0104 	umlal	r0, r1, r7, r4
    864a:	2300      	movs	r3, #0
    864c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8650:	f7f7 fd56 	bl	100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    8654:	2c00      	cmp	r4, #0
    8656:	4b09      	ldr	r3, [pc, #36]	; (867c <k_sched_time_slice_set+0x5c>)
    8658:	dc09      	bgt.n	866e <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    865a:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    865c:	4b08      	ldr	r3, [pc, #32]	; (8680 <k_sched_time_slice_set+0x60>)
    865e:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    8660:	f7ff ffc8 	bl	85f4 <z_reset_time_slice>
	__asm__ volatile(
    8664:	f386 8811 	msr	BASEPRI, r6
    8668:	f3bf 8f6f 	isb	sy
	}
}
    866c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    866e:	2802      	cmp	r0, #2
    8670:	bfb8      	it	lt
    8672:	2002      	movlt	r0, #2
    8674:	e7f1      	b.n	865a <k_sched_time_slice_set+0x3a>
    8676:	bf00      	nop
    8678:	2000272c 	.word	0x2000272c
    867c:	2000276c 	.word	0x2000276c
    8680:	20002768 	.word	0x20002768

00008684 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    8684:	b949      	cbnz	r1, 869a <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    8686:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    868a:	b930      	cbnz	r0, 869a <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    868c:	4b05      	ldr	r3, [pc, #20]	; (86a4 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    868e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    8690:	689b      	ldr	r3, [r3, #8]
    8692:	429a      	cmp	r2, r3
    8694:	d001      	beq.n	869a <z_reschedule+0x16>
	ret = arch_swap(key);
    8696:	f7fc b8c1 	b.w	481c <arch_swap>
    869a:	f381 8811 	msr	BASEPRI, r1
    869e:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    86a2:	4770      	bx	lr
    86a4:	2000272c 	.word	0x2000272c

000086a8 <k_sched_lock>:
	__asm__ volatile(
    86a8:	f04f 0320 	mov.w	r3, #32
    86ac:	f3ef 8111 	mrs	r1, BASEPRI
    86b0:	f383 8811 	msr	BASEPRI, r3
    86b4:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    86b8:	4b04      	ldr	r3, [pc, #16]	; (86cc <k_sched_lock+0x24>)
    86ba:	689a      	ldr	r2, [r3, #8]
    86bc:	7bd3      	ldrb	r3, [r2, #15]
    86be:	3b01      	subs	r3, #1
    86c0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    86c2:	f381 8811 	msr	BASEPRI, r1
    86c6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    86ca:	4770      	bx	lr
    86cc:	2000272c 	.word	0x2000272c

000086d0 <update_cache>:
{
    86d0:	b538      	push	{r3, r4, r5, lr}
    86d2:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
    86d4:	480c      	ldr	r0, [pc, #48]	; (8708 <update_cache+0x38>)
    86d6:	4d0d      	ldr	r5, [pc, #52]	; (870c <update_cache+0x3c>)
    86d8:	f004 fdd4 	bl	d284 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    86dc:	4604      	mov	r4, r0
    86de:	b900      	cbnz	r0, 86e2 <update_cache+0x12>
    86e0:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
    86e2:	68ab      	ldr	r3, [r5, #8]
    86e4:	b94a      	cbnz	r2, 86fa <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    86e6:	7b5a      	ldrb	r2, [r3, #13]
    86e8:	06d2      	lsls	r2, r2, #27
    86ea:	d106      	bne.n	86fa <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    86ec:	69a2      	ldr	r2, [r4, #24]
    86ee:	b922      	cbnz	r2, 86fa <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    86f0:	89da      	ldrh	r2, [r3, #14]
    86f2:	2a7f      	cmp	r2, #127	; 0x7f
    86f4:	d901      	bls.n	86fa <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    86f6:	626b      	str	r3, [r5, #36]	; 0x24
}
    86f8:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    86fa:	429c      	cmp	r4, r3
    86fc:	d001      	beq.n	8702 <update_cache+0x32>
			z_reset_time_slice();
    86fe:	f7ff ff79 	bl	85f4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    8702:	626c      	str	r4, [r5, #36]	; 0x24
}
    8704:	e7f8      	b.n	86f8 <update_cache+0x28>
    8706:	bf00      	nop
    8708:	20002754 	.word	0x20002754
    870c:	2000272c 	.word	0x2000272c

00008710 <unready_thread>:
{
    8710:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    8712:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    8716:	7b43      	ldrb	r3, [r0, #13]
    8718:	2a00      	cmp	r2, #0
{
    871a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    871c:	da04      	bge.n	8728 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    871e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8722:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    8724:	f004 fd72 	bl	d20c <sys_dlist_remove>
	update_cache(thread == _current);
    8728:	4b04      	ldr	r3, [pc, #16]	; (873c <unready_thread+0x2c>)
    872a:	6898      	ldr	r0, [r3, #8]
    872c:	1a43      	subs	r3, r0, r1
    872e:	4258      	negs	r0, r3
    8730:	4158      	adcs	r0, r3
}
    8732:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    8736:	f7ff bfcb 	b.w	86d0 <update_cache>
    873a:	bf00      	nop
    873c:	2000272c 	.word	0x2000272c

00008740 <pend>:
{
    8740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8744:	4606      	mov	r6, r0
    8746:	4614      	mov	r4, r2
    8748:	461d      	mov	r5, r3
	__asm__ volatile(
    874a:	f04f 0320 	mov.w	r3, #32
    874e:	f3ef 8711 	mrs	r7, BASEPRI
    8752:	f383 8811 	msr	BASEPRI, r3
    8756:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    875a:	f004 fd9d 	bl	d298 <add_to_waitq_locked>
	__asm__ volatile(
    875e:	f387 8811 	msr	BASEPRI, r7
    8762:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8766:	1c6b      	adds	r3, r5, #1
    8768:	bf08      	it	eq
    876a:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
    876e:	d008      	beq.n	8782 <pend+0x42>
    8770:	4622      	mov	r2, r4
    8772:	462b      	mov	r3, r5
    8774:	f106 0018 	add.w	r0, r6, #24
    8778:	4903      	ldr	r1, [pc, #12]	; (8788 <pend+0x48>)
}
    877a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    877e:	f000 bb27 	b.w	8dd0 <z_add_timeout>
    8782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8786:	bf00      	nop
    8788:	0000d313 	.word	0x0000d313

0000878c <z_pend_curr>:
{
    878c:	b510      	push	{r4, lr}
	pending_current = _current;
    878e:	4b07      	ldr	r3, [pc, #28]	; (87ac <z_pend_curr+0x20>)
    8790:	6898      	ldr	r0, [r3, #8]
    8792:	4b07      	ldr	r3, [pc, #28]	; (87b0 <z_pend_curr+0x24>)
{
    8794:	460c      	mov	r4, r1
	pending_current = _current;
    8796:	6018      	str	r0, [r3, #0]
{
    8798:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    879a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    879e:	f7ff ffcf 	bl	8740 <pend>
    87a2:	4620      	mov	r0, r4
}
    87a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    87a8:	f7fc b838 	b.w	481c <arch_swap>
    87ac:	2000272c 	.word	0x2000272c
    87b0:	20002764 	.word	0x20002764

000087b4 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
    87b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    87b8:	4605      	mov	r5, r0
    87ba:	460f      	mov	r7, r1
		return 0;
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);

	expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    87bc:	f004 fe50 	bl	d460 <sys_clock_tick_get_32>
    87c0:	4604      	mov	r4, r0
	__asm__ volatile(
    87c2:	f04f 0320 	mov.w	r3, #32
    87c6:	f3ef 8811 	mrs	r8, BASEPRI
    87ca:	f383 8811 	msr	BASEPRI, r3
    87ce:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    87d2:	4e12      	ldr	r6, [pc, #72]	; (881c <z_tick_sleep.part.0+0x68>)
    87d4:	4b12      	ldr	r3, [pc, #72]	; (8820 <z_tick_sleep.part.0+0x6c>)
    87d6:	68b0      	ldr	r0, [r6, #8]
    87d8:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    87da:	f7ff ff99 	bl	8710 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    87de:	68b0      	ldr	r0, [r6, #8]
    87e0:	4910      	ldr	r1, [pc, #64]	; (8824 <z_tick_sleep.part.0+0x70>)
    87e2:	462a      	mov	r2, r5
    87e4:	463b      	mov	r3, r7
    87e6:	3018      	adds	r0, #24
    87e8:	f000 faf2 	bl	8dd0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    87ec:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    87ee:	7b53      	ldrb	r3, [r2, #13]
    87f0:	f043 0310 	orr.w	r3, r3, #16
    87f4:	7353      	strb	r3, [r2, #13]
    87f6:	4640      	mov	r0, r8
    87f8:	f7fc f810 	bl	481c <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    87fc:	f004 fe30 	bl	d460 <sys_clock_tick_get_32>
	expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    8800:	442c      	add	r4, r5
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    8802:	1a24      	subs	r4, r4, r0
    8804:	f04f 0500 	mov.w	r5, #0
    8808:	f165 0500 	sbc.w	r5, r5, #0
    880c:	2c00      	cmp	r4, #0
    880e:	f175 0300 	sbcs.w	r3, r5, #0
    8812:	bfb8      	it	lt
    8814:	2400      	movlt	r4, #0
		return ticks;
	}
#endif

	return 0;
}
    8816:	4620      	mov	r0, r4
    8818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    881c:	2000272c 	.word	0x2000272c
    8820:	20002764 	.word	0x20002764
    8824:	0000d313 	.word	0x0000d313

00008828 <z_impl_k_thread_suspend>:
{
    8828:	b570      	push	{r4, r5, r6, lr}
    882a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    882c:	3018      	adds	r0, #24
    882e:	f004 fdd7 	bl	d3e0 <z_abort_timeout>
    8832:	f04f 0320 	mov.w	r3, #32
    8836:	f3ef 8611 	mrs	r6, BASEPRI
    883a:	f383 8811 	msr	BASEPRI, r3
    883e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    8842:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    8846:	7b63      	ldrb	r3, [r4, #13]
    8848:	2a00      	cmp	r2, #0
    884a:	da05      	bge.n	8858 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    884c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8850:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    8852:	4620      	mov	r0, r4
    8854:	f004 fcda 	bl	d20c <sys_dlist_remove>
		update_cache(thread == _current);
    8858:	4d0b      	ldr	r5, [pc, #44]	; (8888 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    885a:	7b63      	ldrb	r3, [r4, #13]
    885c:	68a8      	ldr	r0, [r5, #8]
    885e:	f043 0310 	orr.w	r3, r3, #16
    8862:	7363      	strb	r3, [r4, #13]
    8864:	1b03      	subs	r3, r0, r4
    8866:	4258      	negs	r0, r3
    8868:	4158      	adcs	r0, r3
    886a:	f7ff ff31 	bl	86d0 <update_cache>
	__asm__ volatile(
    886e:	f386 8811 	msr	BASEPRI, r6
    8872:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    8876:	68ab      	ldr	r3, [r5, #8]
    8878:	42a3      	cmp	r3, r4
    887a:	d103      	bne.n	8884 <z_impl_k_thread_suspend+0x5c>
}
    887c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    8880:	f004 bcf6 	b.w	d270 <z_reschedule_unlocked>
}
    8884:	bd70      	pop	{r4, r5, r6, pc}
    8886:	bf00      	nop
    8888:	2000272c 	.word	0x2000272c

0000888c <k_sched_unlock>:
{
    888c:	b510      	push	{r4, lr}
	__asm__ volatile(
    888e:	f04f 0320 	mov.w	r3, #32
    8892:	f3ef 8411 	mrs	r4, BASEPRI
    8896:	f383 8811 	msr	BASEPRI, r3
    889a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    889e:	4b08      	ldr	r3, [pc, #32]	; (88c0 <k_sched_unlock+0x34>)
    88a0:	689a      	ldr	r2, [r3, #8]
    88a2:	7bd3      	ldrb	r3, [r2, #15]
    88a4:	3301      	adds	r3, #1
    88a6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    88a8:	2000      	movs	r0, #0
    88aa:	f7ff ff11 	bl	86d0 <update_cache>
	__asm__ volatile(
    88ae:	f384 8811 	msr	BASEPRI, r4
    88b2:	f3bf 8f6f 	isb	sy
}
    88b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    88ba:	f004 bcd9 	b.w	d270 <z_reschedule_unlocked>
    88be:	bf00      	nop
    88c0:	2000272c 	.word	0x2000272c

000088c4 <move_thread_to_end_of_prio_q>:
{
    88c4:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    88c6:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    88ca:	7b43      	ldrb	r3, [r0, #13]
    88cc:	2a00      	cmp	r2, #0
{
    88ce:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    88d0:	da04      	bge.n	88dc <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    88d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    88d6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    88d8:	f004 fc98 	bl	d20c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    88dc:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    88de:	4a17      	ldr	r2, [pc, #92]	; (893c <move_thread_to_end_of_prio_q+0x78>)
    88e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    88e4:	4610      	mov	r0, r2
    88e6:	734b      	strb	r3, [r1, #13]
    88e8:	f850 3f28 	ldr.w	r3, [r0, #40]!
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    88ec:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
    88ee:	4283      	cmp	r3, r0
    88f0:	bf08      	it	eq
    88f2:	2300      	moveq	r3, #0
    88f4:	2b00      	cmp	r3, #0
    88f6:	bf38      	it	cc
    88f8:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    88fa:	b1cb      	cbz	r3, 8930 <move_thread_to_end_of_prio_q+0x6c>
	int32_t b1 = thread_1->base.prio;
    88fc:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    8900:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
    8904:	42a6      	cmp	r6, r4
    8906:	d00f      	beq.n	8928 <move_thread_to_end_of_prio_q+0x64>
		return b2 - b1;
    8908:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    890a:	2c00      	cmp	r4, #0
    890c:	dd0c      	ble.n	8928 <move_thread_to_end_of_prio_q+0x64>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    890e:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    8910:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    8914:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    8916:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    8918:	6890      	ldr	r0, [r2, #8]
    891a:	1a43      	subs	r3, r0, r1
    891c:	4258      	negs	r0, r3
}
    891e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    8922:	4158      	adcs	r0, r3
    8924:	f7ff bed4 	b.w	86d0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    8928:	42ab      	cmp	r3, r5
    892a:	d001      	beq.n	8930 <move_thread_to_end_of_prio_q+0x6c>
    892c:	681b      	ldr	r3, [r3, #0]
    892e:	e7e4      	b.n	88fa <move_thread_to_end_of_prio_q+0x36>
	node->prev = tail;
    8930:	e9c1 0500 	strd	r0, r5, [r1]
	tail->next = node;
    8934:	6029      	str	r1, [r5, #0]
	list->tail = node;
    8936:	62d1      	str	r1, [r2, #44]	; 0x2c
}
    8938:	e7ee      	b.n	8918 <move_thread_to_end_of_prio_q+0x54>
    893a:	bf00      	nop
    893c:	2000272c 	.word	0x2000272c

00008940 <z_time_slice>:
{
    8940:	b570      	push	{r4, r5, r6, lr}
    8942:	4601      	mov	r1, r0
	__asm__ volatile(
    8944:	f04f 0320 	mov.w	r3, #32
    8948:	f3ef 8411 	mrs	r4, BASEPRI
    894c:	f383 8811 	msr	BASEPRI, r3
    8950:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    8954:	4b16      	ldr	r3, [pc, #88]	; (89b0 <z_time_slice+0x70>)
    8956:	4a17      	ldr	r2, [pc, #92]	; (89b4 <z_time_slice+0x74>)
    8958:	6898      	ldr	r0, [r3, #8]
    895a:	6815      	ldr	r5, [r2, #0]
    895c:	42a8      	cmp	r0, r5
    895e:	461d      	mov	r5, r3
    8960:	d106      	bne.n	8970 <z_time_slice+0x30>
			z_reset_time_slice();
    8962:	f7ff fe47 	bl	85f4 <z_reset_time_slice>
	__asm__ volatile(
    8966:	f384 8811 	msr	BASEPRI, r4
    896a:	f3bf 8f6f 	isb	sy
}
    896e:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    8970:	2600      	movs	r6, #0
    8972:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    8974:	4a10      	ldr	r2, [pc, #64]	; (89b8 <z_time_slice+0x78>)
    8976:	6812      	ldr	r2, [r2, #0]
    8978:	b1ba      	cbz	r2, 89aa <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    897a:	89c2      	ldrh	r2, [r0, #14]
    897c:	2a7f      	cmp	r2, #127	; 0x7f
    897e:	d814      	bhi.n	89aa <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    8980:	7b42      	ldrb	r2, [r0, #13]
    8982:	06d2      	lsls	r2, r2, #27
    8984:	d111      	bne.n	89aa <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    8986:	4a0d      	ldr	r2, [pc, #52]	; (89bc <z_time_slice+0x7c>)
    8988:	f990 600e 	ldrsb.w	r6, [r0, #14]
    898c:	6812      	ldr	r2, [r2, #0]
    898e:	4296      	cmp	r6, r2
    8990:	db0b      	blt.n	89aa <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    8992:	4a0b      	ldr	r2, [pc, #44]	; (89c0 <z_time_slice+0x80>)
    8994:	4290      	cmp	r0, r2
    8996:	d008      	beq.n	89aa <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    8998:	691a      	ldr	r2, [r3, #16]
    899a:	428a      	cmp	r2, r1
    899c:	dc02      	bgt.n	89a4 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
    899e:	f7ff ff91 	bl	88c4 <move_thread_to_end_of_prio_q>
    89a2:	e7de      	b.n	8962 <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
    89a4:	1a52      	subs	r2, r2, r1
    89a6:	611a      	str	r2, [r3, #16]
    89a8:	e7dd      	b.n	8966 <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
    89aa:	2300      	movs	r3, #0
    89ac:	612b      	str	r3, [r5, #16]
    89ae:	e7da      	b.n	8966 <z_time_slice+0x26>
    89b0:	2000272c 	.word	0x2000272c
    89b4:	20002764 	.word	0x20002764
    89b8:	2000276c 	.word	0x2000276c
    89bc:	20002768 	.word	0x20002768
    89c0:	20000570 	.word	0x20000570

000089c4 <ready_thread>:
{
    89c4:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    89c6:	f990 300d 	ldrsb.w	r3, [r0, #13]
    89ca:	7b42      	ldrb	r2, [r0, #13]
    89cc:	2b00      	cmp	r3, #0
    89ce:	db2d      	blt.n	8a2c <ready_thread+0x68>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    89d0:	06d3      	lsls	r3, r2, #27
    89d2:	d12b      	bne.n	8a2c <ready_thread+0x68>
	return !sys_dnode_is_linked(&to->node);
    89d4:	6983      	ldr	r3, [r0, #24]
    89d6:	bb4b      	cbnz	r3, 8a2c <ready_thread+0x68>
	return list->head == list;
    89d8:	4915      	ldr	r1, [pc, #84]	; (8a30 <ready_thread+0x6c>)
	thread->base.thread_state |= _THREAD_QUEUED;
    89da:	f062 027f 	orn	r2, r2, #127	; 0x7f
    89de:	7342      	strb	r2, [r0, #13]
    89e0:	460a      	mov	r2, r1
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    89e2:	6acd      	ldr	r5, [r1, #44]	; 0x2c
	return list->head == list;
    89e4:	f852 4f28 	ldr.w	r4, [r2, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    89e8:	4294      	cmp	r4, r2
    89ea:	bf18      	it	ne
    89ec:	4623      	movne	r3, r4
    89ee:	2b00      	cmp	r3, #0
    89f0:	bf38      	it	cc
    89f2:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    89f4:	b1ab      	cbz	r3, 8a22 <ready_thread+0x5e>
	int32_t b1 = thread_1->base.prio;
    89f6:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    89fa:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
    89fe:	42a6      	cmp	r6, r4
    8a00:	d00b      	beq.n	8a1a <ready_thread+0x56>
		return b2 - b1;
    8a02:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    8a04:	2c00      	cmp	r4, #0
    8a06:	dd08      	ble.n	8a1a <ready_thread+0x56>
	sys_dnode_t *const prev = successor->prev;
    8a08:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    8a0a:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    8a0e:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    8a10:	6058      	str	r0, [r3, #4]
}
    8a12:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    8a14:	2000      	movs	r0, #0
    8a16:	f7ff be5b 	b.w	86d0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    8a1a:	42ab      	cmp	r3, r5
    8a1c:	d001      	beq.n	8a22 <ready_thread+0x5e>
    8a1e:	681b      	ldr	r3, [r3, #0]
    8a20:	e7e8      	b.n	89f4 <ready_thread+0x30>
	node->prev = tail;
    8a22:	e9c0 2500 	strd	r2, r5, [r0]
	tail->next = node;
    8a26:	6028      	str	r0, [r5, #0]
	list->tail = node;
    8a28:	62c8      	str	r0, [r1, #44]	; 0x2c
}
    8a2a:	e7f2      	b.n	8a12 <ready_thread+0x4e>
}
    8a2c:	bc70      	pop	{r4, r5, r6}
    8a2e:	4770      	bx	lr
    8a30:	2000272c 	.word	0x2000272c

00008a34 <z_sched_start>:
{
    8a34:	b510      	push	{r4, lr}
	__asm__ volatile(
    8a36:	f04f 0220 	mov.w	r2, #32
    8a3a:	f3ef 8411 	mrs	r4, BASEPRI
    8a3e:	f382 8811 	msr	BASEPRI, r2
    8a42:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
    8a46:	7b42      	ldrb	r2, [r0, #13]
    8a48:	0751      	lsls	r1, r2, #29
    8a4a:	d404      	bmi.n	8a56 <z_sched_start+0x22>
	__asm__ volatile(
    8a4c:	f384 8811 	msr	BASEPRI, r4
    8a50:	f3bf 8f6f 	isb	sy
}
    8a54:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    8a56:	f022 0204 	bic.w	r2, r2, #4
    8a5a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    8a5c:	f7ff ffb2 	bl	89c4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    8a60:	4621      	mov	r1, r4
    8a62:	4802      	ldr	r0, [pc, #8]	; (8a6c <z_sched_start+0x38>)
}
    8a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    8a68:	f7ff be0c 	b.w	8684 <z_reschedule>
    8a6c:	2000516c 	.word	0x2000516c

00008a70 <z_set_prio>:
{
    8a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8a72:	4604      	mov	r4, r0
	__asm__ volatile(
    8a74:	f04f 0320 	mov.w	r3, #32
    8a78:	f3ef 8611 	mrs	r6, BASEPRI
    8a7c:	f383 8811 	msr	BASEPRI, r3
    8a80:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    8a84:	7b43      	ldrb	r3, [r0, #13]
    8a86:	06da      	lsls	r2, r3, #27
    8a88:	b249      	sxtb	r1, r1
    8a8a:	d138      	bne.n	8afe <z_set_prio+0x8e>
    8a8c:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
    8a8e:	2d00      	cmp	r5, #0
    8a90:	d135      	bne.n	8afe <z_set_prio+0x8e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8a92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8a96:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    8a98:	f004 fbb8 	bl	d20c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    8a9c:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
    8a9e:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    8aa0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8aa4:	7343      	strb	r3, [r0, #13]
	return list->head == list;
    8aa6:	4817      	ldr	r0, [pc, #92]	; (8b04 <z_set_prio+0x94>)
    8aa8:	4603      	mov	r3, r0
    8aaa:	f853 7f28 	ldr.w	r7, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8aae:	429f      	cmp	r7, r3
    8ab0:	bf18      	it	ne
    8ab2:	463d      	movne	r5, r7
    8ab4:	2d00      	cmp	r5, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8ab6:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
    8ab8:	461a      	mov	r2, r3
    8aba:	462b      	mov	r3, r5
    8abc:	bf38      	it	cc
    8abe:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8ac0:	b1c3      	cbz	r3, 8af4 <z_set_prio+0x84>
	int32_t b2 = thread_2->base.prio;
    8ac2:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    8ac6:	42a9      	cmp	r1, r5
    8ac8:	d010      	beq.n	8aec <z_set_prio+0x7c>
		return b2 - b1;
    8aca:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    8acc:	2d00      	cmp	r5, #0
    8ace:	dd0d      	ble.n	8aec <z_set_prio+0x7c>
	sys_dnode_t *const prev = successor->prev;
    8ad0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    8ad2:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    8ad6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    8ad8:	605c      	str	r4, [r3, #4]
			update_cache(1);
    8ada:	2001      	movs	r0, #1
    8adc:	f7ff fdf8 	bl	86d0 <update_cache>
    8ae0:	2001      	movs	r0, #1
	__asm__ volatile(
    8ae2:	f386 8811 	msr	BASEPRI, r6
    8ae6:	f3bf 8f6f 	isb	sy
}
    8aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    8aec:	42bb      	cmp	r3, r7
    8aee:	d001      	beq.n	8af4 <z_set_prio+0x84>
    8af0:	681b      	ldr	r3, [r3, #0]
    8af2:	e7e5      	b.n	8ac0 <z_set_prio+0x50>
	node->prev = tail;
    8af4:	e9c4 2700 	strd	r2, r7, [r4]
	tail->next = node;
    8af8:	603c      	str	r4, [r7, #0]
	list->tail = node;
    8afa:	62c4      	str	r4, [r0, #44]	; 0x2c
}
    8afc:	e7ed      	b.n	8ada <z_set_prio+0x6a>
			thread->base.prio = prio;
    8afe:	73a1      	strb	r1, [r4, #14]
    8b00:	2000      	movs	r0, #0
    8b02:	e7ee      	b.n	8ae2 <z_set_prio+0x72>
    8b04:	2000272c 	.word	0x2000272c

00008b08 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    8b08:	4b04      	ldr	r3, [pc, #16]	; (8b1c <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    8b0a:	2100      	movs	r1, #0
    8b0c:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    8b10:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    8b14:	4608      	mov	r0, r1
    8b16:	f7ff bd83 	b.w	8620 <k_sched_time_slice_set>
    8b1a:	bf00      	nop
    8b1c:	2000272c 	.word	0x2000272c

00008b20 <z_impl_k_yield>:
	if (!z_is_idle_thread_object(_current)) {
    8b20:	4926      	ldr	r1, [pc, #152]	; (8bbc <z_impl_k_yield+0x9c>)
{
    8b22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
    8b24:	688a      	ldr	r2, [r1, #8]
    8b26:	4b26      	ldr	r3, [pc, #152]	; (8bc0 <z_impl_k_yield+0xa0>)
    8b28:	429a      	cmp	r2, r3
    8b2a:	d03d      	beq.n	8ba8 <z_impl_k_yield+0x88>
	__asm__ volatile(
    8b2c:	f04f 0320 	mov.w	r3, #32
    8b30:	f3ef 8511 	mrs	r5, BASEPRI
    8b34:	f383 8811 	msr	BASEPRI, r3
    8b38:	f3bf 8f6f 	isb	sy
			dequeue_thread(&_kernel.ready_q.runq,
    8b3c:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8b3e:	7b43      	ldrb	r3, [r0, #13]
    8b40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8b44:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    8b46:	f004 fb61 	bl	d20c <sys_dlist_remove>
		queue_thread(&_kernel.ready_q.runq, _current);
    8b4a:	688a      	ldr	r2, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    8b4c:	7b53      	ldrb	r3, [r2, #13]
	return list->head == list;
    8b4e:	4608      	mov	r0, r1
    8b50:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8b54:	7353      	strb	r3, [r2, #13]
    8b56:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8b5a:	6ace      	ldr	r6, [r1, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8b5c:	4283      	cmp	r3, r0
    8b5e:	bf08      	it	eq
    8b60:	2300      	moveq	r3, #0
    8b62:	2b00      	cmp	r3, #0
    8b64:	bf38      	it	cc
    8b66:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8b68:	b1cb      	cbz	r3, 8b9e <z_impl_k_yield+0x7e>
	int32_t b1 = thread_1->base.prio;
    8b6a:	f992 700e 	ldrsb.w	r7, [r2, #14]
	int32_t b2 = thread_2->base.prio;
    8b6e:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
    8b72:	42a7      	cmp	r7, r4
    8b74:	d00f      	beq.n	8b96 <z_impl_k_yield+0x76>
		return b2 - b1;
    8b76:	1be4      	subs	r4, r4, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    8b78:	2c00      	cmp	r4, #0
    8b7a:	dd0c      	ble.n	8b96 <z_impl_k_yield+0x76>
	sys_dnode_t *const prev = successor->prev;
    8b7c:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    8b7e:	e9c2 3100 	strd	r3, r1, [r2]
	prev->next = node;
    8b82:	600a      	str	r2, [r1, #0]
	successor->prev = node;
    8b84:	605a      	str	r2, [r3, #4]
		update_cache(1);
    8b86:	2001      	movs	r0, #1
    8b88:	f7ff fda2 	bl	86d0 <update_cache>
    8b8c:	4628      	mov	r0, r5
}
    8b8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8b92:	f7fb be43 	b.w	481c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    8b96:	42b3      	cmp	r3, r6
    8b98:	d001      	beq.n	8b9e <z_impl_k_yield+0x7e>
    8b9a:	681b      	ldr	r3, [r3, #0]
    8b9c:	e7e4      	b.n	8b68 <z_impl_k_yield+0x48>
	node->prev = tail;
    8b9e:	e9c2 0600 	strd	r0, r6, [r2]
	tail->next = node;
    8ba2:	6032      	str	r2, [r6, #0]
	list->tail = node;
    8ba4:	62ca      	str	r2, [r1, #44]	; 0x2c
}
    8ba6:	e7ee      	b.n	8b86 <z_impl_k_yield+0x66>
    8ba8:	f04f 0320 	mov.w	r3, #32
    8bac:	f3ef 8011 	mrs	r0, BASEPRI
    8bb0:	f383 8811 	msr	BASEPRI, r3
    8bb4:	f3bf 8f6f 	isb	sy
    8bb8:	e7e9      	b.n	8b8e <z_impl_k_yield+0x6e>
    8bba:	bf00      	nop
    8bbc:	2000272c 	.word	0x2000272c
    8bc0:	20000570 	.word	0x20000570

00008bc4 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8bc4:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    8bc8:	bf08      	it	eq
    8bca:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    8bce:	b508      	push	{r3, lr}
    8bd0:	4602      	mov	r2, r0
    8bd2:	460b      	mov	r3, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8bd4:	d106      	bne.n	8be4 <z_impl_k_sleep+0x20>
		k_thread_suspend(_current);
    8bd6:	4b0b      	ldr	r3, [pc, #44]	; (8c04 <z_impl_k_sleep+0x40>)
    8bd8:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    8bda:	f7ff fe25 	bl	8828 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    8bde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    8be2:	bd08      	pop	{r3, pc}
	if (ticks == 0) {
    8be4:	4313      	orrs	r3, r2
    8be6:	d10a      	bne.n	8bfe <z_impl_k_sleep+0x3a>
	z_impl_k_yield();
    8be8:	f7ff ff9a 	bl	8b20 <z_impl_k_yield>
		return 0;
    8bec:	2000      	movs	r0, #0
			return (t * to_hz + off) / from_hz;
    8bee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    8bf2:	fb80 2303 	smull	r2, r3, r0, r3
    8bf6:	0bd0      	lsrs	r0, r2, #15
    8bf8:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    8bfc:	e7f1      	b.n	8be2 <z_impl_k_sleep+0x1e>
    8bfe:	f7ff fdd9 	bl	87b4 <z_tick_sleep.part.0>
    8c02:	e7f4      	b.n	8bee <z_impl_k_sleep+0x2a>
    8c04:	2000272c 	.word	0x2000272c

00008c08 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    8c08:	4b01      	ldr	r3, [pc, #4]	; (8c10 <z_impl_k_current_get+0x8>)
    8c0a:	6898      	ldr	r0, [r3, #8]
    8c0c:	4770      	bx	lr
    8c0e:	bf00      	nop
    8c10:	2000272c 	.word	0x2000272c

00008c14 <z_impl_k_is_preempt_thread>:
    8c14:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/k_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
    8c18:	b93b      	cbnz	r3, 8c2a <z_impl_k_is_preempt_thread+0x16>
    8c1a:	4b05      	ldr	r3, [pc, #20]	; (8c30 <z_impl_k_is_preempt_thread+0x1c>)
    8c1c:	689b      	ldr	r3, [r3, #8]
    8c1e:	89d8      	ldrh	r0, [r3, #14]
    8c20:	287f      	cmp	r0, #127	; 0x7f
    8c22:	bf8c      	ite	hi
    8c24:	2000      	movhi	r0, #0
    8c26:	2001      	movls	r0, #1
    8c28:	4770      	bx	lr
    8c2a:	2000      	movs	r0, #0
}
    8c2c:	4770      	bx	lr
    8c2e:	bf00      	nop
    8c30:	2000272c 	.word	0x2000272c

00008c34 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    8c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8c38:	4604      	mov	r4, r0
    8c3a:	f04f 0320 	mov.w	r3, #32
    8c3e:	f3ef 8611 	mrs	r6, BASEPRI
    8c42:	f383 8811 	msr	BASEPRI, r3
    8c46:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    8c4a:	7b43      	ldrb	r3, [r0, #13]
    8c4c:	071a      	lsls	r2, r3, #28
    8c4e:	d505      	bpl.n	8c5c <z_thread_abort+0x28>
	__asm__ volatile(
    8c50:	f386 8811 	msr	BASEPRI, r6
    8c54:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    8c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    8c5c:	f023 0220 	bic.w	r2, r3, #32
    8c60:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    8c64:	09d2      	lsrs	r2, r2, #7
    8c66:	d120      	bne.n	8caa <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    8c68:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    8c6a:	68a3      	ldr	r3, [r4, #8]
    8c6c:	b113      	cbz	r3, 8c74 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    8c6e:	4620      	mov	r0, r4
    8c70:	f004 fad4 	bl	d21c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    8c74:	f104 0018 	add.w	r0, r4, #24
    8c78:	f004 fbb2 	bl	d3e0 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    8c7c:	f104 0758 	add.w	r7, r4, #88	; 0x58
    8c80:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    8c84:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8c86:	42bd      	cmp	r5, r7
    8c88:	d000      	beq.n	8c8c <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    8c8a:	b9b5      	cbnz	r5, 8cba <z_thread_abort+0x86>
		update_cache(1);
    8c8c:	2001      	movs	r0, #1
    8c8e:	f7ff fd1f 	bl	86d0 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    8c92:	4b10      	ldr	r3, [pc, #64]	; (8cd4 <z_thread_abort+0xa0>)
    8c94:	689b      	ldr	r3, [r3, #8]
    8c96:	42a3      	cmp	r3, r4
    8c98:	d1da      	bne.n	8c50 <z_thread_abort+0x1c>
    8c9a:	f3ef 8305 	mrs	r3, IPSR
    8c9e:	2b00      	cmp	r3, #0
    8ca0:	d1d6      	bne.n	8c50 <z_thread_abort+0x1c>
    8ca2:	4630      	mov	r0, r6
    8ca4:	f7fb fdba 	bl	481c <arch_swap>
	return ret;
    8ca8:	e7d2      	b.n	8c50 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8caa:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    8cae:	f043 0308 	orr.w	r3, r3, #8
    8cb2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    8cb4:	f004 faaa 	bl	d20c <sys_dlist_remove>
}
    8cb8:	e7d7      	b.n	8c6a <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    8cba:	4628      	mov	r0, r5
    8cbc:	f004 faae 	bl	d21c <unpend_thread_no_timeout>
    8cc0:	f105 0018 	add.w	r0, r5, #24
    8cc4:	f004 fb8c 	bl	d3e0 <z_abort_timeout>
    8cc8:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    8ccc:	4628      	mov	r0, r5
    8cce:	f7ff fe79 	bl	89c4 <ready_thread>
    8cd2:	e7d7      	b.n	8c84 <z_thread_abort+0x50>
    8cd4:	2000272c 	.word	0x2000272c

00008cd8 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    8cd8:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    8cda:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    8cde:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    8ce0:	e9cd 6700 	strd	r6, r7, [sp]
    8ce4:	f7ff fd52 	bl	878c <z_pend_curr>

	if (data != NULL) {
    8ce8:	b11c      	cbz	r4, 8cf2 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    8cea:	4b03      	ldr	r3, [pc, #12]	; (8cf8 <z_sched_wait+0x20>)
    8cec:	689b      	ldr	r3, [r3, #8]
    8cee:	695b      	ldr	r3, [r3, #20]
    8cf0:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    8cf2:	b002      	add	sp, #8
    8cf4:	bdd0      	pop	{r4, r6, r7, pc}
    8cf6:	bf00      	nop
    8cf8:	2000272c 	.word	0x2000272c

00008cfc <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    8cfc:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    8cfe:	4806      	ldr	r0, [pc, #24]	; (8d18 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    8d00:	4a06      	ldr	r2, [pc, #24]	; (8d1c <z_data_copy+0x20>)
    8d02:	4907      	ldr	r1, [pc, #28]	; (8d20 <z_data_copy+0x24>)
    8d04:	1a12      	subs	r2, r2, r0
    8d06:	f001 ff99 	bl	ac3c <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    8d0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    8d0e:	4a05      	ldr	r2, [pc, #20]	; (8d24 <z_data_copy+0x28>)
    8d10:	4905      	ldr	r1, [pc, #20]	; (8d28 <z_data_copy+0x2c>)
    8d12:	4806      	ldr	r0, [pc, #24]	; (8d2c <z_data_copy+0x30>)
    8d14:	f001 bf92 	b.w	ac3c <memcpy>
    8d18:	20000000 	.word	0x20000000
    8d1c:	20000430 	.word	0x20000430
    8d20:	0000e004 	.word	0x0000e004
    8d24:	00000000 	.word	0x00000000
    8d28:	0000e004 	.word	0x0000e004
    8d2c:	20000000 	.word	0x20000000

00008d30 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    8d30:	4b03      	ldr	r3, [pc, #12]	; (8d40 <elapsed+0x10>)
    8d32:	681b      	ldr	r3, [r3, #0]
    8d34:	b90b      	cbnz	r3, 8d3a <elapsed+0xa>
    8d36:	f7fa bfa9 	b.w	3c8c <sys_clock_elapsed>
}
    8d3a:	2000      	movs	r0, #0
    8d3c:	4770      	bx	lr
    8d3e:	bf00      	nop
    8d40:	20002770 	.word	0x20002770

00008d44 <remove_timeout>:
{
    8d44:	b530      	push	{r4, r5, lr}
    8d46:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8d48:	b168      	cbz	r0, 8d66 <remove_timeout+0x22>
    8d4a:	4a0a      	ldr	r2, [pc, #40]	; (8d74 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    8d4c:	6852      	ldr	r2, [r2, #4]
    8d4e:	4290      	cmp	r0, r2
    8d50:	d009      	beq.n	8d66 <remove_timeout+0x22>
	if (next(t) != NULL) {
    8d52:	b143      	cbz	r3, 8d66 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    8d54:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    8d58:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    8d5c:	1912      	adds	r2, r2, r4
    8d5e:	eb45 0101 	adc.w	r1, r5, r1
    8d62:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    8d66:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    8d68:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    8d6a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    8d6c:	2300      	movs	r3, #0
	node->prev = NULL;
    8d6e:	e9c0 3300 	strd	r3, r3, [r0]
}
    8d72:	bd30      	pop	{r4, r5, pc}
    8d74:	20000194 	.word	0x20000194

00008d78 <next_timeout>:

static int32_t next_timeout(void)
{
    8d78:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    8d7a:	4b13      	ldr	r3, [pc, #76]	; (8dc8 <next_timeout+0x50>)
    8d7c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8d7e:	429c      	cmp	r4, r3
    8d80:	bf08      	it	eq
    8d82:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    8d84:	f7ff ffd4 	bl	8d30 <elapsed>
    8d88:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    8d8a:	b1bc      	cbz	r4, 8dbc <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    8d8c:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    8d90:	1b40      	subs	r0, r0, r5
    8d92:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    8d96:	2801      	cmp	r0, #1
    8d98:	f171 0300 	sbcs.w	r3, r1, #0
    8d9c:	db11      	blt.n	8dc2 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    8d9e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    8da2:	2300      	movs	r3, #0
    8da4:	4282      	cmp	r2, r0
    8da6:	eb73 0401 	sbcs.w	r4, r3, r1
    8daa:	da00      	bge.n	8dae <next_timeout+0x36>
    8dac:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    8dae:	4b07      	ldr	r3, [pc, #28]	; (8dcc <next_timeout+0x54>)
    8db0:	691b      	ldr	r3, [r3, #16]
    8db2:	b113      	cbz	r3, 8dba <next_timeout+0x42>
    8db4:	4298      	cmp	r0, r3
    8db6:	bfa8      	it	ge
    8db8:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    8dba:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    8dbc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    8dc0:	e7f5      	b.n	8dae <next_timeout+0x36>
    8dc2:	2000      	movs	r0, #0
    8dc4:	e7f3      	b.n	8dae <next_timeout+0x36>
    8dc6:	bf00      	nop
    8dc8:	20000194 	.word	0x20000194
    8dcc:	2000272c 	.word	0x2000272c

00008dd0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8dd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    8dd4:	bf08      	it	eq
    8dd6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    8dda:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8dde:	4604      	mov	r4, r0
    8de0:	4692      	mov	sl, r2
    8de2:	469b      	mov	fp, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8de4:	d073      	beq.n	8ece <z_add_timeout+0xfe>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    8de6:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    8de8:	f04f 0320 	mov.w	r3, #32
    8dec:	f3ef 8511 	mrs	r5, BASEPRI
    8df0:	f383 8811 	msr	BASEPRI, r3
    8df4:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    8df8:	f06f 0301 	mvn.w	r3, #1
    8dfc:	ebb3 080a 	subs.w	r8, r3, sl
    8e00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8e04:	eb62 090b 	sbc.w	r9, r2, fp
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    8e08:	f1b8 0f00 	cmp.w	r8, #0
    8e0c:	f179 0100 	sbcs.w	r1, r9, #0
    8e10:	db1c      	blt.n	8e4c <z_add_timeout+0x7c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    8e12:	4830      	ldr	r0, [pc, #192]	; (8ed4 <z_add_timeout+0x104>)
    8e14:	e9d0 1000 	ldrd	r1, r0, [r0]
    8e18:	1a5b      	subs	r3, r3, r1
    8e1a:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
    8e1e:	ebb3 060a 	subs.w	r6, r3, sl
    8e22:	eb62 070b 	sbc.w	r7, r2, fp
    8e26:	2e01      	cmp	r6, #1
    8e28:	f177 0300 	sbcs.w	r3, r7, #0
    8e2c:	bfbc      	itt	lt
    8e2e:	2601      	movlt	r6, #1
    8e30:	2700      	movlt	r7, #0
    8e32:	e9c4 6704 	strd	r6, r7, [r4, #16]
	return list->head == list;
    8e36:	4a28      	ldr	r2, [pc, #160]	; (8ed8 <z_add_timeout+0x108>)
    8e38:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8e3c:	4293      	cmp	r3, r2
    8e3e:	d11e      	bne.n	8e7e <z_add_timeout+0xae>
	node->prev = tail;
    8e40:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
    8e44:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    8e48:	6054      	str	r4, [r2, #4]
}
    8e4a:	e02d      	b.n	8ea8 <z_add_timeout+0xd8>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    8e4c:	f7ff ff70 	bl	8d30 <elapsed>
    8e50:	f11a 0301 	adds.w	r3, sl, #1
    8e54:	9300      	str	r3, [sp, #0]
    8e56:	f14b 0300 	adc.w	r3, fp, #0
    8e5a:	9301      	str	r3, [sp, #4]
    8e5c:	e9dd 2300 	ldrd	r2, r3, [sp]
    8e60:	1812      	adds	r2, r2, r0
    8e62:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    8e66:	e9c4 2304 	strd	r2, r3, [r4, #16]
    8e6a:	e7e4      	b.n	8e36 <z_add_timeout+0x66>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    8e6c:	ebb6 0008 	subs.w	r0, r6, r8
    8e70:	eb67 0109 	sbc.w	r1, r7, r9
	return (node == list->tail) ? NULL : node->next;
    8e74:	4563      	cmp	r3, ip
    8e76:	e9c4 0104 	strd	r0, r1, [r4, #16]
    8e7a:	d0e1      	beq.n	8e40 <z_add_timeout+0x70>
    8e7c:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    8e7e:	2b00      	cmp	r3, #0
    8e80:	d0de      	beq.n	8e40 <z_add_timeout+0x70>
			if (t->dticks > to->dticks) {
    8e82:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
    8e86:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
    8e8a:	4546      	cmp	r6, r8
    8e8c:	eb77 0109 	sbcs.w	r1, r7, r9
    8e90:	daec      	bge.n	8e6c <z_add_timeout+0x9c>
				t->dticks -= to->dticks;
    8e92:	ebb8 0006 	subs.w	r0, r8, r6
    8e96:	eb69 0107 	sbc.w	r1, r9, r7
    8e9a:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    8e9e:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    8ea0:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    8ea4:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    8ea6:	605c      	str	r4, [r3, #4]
	return list->head == list;
    8ea8:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8eaa:	4293      	cmp	r3, r2
    8eac:	d00b      	beq.n	8ec6 <z_add_timeout+0xf6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    8eae:	429c      	cmp	r4, r3
    8eb0:	d109      	bne.n	8ec6 <z_add_timeout+0xf6>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    8eb2:	f7ff ff61 	bl	8d78 <next_timeout>

			if (next_time == 0 ||
    8eb6:	b118      	cbz	r0, 8ec0 <z_add_timeout+0xf0>
			    _current_cpu->slice_ticks != next_time) {
    8eb8:	4b08      	ldr	r3, [pc, #32]	; (8edc <z_add_timeout+0x10c>)
			if (next_time == 0 ||
    8eba:	691b      	ldr	r3, [r3, #16]
    8ebc:	4283      	cmp	r3, r0
    8ebe:	d002      	beq.n	8ec6 <z_add_timeout+0xf6>
				sys_clock_set_timeout(next_time, false);
    8ec0:	2100      	movs	r1, #0
    8ec2:	f7fa feb1 	bl	3c28 <sys_clock_set_timeout>
	__asm__ volatile(
    8ec6:	f385 8811 	msr	BASEPRI, r5
    8eca:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    8ece:	b003      	add	sp, #12
    8ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8ed4:	20000670 	.word	0x20000670
    8ed8:	20000194 	.word	0x20000194
    8edc:	2000272c 	.word	0x2000272c

00008ee0 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    8ee0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8ee4:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    8ee6:	f7ff fd2b 	bl	8940 <z_time_slice>
	__asm__ volatile(
    8eea:	f04f 0320 	mov.w	r3, #32
    8eee:	f3ef 8411 	mrs	r4, BASEPRI
    8ef2:	f383 8811 	msr	BASEPRI, r3
    8ef6:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    8efa:	4d2c      	ldr	r5, [pc, #176]	; (8fac <sys_clock_announce+0xcc>)
    8efc:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8fb0 <sys_clock_announce+0xd0>
	return list->head == list;
    8f00:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8fb4 <sys_clock_announce+0xd4>
    8f04:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    8f06:	4651      	mov	r1, sl
    8f08:	f8d5 c000 	ldr.w	ip, [r5]
    8f0c:	f8db 0000 	ldr.w	r0, [fp]
    8f10:	4662      	mov	r2, ip
    8f12:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8f14:	4558      	cmp	r0, fp
    8f16:	e9da 8900 	ldrd	r8, r9, [sl]
    8f1a:	e9cd 2300 	strd	r2, r3, [sp]
    8f1e:	d00d      	beq.n	8f3c <sys_clock_announce+0x5c>
    8f20:	b160      	cbz	r0, 8f3c <sys_clock_announce+0x5c>
    8f22:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    8f26:	45b4      	cmp	ip, r6
    8f28:	41bb      	sbcs	r3, r7
    8f2a:	da1e      	bge.n	8f6a <sys_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    8f2c:	9b00      	ldr	r3, [sp, #0]
    8f2e:	ebb6 0c03 	subs.w	ip, r6, r3
    8f32:	9b01      	ldr	r3, [sp, #4]
    8f34:	eb67 0603 	sbc.w	r6, r7, r3
    8f38:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
    8f3c:	9b00      	ldr	r3, [sp, #0]
    8f3e:	eb13 0208 	adds.w	r2, r3, r8
    8f42:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
    8f44:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
    8f48:	eb43 0309 	adc.w	r3, r3, r9
    8f4c:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
    8f50:	602e      	str	r6, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
    8f52:	f7ff ff11 	bl	8d78 <next_timeout>
    8f56:	4631      	mov	r1, r6
    8f58:	f7fa fe66 	bl	3c28 <sys_clock_set_timeout>
	__asm__ volatile(
    8f5c:	f384 8811 	msr	BASEPRI, r4
    8f60:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    8f64:	b003      	add	sp, #12
    8f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
    8f6a:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
    8f6e:	f04f 0200 	mov.w	r2, #0
    8f72:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
    8f76:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
    8f7a:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
    8f7e:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
    8f82:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
    8f86:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
    8f88:	f7ff fedc 	bl	8d44 <remove_timeout>
    8f8c:	f384 8811 	msr	BASEPRI, r4
    8f90:	f3bf 8f6f 	isb	sy
		t->fn(t);
    8f94:	6883      	ldr	r3, [r0, #8]
    8f96:	4798      	blx	r3
	__asm__ volatile(
    8f98:	f04f 0320 	mov.w	r3, #32
    8f9c:	f3ef 8411 	mrs	r4, BASEPRI
    8fa0:	f383 8811 	msr	BASEPRI, r3
    8fa4:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
    8fa8:	4901      	ldr	r1, [pc, #4]	; (8fb0 <sys_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    8faa:	e7ad      	b.n	8f08 <sys_clock_announce+0x28>
    8fac:	20002770 	.word	0x20002770
    8fb0:	20000670 	.word	0x20000670
    8fb4:	20000194 	.word	0x20000194

00008fb8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    8fb8:	b510      	push	{r4, lr}
    8fba:	f04f 0320 	mov.w	r3, #32
    8fbe:	f3ef 8411 	mrs	r4, BASEPRI
    8fc2:	f383 8811 	msr	BASEPRI, r3
    8fc6:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    8fca:	f7fa fe5f 	bl	3c8c <sys_clock_elapsed>
    8fce:	4b06      	ldr	r3, [pc, #24]	; (8fe8 <sys_clock_tick_get+0x30>)
    8fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
    8fd4:	1812      	adds	r2, r2, r0
    8fd6:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    8fda:	f384 8811 	msr	BASEPRI, r4
    8fde:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    8fe2:	4610      	mov	r0, r2
    8fe4:	4619      	mov	r1, r3
    8fe6:	bd10      	pop	{r4, pc}
    8fe8:	20000670 	.word	0x20000670

00008fec <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
    8fec:	b573      	push	{r0, r1, r4, r5, r6, lr}
    8fee:	4606      	mov	r6, r0
    8ff0:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
    8ff2:	f004 f842 	bl	d07a <k_is_in_isr>
    8ff6:	b980      	cbnz	r0, 901a <z_thread_aligned_alloc+0x2e>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
    8ff8:	4b0b      	ldr	r3, [pc, #44]	; (9028 <z_thread_aligned_alloc+0x3c>)
    8ffa:	689b      	ldr	r3, [r3, #8]
    8ffc:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	}

	if (heap != NULL) {
    8ffe:	b184      	cbz	r4, 9022 <z_thread_aligned_alloc+0x36>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    9000:	2204      	movs	r2, #4
    9002:	18aa      	adds	r2, r5, r2
    9004:	d209      	bcs.n	901a <z_thread_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
    9006:	2000      	movs	r0, #0
    9008:	2100      	movs	r1, #0
    900a:	e9cd 0100 	strd	r0, r1, [sp]
    900e:	f046 0104 	orr.w	r1, r6, #4
    9012:	4620      	mov	r0, r4
    9014:	f004 fa65 	bl	d4e2 <k_heap_aligned_alloc>
	if (mem == NULL) {
    9018:	b908      	cbnz	r0, 901e <z_thread_aligned_alloc+0x32>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
    901a:	2400      	movs	r4, #0
	}

	return ret;
    901c:	e001      	b.n	9022 <z_thread_aligned_alloc+0x36>
	*heap_ref = heap;
    901e:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
    9020:	1d04      	adds	r4, r0, #4
}
    9022:	4620      	mov	r0, r4
    9024:	b002      	add	sp, #8
    9026:	bd70      	pop	{r4, r5, r6, pc}
    9028:	2000272c 	.word	0x2000272c

0000902c <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    902c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    902e:	4c06      	ldr	r4, [pc, #24]	; (9048 <statics_init+0x1c>)
    9030:	4d06      	ldr	r5, [pc, #24]	; (904c <statics_init+0x20>)
    9032:	42ac      	cmp	r4, r5
    9034:	d301      	bcc.n	903a <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
    9036:	2000      	movs	r0, #0
    9038:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    903a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    903e:	4620      	mov	r0, r4
    9040:	f004 fa47 	bl	d4d2 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    9044:	3414      	adds	r4, #20
    9046:	e7f4      	b.n	9032 <statics_init+0x6>
    9048:	200002d8 	.word	0x200002d8
    904c:	200002d8 	.word	0x200002d8

00009050 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    9050:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    9052:	4b09      	ldr	r3, [pc, #36]	; (9078 <k_sys_work_q_init+0x28>)
    9054:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    9056:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    9058:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    905a:	9300      	str	r3, [sp, #0]
    905c:	4907      	ldr	r1, [pc, #28]	; (907c <k_sys_work_q_init+0x2c>)
    905e:	4808      	ldr	r0, [pc, #32]	; (9080 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    9060:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    9064:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9068:	f44f 6280 	mov.w	r2, #1024	; 0x400
    906c:	f7ff fa8a 	bl	8584 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    9070:	4620      	mov	r0, r4
    9072:	b004      	add	sp, #16
    9074:	bd10      	pop	{r4, pc}
    9076:	bf00      	nop
    9078:	0000dff8 	.word	0x0000dff8
    907c:	20008b60 	.word	0x20008b60
    9080:	20000678 	.word	0x20000678

00009084 <nrf_cc3xx_platform_init_no_rng>:
    9084:	b510      	push	{r4, lr}
    9086:	4c0a      	ldr	r4, [pc, #40]	; (90b0 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    9088:	6823      	ldr	r3, [r4, #0]
    908a:	b11b      	cbz	r3, 9094 <nrf_cc3xx_platform_init_no_rng+0x10>
    908c:	2301      	movs	r3, #1
    908e:	6023      	str	r3, [r4, #0]
    9090:	2000      	movs	r0, #0
    9092:	bd10      	pop	{r4, pc}
    9094:	f000 f8b6 	bl	9204 <CC_LibInitNoRng>
    9098:	2800      	cmp	r0, #0
    909a:	d0f7      	beq.n	908c <nrf_cc3xx_platform_init_no_rng+0x8>
    909c:	3801      	subs	r0, #1
    909e:	2806      	cmp	r0, #6
    90a0:	d803      	bhi.n	90aa <nrf_cc3xx_platform_init_no_rng+0x26>
    90a2:	4b04      	ldr	r3, [pc, #16]	; (90b4 <nrf_cc3xx_platform_init_no_rng+0x30>)
    90a4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    90a8:	bd10      	pop	{r4, pc}
    90aa:	4803      	ldr	r0, [pc, #12]	; (90b8 <nrf_cc3xx_platform_init_no_rng+0x34>)
    90ac:	bd10      	pop	{r4, pc}
    90ae:	bf00      	nop
    90b0:	20002774 	.word	0x20002774
    90b4:	0000dc00 	.word	0x0000dc00
    90b8:	ffff8ffe 	.word	0xffff8ffe

000090bc <nrf_cc3xx_platform_abort>:
    90bc:	f3bf 8f4f 	dsb	sy
    90c0:	4905      	ldr	r1, [pc, #20]	; (90d8 <nrf_cc3xx_platform_abort+0x1c>)
    90c2:	4b06      	ldr	r3, [pc, #24]	; (90dc <nrf_cc3xx_platform_abort+0x20>)
    90c4:	68ca      	ldr	r2, [r1, #12]
    90c6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    90ca:	4313      	orrs	r3, r2
    90cc:	60cb      	str	r3, [r1, #12]
    90ce:	f3bf 8f4f 	dsb	sy
    90d2:	bf00      	nop
    90d4:	e7fd      	b.n	90d2 <nrf_cc3xx_platform_abort+0x16>
    90d6:	bf00      	nop
    90d8:	e000ed00 	.word	0xe000ed00
    90dc:	05fa0004 	.word	0x05fa0004

000090e0 <CC_PalAbort>:
    90e0:	b4f0      	push	{r4, r5, r6, r7}
    90e2:	4f09      	ldr	r7, [pc, #36]	; (9108 <CC_PalAbort+0x28>)
    90e4:	4e09      	ldr	r6, [pc, #36]	; (910c <CC_PalAbort+0x2c>)
    90e6:	4c0a      	ldr	r4, [pc, #40]	; (9110 <CC_PalAbort+0x30>)
    90e8:	4a0a      	ldr	r2, [pc, #40]	; (9114 <CC_PalAbort+0x34>)
    90ea:	4d0b      	ldr	r5, [pc, #44]	; (9118 <CC_PalAbort+0x38>)
    90ec:	490b      	ldr	r1, [pc, #44]	; (911c <CC_PalAbort+0x3c>)
    90ee:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    90f2:	603b      	str	r3, [r7, #0]
    90f4:	6852      	ldr	r2, [r2, #4]
    90f6:	6033      	str	r3, [r6, #0]
    90f8:	6023      	str	r3, [r4, #0]
    90fa:	2400      	movs	r4, #0
    90fc:	602b      	str	r3, [r5, #0]
    90fe:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
    9102:	bcf0      	pop	{r4, r5, r6, r7}
    9104:	4710      	bx	r2
    9106:	bf00      	nop
    9108:	5002b400 	.word	0x5002b400
    910c:	5002b404 	.word	0x5002b404
    9110:	5002b408 	.word	0x5002b408
    9114:	2000019c 	.word	0x2000019c
    9118:	5002b40c 	.word	0x5002b40c
    911c:	5002a000 	.word	0x5002a000

00009120 <nrf_cc3xx_platform_set_abort>:
    9120:	e9d0 1200 	ldrd	r1, r2, [r0]
    9124:	4b01      	ldr	r3, [pc, #4]	; (912c <nrf_cc3xx_platform_set_abort+0xc>)
    9126:	e9c3 1200 	strd	r1, r2, [r3]
    912a:	4770      	bx	lr
    912c:	2000019c 	.word	0x2000019c

00009130 <mutex_unlock>:
    9130:	b148      	cbz	r0, 9146 <mutex_unlock+0x16>
    9132:	6843      	ldr	r3, [r0, #4]
    9134:	b12b      	cbz	r3, 9142 <mutex_unlock+0x12>
    9136:	f3bf 8f5f 	dmb	sy
    913a:	2300      	movs	r3, #0
    913c:	6003      	str	r3, [r0, #0]
    913e:	4618      	mov	r0, r3
    9140:	4770      	bx	lr
    9142:	4802      	ldr	r0, [pc, #8]	; (914c <mutex_unlock+0x1c>)
    9144:	4770      	bx	lr
    9146:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    914a:	4770      	bx	lr
    914c:	ffff8fea 	.word	0xffff8fea

00009150 <mutex_free>:
    9150:	b510      	push	{r4, lr}
    9152:	4604      	mov	r4, r0
    9154:	b128      	cbz	r0, 9162 <mutex_free+0x12>
    9156:	6863      	ldr	r3, [r4, #4]
    9158:	b113      	cbz	r3, 9160 <mutex_free+0x10>
    915a:	2300      	movs	r3, #0
    915c:	6023      	str	r3, [r4, #0]
    915e:	6063      	str	r3, [r4, #4]
    9160:	bd10      	pop	{r4, pc}
    9162:	4b02      	ldr	r3, [pc, #8]	; (916c <mutex_free+0x1c>)
    9164:	4802      	ldr	r0, [pc, #8]	; (9170 <mutex_free+0x20>)
    9166:	685b      	ldr	r3, [r3, #4]
    9168:	4798      	blx	r3
    916a:	e7f4      	b.n	9156 <mutex_free+0x6>
    916c:	2000019c 	.word	0x2000019c
    9170:	0000dc1c 	.word	0x0000dc1c

00009174 <mutex_init>:
    9174:	b510      	push	{r4, lr}
    9176:	4604      	mov	r4, r0
    9178:	b130      	cbz	r0, 9188 <mutex_init+0x14>
    917a:	6863      	ldr	r3, [r4, #4]
    917c:	2200      	movs	r2, #0
    917e:	f043 0301 	orr.w	r3, r3, #1
    9182:	6063      	str	r3, [r4, #4]
    9184:	6022      	str	r2, [r4, #0]
    9186:	bd10      	pop	{r4, pc}
    9188:	4801      	ldr	r0, [pc, #4]	; (9190 <mutex_init+0x1c>)
    918a:	f7ff ffa9 	bl	90e0 <CC_PalAbort>
    918e:	e7f4      	b.n	917a <mutex_init+0x6>
    9190:	0000dc44 	.word	0x0000dc44

00009194 <mutex_lock>:
    9194:	b1a0      	cbz	r0, 91c0 <mutex_lock+0x2c>
    9196:	6843      	ldr	r3, [r0, #4]
    9198:	b183      	cbz	r3, 91bc <mutex_lock+0x28>
    919a:	2201      	movs	r2, #1
    919c:	f3bf 8f5b 	dmb	ish
    91a0:	e850 3f00 	ldrex	r3, [r0]
    91a4:	e840 2100 	strex	r1, r2, [r0]
    91a8:	2900      	cmp	r1, #0
    91aa:	d1f9      	bne.n	91a0 <mutex_lock+0xc>
    91ac:	f3bf 8f5b 	dmb	ish
    91b0:	2b01      	cmp	r3, #1
    91b2:	d0f3      	beq.n	919c <mutex_lock+0x8>
    91b4:	f3bf 8f5f 	dmb	sy
    91b8:	2000      	movs	r0, #0
    91ba:	4770      	bx	lr
    91bc:	4802      	ldr	r0, [pc, #8]	; (91c8 <mutex_lock+0x34>)
    91be:	4770      	bx	lr
    91c0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    91c4:	4770      	bx	lr
    91c6:	bf00      	nop
    91c8:	ffff8fea 	.word	0xffff8fea

000091cc <nrf_cc3xx_platform_set_mutexes>:
    91cc:	b470      	push	{r4, r5, r6}
    91ce:	e9d0 6500 	ldrd	r6, r5, [r0]
    91d2:	e9d0 4202 	ldrd	r4, r2, [r0, #8]
    91d6:	4b09      	ldr	r3, [pc, #36]	; (91fc <nrf_cc3xx_platform_set_mutexes+0x30>)
    91d8:	e9c3 4202 	strd	r4, r2, [r3, #8]
    91dc:	e9c3 6500 	strd	r6, r5, [r3]
    91e0:	e9d1 4002 	ldrd	r4, r0, [r1, #8]
    91e4:	e9d1 6500 	ldrd	r6, r5, [r1]
    91e8:	4b05      	ldr	r3, [pc, #20]	; (9200 <nrf_cc3xx_platform_set_mutexes+0x34>)
    91ea:	690a      	ldr	r2, [r1, #16]
    91ec:	611a      	str	r2, [r3, #16]
    91ee:	e9c3 6500 	strd	r6, r5, [r3]
    91f2:	e9c3 4002 	strd	r4, r0, [r3, #8]
    91f6:	bc70      	pop	{r4, r5, r6}
    91f8:	4770      	bx	lr
    91fa:	bf00      	nop
    91fc:	200001ac 	.word	0x200001ac
    9200:	200001bc 	.word	0x200001bc

00009204 <CC_LibInitNoRng>:
    9204:	b510      	push	{r4, lr}
    9206:	f000 f833 	bl	9270 <CC_HalInit>
    920a:	b120      	cbz	r0, 9216 <CC_LibInitNoRng+0x12>
    920c:	2403      	movs	r4, #3
    920e:	f000 f867 	bl	92e0 <CC_PalTerminate>
    9212:	4620      	mov	r0, r4
    9214:	bd10      	pop	{r4, pc}
    9216:	f000 f835 	bl	9284 <CC_PalInit>
    921a:	b990      	cbnz	r0, 9242 <CC_LibInitNoRng+0x3e>
    921c:	f000 f8b0 	bl	9380 <CC_PalPowerSaveModeSelect>
    9220:	b990      	cbnz	r0, 9248 <CC_LibInitNoRng+0x44>
    9222:	4b0f      	ldr	r3, [pc, #60]	; (9260 <CC_LibInitNoRng+0x5c>)
    9224:	681b      	ldr	r3, [r3, #0]
    9226:	0e1b      	lsrs	r3, r3, #24
    9228:	2bf0      	cmp	r3, #240	; 0xf0
    922a:	d108      	bne.n	923e <CC_LibInitNoRng+0x3a>
    922c:	4a0d      	ldr	r2, [pc, #52]	; (9264 <CC_LibInitNoRng+0x60>)
    922e:	4b0e      	ldr	r3, [pc, #56]	; (9268 <CC_LibInitNoRng+0x64>)
    9230:	6812      	ldr	r2, [r2, #0]
    9232:	429a      	cmp	r2, r3
    9234:	d00a      	beq.n	924c <CC_LibInitNoRng+0x48>
    9236:	2407      	movs	r4, #7
    9238:	f000 f81c 	bl	9274 <CC_HalTerminate>
    923c:	e7e7      	b.n	920e <CC_LibInitNoRng+0xa>
    923e:	2406      	movs	r4, #6
    9240:	e7fa      	b.n	9238 <CC_LibInitNoRng+0x34>
    9242:	2404      	movs	r4, #4
    9244:	4620      	mov	r0, r4
    9246:	bd10      	pop	{r4, pc}
    9248:	2400      	movs	r4, #0
    924a:	e7f5      	b.n	9238 <CC_LibInitNoRng+0x34>
    924c:	2001      	movs	r0, #1
    924e:	f000 f897 	bl	9380 <CC_PalPowerSaveModeSelect>
    9252:	4604      	mov	r4, r0
    9254:	2800      	cmp	r0, #0
    9256:	d1f7      	bne.n	9248 <CC_LibInitNoRng+0x44>
    9258:	4b04      	ldr	r3, [pc, #16]	; (926c <CC_LibInitNoRng+0x68>)
    925a:	6018      	str	r0, [r3, #0]
    925c:	e7d9      	b.n	9212 <CC_LibInitNoRng+0xe>
    925e:	bf00      	nop
    9260:	5002b928 	.word	0x5002b928
    9264:	5002ba24 	.word	0x5002ba24
    9268:	20e00000 	.word	0x20e00000
    926c:	5002ba0c 	.word	0x5002ba0c

00009270 <CC_HalInit>:
    9270:	2000      	movs	r0, #0
    9272:	4770      	bx	lr

00009274 <CC_HalTerminate>:
    9274:	2000      	movs	r0, #0
    9276:	4770      	bx	lr

00009278 <CC_HalMaskInterrupt>:
    9278:	4b01      	ldr	r3, [pc, #4]	; (9280 <CC_HalMaskInterrupt+0x8>)
    927a:	6018      	str	r0, [r3, #0]
    927c:	4770      	bx	lr
    927e:	bf00      	nop
    9280:	5002ba04 	.word	0x5002ba04

00009284 <CC_PalInit>:
    9284:	b510      	push	{r4, lr}
    9286:	4811      	ldr	r0, [pc, #68]	; (92cc <CC_PalInit+0x48>)
    9288:	f000 f848 	bl	931c <CC_PalMutexCreate>
    928c:	b100      	cbz	r0, 9290 <CC_PalInit+0xc>
    928e:	bd10      	pop	{r4, pc}
    9290:	480f      	ldr	r0, [pc, #60]	; (92d0 <CC_PalInit+0x4c>)
    9292:	f000 f843 	bl	931c <CC_PalMutexCreate>
    9296:	2800      	cmp	r0, #0
    9298:	d1f9      	bne.n	928e <CC_PalInit+0xa>
    929a:	4c0e      	ldr	r4, [pc, #56]	; (92d4 <CC_PalInit+0x50>)
    929c:	4620      	mov	r0, r4
    929e:	f000 f83d 	bl	931c <CC_PalMutexCreate>
    92a2:	2800      	cmp	r0, #0
    92a4:	d1f3      	bne.n	928e <CC_PalInit+0xa>
    92a6:	4b0c      	ldr	r3, [pc, #48]	; (92d8 <CC_PalInit+0x54>)
    92a8:	480c      	ldr	r0, [pc, #48]	; (92dc <CC_PalInit+0x58>)
    92aa:	601c      	str	r4, [r3, #0]
    92ac:	f000 f836 	bl	931c <CC_PalMutexCreate>
    92b0:	4601      	mov	r1, r0
    92b2:	2800      	cmp	r0, #0
    92b4:	d1eb      	bne.n	928e <CC_PalInit+0xa>
    92b6:	f000 f82d 	bl	9314 <CC_PalDmaInit>
    92ba:	4604      	mov	r4, r0
    92bc:	b108      	cbz	r0, 92c2 <CC_PalInit+0x3e>
    92be:	4620      	mov	r0, r4
    92c0:	bd10      	pop	{r4, pc}
    92c2:	f000 f83f 	bl	9344 <CC_PalPowerSaveModeInit>
    92c6:	4620      	mov	r0, r4
    92c8:	e7fa      	b.n	92c0 <CC_PalInit+0x3c>
    92ca:	bf00      	nop
    92cc:	200001f4 	.word	0x200001f4
    92d0:	200001e8 	.word	0x200001e8
    92d4:	200001f0 	.word	0x200001f0
    92d8:	200001f8 	.word	0x200001f8
    92dc:	200001ec 	.word	0x200001ec

000092e0 <CC_PalTerminate>:
    92e0:	b508      	push	{r3, lr}
    92e2:	4808      	ldr	r0, [pc, #32]	; (9304 <CC_PalTerminate+0x24>)
    92e4:	f000 f824 	bl	9330 <CC_PalMutexDestroy>
    92e8:	4807      	ldr	r0, [pc, #28]	; (9308 <CC_PalTerminate+0x28>)
    92ea:	f000 f821 	bl	9330 <CC_PalMutexDestroy>
    92ee:	4807      	ldr	r0, [pc, #28]	; (930c <CC_PalTerminate+0x2c>)
    92f0:	f000 f81e 	bl	9330 <CC_PalMutexDestroy>
    92f4:	4806      	ldr	r0, [pc, #24]	; (9310 <CC_PalTerminate+0x30>)
    92f6:	f000 f81b 	bl	9330 <CC_PalMutexDestroy>
    92fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    92fe:	f000 b80b 	b.w	9318 <CC_PalDmaTerminate>
    9302:	bf00      	nop
    9304:	200001f4 	.word	0x200001f4
    9308:	200001e8 	.word	0x200001e8
    930c:	200001f0 	.word	0x200001f0
    9310:	200001ec 	.word	0x200001ec

00009314 <CC_PalDmaInit>:
    9314:	2000      	movs	r0, #0
    9316:	4770      	bx	lr

00009318 <CC_PalDmaTerminate>:
    9318:	4770      	bx	lr
    931a:	bf00      	nop

0000931c <CC_PalMutexCreate>:
    931c:	b508      	push	{r3, lr}
    931e:	4b03      	ldr	r3, [pc, #12]	; (932c <CC_PalMutexCreate+0x10>)
    9320:	6802      	ldr	r2, [r0, #0]
    9322:	681b      	ldr	r3, [r3, #0]
    9324:	6810      	ldr	r0, [r2, #0]
    9326:	4798      	blx	r3
    9328:	2000      	movs	r0, #0
    932a:	bd08      	pop	{r3, pc}
    932c:	200001ac 	.word	0x200001ac

00009330 <CC_PalMutexDestroy>:
    9330:	b508      	push	{r3, lr}
    9332:	4b03      	ldr	r3, [pc, #12]	; (9340 <CC_PalMutexDestroy+0x10>)
    9334:	6802      	ldr	r2, [r0, #0]
    9336:	685b      	ldr	r3, [r3, #4]
    9338:	6810      	ldr	r0, [r2, #0]
    933a:	4798      	blx	r3
    933c:	2000      	movs	r0, #0
    933e:	bd08      	pop	{r3, pc}
    9340:	200001ac 	.word	0x200001ac

00009344 <CC_PalPowerSaveModeInit>:
    9344:	b570      	push	{r4, r5, r6, lr}
    9346:	4c09      	ldr	r4, [pc, #36]	; (936c <CC_PalPowerSaveModeInit+0x28>)
    9348:	4d09      	ldr	r5, [pc, #36]	; (9370 <CC_PalPowerSaveModeInit+0x2c>)
    934a:	6920      	ldr	r0, [r4, #16]
    934c:	68ab      	ldr	r3, [r5, #8]
    934e:	4798      	blx	r3
    9350:	b118      	cbz	r0, 935a <CC_PalPowerSaveModeInit+0x16>
    9352:	4b08      	ldr	r3, [pc, #32]	; (9374 <CC_PalPowerSaveModeInit+0x30>)
    9354:	4808      	ldr	r0, [pc, #32]	; (9378 <CC_PalPowerSaveModeInit+0x34>)
    9356:	685b      	ldr	r3, [r3, #4]
    9358:	4798      	blx	r3
    935a:	4a08      	ldr	r2, [pc, #32]	; (937c <CC_PalPowerSaveModeInit+0x38>)
    935c:	68eb      	ldr	r3, [r5, #12]
    935e:	6920      	ldr	r0, [r4, #16]
    9360:	2100      	movs	r1, #0
    9362:	6011      	str	r1, [r2, #0]
    9364:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9368:	4718      	bx	r3
    936a:	bf00      	nop
    936c:	200001bc 	.word	0x200001bc
    9370:	200001ac 	.word	0x200001ac
    9374:	2000019c 	.word	0x2000019c
    9378:	0000dc68 	.word	0x0000dc68
    937c:	20002788 	.word	0x20002788

00009380 <CC_PalPowerSaveModeSelect>:
    9380:	b570      	push	{r4, r5, r6, lr}
    9382:	4d1a      	ldr	r5, [pc, #104]	; (93ec <CC_PalPowerSaveModeSelect+0x6c>)
    9384:	4e1a      	ldr	r6, [pc, #104]	; (93f0 <CC_PalPowerSaveModeSelect+0x70>)
    9386:	4604      	mov	r4, r0
    9388:	68b2      	ldr	r2, [r6, #8]
    938a:	6928      	ldr	r0, [r5, #16]
    938c:	4790      	blx	r2
    938e:	b9f0      	cbnz	r0, 93ce <CC_PalPowerSaveModeSelect+0x4e>
    9390:	b15c      	cbz	r4, 93aa <CC_PalPowerSaveModeSelect+0x2a>
    9392:	4c18      	ldr	r4, [pc, #96]	; (93f4 <CC_PalPowerSaveModeSelect+0x74>)
    9394:	6823      	ldr	r3, [r4, #0]
    9396:	b1ab      	cbz	r3, 93c4 <CC_PalPowerSaveModeSelect+0x44>
    9398:	2b01      	cmp	r3, #1
    939a:	d01a      	beq.n	93d2 <CC_PalPowerSaveModeSelect+0x52>
    939c:	3b01      	subs	r3, #1
    939e:	6023      	str	r3, [r4, #0]
    93a0:	6928      	ldr	r0, [r5, #16]
    93a2:	68f3      	ldr	r3, [r6, #12]
    93a4:	4798      	blx	r3
    93a6:	2000      	movs	r0, #0
    93a8:	bd70      	pop	{r4, r5, r6, pc}
    93aa:	4c12      	ldr	r4, [pc, #72]	; (93f4 <CC_PalPowerSaveModeSelect+0x74>)
    93ac:	6821      	ldr	r1, [r4, #0]
    93ae:	b939      	cbnz	r1, 93c0 <CC_PalPowerSaveModeSelect+0x40>
    93b0:	4b11      	ldr	r3, [pc, #68]	; (93f8 <CC_PalPowerSaveModeSelect+0x78>)
    93b2:	4a12      	ldr	r2, [pc, #72]	; (93fc <CC_PalPowerSaveModeSelect+0x7c>)
    93b4:	2001      	movs	r0, #1
    93b6:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    93ba:	6813      	ldr	r3, [r2, #0]
    93bc:	2b00      	cmp	r3, #0
    93be:	d1fc      	bne.n	93ba <CC_PalPowerSaveModeSelect+0x3a>
    93c0:	3101      	adds	r1, #1
    93c2:	6021      	str	r1, [r4, #0]
    93c4:	68f3      	ldr	r3, [r6, #12]
    93c6:	6928      	ldr	r0, [r5, #16]
    93c8:	4798      	blx	r3
    93ca:	2000      	movs	r0, #0
    93cc:	bd70      	pop	{r4, r5, r6, pc}
    93ce:	480c      	ldr	r0, [pc, #48]	; (9400 <CC_PalPowerSaveModeSelect+0x80>)
    93d0:	bd70      	pop	{r4, r5, r6, pc}
    93d2:	4a0a      	ldr	r2, [pc, #40]	; (93fc <CC_PalPowerSaveModeSelect+0x7c>)
    93d4:	6813      	ldr	r3, [r2, #0]
    93d6:	2b00      	cmp	r3, #0
    93d8:	d1fc      	bne.n	93d4 <CC_PalPowerSaveModeSelect+0x54>
    93da:	4a07      	ldr	r2, [pc, #28]	; (93f8 <CC_PalPowerSaveModeSelect+0x78>)
    93dc:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    93e0:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    93e4:	f7ff ff48 	bl	9278 <CC_HalMaskInterrupt>
    93e8:	6823      	ldr	r3, [r4, #0]
    93ea:	e7d7      	b.n	939c <CC_PalPowerSaveModeSelect+0x1c>
    93ec:	200001bc 	.word	0x200001bc
    93f0:	200001ac 	.word	0x200001ac
    93f4:	20002788 	.word	0x20002788
    93f8:	5002a000 	.word	0x5002a000
    93fc:	5002b910 	.word	0x5002b910
    9400:	ffff8fe9 	.word	0xffff8fe9

00009404 <flash_device_base>:
    if (fd_id != FLASH_DEVICE_ID) {
    9404:	b908      	cbnz	r0, 940a <flash_device_base+0x6>
    *ret = FLASH_DEVICE_BASE;
    9406:	6008      	str	r0, [r1, #0]
    return 0;
    9408:	4770      	bx	lr
        return -EINVAL;
    940a:	f06f 0015 	mvn.w	r0, #21
}
    940e:	4770      	bx	lr

00009410 <flash_area_id_from_multi_image_slot>:
    switch (slot) {
    9410:	b129      	cbz	r1, 941e <flash_area_id_from_multi_image_slot+0xe>
    9412:	2901      	cmp	r1, #1
    9414:	bf14      	ite	ne
    9416:	f06f 0015 	mvnne.w	r0, #21
    941a:	2005      	moveq	r0, #5
    941c:	4770      	bx	lr
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    941e:	2002      	movs	r0, #2
}
    9420:	4770      	bx	lr

00009422 <bootutil_tlv_iter_begin>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_begin(struct image_tlv_iter *it, const struct image_header *hdr,
                        const struct flash_area *fap, uint16_t type, bool prot)
{
    9422:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    9426:	460e      	mov	r6, r1
    9428:	4617      	mov	r7, r2
    942a:	4699      	mov	r9, r3
    uint32_t off_;
    struct image_tlv_info info;

    if (it == NULL || hdr == NULL || fap == NULL) {
    942c:	4604      	mov	r4, r0
    942e:	b928      	cbnz	r0, 943c <bootutil_tlv_iter_begin+0x1a>
        return -1;
    9430:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    // position on first TLV
    it->tlv_off = off_ + sizeof(info);
    return 0;
}
    9434:	4640      	mov	r0, r8
    9436:	b003      	add	sp, #12
    9438:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || hdr == NULL || fap == NULL) {
    943c:	2900      	cmp	r1, #0
    943e:	d0f7      	beq.n	9430 <bootutil_tlv_iter_begin+0xe>
    9440:	2a00      	cmp	r2, #0
    9442:	d0f5      	beq.n	9430 <bootutil_tlv_iter_begin+0xe>
    off_ = BOOT_TLV_OFF(hdr);
    9444:	68cb      	ldr	r3, [r1, #12]
    9446:	890d      	ldrh	r5, [r1, #8]
    9448:	441d      	add	r5, r3
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    944a:	2304      	movs	r3, #4
    944c:	eb0d 0203 	add.w	r2, sp, r3
    9450:	4629      	mov	r1, r5
    9452:	4638      	mov	r0, r7
    9454:	f001 f8fa 	bl	a64c <flash_area_read>
    9458:	4680      	mov	r8, r0
    945a:	2800      	cmp	r0, #0
    945c:	d1e8      	bne.n	9430 <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    945e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    9462:	8973      	ldrh	r3, [r6, #10]
    9464:	f646 1208 	movw	r2, #26888	; 0x6908
    9468:	4291      	cmp	r1, r2
    946a:	d123      	bne.n	94b4 <bootutil_tlv_iter_begin+0x92>
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    946c:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    9470:	4299      	cmp	r1, r3
    9472:	d1dd      	bne.n	9430 <bootutil_tlv_iter_begin+0xe>
        if (LOAD_IMAGE_DATA(hdr, fap, off_ + info.it_tlv_tot,
    9474:	2304      	movs	r3, #4
    9476:	eb0d 0203 	add.w	r2, sp, r3
    947a:	4429      	add	r1, r5
    947c:	4638      	mov	r0, r7
    947e:	f001 f8e5 	bl	a64c <flash_area_read>
    9482:	2800      	cmp	r0, #0
    9484:	d1d4      	bne.n	9430 <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    9486:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    948a:	f646 1307 	movw	r3, #26887	; 0x6907
    948e:	429a      	cmp	r2, r3
    9490:	d1ce      	bne.n	9430 <bootutil_tlv_iter_begin+0xe>
    it->prot = prot;
    9492:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    9496:	72a3      	strb	r3, [r4, #10]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    9498:	8973      	ldrh	r3, [r6, #10]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    949a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    it->type = type;
    949e:	f8a4 9008 	strh.w	r9, [r4, #8]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    94a2:	442b      	add	r3, r5
    94a4:	60e3      	str	r3, [r4, #12]
    it->tlv_off = off_ + sizeof(info);
    94a6:	3504      	adds	r5, #4
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    94a8:	4413      	add	r3, r2
    it->fap = fap;
    94aa:	e9c4 6700 	strd	r6, r7, [r4]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    94ae:	6163      	str	r3, [r4, #20]
    it->tlv_off = off_ + sizeof(info);
    94b0:	6125      	str	r5, [r4, #16]
    return 0;
    94b2:	e7bf      	b.n	9434 <bootutil_tlv_iter_begin+0x12>
    } else if (hdr->ih_protect_tlv_size != 0) {
    94b4:	2b00      	cmp	r3, #0
    94b6:	d0e6      	beq.n	9486 <bootutil_tlv_iter_begin+0x64>
    94b8:	e7ba      	b.n	9430 <bootutil_tlv_iter_begin+0xe>

000094ba <bootutil_tlv_iter_next>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_next(struct image_tlv_iter *it, uint32_t *off, uint16_t *len,
                       uint16_t *type)
{
    94ba:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    94be:	460f      	mov	r7, r1
    94c0:	4690      	mov	r8, r2
    94c2:	461e      	mov	r6, r3
    struct image_tlv tlv;
    int rc;

    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    94c4:	4604      	mov	r4, r0
    94c6:	b920      	cbnz	r0, 94d2 <bootutil_tlv_iter_next+0x18>
        return -1;
    94c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

        it->tlv_off += sizeof(tlv) + tlv.it_len;
    }

    return 1;
}
    94cc:	b003      	add	sp, #12
    94ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    94d2:	6803      	ldr	r3, [r0, #0]
    94d4:	2b00      	cmp	r3, #0
    94d6:	d0f7      	beq.n	94c8 <bootutil_tlv_iter_next+0xe>
    94d8:	6843      	ldr	r3, [r0, #4]
    94da:	2b00      	cmp	r3, #0
    94dc:	d0f4      	beq.n	94c8 <bootutil_tlv_iter_next+0xe>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    94de:	f64f 79ff 	movw	r9, #65535	; 0xffff
    while (it->tlv_off < it->tlv_end) {
    94e2:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    94e6:	429a      	cmp	r2, r3
    94e8:	d216      	bcs.n	9518 <bootutil_tlv_iter_next+0x5e>
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
    94ea:	6823      	ldr	r3, [r4, #0]
    94ec:	895b      	ldrh	r3, [r3, #10]
    94ee:	b123      	cbz	r3, 94fa <bootutil_tlv_iter_next+0x40>
    94f0:	68e3      	ldr	r3, [r4, #12]
    94f2:	4293      	cmp	r3, r2
            it->tlv_off += sizeof(struct image_tlv_info);
    94f4:	bf04      	itt	eq
    94f6:	3304      	addeq	r3, #4
    94f8:	6123      	streq	r3, [r4, #16]
        rc = LOAD_IMAGE_DATA(it->hdr, it->fap, it->tlv_off, &tlv, sizeof tlv);
    94fa:	2304      	movs	r3, #4
    94fc:	6921      	ldr	r1, [r4, #16]
    94fe:	6860      	ldr	r0, [r4, #4]
    9500:	eb0d 0203 	add.w	r2, sp, r3
    9504:	f001 f8a2 	bl	a64c <flash_area_read>
        if (rc) {
    9508:	2800      	cmp	r0, #0
    950a:	d1dd      	bne.n	94c8 <bootutil_tlv_iter_next+0xe>
        if (it->prot && it->tlv_off >= it->prot_end) {
    950c:	7aa3      	ldrb	r3, [r4, #10]
    950e:	6925      	ldr	r5, [r4, #16]
    9510:	b123      	cbz	r3, 951c <bootutil_tlv_iter_next+0x62>
    9512:	68e3      	ldr	r3, [r4, #12]
    9514:	42ab      	cmp	r3, r5
    9516:	d801      	bhi.n	951c <bootutil_tlv_iter_next+0x62>
            return 1;
    9518:	2001      	movs	r0, #1
    951a:	e7d7      	b.n	94cc <bootutil_tlv_iter_next+0x12>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    951c:	8921      	ldrh	r1, [r4, #8]
    951e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9522:	4549      	cmp	r1, r9
    9524:	f103 0204 	add.w	r2, r3, #4
    9528:	d003      	beq.n	9532 <bootutil_tlv_iter_next+0x78>
    952a:	f8bd c004 	ldrh.w	ip, [sp, #4]
    952e:	458c      	cmp	ip, r1
    9530:	d10b      	bne.n	954a <bootutil_tlv_iter_next+0x90>
            if (type != NULL) {
    9532:	b116      	cbz	r6, 953a <bootutil_tlv_iter_next+0x80>
                *type = tlv.it_type;
    9534:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    9538:	8031      	strh	r1, [r6, #0]
            *off = it->tlv_off + sizeof(tlv);
    953a:	3504      	adds	r5, #4
    953c:	603d      	str	r5, [r7, #0]
            *len = tlv.it_len;
    953e:	f8a8 3000 	strh.w	r3, [r8]
            it->tlv_off += sizeof(tlv) + tlv.it_len;
    9542:	6923      	ldr	r3, [r4, #16]
    9544:	4413      	add	r3, r2
    9546:	6123      	str	r3, [r4, #16]
            return 0;
    9548:	e7c0      	b.n	94cc <bootutil_tlv_iter_next+0x12>
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    954a:	4415      	add	r5, r2
    954c:	6125      	str	r5, [r4, #16]
    954e:	e7c8      	b.n	94e2 <bootutil_tlv_iter_next+0x28>

00009550 <boot_fih_memequal>:
    return memcmp(s1, s2, n);
    9550:	f001 bb64 	b.w	ac1c <memcmp>

00009554 <boot_trailer_sz>:
           BOOT_STATUS_MAX_ENTRIES * BOOT_STATUS_STATE_COUNT * min_write_sz;
    9554:	f44f 73c0 	mov.w	r3, #384	; 0x180
    9558:	4358      	muls	r0, r3
}
    955a:	3030      	adds	r0, #48	; 0x30
    955c:	4770      	bx	lr

0000955e <boot_status_entries>:
    if (fap->fa_id == FLASH_AREA_IMAGE_PRIMARY(image_index) ||
    955e:	780b      	ldrb	r3, [r1, #0]
    9560:	2b02      	cmp	r3, #2
    9562:	d006      	beq.n	9572 <boot_status_entries+0x14>
    9564:	2b05      	cmp	r3, #5
    return -1;
    9566:	bf0c      	ite	eq
    9568:	f44f 70c0 	moveq.w	r0, #384	; 0x180
    956c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    9570:	4770      	bx	lr
        return BOOT_STATUS_STATE_COUNT * BOOT_STATUS_MAX_ENTRIES;
    9572:	f44f 70c0 	mov.w	r0, #384	; 0x180
}
    9576:	4770      	bx	lr

00009578 <boot_status_off>:
{
    9578:	b510      	push	{r4, lr}
    957a:	4604      	mov	r4, r0
    elem_sz = flash_area_align(fap);
    957c:	f001 f8e2 	bl	a744 <flash_area_align>
    return fap->fa_size - off_from_end;
    9580:	68a3      	ldr	r3, [r4, #8]
}
    9582:	f44f 72c0 	mov.w	r2, #384	; 0x180
    return fap->fa_size - off_from_end;
    9586:	3b30      	subs	r3, #48	; 0x30
}
    9588:	fb02 3010 	mls	r0, r2, r0, r3
    958c:	bd10      	pop	{r4, pc}

0000958e <boot_write_copy_done>:
    return boot_image_ok_off(fap) - BOOT_MAX_ALIGN;
    958e:	6881      	ldr	r1, [r0, #8]

    off = boot_copy_done_off(fap);
    BOOT_LOG_DBG("writing copy_done; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    9590:	2201      	movs	r2, #1
    9592:	3920      	subs	r1, #32
    9594:	f001 bee4 	b.w	b360 <boot_write_trailer_flag>

00009598 <boot_write_swap_size>:
}

int
boot_write_swap_size(const struct flash_area *fap, uint32_t swap_size)
{
    9598:	b513      	push	{r0, r1, r4, lr}
    959a:	4604      	mov	r4, r0
    959c:	9101      	str	r1, [sp, #4]
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    959e:	f001 fe7e 	bl	b29e <boot_swap_info_off>

    off = boot_swap_size_off(fap);
    BOOT_LOG_DBG("writing swap_size; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)fap->fa_off + off);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_size, 4);
    95a2:	2304      	movs	r3, #4
    95a4:	f1a0 0108 	sub.w	r1, r0, #8
    95a8:	eb0d 0203 	add.w	r2, sp, r3
    95ac:	4620      	mov	r0, r4
    95ae:	f001 feaa 	bl	b306 <boot_write_trailer>
}
    95b2:	b002      	add	sp, #8
    95b4:	bd10      	pop	{r4, pc}

000095b6 <boot_read_image_size>:
{
    95b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    95b8:	4605      	mov	r5, r0
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    95ba:	2000      	movs	r0, #0
{
    95bc:	460c      	mov	r4, r1
    95be:	4617      	mov	r7, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    95c0:	f7ff ff26 	bl	9410 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    95c4:	4669      	mov	r1, sp
    95c6:	b2c0      	uxtb	r0, r0
    95c8:	f7f9 fa3a 	bl	2a40 <flash_area_open>
    if (rc != 0) {
    95cc:	b130      	cbz	r0, 95dc <boot_read_image_size+0x26>
        rc = BOOT_EFLASH;
    95ce:	2501      	movs	r5, #1
    flash_area_close(fap);
    95d0:	9800      	ldr	r0, [sp, #0]
    95d2:	f001 f83a 	bl	a64a <flash_area_close>
}
    95d6:	4628      	mov	r0, r5
    95d8:	b003      	add	sp, #12
    95da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    95dc:	212c      	movs	r1, #44	; 0x2c
    95de:	fb01 5404 	mla	r4, r1, r4, r5
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    95e2:	9800      	ldr	r0, [sp, #0]
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    95e4:	8921      	ldrh	r1, [r4, #8]
    95e6:	68e3      	ldr	r3, [r4, #12]
    95e8:	18ce      	adds	r6, r1, r3
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    95ea:	2304      	movs	r3, #4
    95ec:	eb0d 0203 	add.w	r2, sp, r3
    95f0:	4631      	mov	r1, r6
    95f2:	f001 f82b 	bl	a64c <flash_area_read>
    95f6:	4605      	mov	r5, r0
    95f8:	2800      	cmp	r0, #0
    95fa:	d1e8      	bne.n	95ce <boot_read_image_size+0x18>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    95fc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    protect_tlv_size = boot_img_hdr(state, slot)->ih_protect_tlv_size;
    9600:	8964      	ldrh	r4, [r4, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    9602:	f646 1308 	movw	r3, #26888	; 0x6908
    9606:	429a      	cmp	r2, r3
    9608:	d11a      	bne.n	9640 <boot_read_image_size+0x8a>
        if (protect_tlv_size != info.it_tlv_tot) {
    960a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    960e:	429c      	cmp	r4, r3
    9610:	d001      	beq.n	9616 <boot_read_image_size+0x60>
            rc = BOOT_EBADIMAGE;
    9612:	2503      	movs	r5, #3
    9614:	e7dc      	b.n	95d0 <boot_read_image_size+0x1a>
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    9616:	2304      	movs	r3, #4
    9618:	9800      	ldr	r0, [sp, #0]
    961a:	eb0d 0203 	add.w	r2, sp, r3
    961e:	19a1      	adds	r1, r4, r6
    9620:	f001 f814 	bl	a64c <flash_area_read>
    9624:	2800      	cmp	r0, #0
    9626:	d1d2      	bne.n	95ce <boot_read_image_size+0x18>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    9628:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    962c:	f646 1307 	movw	r3, #26887	; 0x6907
    9630:	429a      	cmp	r2, r3
    9632:	d1ee      	bne.n	9612 <boot_read_image_size+0x5c>
    *size = off + protect_tlv_size + info.it_tlv_tot;
    9634:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    9638:	4421      	add	r1, r4
    963a:	4431      	add	r1, r6
    963c:	6039      	str	r1, [r7, #0]
    rc = 0;
    963e:	e7c7      	b.n	95d0 <boot_read_image_size+0x1a>
    } else if (protect_tlv_size != 0) {
    9640:	2c00      	cmp	r4, #0
    9642:	d0f1      	beq.n	9628 <boot_read_image_size+0x72>
    9644:	e7e5      	b.n	9612 <boot_read_image_size+0x5c>

00009646 <boot_read_image_headers>:
{
    9646:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    9648:	4613      	mov	r3, r2
{
    964a:	460f      	mov	r7, r1
    964c:	4616      	mov	r6, r2
        rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    964e:	2100      	movs	r1, #0
    9650:	4602      	mov	r2, r0
{
    9652:	4605      	mov	r5, r0
        rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    9654:	f7f7 fb8c 	bl	d70 <boot_read_image_header>
        if (rc != 0) {
    9658:	4604      	mov	r4, r0
    965a:	b950      	cbnz	r0, 9672 <boot_read_image_headers+0x2c>
        rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    965c:	4633      	mov	r3, r6
    965e:	f105 022c 	add.w	r2, r5, #44	; 0x2c
    9662:	2101      	movs	r1, #1
    9664:	4628      	mov	r0, r5
    9666:	f7f7 fb83 	bl	d70 <boot_read_image_header>
        if (rc != 0) {
    966a:	b110      	cbz	r0, 9672 <boot_read_image_headers+0x2c>
            if (i > 0 && !require_all) {
    966c:	2f00      	cmp	r7, #0
    966e:	bf18      	it	ne
    9670:	4604      	movne	r4, r0
}
    9672:	4620      	mov	r0, r4
    9674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00009676 <boot_read_sectors>:
{
    9676:	b537      	push	{r0, r1, r2, r4, r5, lr}
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    9678:	6a42      	ldr	r2, [r0, #36]	; 0x24
{
    967a:	4604      	mov	r4, r0
    num_sectors = BOOT_MAX_IMG_SECTORS;
    967c:	2580      	movs	r5, #128	; 0x80
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    967e:	a901      	add	r1, sp, #4
    9680:	2002      	movs	r0, #2
    num_sectors = BOOT_MAX_IMG_SECTORS;
    9682:	9501      	str	r5, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    9684:	f7f9 f9f0 	bl	2a68 <flash_area_get_sectors>
    if (rc != 0) {
    9688:	b948      	cbnz	r0, 969e <boot_read_sectors+0x28>
    *out_num_sectors = num_sectors;
    968a:	9b01      	ldr	r3, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    968c:	6d22      	ldr	r2, [r4, #80]	; 0x50
    *out_num_sectors = num_sectors;
    968e:	62a3      	str	r3, [r4, #40]	; 0x28
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    9690:	a901      	add	r1, sp, #4
    9692:	2005      	movs	r0, #5
    num_sectors = BOOT_MAX_IMG_SECTORS;
    9694:	9501      	str	r5, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    9696:	f7f9 f9e7 	bl	2a68 <flash_area_get_sectors>
    if (rc != 0) {
    969a:	4605      	mov	r5, r0
    969c:	b108      	cbz	r0, 96a2 <boot_read_sectors+0x2c>
        return BOOT_EFLASH;
    969e:	2501      	movs	r5, #1
    96a0:	e005      	b.n	96ae <boot_read_sectors+0x38>
    *out_num_sectors = num_sectors;
    96a2:	9b01      	ldr	r3, [sp, #4]
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    96a4:	6a20      	ldr	r0, [r4, #32]
    *out_num_sectors = num_sectors;
    96a6:	6563      	str	r3, [r4, #84]	; 0x54
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    96a8:	f001 f84c 	bl	a744 <flash_area_align>
    96ac:	65e0      	str	r0, [r4, #92]	; 0x5c
}
    96ae:	4628      	mov	r0, r5
    96b0:	b003      	add	sp, #12
    96b2:	bd30      	pop	{r4, r5, pc}

000096b4 <boot_status_reset>:
    bs->idx = BOOT_STATUS_IDX_0;
    96b4:	2301      	movs	r3, #1
    96b6:	6003      	str	r3, [r0, #0]
    bs->state = BOOT_STATUS_STATE_0;
    96b8:	f103 2301 	add.w	r3, r3, #16777472	; 0x1000100
    96bc:	6043      	str	r3, [r0, #4]
    bs->swap_size = 0;
    96be:	2300      	movs	r3, #0
    bs->source = 0;
    96c0:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
    96c4:	4770      	bx	lr

000096c6 <boot_status_is_reset>:
            bs->idx == BOOT_STATUS_IDX_0 &&
    96c6:	7943      	ldrb	r3, [r0, #5]
    96c8:	2b01      	cmp	r3, #1
    96ca:	d107      	bne.n	96dc <boot_status_is_reset+0x16>
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    96cc:	6803      	ldr	r3, [r0, #0]
    96ce:	2b01      	cmp	r3, #1
    96d0:	d104      	bne.n	96dc <boot_status_is_reset+0x16>
            bs->idx == BOOT_STATUS_IDX_0 &&
    96d2:	7900      	ldrb	r0, [r0, #4]
    96d4:	1e43      	subs	r3, r0, #1
    96d6:	4258      	negs	r0, r3
    96d8:	4158      	adcs	r0, r3
    96da:	4770      	bx	lr
    96dc:	2000      	movs	r0, #0
}
    96de:	4770      	bx	lr

000096e0 <boot_write_status>:
{
    96e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    96e2:	4606      	mov	r6, r0
    96e4:	460d      	mov	r5, r1
    rc = flash_area_open(area_id, &fap);
    96e6:	2002      	movs	r0, #2
    96e8:	a901      	add	r1, sp, #4
    96ea:	f7f9 f9a9 	bl	2a40 <flash_area_open>
    if (rc != 0) {
    96ee:	bb38      	cbnz	r0, 9740 <boot_write_status+0x60>
    off = boot_status_off(fap) +
    96f0:	9801      	ldr	r0, [sp, #4]
    96f2:	f7ff ff41 	bl	9578 <boot_status_off>
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    96f6:	6df1      	ldr	r1, [r6, #92]	; 0x5c
    off = boot_status_off(fap) +
    96f8:	4604      	mov	r4, r0
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    96fa:	4628      	mov	r0, r5
    96fc:	f000 f931 	bl	9962 <boot_status_internal_off>
    off = boot_status_off(fap) +
    9700:	4404      	add	r4, r0
    align = flash_area_align(fap);
    9702:	9801      	ldr	r0, [sp, #4]
    9704:	f001 f81e 	bl	a744 <flash_area_align>
    9708:	4606      	mov	r6, r0
    erased_val = flash_area_erased_val(fap);
    970a:	9801      	ldr	r0, [sp, #4]
    970c:	f001 f823 	bl	a756 <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    9710:	2208      	movs	r2, #8
    erased_val = flash_area_erased_val(fap);
    9712:	4601      	mov	r1, r0
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    9714:	eb0d 0002 	add.w	r0, sp, r2
    9718:	f001 fabb 	bl	ac92 <memset>
    buf[0] = bs->state;
    971c:	792b      	ldrb	r3, [r5, #4]
    971e:	f88d 3008 	strb.w	r3, [sp, #8]
    rc = flash_area_write(fap, off, buf, align);
    9722:	4621      	mov	r1, r4
    9724:	9801      	ldr	r0, [sp, #4]
    9726:	4633      	mov	r3, r6
    9728:	aa02      	add	r2, sp, #8
    972a:	f000 ffac 	bl	a686 <flash_area_write>
    if (rc != 0) {
    972e:	1e04      	subs	r4, r0, #0
    9730:	bf18      	it	ne
    9732:	2401      	movne	r4, #1
    flash_area_close(fap);
    9734:	9801      	ldr	r0, [sp, #4]
    9736:	f000 ff88 	bl	a64a <flash_area_close>
}
    973a:	4620      	mov	r0, r4
    973c:	b004      	add	sp, #16
    973e:	bd70      	pop	{r4, r5, r6, pc}
        rc = BOOT_EFLASH;
    9740:	2401      	movs	r4, #1
    9742:	e7f7      	b.n	9734 <boot_write_status+0x54>

00009744 <boot_erase_region>:
    return flash_area_erase(fap, off, sz);
    9744:	f000 bfce 	b.w	a6e4 <flash_area_erase>

00009748 <swap_erase_trailer_sectors>:

#if defined(MCUBOOT_SWAP_USING_SCRATCH) || defined(MCUBOOT_SWAP_USING_MOVE)
int
swap_erase_trailer_sectors(const struct boot_loader_state *state,
                           const struct flash_area *fap)
{
    9748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    974c:	460e      	mov	r6, r1
    int rc;

    BOOT_LOG_DBG("erasing trailer; fa_id=%d", fap->fa_id);

    image_index = BOOT_CURR_IMG(state);
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    974e:	2100      	movs	r1, #0
{
    9750:	4607      	mov	r7, r0
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    9752:	4608      	mov	r0, r1
    9754:	f7ff fe5c 	bl	9410 <flash_area_id_from_multi_image_slot>
            BOOT_PRIMARY_SLOT);
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    9758:	2101      	movs	r1, #1
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    975a:	4604      	mov	r4, r0
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    975c:	2000      	movs	r0, #0
    975e:	f7ff fe57 	bl	9410 <flash_area_id_from_multi_image_slot>
            BOOT_SECONDARY_SLOT);

    if (fap->fa_id == fa_id_primary) {
    9762:	7833      	ldrb	r3, [r6, #0]
    9764:	42a3      	cmp	r3, r4
    9766:	d020      	beq.n	97aa <swap_erase_trailer_sectors+0x62>
        slot = BOOT_PRIMARY_SLOT;
    } else if (fap->fa_id == fa_id_secondary) {
    9768:	4283      	cmp	r3, r0
    976a:	d120      	bne.n	97ae <swap_erase_trailer_sectors+0x66>
        slot = BOOT_SECONDARY_SLOT;
    976c:	2401      	movs	r4, #1
    return BOOT_IMG(state, slot).num_sectors;
    976e:	232c      	movs	r3, #44	; 0x2c
    9770:	fb03 7404 	mla	r4, r3, r4, r7
        return BOOT_EFLASH;
    }

    /* delete starting from last sector and moving to beginning */
    sector = boot_img_num_sectors(state, slot) - 1;
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    9774:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    sector = boot_img_num_sectors(state, slot) - 1;
    9776:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    9778:	f7ff feec 	bl	9554 <boot_trailer_sz>
    sector = boot_img_num_sectors(state, slot) - 1;
    977c:	3d01      	subs	r5, #1
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    977e:	4680      	mov	r8, r0
    total_sz = 0;
    9780:	2700      	movs	r7, #0
    return BOOT_IMG(state, slot).sectors[sector].fs_size;
    9782:	6a63      	ldr	r3, [r4, #36]	; 0x24
    9784:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    9788:	f853 1035 	ldr.w	r1, [r3, r5, lsl #3]
    return BOOT_IMG(state, slot).sectors[sector].fs_size;
    978c:	f8d2 9004 	ldr.w	r9, [r2, #4]
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    9790:	681b      	ldr	r3, [r3, #0]
    do {
        sz = boot_img_sector_size(state, slot, sector);
        off = boot_img_sector_off(state, slot, sector);
        rc = boot_erase_region(fap, off, sz);
    9792:	464a      	mov	r2, r9
    9794:	1ac9      	subs	r1, r1, r3
    9796:	4630      	mov	r0, r6
        assert(rc == 0);

        sector--;
        total_sz += sz;
    9798:	444f      	add	r7, r9
        rc = boot_erase_region(fap, off, sz);
    979a:	f7ff ffd3 	bl	9744 <boot_erase_region>
    } while (total_sz < trailer_sz);
    979e:	45b8      	cmp	r8, r7
        sector--;
    97a0:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
    } while (total_sz < trailer_sz);
    97a4:	d8ed      	bhi.n	9782 <swap_erase_trailer_sectors+0x3a>

    return rc;
}
    97a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        slot = BOOT_PRIMARY_SLOT;
    97aa:	2400      	movs	r4, #0
    97ac:	e7df      	b.n	976e <swap_erase_trailer_sectors+0x26>
        return BOOT_EFLASH;
    97ae:	2001      	movs	r0, #1
    97b0:	e7f9      	b.n	97a6 <swap_erase_trailer_sectors+0x5e>

000097b2 <swap_status_init>:

int
swap_status_init(const struct boot_loader_state *state,
                 const struct flash_area *fap,
                 const struct boot_status *bs)
{
    97b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    97b4:	4615      	mov	r5, r2
    97b6:	460c      	mov	r4, r1

    image_index = BOOT_CURR_IMG(state);

    BOOT_LOG_DBG("initializing status; fa_id=%d", fap->fa_id);

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    97b8:	2005      	movs	r0, #5
    97ba:	4669      	mov	r1, sp
    97bc:	f001 fde3 	bl	b386 <boot_read_swap_state_by_id>
            &swap_state);
    assert(rc == 0);

    if (bs->swap_type != BOOT_SWAP_TYPE_NONE) {
    97c0:	79e9      	ldrb	r1, [r5, #7]
    97c2:	2901      	cmp	r1, #1
    97c4:	d003      	beq.n	97ce <swap_status_init+0x1c>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
    97c6:	2200      	movs	r2, #0
    97c8:	4620      	mov	r0, r4
    97ca:	f001 fdf0 	bl	b3ae <boot_write_swap_info>
        assert(rc == 0);
    }

    if (swap_state.image_ok == BOOT_FLAG_SET) {
    97ce:	f89d 3003 	ldrb.w	r3, [sp, #3]
    97d2:	2b01      	cmp	r3, #1
    97d4:	d102      	bne.n	97dc <swap_status_init+0x2a>
        rc = boot_write_image_ok(fap);
    97d6:	4620      	mov	r0, r4
    97d8:	f001 fdcc 	bl	b374 <boot_write_image_ok>
        assert(rc == 0);
    }

    rc = boot_write_swap_size(fap, bs->swap_size);
    97dc:	68a9      	ldr	r1, [r5, #8]
    97de:	4620      	mov	r0, r4
    97e0:	f7ff feda 	bl	9598 <boot_write_swap_size>

    rc = boot_write_enc_key(fap, 1, bs);
    assert(rc == 0);
#endif

    rc = boot_write_magic(fap);
    97e4:	4620      	mov	r0, r4
    97e6:	f7fc f91f 	bl	5a28 <boot_write_magic>
    assert(rc == 0);

    return 0;
}
    97ea:	2000      	movs	r0, #0
    97ec:	b003      	add	sp, #12
    97ee:	bd30      	pop	{r4, r5, pc}

000097f0 <swap_read_status>:

int
swap_read_status(struct boot_loader_state *state, struct boot_status *bs)
{
    97f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    97f2:	460d      	mov	r5, r1
    97f4:	4606      	mov	r6, r0
    uint32_t off;
    uint8_t swap_info;
    int area_id;
    int rc;

    bs->source = swap_status_source(state);
    97f6:	f000 f8f4 	bl	99e2 <swap_status_source>
    97fa:	4604      	mov	r4, r0
    97fc:	60e8      	str	r0, [r5, #12]
    switch (bs->source) {
    97fe:	b130      	cbz	r0, 980e <swap_read_status+0x1e>
    9800:	2802      	cmp	r0, #2
    9802:	d12e      	bne.n	9862 <swap_read_status+0x72>
    default:
        assert(0);
        return BOOT_EBADARGS;
    }

    rc = flash_area_open(area_id, &fap);
    9804:	a901      	add	r1, sp, #4
    9806:	f7f9 f91b 	bl	2a40 <flash_area_open>
    if (rc != 0) {
    980a:	b118      	cbz	r0, 9814 <swap_read_status+0x24>
        return BOOT_EFLASH;
    980c:	2401      	movs	r4, #1
    }

    flash_area_close(fap);

    return rc;
}
    980e:	4620      	mov	r0, r4
    9810:	b002      	add	sp, #8
    9812:	bd70      	pop	{r4, r5, r6, pc}
    rc = swap_read_status_bytes(fap, state, bs);
    9814:	9801      	ldr	r0, [sp, #4]
    9816:	462a      	mov	r2, r5
    9818:	4631      	mov	r1, r6
    981a:	f000 f854 	bl	98c6 <swap_read_status_bytes>
    if (rc == 0) {
    981e:	4604      	mov	r4, r0
    9820:	b9d8      	cbnz	r0, 985a <swap_read_status+0x6a>
        off = boot_swap_info_off(fap);
    9822:	9801      	ldr	r0, [sp, #4]
    9824:	f001 fd3b 	bl	b29e <boot_swap_info_off>
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    9828:	2301      	movs	r3, #1
        off = boot_swap_info_off(fap);
    982a:	4601      	mov	r1, r0
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    982c:	f10d 0203 	add.w	r2, sp, #3
    9830:	9801      	ldr	r0, [sp, #4]
    9832:	f000 ff0b 	bl	a64c <flash_area_read>
        if (rc != 0) {
    9836:	4604      	mov	r4, r0
    9838:	2800      	cmp	r0, #0
    983a:	d1e7      	bne.n	980c <swap_read_status+0x1c>
        if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info)) {
    983c:	9801      	ldr	r0, [sp, #4]
    983e:	2201      	movs	r2, #1
    9840:	f10d 0103 	add.w	r1, sp, #3
    9844:	f001 fd3c 	bl	b2c0 <bootutil_buffer_is_erased>
    9848:	b110      	cbz	r0, 9850 <swap_read_status+0x60>
            BOOT_SET_SWAP_INFO(swap_info, 0, BOOT_SWAP_TYPE_NONE);
    984a:	2301      	movs	r3, #1
    984c:	f88d 3003 	strb.w	r3, [sp, #3]
        bs->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    9850:	f89d 3003 	ldrb.w	r3, [sp, #3]
    9854:	f003 030f 	and.w	r3, r3, #15
    9858:	71eb      	strb	r3, [r5, #7]
    flash_area_close(fap);
    985a:	9801      	ldr	r0, [sp, #4]
    985c:	f000 fef5 	bl	a64a <flash_area_close>
    return rc;
    9860:	e7d5      	b.n	980e <swap_read_status+0x1e>
    switch (bs->source) {
    9862:	2407      	movs	r4, #7
    9864:	e7d3      	b.n	980e <swap_read_status+0x1e>

00009866 <swap_set_copy_done>:

int
swap_set_copy_done(uint8_t image_index)
{
    9866:	b513      	push	{r0, r1, r4, lr}
    const struct flash_area *fap;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    9868:	2002      	movs	r0, #2
    986a:	a901      	add	r1, sp, #4
    986c:	f7f9 f8e8 	bl	2a40 <flash_area_open>
            &fap);
    if (rc != 0) {
    9870:	b948      	cbnz	r0, 9886 <swap_set_copy_done+0x20>
        return BOOT_EFLASH;
    }

    rc = boot_write_copy_done(fap);
    9872:	9801      	ldr	r0, [sp, #4]
    9874:	f7ff fe8b 	bl	958e <boot_write_copy_done>
    9878:	4604      	mov	r4, r0
    flash_area_close(fap);
    987a:	9801      	ldr	r0, [sp, #4]
    987c:	f000 fee5 	bl	a64a <flash_area_close>
    return rc;
}
    9880:	4620      	mov	r0, r4
    9882:	b002      	add	sp, #8
    9884:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    9886:	2401      	movs	r4, #1
    9888:	e7fa      	b.n	9880 <swap_set_copy_done+0x1a>

0000988a <swap_set_image_ok>:

int
swap_set_image_ok(uint8_t image_index)
{
    988a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const struct flash_area *fap;
    struct boot_swap_state state;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    988c:	2002      	movs	r0, #2
    988e:	a901      	add	r1, sp, #4
    9890:	f7f9 f8d6 	bl	2a40 <flash_area_open>
            &fap);
    if (rc != 0) {
    9894:	b9a8      	cbnz	r0, 98c2 <swap_set_image_ok+0x38>
        return BOOT_EFLASH;
    }

    rc = boot_read_swap_state(fap, &state);
    9896:	9801      	ldr	r0, [sp, #4]
    9898:	a902      	add	r1, sp, #8
    989a:	f7fc f8d3 	bl	5a44 <boot_read_swap_state>
    if (rc != 0) {
    989e:	4604      	mov	r4, r0
    98a0:	b968      	cbnz	r0, 98be <swap_set_image_ok+0x34>
        rc = BOOT_EFLASH;
        goto out;
    }

    if (state.image_ok == BOOT_FLAG_UNSET) {
    98a2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    98a6:	2b03      	cmp	r3, #3
    98a8:	d103      	bne.n	98b2 <swap_set_image_ok+0x28>
        rc = boot_write_image_ok(fap);
    98aa:	9801      	ldr	r0, [sp, #4]
    98ac:	f001 fd62 	bl	b374 <boot_write_image_ok>
    98b0:	4604      	mov	r4, r0
    }

out:
    flash_area_close(fap);
    98b2:	9801      	ldr	r0, [sp, #4]
    98b4:	f000 fec9 	bl	a64a <flash_area_close>
    return rc;
}
    98b8:	4620      	mov	r0, r4
    98ba:	b004      	add	sp, #16
    98bc:	bd10      	pop	{r4, pc}
        rc = BOOT_EFLASH;
    98be:	2401      	movs	r4, #1
    98c0:	e7f7      	b.n	98b2 <swap_set_image_ok+0x28>
        return BOOT_EFLASH;
    98c2:	2401      	movs	r4, #1
    98c4:	e7f8      	b.n	98b8 <swap_set_image_ok+0x2e>

000098c6 <swap_read_status_bytes>:
{
    98c6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    98ca:	4607      	mov	r7, r0
    98cc:	460c      	mov	r4, r1
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
    98ce:	4601      	mov	r1, r0
    98d0:	2000      	movs	r0, #0
{
    98d2:	4616      	mov	r6, r2
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
    98d4:	f7ff fe43 	bl	955e <boot_status_entries>
    if (max_entries < 0) {
    98d8:	1e05      	subs	r5, r0, #0
    98da:	db3e      	blt.n	995a <swap_read_status_bytes+0x94>
    off = boot_status_off(fap);
    98dc:	4638      	mov	r0, r7
    write_sz = BOOT_WRITE_SZ(state);
    98de:	6de4      	ldr	r4, [r4, #92]	; 0x5c
    off = boot_status_off(fap);
    98e0:	f7ff fe4a 	bl	9578 <boot_status_off>
    for (i = max_entries; i > 0; i--) {
    98e4:	fa5f f984 	uxtb.w	r9, r4
    98e8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
    98ec:	fb09 0808 	mla	r8, r9, r8, r0
    found_idx = -1;
    98f0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    for (i = max_entries; i > 0; i--) {
    98f4:	b965      	cbnz	r5, 9910 <swap_read_status_bytes+0x4a>
    if (found_idx == -1) {
    98f6:	1c63      	adds	r3, r4, #1
    98f8:	d006      	beq.n	9908 <swap_read_status_bytes+0x42>
    } else if (found_idx < move_entries) {
    98fa:	2c7f      	cmp	r4, #127	; 0x7f
    98fc:	dc22      	bgt.n	9944 <swap_read_status_bytes+0x7e>
        bs->idx = (found_idx  / BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_IDX_0;
    98fe:	3401      	adds	r4, #1
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
    9900:	f240 1301 	movw	r3, #257	; 0x101
        bs->idx = (found_idx  / BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_IDX_0;
    9904:	6034      	str	r4, [r6, #0]
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
    9906:	80b3      	strh	r3, [r6, #4]
}
    9908:	4628      	mov	r0, r5
    990a:	b002      	add	sp, #8
    990c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = flash_area_read(fap, off + (i - 1) * write_sz, &status, 1);
    9910:	2301      	movs	r3, #1
    9912:	f10d 0207 	add.w	r2, sp, #7
    9916:	4641      	mov	r1, r8
    9918:	4638      	mov	r0, r7
    991a:	f000 fe97 	bl	a64c <flash_area_read>
        if (rc < 0) {
    991e:	2800      	cmp	r0, #0
        rc = flash_area_read(fap, off + (i - 1) * write_sz, &status, 1);
    9920:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
        if (rc < 0) {
    9924:	db1b      	blt.n	995e <swap_read_status_bytes+0x98>
        if (bootutil_buffer_is_erased(fap, &status, 1)) {
    9926:	2201      	movs	r2, #1
    9928:	f10d 0107 	add.w	r1, sp, #7
    992c:	4638      	mov	r0, r7
    992e:	f001 fcc7 	bl	b2c0 <bootutil_buffer_is_erased>
    9932:	b918      	cbnz	r0, 993c <swap_read_status_bytes+0x76>
            if (found_idx == -1) {
    9934:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    9938:	bf08      	it	eq
    993a:	462c      	moveq	r4, r5
    993c:	eba8 0809 	sub.w	r8, r8, r9
    9940:	4655      	mov	r5, sl
    9942:	e7d7      	b.n	98f4 <swap_read_status_bytes+0x2e>
        bs->op = BOOT_STATUS_OP_SWAP;
    9944:	2302      	movs	r3, #2
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
    9946:	3c80      	subs	r4, #128	; 0x80
        bs->op = BOOT_STATUS_OP_SWAP;
    9948:	7173      	strb	r3, [r6, #5]
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
    994a:	1063      	asrs	r3, r4, #1
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
    994c:	f004 0401 	and.w	r4, r4, #1
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
    9950:	3301      	adds	r3, #1
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
    9952:	3401      	adds	r4, #1
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
    9954:	6033      	str	r3, [r6, #0]
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
    9956:	7134      	strb	r4, [r6, #4]
    9958:	e7d6      	b.n	9908 <swap_read_status_bytes+0x42>
        return BOOT_EBADARGS;
    995a:	2507      	movs	r5, #7
    995c:	e7d4      	b.n	9908 <swap_read_status_bytes+0x42>
            return BOOT_EFLASH;
    995e:	2501      	movs	r5, #1
    9960:	e7d2      	b.n	9908 <swap_read_status_bytes+0x42>

00009962 <boot_status_internal_off>:
{
    9962:	b530      	push	{r4, r5, lr}
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    9964:	7943      	ldrb	r3, [r0, #5]
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    9966:	6804      	ldr	r4, [r0, #0]
            BOOT_STATUS_MOVE_STATE_COUNT : BOOT_STATUS_SWAP_STATE_COUNT);
    9968:	2b01      	cmp	r3, #1
    996a:	bf08      	it	eq
    996c:	2201      	moveq	r2, #1
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    996e:	7903      	ldrb	r3, [r0, #4]
            BOOT_STATUS_MOVE_STATE_COUNT : BOOT_STATUS_SWAP_STATE_COUNT);
    9970:	bf18      	it	ne
    9972:	2202      	movne	r2, #2
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    9974:	fb01 f202 	mul.w	r2, r1, r2
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    9978:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    997c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    9980:	fb02 f204 	mul.w	r2, r2, r4
               0 : (BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT * elem_sz)) +
    9984:	bf14      	ite	ne
    9986:	01cd      	lslne	r5, r1, #7
    9988:	2500      	moveq	r5, #0
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    998a:	fb01 2103 	mla	r1, r1, r3, r2
}
    998e:	1948      	adds	r0, r1, r5
    9990:	bd30      	pop	{r4, r5, pc}

00009992 <boot_slots_compatible>:
{
    9992:	b530      	push	{r4, r5, lr}
    return BOOT_IMG(state, slot).num_sectors;
    9994:	6a82      	ldr	r2, [r0, #40]	; 0x28
    9996:	6d44      	ldr	r4, [r0, #84]	; 0x54
    if ((num_sectors_pri != num_sectors_sec) &&
    9998:	4294      	cmp	r4, r2
    999a:	d002      	beq.n	99a2 <boot_slots_compatible+0x10>
            (num_sectors_pri != (num_sectors_sec + 1))) {
    999c:	1c63      	adds	r3, r4, #1
    if ((num_sectors_pri != num_sectors_sec) &&
    999e:	4293      	cmp	r3, r2
    99a0:	d11b      	bne.n	99da <boot_slots_compatible+0x48>
    if (num_sectors_pri > BOOT_MAX_IMG_SECTORS) {
    99a2:	2a80      	cmp	r2, #128	; 0x80
    99a4:	d819      	bhi.n	99da <boot_slots_compatible+0x48>
    for (i = 0; i < num_sectors_sec; i++) {
    99a6:	2300      	movs	r3, #0
    size_t sector_sz_pri = 0;
    99a8:	4619      	mov	r1, r3
    for (i = 0; i < num_sectors_sec; i++) {
    99aa:	42a3      	cmp	r3, r4
    99ac:	d109      	bne.n	99c2 <boot_slots_compatible+0x30>
    if (num_sectors_pri > num_sectors_sec) {
    99ae:	4293      	cmp	r3, r2
    99b0:	d215      	bcs.n	99de <boot_slots_compatible+0x4c>
    return BOOT_IMG(state, slot).sectors[sector].fs_size;
    99b2:	6a42      	ldr	r2, [r0, #36]	; 0x24
    99b4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
        if (sector_sz_pri != boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i)) {
    99b8:	6858      	ldr	r0, [r3, #4]
    99ba:	1a43      	subs	r3, r0, r1
    99bc:	4258      	negs	r0, r3
    99be:	4158      	adcs	r0, r3
}
    99c0:	bd30      	pop	{r4, r5, pc}
    99c2:	6a41      	ldr	r1, [r0, #36]	; 0x24
    99c4:	6d05      	ldr	r5, [r0, #80]	; 0x50
    99c6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    99ca:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
    99ce:	6849      	ldr	r1, [r1, #4]
        if (sector_sz_pri != sector_sz_sec) {
    99d0:	686d      	ldr	r5, [r5, #4]
    99d2:	428d      	cmp	r5, r1
    99d4:	d101      	bne.n	99da <boot_slots_compatible+0x48>
    for (i = 0; i < num_sectors_sec; i++) {
    99d6:	3301      	adds	r3, #1
    99d8:	e7e7      	b.n	99aa <boot_slots_compatible+0x18>
        return 0;
    99da:	2000      	movs	r0, #0
    99dc:	e7f0      	b.n	99c0 <boot_slots_compatible+0x2e>
    return 1;
    99de:	2001      	movs	r0, #1
    99e0:	e7ee      	b.n	99c0 <boot_slots_compatible+0x2e>

000099e2 <swap_status_source>:
{
    99e2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    99e4:	2002      	movs	r0, #2
    99e6:	4669      	mov	r1, sp
    99e8:	f001 fccd 	bl	b386 <boot_read_swap_state_by_id>
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    99ec:	a902      	add	r1, sp, #8
    99ee:	2005      	movs	r0, #5
    99f0:	f001 fcc9 	bl	b386 <boot_read_swap_state_by_id>
    if (state_primary_slot.magic == BOOT_MAGIC_GOOD &&
    99f4:	f89d 3000 	ldrb.w	r3, [sp]
    99f8:	2b01      	cmp	r3, #1
    99fa:	d10c      	bne.n	9a16 <swap_status_source+0x34>
    99fc:	f89d 2002 	ldrb.w	r2, [sp, #2]
    BOOT_LOG_SWAP_STATE("Secondary image", &state_secondary_slot);
    9a00:	f89d 3008 	ldrb.w	r3, [sp, #8]
    if (state_primary_slot.magic == BOOT_MAGIC_GOOD &&
    9a04:	2a03      	cmp	r2, #3
    9a06:	d106      	bne.n	9a16 <swap_status_source+0x34>
            state_primary_slot.copy_done == BOOT_FLAG_UNSET &&
    9a08:	2b01      	cmp	r3, #1
        return source;
    9a0a:	bf0c      	ite	eq
    9a0c:	2000      	moveq	r0, #0
    9a0e:	2002      	movne	r0, #2
}
    9a10:	b005      	add	sp, #20
    9a12:	f85d fb04 	ldr.w	pc, [sp], #4
    return BOOT_STATUS_SOURCE_NONE;
    9a16:	2000      	movs	r0, #0
    9a18:	e7fa      	b.n	9a10 <swap_status_source+0x2e>

00009a1a <crc16>:

#include <sys/crc.h>

uint16_t crc16(const uint8_t *src, size_t len, uint16_t polynomial,
	    uint16_t initial_value, bool pad)
{
    9a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t crc = initial_value;
	size_t padding = pad ? sizeof(crc) : 0;
    9a1e:	f89d 4018 	ldrb.w	r4, [sp, #24]
    9a22:	2c00      	cmp	r4, #0
    9a24:	bf14      	ite	ne
    9a26:	2402      	movne	r4, #2
    9a28:	2400      	moveq	r4, #0
	size_t i, b;

	/* src length + padding (if required) */
	for (i = 0; i < len + padding; i++) {
    9a2a:	4605      	mov	r5, r0
    9a2c:	1867      	adds	r7, r4, r1
	uint16_t crc = initial_value;
    9a2e:	4618      	mov	r0, r3

			crc = (crc << 1U);

			/* choose input bytes or implicit trailing zeros */
			if (i < len) {
				crc |= !!(src[i] & (0x80U >> b));
    9a30:	f04f 0c80 	mov.w	ip, #128	; 0x80
	for (i = 0; i < len + padding; i++) {
    9a34:	2300      	movs	r3, #0
    9a36:	429f      	cmp	r7, r3
    9a38:	d81a      	bhi.n	9a70 <crc16+0x56>
			}
		}
	}

	return crc;
}
    9a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9a3e:	4620      	mov	r0, r4
			crc = (crc << 1U);
    9a40:	0044      	lsls	r4, r0, #1
			if (i < len) {
    9a42:	428b      	cmp	r3, r1
			crc = (crc << 1U);
    9a44:	b2a4      	uxth	r4, r4
			if (i < len) {
    9a46:	d208      	bcs.n	9a5a <crc16+0x40>
				crc |= !!(src[i] & (0x80U >> b));
    9a48:	f895 8000 	ldrb.w	r8, [r5]
    9a4c:	fa2c fe06 	lsr.w	lr, ip, r6
    9a50:	ea18 0f0e 	tst.w	r8, lr
    9a54:	bf18      	it	ne
    9a56:	f044 0401 	orrne.w	r4, r4, #1
			if (divide != 0U) {
    9a5a:	0400      	lsls	r0, r0, #16
		for (b = 0; b < 8; b++) {
    9a5c:	f106 0601 	add.w	r6, r6, #1
				crc = crc ^ polynomial;
    9a60:	bf48      	it	mi
    9a62:	4054      	eormi	r4, r2
		for (b = 0; b < 8; b++) {
    9a64:	2e08      	cmp	r6, #8
    9a66:	d1ea      	bne.n	9a3e <crc16+0x24>
	for (i = 0; i < len + padding; i++) {
    9a68:	3301      	adds	r3, #1
    9a6a:	3501      	adds	r5, #1
    9a6c:	4620      	mov	r0, r4
    9a6e:	e7e2      	b.n	9a36 <crc16+0x1c>
		for (b = 0; b < 8; b++) {
    9a70:	2600      	movs	r6, #0
    9a72:	e7e5      	b.n	9a40 <crc16+0x26>

00009a74 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    9a74:	4603      	mov	r3, r0
    9a76:	b158      	cbz	r0, 9a90 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    9a78:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    9a7a:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    9a7e:	2a01      	cmp	r2, #1
    9a80:	d003      	beq.n	9a8a <sys_notify_validate+0x16>
    9a82:	2a03      	cmp	r2, #3
    9a84:	d104      	bne.n	9a90 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    9a86:	6802      	ldr	r2, [r0, #0]
    9a88:	b112      	cbz	r2, 9a90 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    9a8a:	2000      	movs	r0, #0
    9a8c:	6098      	str	r0, [r3, #8]
    9a8e:	4770      	bx	lr
		return -EINVAL;
    9a90:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    9a94:	4770      	bx	lr

00009a96 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    9a96:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    9a98:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    9a9a:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    9a9e:	2a03      	cmp	r2, #3
    9aa0:	f04f 0200 	mov.w	r2, #0
{
    9aa4:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    9aa6:	bf0c      	ite	eq
    9aa8:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    9aaa:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    9aac:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    9aae:	4770      	bx	lr

00009ab0 <arch_printk_char_out>:
}
    9ab0:	2000      	movs	r0, #0
    9ab2:	4770      	bx	lr

00009ab4 <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
    9ab4:	b40f      	push	{r0, r1, r2, r3}
    9ab6:	b507      	push	{r0, r1, r2, lr}
    9ab8:	a904      	add	r1, sp, #16
    9aba:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    9abe:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    9ac0:	f7f7 fc1c 	bl	12fc <vprintk>
	}
	va_end(ap);
}
    9ac4:	b003      	add	sp, #12
    9ac6:	f85d eb04 	ldr.w	lr, [sp], #4
    9aca:	b004      	add	sp, #16
    9acc:	4770      	bx	lr

00009ace <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9ace:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    9ad0:	f013 0307 	ands.w	r3, r3, #7
    9ad4:	d105      	bne.n	9ae2 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    9ad6:	6803      	ldr	r3, [r0, #0]
    9ad8:	2b00      	cmp	r3, #0
		evt = EVT_START;
    9ada:	bf0c      	ite	eq
    9adc:	2000      	moveq	r0, #0
    9ade:	2003      	movne	r0, #3
    9ae0:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    9ae2:	2b02      	cmp	r3, #2
    9ae4:	d105      	bne.n	9af2 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    9ae6:	8b43      	ldrh	r3, [r0, #26]
    9ae8:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    9aea:	bf14      	ite	ne
    9aec:	2000      	movne	r0, #0
    9aee:	2004      	moveq	r0, #4
    9af0:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    9af2:	2b01      	cmp	r3, #1
    9af4:	d105      	bne.n	9b02 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    9af6:	6803      	ldr	r3, [r0, #0]
    9af8:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    9afa:	bf0c      	ite	eq
    9afc:	2000      	moveq	r0, #0
    9afe:	2005      	movne	r0, #5
    9b00:	4770      	bx	lr
	int evt = EVT_NOP;
    9b02:	2000      	movs	r0, #0
}
    9b04:	4770      	bx	lr

00009b06 <notify_one>:
{
    9b06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9b0a:	460d      	mov	r5, r1
    9b0c:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    9b0e:	4619      	mov	r1, r3
    9b10:	1d28      	adds	r0, r5, #4
{
    9b12:	4690      	mov	r8, r2
    9b14:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    9b16:	f7ff ffbe 	bl	9a96 <sys_notify_finalize>
	if (cb) {
    9b1a:	4604      	mov	r4, r0
    9b1c:	b138      	cbz	r0, 9b2e <notify_one+0x28>
		cb(mgr, cli, state, res);
    9b1e:	4633      	mov	r3, r6
    9b20:	4642      	mov	r2, r8
    9b22:	4629      	mov	r1, r5
    9b24:	4638      	mov	r0, r7
    9b26:	46a4      	mov	ip, r4
}
    9b28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    9b2c:	4760      	bx	ip
}
    9b2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009b32 <transition_complete>:
{
    9b32:	b410      	push	{r4}
	__asm__ volatile(
    9b34:	f04f 0420 	mov.w	r4, #32
    9b38:	f3ef 8211 	mrs	r2, BASEPRI
    9b3c:	f384 8811 	msr	BASEPRI, r4
    9b40:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    9b44:	6141      	str	r1, [r0, #20]
}
    9b46:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    9b48:	2101      	movs	r1, #1
    9b4a:	f7f7 bbe5 	b.w	1318 <process_event>

00009b4e <validate_args>:
{
    9b4e:	b510      	push	{r4, lr}
    9b50:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    9b52:	b140      	cbz	r0, 9b66 <validate_args+0x18>
    9b54:	b139      	cbz	r1, 9b66 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    9b56:	1d08      	adds	r0, r1, #4
    9b58:	f7ff ff8c 	bl	9a74 <sys_notify_validate>
	if ((rv == 0)
    9b5c:	b928      	cbnz	r0, 9b6a <validate_args+0x1c>
	    && ((cli->notify.flags
    9b5e:	68a3      	ldr	r3, [r4, #8]
    9b60:	f033 0303 	bics.w	r3, r3, #3
    9b64:	d001      	beq.n	9b6a <validate_args+0x1c>
		rv = -EINVAL;
    9b66:	f06f 0015 	mvn.w	r0, #21
}
    9b6a:	bd10      	pop	{r4, pc}

00009b6c <onoff_manager_init>:
{
    9b6c:	b538      	push	{r3, r4, r5, lr}
    9b6e:	460c      	mov	r4, r1
	if ((mgr == NULL)
    9b70:	4605      	mov	r5, r0
    9b72:	b158      	cbz	r0, 9b8c <onoff_manager_init+0x20>
	    || (transitions == NULL)
    9b74:	b151      	cbz	r1, 9b8c <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    9b76:	680b      	ldr	r3, [r1, #0]
    9b78:	b143      	cbz	r3, 9b8c <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    9b7a:	684b      	ldr	r3, [r1, #4]
    9b7c:	b133      	cbz	r3, 9b8c <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    9b7e:	221c      	movs	r2, #28
    9b80:	2100      	movs	r1, #0
    9b82:	f001 f886 	bl	ac92 <memset>
    9b86:	612c      	str	r4, [r5, #16]
	return 0;
    9b88:	2000      	movs	r0, #0
}
    9b8a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    9b8c:	f06f 0015 	mvn.w	r0, #21
    9b90:	e7fb      	b.n	9b8a <onoff_manager_init+0x1e>

00009b92 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    9b92:	b570      	push	{r4, r5, r6, lr}
    9b94:	4604      	mov	r4, r0
    9b96:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    9b98:	f7ff ffd9 	bl	9b4e <validate_args>

	if (rv < 0) {
    9b9c:	1e05      	subs	r5, r0, #0
    9b9e:	db31      	blt.n	9c04 <onoff_request+0x72>
    9ba0:	f04f 0320 	mov.w	r3, #32
    9ba4:	f3ef 8111 	mrs	r1, BASEPRI
    9ba8:	f383 8811 	msr	BASEPRI, r3
    9bac:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    9bb0:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9bb2:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    9bb4:	f64f 75ff 	movw	r5, #65535	; 0xffff
    9bb8:	42ab      	cmp	r3, r5
    9bba:	f000 0207 	and.w	r2, r0, #7
    9bbe:	d02e      	beq.n	9c1e <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    9bc0:	2a02      	cmp	r2, #2
    9bc2:	d10e      	bne.n	9be2 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    9bc4:	3301      	adds	r3, #1
    9bc6:	8363      	strh	r3, [r4, #26]
	rv = state;
    9bc8:	4615      	mov	r5, r2
		notify = true;
    9bca:	2301      	movs	r3, #1
	__asm__ volatile(
    9bcc:	f381 8811 	msr	BASEPRI, r1
    9bd0:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    9bd4:	b1b3      	cbz	r3, 9c04 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    9bd6:	2300      	movs	r3, #0
    9bd8:	4631      	mov	r1, r6
    9bda:	4620      	mov	r0, r4
    9bdc:	f7ff ff93 	bl	9b06 <notify_one>
    9be0:	e010      	b.n	9c04 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    9be2:	0783      	lsls	r3, r0, #30
    9be4:	d001      	beq.n	9bea <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    9be6:	2a06      	cmp	r2, #6
    9be8:	d10e      	bne.n	9c08 <onoff_request+0x76>
	parent->next = child;
    9bea:	2300      	movs	r3, #0
    9bec:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
    9bee:	6863      	ldr	r3, [r4, #4]
    9bf0:	b993      	cbnz	r3, 9c18 <onoff_request+0x86>
	list->head = node;
    9bf2:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    9bf6:	4615      	mov	r5, r2
    9bf8:	b962      	cbnz	r2, 9c14 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    9bfa:	460a      	mov	r2, r1
    9bfc:	4620      	mov	r0, r4
    9bfe:	2102      	movs	r1, #2
    9c00:	f7f7 fb8a 	bl	1318 <process_event>
		}
	}

	return rv;
}
    9c04:	4628      	mov	r0, r5
    9c06:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    9c08:	2a05      	cmp	r2, #5
    9c0a:	bf0c      	ite	eq
    9c0c:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    9c10:	f06f 0504 	mvnne.w	r5, #4
    9c14:	2300      	movs	r3, #0
    9c16:	e7d9      	b.n	9bcc <onoff_request+0x3a>
	parent->next = child;
    9c18:	601e      	str	r6, [r3, #0]
	list->tail = node;
    9c1a:	6066      	str	r6, [r4, #4]
}
    9c1c:	e7eb      	b.n	9bf6 <onoff_request+0x64>
		rv = -EAGAIN;
    9c1e:	f06f 050a 	mvn.w	r5, #10
    9c22:	e7f7      	b.n	9c14 <onoff_request+0x82>

00009c24 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    9c24:	b510      	push	{r4, lr}
	__asm__ volatile(
    9c26:	f04f 0320 	mov.w	r3, #32
    9c2a:	f3ef 8211 	mrs	r2, BASEPRI
    9c2e:	f383 8811 	msr	BASEPRI, r3
    9c32:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9c36:	8b04      	ldrh	r4, [r0, #24]
    9c38:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    9c3c:	2c02      	cmp	r4, #2
    9c3e:	d00a      	beq.n	9c56 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
    9c40:	2c01      	cmp	r4, #1
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    9c42:	bf0c      	ite	eq
    9c44:	f06f 0004 	mvneq.w	r0, #4
    9c48:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
    9c4c:	f382 8811 	msr	BASEPRI, r2
    9c50:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
    9c54:	e008      	b.n	9c68 <onoff_release+0x44>
	mgr->refs -= 1U;
    9c56:	8b43      	ldrh	r3, [r0, #26]
    9c58:	3b01      	subs	r3, #1
    9c5a:	b29b      	uxth	r3, r3
    9c5c:	8343      	strh	r3, [r0, #26]
	if (stop) {
    9c5e:	b923      	cbnz	r3, 9c6a <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
    9c60:	4621      	mov	r1, r4
    9c62:	f7f7 fb59 	bl	1318 <process_event>
	int rv = state;
    9c66:	4620      	mov	r0, r4
}
    9c68:	bd10      	pop	{r4, pc}
	int rv = state;
    9c6a:	4620      	mov	r0, r4
    9c6c:	e7ee      	b.n	9c4c <onoff_release+0x28>

00009c6e <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
    9c6e:	b530      	push	{r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
    9c70:	b350      	cbz	r0, 9cc8 <onoff_cancel+0x5a>
    9c72:	b349      	cbz	r1, 9cc8 <onoff_cancel+0x5a>
	__asm__ volatile(
    9c74:	f04f 0320 	mov.w	r3, #32
    9c78:	f3ef 8511 	mrs	r5, BASEPRI
    9c7c:	f383 8811 	msr	BASEPRI, r3
    9c80:	f3bf 8f6f 	isb	sy
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9c84:	6803      	ldr	r3, [r0, #0]
    9c86:	2200      	movs	r2, #0
    9c88:	b913      	cbnz	r3, 9c90 <onoff_cancel+0x22>
		return -EINVAL;
	}

	int rv = -EALREADY;
    9c8a:	f06f 0077 	mvn.w	r0, #119	; 0x77
    9c8e:	e00d      	b.n	9cac <onoff_cancel+0x3e>
    9c90:	4299      	cmp	r1, r3
    9c92:	d116      	bne.n	9cc2 <onoff_cancel+0x54>
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9c94:	8b03      	ldrh	r3, [r0, #24]
Z_GENLIST_REMOVE(slist, snode)
    9c96:	680c      	ldr	r4, [r1, #0]
    9c98:	b96a      	cbnz	r2, 9cb6 <onoff_cancel+0x48>
    9c9a:	6842      	ldr	r2, [r0, #4]
	list->head = node;
    9c9c:	6004      	str	r4, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
    9c9e:	4291      	cmp	r1, r2
    9ca0:	d100      	bne.n	9ca4 <onoff_cancel+0x36>
	list->tail = node;
    9ca2:	6044      	str	r4, [r0, #4]
	parent->next = child;
    9ca4:	2200      	movs	r2, #0
    9ca6:	600a      	str	r2, [r1, #0]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
    9ca8:	f003 0007 	and.w	r0, r3, #7
	__asm__ volatile(
    9cac:	f385 8811 	msr	BASEPRI, r5
    9cb0:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
    9cb4:	bd30      	pop	{r4, r5, pc}
    9cb6:	6014      	str	r4, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    9cb8:	6844      	ldr	r4, [r0, #4]
    9cba:	42a1      	cmp	r1, r4
	list->tail = node;
    9cbc:	bf08      	it	eq
    9cbe:	6042      	streq	r2, [r0, #4]
}
    9cc0:	e7f0      	b.n	9ca4 <onoff_cancel+0x36>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    9cc2:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9cc4:	681b      	ldr	r3, [r3, #0]
    9cc6:	e7df      	b.n	9c88 <onoff_cancel+0x1a>
		return -EINVAL;
    9cc8:	f06f 0015 	mvn.w	r0, #21
    9ccc:	e7f2      	b.n	9cb4 <onoff_cancel+0x46>

00009cce <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    9cce:	4604      	mov	r4, r0
    9cd0:	b508      	push	{r3, lr}
    9cd2:	4608      	mov	r0, r1
    9cd4:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    9cd6:	461a      	mov	r2, r3
    9cd8:	47a0      	blx	r4
	return z_impl_k_current_get();
    9cda:	f7fe ff95 	bl	8c08 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    9cde:	f7fb f859 	bl	4d94 <z_impl_k_thread_abort>

00009ce2 <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    9ce2:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    9ce4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    9ce8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
    9cec:	bf2c      	ite	cs
    9cee:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
    9cf2:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
    9cf6:	4770      	bx	lr

00009cf8 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    9cf8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
    9cfc:	6880      	ldr	r0, [r0, #8]
    9cfe:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
    9d02:	bf2c      	ite	cs
    9d04:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
    9d08:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
    9d0c:	4770      	bx	lr

00009d0e <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
    9d0e:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    9d10:	2201      	movs	r2, #1
    9d12:	f7ff ffe6 	bl	9ce2 <chunk_field>
}
    9d16:	0840      	lsrs	r0, r0, #1
    9d18:	bd08      	pop	{r3, pc}

00009d1a <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    9d1a:	6883      	ldr	r3, [r0, #8]
    9d1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
    9d20:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    9d24:	d308      	bcc.n	9d38 <set_chunk_used+0x1e>
		if (used) {
    9d26:	684b      	ldr	r3, [r1, #4]
    9d28:	b11a      	cbz	r2, 9d32 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    9d2a:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
    9d2e:	604b      	str	r3, [r1, #4]
    9d30:	4770      	bx	lr
    9d32:	f023 0301 	bic.w	r3, r3, #1
    9d36:	e7fa      	b.n	9d2e <set_chunk_used+0x14>
		}
	} else {
		if (used) {
    9d38:	884b      	ldrh	r3, [r1, #2]
    9d3a:	b11a      	cbz	r2, 9d44 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    9d3c:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    9d40:	804b      	strh	r3, [r1, #2]
		}
	}
}
    9d42:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    9d44:	f023 0301 	bic.w	r3, r3, #1
    9d48:	e7fa      	b.n	9d40 <set_chunk_used+0x26>

00009d4a <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    9d4a:	0053      	lsls	r3, r2, #1
    9d4c:	2201      	movs	r2, #1
    9d4e:	f7ff bfd3 	b.w	9cf8 <chunk_set>

00009d52 <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    9d52:	6880      	ldr	r0, [r0, #8]
	return chunksz * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    9d54:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    9d56:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    9d5a:	bf2c      	ite	cs
    9d5c:	2002      	movcs	r0, #2
    9d5e:	2001      	movcc	r0, #1
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    9d60:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
    9d62:	fab0 f080 	clz	r0, r0
}
    9d66:	f1c0 001f 	rsb	r0, r0, #31
    9d6a:	4770      	bx	lr

00009d6c <merge_chunks>:
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
    9d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9d70:	4616      	mov	r6, r2
    9d72:	4604      	mov	r4, r0
    9d74:	460f      	mov	r7, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    9d76:	f7ff ffca 	bl	9d0e <chunk_size>
    9d7a:	4631      	mov	r1, r6
    9d7c:	4605      	mov	r5, r0
    9d7e:	4620      	mov	r0, r4
    9d80:	f7ff ffc5 	bl	9d0e <chunk_size>
    9d84:	4405      	add	r5, r0

	set_chunk_size(h, lc, newsz);
    9d86:	462a      	mov	r2, r5
    9d88:	4639      	mov	r1, r7
    9d8a:	4620      	mov	r0, r4
    9d8c:	f7ff ffdd 	bl	9d4a <set_chunk_size>
	return c + chunk_size(h, c);
    9d90:	4631      	mov	r1, r6
    9d92:	4620      	mov	r0, r4
    9d94:	f7ff ffbb 	bl	9d0e <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    9d98:	462b      	mov	r3, r5
    9d9a:	1831      	adds	r1, r6, r0
    9d9c:	2200      	movs	r2, #0
    9d9e:	4620      	mov	r0, r4
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
    9da0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    9da4:	f7ff bfa8 	b.w	9cf8 <chunk_set>

00009da8 <split_chunks>:
{
    9da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9dac:	4614      	mov	r4, r2
    9dae:	4605      	mov	r5, r0
    9db0:	460e      	mov	r6, r1
	chunksz_t sz0 = chunk_size(h, lc);
    9db2:	f7ff ffac 	bl	9d0e <chunk_size>
	chunksz_t lsz = rc - lc;
    9db6:	eba4 0806 	sub.w	r8, r4, r6
	chunksz_t rsz = sz0 - lsz;
    9dba:	1b37      	subs	r7, r6, r4
    9dbc:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
    9dbe:	4642      	mov	r2, r8
    9dc0:	4631      	mov	r1, r6
    9dc2:	4628      	mov	r0, r5
    9dc4:	f7ff ffc1 	bl	9d4a <set_chunk_size>
	set_chunk_size(h, rc, rsz);
    9dc8:	463a      	mov	r2, r7
    9dca:	4621      	mov	r1, r4
    9dcc:	4628      	mov	r0, r5
    9dce:	f7ff ffbc 	bl	9d4a <set_chunk_size>
    9dd2:	4643      	mov	r3, r8
    9dd4:	2200      	movs	r2, #0
    9dd6:	4621      	mov	r1, r4
    9dd8:	4628      	mov	r0, r5
    9dda:	f7ff ff8d 	bl	9cf8 <chunk_set>
	return c + chunk_size(h, c);
    9dde:	4621      	mov	r1, r4
    9de0:	4628      	mov	r0, r5
    9de2:	f7ff ff94 	bl	9d0e <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    9de6:	463b      	mov	r3, r7
    9de8:	1821      	adds	r1, r4, r0
    9dea:	2200      	movs	r2, #0
    9dec:	4628      	mov	r0, r5
}
    9dee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    9df2:	f7ff bf81 	b.w	9cf8 <chunk_set>

00009df6 <free_list_remove_bidx>:
{
    9df6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9dfa:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
    9dfc:	2203      	movs	r2, #3
    9dfe:	460e      	mov	r6, r1
    9e00:	4604      	mov	r4, r0
    9e02:	f7ff ff6e 	bl	9ce2 <chunk_field>
	if (next_free_chunk(h, c) == c) {
    9e06:	4286      	cmp	r6, r0
    9e08:	4605      	mov	r5, r0
    9e0a:	f107 0804 	add.w	r8, r7, #4
    9e0e:	d10b      	bne.n	9e28 <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
    9e10:	2301      	movs	r3, #1
    9e12:	fa03 f707 	lsl.w	r7, r3, r7
    9e16:	68e3      	ldr	r3, [r4, #12]
    9e18:	ea23 0307 	bic.w	r3, r3, r7
    9e1c:	60e3      	str	r3, [r4, #12]
		b->next = 0;
    9e1e:	2300      	movs	r3, #0
    9e20:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
    9e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
    9e28:	4631      	mov	r1, r6
    9e2a:	2202      	movs	r2, #2
    9e2c:	4620      	mov	r0, r4
    9e2e:	f7ff ff58 	bl	9ce2 <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
    9e32:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
    9e34:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
    9e36:	4601      	mov	r1, r0
		b->next = second;
    9e38:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
    9e3c:	4620      	mov	r0, r4
    9e3e:	2203      	movs	r2, #3
    9e40:	f7ff ff5a 	bl	9cf8 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
    9e44:	4633      	mov	r3, r6
    9e46:	4629      	mov	r1, r5
    9e48:	4620      	mov	r0, r4
    9e4a:	2202      	movs	r2, #2
}
    9e4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    9e50:	f7ff bf52 	b.w	9cf8 <chunk_set>

00009e54 <free_list_remove>:
{
    9e54:	b538      	push	{r3, r4, r5, lr}
    9e56:	4604      	mov	r4, r0
    9e58:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
    9e5a:	f7ff ff58 	bl	9d0e <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
    9e5e:	68a3      	ldr	r3, [r4, #8]
    9e60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    9e64:	4601      	mov	r1, r0
    9e66:	d301      	bcc.n	9e6c <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
    9e68:	2801      	cmp	r0, #1
    9e6a:	d009      	beq.n	9e80 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
    9e6c:	4620      	mov	r0, r4
    9e6e:	f7ff ff70 	bl	9d52 <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
    9e72:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
    9e74:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
    9e76:	4620      	mov	r0, r4
}
    9e78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
    9e7c:	f7ff bfbb 	b.w	9df6 <free_list_remove_bidx>
}
    9e80:	bd38      	pop	{r3, r4, r5, pc}

00009e82 <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
    9e82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9e86:	4605      	mov	r5, r0
    9e88:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
    9e8a:	f7ff ff62 	bl	9d52 <bucket_idx>
    9e8e:	eb05 0a80 	add.w	sl, r5, r0, lsl #2
    9e92:	4606      	mov	r6, r0
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
    9e94:	f8da 9010 	ldr.w	r9, [sl, #16]
    9e98:	f1b9 0f00 	cmp.w	r9, #0
    9e9c:	d01b      	beq.n	9ed6 <alloc_chunk+0x54>
    9e9e:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
    9ea0:	f8da 4010 	ldr.w	r4, [sl, #16]
			if (chunk_size(h, c) >= sz) {
    9ea4:	4628      	mov	r0, r5
    9ea6:	4621      	mov	r1, r4
    9ea8:	f7ff ff31 	bl	9d0e <chunk_size>
    9eac:	4540      	cmp	r0, r8
    9eae:	d307      	bcc.n	9ec0 <alloc_chunk+0x3e>
				free_list_remove_bidx(h, c, bi);
    9eb0:	4632      	mov	r2, r6

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
    9eb2:	4621      	mov	r1, r4
    9eb4:	4628      	mov	r0, r5
    9eb6:	f7ff ff9e 	bl	9df6 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
    9eba:	4620      	mov	r0, r4
    9ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return chunk_field(h, c, FREE_NEXT);
    9ec0:	2203      	movs	r2, #3
    9ec2:	4621      	mov	r1, r4
    9ec4:	4628      	mov	r0, r5
    9ec6:	f7ff ff0c 	bl	9ce2 <chunk_field>
		} while (--i && b->next != first);
    9eca:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
    9ecc:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
    9ed0:	d001      	beq.n	9ed6 <alloc_chunk+0x54>
    9ed2:	4581      	cmp	r9, r0
    9ed4:	d1e4      	bne.n	9ea0 <alloc_chunk+0x1e>
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
    9ed6:	68e9      	ldr	r1, [r5, #12]
    9ed8:	3601      	adds	r6, #1
    9eda:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    9ede:	40b4      	lsls	r4, r6
	if (bmask != 0U) {
    9ee0:	400c      	ands	r4, r1
    9ee2:	d0ea      	beq.n	9eba <alloc_chunk+0x38>
		int minbucket = __builtin_ctz(bmask);
    9ee4:	fa94 f2a4 	rbit	r2, r4
    9ee8:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    9eec:	1d13      	adds	r3, r2, #4
    9eee:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
    9ef2:	e7de      	b.n	9eb2 <alloc_chunk+0x30>

00009ef4 <free_list_add>:
{
    9ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9ef8:	4604      	mov	r4, r0
    9efa:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
    9efc:	f7ff ff07 	bl	9d0e <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
    9f00:	68a3      	ldr	r3, [r4, #8]
    9f02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    9f06:	4601      	mov	r1, r0
    9f08:	d301      	bcc.n	9f0e <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
    9f0a:	2801      	cmp	r0, #1
    9f0c:	d035      	beq.n	9f7a <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
    9f0e:	4620      	mov	r0, r4
    9f10:	f7ff ff1f 	bl	9d52 <bucket_idx>
	if (b->next == 0U) {
    9f14:	eb04 0280 	add.w	r2, r4, r0, lsl #2
    9f18:	6916      	ldr	r6, [r2, #16]
    9f1a:	b99e      	cbnz	r6, 9f44 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
    9f1c:	2301      	movs	r3, #1
    9f1e:	fa03 f000 	lsl.w	r0, r3, r0
    9f22:	68e3      	ldr	r3, [r4, #12]
    9f24:	4303      	orrs	r3, r0
    9f26:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
    9f28:	4629      	mov	r1, r5
		b->next = c;
    9f2a:	6115      	str	r5, [r2, #16]
    9f2c:	462b      	mov	r3, r5
    9f2e:	2202      	movs	r2, #2
    9f30:	4620      	mov	r0, r4
    9f32:	f7ff fee1 	bl	9cf8 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    9f36:	2203      	movs	r2, #3
    9f38:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
    9f3a:	4620      	mov	r0, r4
}
    9f3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    9f40:	f7ff beda 	b.w	9cf8 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
    9f44:	2202      	movs	r2, #2
    9f46:	4631      	mov	r1, r6
    9f48:	4620      	mov	r0, r4
    9f4a:	f7ff feca 	bl	9ce2 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
    9f4e:	2202      	movs	r2, #2
    9f50:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
    9f52:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
    9f54:	4629      	mov	r1, r5
    9f56:	4620      	mov	r0, r4
    9f58:	f7ff fece 	bl	9cf8 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    9f5c:	4633      	mov	r3, r6
    9f5e:	2203      	movs	r2, #3
    9f60:	4629      	mov	r1, r5
    9f62:	4620      	mov	r0, r4
    9f64:	f7ff fec8 	bl	9cf8 <chunk_set>
    9f68:	2203      	movs	r2, #3
    9f6a:	4639      	mov	r1, r7
    9f6c:	462b      	mov	r3, r5
    9f6e:	4620      	mov	r0, r4
    9f70:	f7ff fec2 	bl	9cf8 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
    9f74:	2202      	movs	r2, #2
    9f76:	4631      	mov	r1, r6
    9f78:	e7df      	b.n	9f3a <free_list_add+0x46>
    9f7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009f7e <free_chunk>:
{
    9f7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9f80:	460c      	mov	r4, r1
    9f82:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
    9f84:	f7ff fec3 	bl	9d0e <chunk_size>
    9f88:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    9f8a:	2201      	movs	r2, #1
    9f8c:	4631      	mov	r1, r6
    9f8e:	4628      	mov	r0, r5
    9f90:	f7ff fea7 	bl	9ce2 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
    9f94:	07c3      	lsls	r3, r0, #31
    9f96:	d40c      	bmi.n	9fb2 <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
    9f98:	4631      	mov	r1, r6
    9f9a:	4628      	mov	r0, r5
    9f9c:	f7ff ff5a 	bl	9e54 <free_list_remove>
	return c + chunk_size(h, c);
    9fa0:	4621      	mov	r1, r4
    9fa2:	4628      	mov	r0, r5
    9fa4:	f7ff feb3 	bl	9d0e <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
    9fa8:	4621      	mov	r1, r4
    9faa:	1822      	adds	r2, r4, r0
    9fac:	4628      	mov	r0, r5
    9fae:	f7ff fedd 	bl	9d6c <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
    9fb2:	2200      	movs	r2, #0
    9fb4:	4621      	mov	r1, r4
    9fb6:	4628      	mov	r0, r5
    9fb8:	f7ff fe93 	bl	9ce2 <chunk_field>
    9fbc:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    9fbe:	2201      	movs	r2, #1
    9fc0:	4639      	mov	r1, r7
    9fc2:	4628      	mov	r0, r5
    9fc4:	f7ff fe8d 	bl	9ce2 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
    9fc8:	f010 0601 	ands.w	r6, r0, #1
    9fcc:	d113      	bne.n	9ff6 <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
    9fce:	4639      	mov	r1, r7
    9fd0:	4628      	mov	r0, r5
    9fd2:	f7ff ff3f 	bl	9e54 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
    9fd6:	4621      	mov	r1, r4
    9fd8:	4632      	mov	r2, r6
    9fda:	4628      	mov	r0, r5
    9fdc:	f7ff fe81 	bl	9ce2 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
    9fe0:	4622      	mov	r2, r4
    9fe2:	1a21      	subs	r1, r4, r0
    9fe4:	4628      	mov	r0, r5
    9fe6:	f7ff fec1 	bl	9d6c <merge_chunks>
    9fea:	4621      	mov	r1, r4
    9fec:	4632      	mov	r2, r6
    9fee:	4628      	mov	r0, r5
    9ff0:	f7ff fe77 	bl	9ce2 <chunk_field>
    9ff4:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
    9ff6:	4621      	mov	r1, r4
    9ff8:	4628      	mov	r0, r5
}
    9ffa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
    9ffe:	f7ff bf79 	b.w	9ef4 <free_list_add>

0000a002 <sys_heap_free>:
{
    a002:	b510      	push	{r4, lr}
	if (mem == NULL) {
    a004:	b191      	cbz	r1, a02c <sys_heap_free+0x2a>
	struct z_heap *h = heap->heap;
    a006:	6800      	ldr	r0, [r0, #0]
	return big_heap(h) ? 8 : 4;
    a008:	6883      	ldr	r3, [r0, #8]
    a00a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    a00e:	bf2c      	ite	cs
    a010:	2408      	movcs	r4, #8
    a012:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    a014:	1b0c      	subs	r4, r1, r4
    a016:	1a24      	subs	r4, r4, r0
    a018:	08e4      	lsrs	r4, r4, #3
	set_chunk_used(h, c, false);
    a01a:	4621      	mov	r1, r4
    a01c:	2200      	movs	r2, #0
    a01e:	f7ff fe7c 	bl	9d1a <set_chunk_used>
	free_chunk(h, c);
    a022:	4621      	mov	r1, r4
}
    a024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	free_chunk(h, c);
    a028:	f7ff bfa9 	b.w	9f7e <free_chunk>
}
    a02c:	bd10      	pop	{r4, pc}

0000a02e <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
    a02e:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
    a030:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
    a032:	b909      	cbnz	r1, a038 <sys_heap_alloc+0xa>
		return NULL;
    a034:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
    a036:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
    a038:	68ab      	ldr	r3, [r5, #8]
    a03a:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    a03e:	d9f9      	bls.n	a034 <sys_heap_alloc+0x6>
    a040:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    a044:	bf2c      	ite	cs
    a046:	2208      	movcs	r2, #8
    a048:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    a04a:	1dcc      	adds	r4, r1, #7
    a04c:	4414      	add	r4, r2
    a04e:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
    a050:	4621      	mov	r1, r4
    a052:	4628      	mov	r0, r5
    a054:	f7ff ff15 	bl	9e82 <alloc_chunk>
	if (c == 0U) {
    a058:	4606      	mov	r6, r0
    a05a:	2800      	cmp	r0, #0
    a05c:	d0ea      	beq.n	a034 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
    a05e:	4601      	mov	r1, r0
    a060:	4628      	mov	r0, r5
    a062:	f7ff fe54 	bl	9d0e <chunk_size>
    a066:	42a0      	cmp	r0, r4
    a068:	d909      	bls.n	a07e <sys_heap_alloc+0x50>
		split_chunks(h, c, c + chunk_sz);
    a06a:	4434      	add	r4, r6
    a06c:	4631      	mov	r1, r6
    a06e:	4628      	mov	r0, r5
    a070:	4622      	mov	r2, r4
    a072:	f7ff fe99 	bl	9da8 <split_chunks>
		free_list_add(h, c + chunk_sz);
    a076:	4621      	mov	r1, r4
    a078:	4628      	mov	r0, r5
    a07a:	f7ff ff3b 	bl	9ef4 <free_list_add>
	set_chunk_used(h, c, true);
    a07e:	4628      	mov	r0, r5
    a080:	2201      	movs	r2, #1
    a082:	4631      	mov	r1, r6
    a084:	f7ff fe49 	bl	9d1a <set_chunk_used>
	return big_heap(h) ? 8 : 4;
    a088:	68ab      	ldr	r3, [r5, #8]
    a08a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    a08e:	bf2c      	ite	cs
    a090:	2008      	movcs	r0, #8
    a092:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    a094:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
    a098:	4428      	add	r0, r5
	return chunk_mem(h, c);
    a09a:	e7cc      	b.n	a036 <sys_heap_alloc+0x8>

0000a09c <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    a09c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_heap *h = heap->heap;
    a0a0:	6806      	ldr	r6, [r0, #0]
{
    a0a2:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
    a0a4:	424a      	negs	r2, r1
    a0a6:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
    a0aa:	ea31 0202 	bics.w	r2, r1, r2
    a0ae:	68b5      	ldr	r5, [r6, #8]
{
    a0b0:	460b      	mov	r3, r1
	if (align != rew) {
    a0b2:	d00f      	beq.n	a0d4 <sys_heap_aligned_alloc+0x38>
    a0b4:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    a0b8:	bf34      	ite	cc
    a0ba:	2104      	movcc	r1, #4
    a0bc:	2108      	movcs	r1, #8
    a0be:	42b9      	cmp	r1, r7
    a0c0:	460a      	mov	r2, r1
    a0c2:	46b9      	mov	r9, r7
    a0c4:	bf28      	it	cs
    a0c6:	463a      	movcs	r2, r7
		align -= rew;
    a0c8:	1bdf      	subs	r7, r3, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
    a0ca:	b994      	cbnz	r4, a0f2 <sys_heap_aligned_alloc+0x56>
		return NULL;
    a0cc:	2500      	movs	r5, #0
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
    a0ce:	4628      	mov	r0, r5
    a0d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a0d4:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    a0d8:	bf34      	ite	cc
    a0da:	2204      	movcc	r2, #4
    a0dc:	2208      	movcs	r2, #8
		if (align <= chunk_header_bytes(h)) {
    a0de:	4291      	cmp	r1, r2
    a0e0:	d804      	bhi.n	a0ec <sys_heap_aligned_alloc+0x50>
			return sys_heap_alloc(heap, bytes);
    a0e2:	4621      	mov	r1, r4
}
    a0e4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    a0e8:	f7ff bfa1 	b.w	a02e <sys_heap_alloc>
		rew = 0;
    a0ec:	f04f 0900 	mov.w	r9, #0
    a0f0:	e7eb      	b.n	a0ca <sys_heap_aligned_alloc+0x2e>
	if (bytes == 0 || size_too_big(h, bytes)) {
    a0f2:	ebb5 0fd4 	cmp.w	r5, r4, lsr #3
    a0f6:	d9e9      	bls.n	a0cc <sys_heap_aligned_alloc+0x30>
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
    a0f8:	1de1      	adds	r1, r4, #7
    a0fa:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    a0fe:	4439      	add	r1, r7
    a100:	bf2c      	ite	cs
    a102:	2308      	movcs	r3, #8
    a104:	2304      	movcc	r3, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    a106:	1a89      	subs	r1, r1, r2
    a108:	4419      	add	r1, r3
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    a10a:	08c9      	lsrs	r1, r1, #3
    a10c:	4630      	mov	r0, r6
    a10e:	f7ff feb8 	bl	9e82 <alloc_chunk>
	if (c0 == 0) {
    a112:	4680      	mov	r8, r0
    a114:	2800      	cmp	r0, #0
    a116:	d0d9      	beq.n	a0cc <sys_heap_aligned_alloc+0x30>
	return big_heap(h) ? 8 : 4;
    a118:	68b3      	ldr	r3, [r6, #8]
    a11a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    a11e:	bf2c      	ite	cs
    a120:	2308      	movcs	r3, #8
    a122:	2304      	movcc	r3, #4
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    a124:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
    a128:	441d      	add	r5, r3
    a12a:	1e7a      	subs	r2, r7, #1
    a12c:	4435      	add	r5, r6
    a12e:	427f      	negs	r7, r7
    a130:	4415      	add	r5, r2
    a132:	403d      	ands	r5, r7
    a134:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    a138:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    a13a:	1aeb      	subs	r3, r5, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    a13c:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    a13e:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    a140:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    a144:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    a146:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    a14a:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    a14e:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    a152:	d208      	bcs.n	a166 <sys_heap_aligned_alloc+0xca>
		split_chunks(h, c0, c);
    a154:	4601      	mov	r1, r0
    a156:	463a      	mov	r2, r7
    a158:	4630      	mov	r0, r6
    a15a:	f7ff fe25 	bl	9da8 <split_chunks>
		free_list_add(h, c0);
    a15e:	4641      	mov	r1, r8
    a160:	4630      	mov	r0, r6
    a162:	f7ff fec7 	bl	9ef4 <free_list_add>
	return c + chunk_size(h, c);
    a166:	4639      	mov	r1, r7
    a168:	4630      	mov	r0, r6
    a16a:	f7ff fdd0 	bl	9d0e <chunk_size>
    a16e:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    a170:	4284      	cmp	r4, r0
    a172:	d208      	bcs.n	a186 <sys_heap_aligned_alloc+0xea>
		split_chunks(h, c, c_end);
    a174:	4639      	mov	r1, r7
    a176:	4630      	mov	r0, r6
    a178:	4622      	mov	r2, r4
    a17a:	f7ff fe15 	bl	9da8 <split_chunks>
		free_list_add(h, c_end);
    a17e:	4621      	mov	r1, r4
    a180:	4630      	mov	r0, r6
    a182:	f7ff feb7 	bl	9ef4 <free_list_add>
	set_chunk_used(h, c, true);
    a186:	2201      	movs	r2, #1
    a188:	4639      	mov	r1, r7
    a18a:	4630      	mov	r0, r6
    a18c:	f7ff fdc5 	bl	9d1a <set_chunk_used>
	return mem;
    a190:	e79d      	b.n	a0ce <sys_heap_aligned_alloc+0x32>

0000a192 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
    a192:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    a196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a198:	bf2c      	ite	cs
    a19a:	2508      	movcs	r5, #8
    a19c:	2504      	movcc	r5, #4
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    a19e:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    a1a0:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    a1a2:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    a1a4:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    a1a8:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    a1ac:	1b2d      	subs	r5, r5, r4
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
    a1ae:	2300      	movs	r3, #0
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    a1b0:	08ed      	lsrs	r5, r5, #3
	heap->heap = h;
    a1b2:	6004      	str	r4, [r0, #0]

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    a1b4:	4629      	mov	r1, r5
	h->end_chunk = heap_sz;
    a1b6:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
    a1b8:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    a1ba:	4620      	mov	r0, r4
    a1bc:	f7ff fdc9 	bl	9d52 <bucket_idx>
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    a1c0:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    a1c2:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    a1c4:	1c41      	adds	r1, r0, #1
    a1c6:	08f6      	lsrs	r6, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    a1c8:	f104 0210 	add.w	r2, r4, #16
		h->buckets[i].next = 0;
    a1cc:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
    a1ce:	428b      	cmp	r3, r1
    a1d0:	db2f      	blt.n	a232 <sys_heap_init+0xa0>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    a1d2:	4632      	mov	r2, r6
    a1d4:	4620      	mov	r0, r4
    a1d6:	2100      	movs	r1, #0
    a1d8:	f7ff fdb7 	bl	9d4a <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    a1dc:	2300      	movs	r3, #0
    a1de:	461a      	mov	r2, r3
    a1e0:	4619      	mov	r1, r3
    a1e2:	4620      	mov	r0, r4
    a1e4:	f7ff fd88 	bl	9cf8 <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    a1e8:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
    a1ea:	4620      	mov	r0, r4
    a1ec:	2201      	movs	r2, #1
    a1ee:	2100      	movs	r1, #0
    a1f0:	f7ff fd93 	bl	9d1a <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    a1f4:	463a      	mov	r2, r7
    a1f6:	4631      	mov	r1, r6
    a1f8:	f7ff fda7 	bl	9d4a <set_chunk_size>
    a1fc:	4633      	mov	r3, r6
    a1fe:	4631      	mov	r1, r6
    a200:	4620      	mov	r0, r4
    a202:	2200      	movs	r2, #0
    a204:	f7ff fd78 	bl	9cf8 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
    a208:	4629      	mov	r1, r5
    a20a:	4620      	mov	r0, r4
    a20c:	2200      	movs	r2, #0
    a20e:	f7ff fd9c 	bl	9d4a <set_chunk_size>
    a212:	463b      	mov	r3, r7
    a214:	4629      	mov	r1, r5
    a216:	4620      	mov	r0, r4
    a218:	2200      	movs	r2, #0
    a21a:	f7ff fd6d 	bl	9cf8 <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
    a21e:	4629      	mov	r1, r5
    a220:	4620      	mov	r0, r4
    a222:	2201      	movs	r2, #1
    a224:	f7ff fd79 	bl	9d1a <set_chunk_used>

	free_list_add(h, chunk0_size);
    a228:	4631      	mov	r1, r6
}
    a22a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    a22e:	f7ff be61 	b.w	9ef4 <free_list_add>
		h->buckets[i].next = 0;
    a232:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
    a236:	3301      	adds	r3, #1
    a238:	e7c9      	b.n	a1ce <sys_heap_init+0x3c>

0000a23a <ring_buf_get_rewind_threshold>:
 * rewinding earlier.
 */
uint32_t __weak ring_buf_get_rewind_threshold(void)
{
	return RING_BUFFER_MAX_SIZE;
}
    a23a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    a23e:	4770      	bx	lr

0000a240 <ring_buf_put_claim>:
{
	return val >= max ? (val - max) : val;
}

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    a240:	b5f0      	push	{r4, r5, r6, r7, lr}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    a242:	6985      	ldr	r5, [r0, #24]
	uint32_t space, trail_size, allocated, tmp_trail_mod;

	tmp_trail_mod = mod(buf, buf->misc.byte_mode.tmp_tail);
    a244:	6886      	ldr	r6, [r0, #8]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    a246:	6907      	ldr	r7, [r0, #16]
{
    a248:	4604      	mov	r4, r0
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    a24a:	b185      	cbz	r5, a26e <ring_buf_put_claim+0x2e>
    a24c:	4035      	ands	r5, r6
	space = (buf->head + buf->size) - buf->misc.byte_mode.tmp_tail;
    a24e:	6823      	ldr	r3, [r4, #0]
    a250:	443b      	add	r3, r7
    a252:	1b98      	subs	r0, r3, r6
	trail_size = buf->size - tmp_trail_mod;

	/* Limit requested size to available size. */
	size = MIN(size, space);
    a254:	4290      	cmp	r0, r2
    a256:	bf28      	it	cs
    a258:	4610      	movcs	r0, r2
	trail_size = buf->size - tmp_trail_mod;
    a25a:	1b7f      	subs	r7, r7, r5

	trail_size = buf->size - (tmp_trail_mod);

	/* Limit allocated size to trail size. */
	allocated = MIN(trail_size, size);
	*data = &buf->buf.buf8[tmp_trail_mod];
    a25c:	6963      	ldr	r3, [r4, #20]
	allocated = MIN(trail_size, size);
    a25e:	42b8      	cmp	r0, r7
    a260:	bf28      	it	cs
    a262:	4638      	movcs	r0, r7
	*data = &buf->buf.buf8[tmp_trail_mod];
    a264:	441d      	add	r5, r3

	buf->misc.byte_mode.tmp_tail =
		buf->misc.byte_mode.tmp_tail + allocated;
    a266:	4406      	add	r6, r0
	*data = &buf->buf.buf8[tmp_trail_mod];
    a268:	600d      	str	r5, [r1, #0]
	buf->misc.byte_mode.tmp_tail =
    a26a:	60a6      	str	r6, [r4, #8]

	return allocated;
}
    a26c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    a26e:	fbb6 f5f7 	udiv	r5, r6, r7
    a272:	fb07 6515 	mls	r5, r7, r5, r6
    a276:	e7ea      	b.n	a24e <ring_buf_put_claim+0xe>

0000a278 <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
	if ((buf->tail + size) > (buf->head + buf->size)) {
    a278:	6843      	ldr	r3, [r0, #4]
    a27a:	6902      	ldr	r2, [r0, #16]
    a27c:	4419      	add	r1, r3
    a27e:	6803      	ldr	r3, [r0, #0]
    a280:	4413      	add	r3, r2
    a282:	4299      	cmp	r1, r3
		return -EINVAL;
	}

	buf->tail += size;
	buf->misc.byte_mode.tmp_tail = buf->tail;
    a284:	bf9a      	itte	ls
    a286:	e9c0 1101 	strdls	r1, r1, [r0, #4]

	return 0;
    a28a:	2000      	movls	r0, #0
		return -EINVAL;
    a28c:	f06f 0015 	mvnhi.w	r0, #21
}
    a290:	4770      	bx	lr

0000a292 <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
    a292:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    a296:	4680      	mov	r8, r0
    a298:	460e      	mov	r6, r1
    a29a:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    a29c:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
    a29e:	462a      	mov	r2, r5
    a2a0:	a901      	add	r1, sp, #4
    a2a2:	4640      	mov	r0, r8
    a2a4:	f7ff ffcc 	bl	a240 <ring_buf_put_claim>
		memcpy(dst, data, partial_size);
    a2a8:	4631      	mov	r1, r6
		partial_size = ring_buf_put_claim(buf, &dst, size);
    a2aa:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
    a2ac:	4602      	mov	r2, r0
    a2ae:	9801      	ldr	r0, [sp, #4]
    a2b0:	f000 fcc4 	bl	ac3c <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
    a2b4:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
    a2b6:	4427      	add	r7, r4
		data += partial_size;
    a2b8:	4426      	add	r6, r4
	} while (size && partial_size);
    a2ba:	d001      	beq.n	a2c0 <ring_buf_put+0x2e>
    a2bc:	2c00      	cmp	r4, #0
    a2be:	d1ee      	bne.n	a29e <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
    a2c0:	4639      	mov	r1, r7
    a2c2:	4640      	mov	r0, r8
    a2c4:	f7ff ffd8 	bl	a278 <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
    a2c8:	4638      	mov	r0, r7
    a2ca:	b002      	add	sp, #8
    a2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a2d0 <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    a2d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    a2d2:	6985      	ldr	r5, [r0, #24]
	uint32_t space, granted_size, trail_size, tmp_head_mod;

	tmp_head_mod = mod(buf, buf->misc.byte_mode.tmp_head);
    a2d4:	68c6      	ldr	r6, [r0, #12]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    a2d6:	6903      	ldr	r3, [r0, #16]
{
    a2d8:	4604      	mov	r4, r0
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    a2da:	b185      	cbz	r5, a2fe <ring_buf_get_claim+0x2e>
    a2dc:	4035      	ands	r5, r6
	space = buf->tail - buf->misc.byte_mode.tmp_head;
    a2de:	6867      	ldr	r7, [r4, #4]
    a2e0:	1bb8      	subs	r0, r7, r6
	trail_size = buf->size - tmp_head_mod;

	/* Limit requested size to available size. */
	granted_size = MIN(size, space);
    a2e2:	4290      	cmp	r0, r2
    a2e4:	bf28      	it	cs
    a2e6:	4610      	movcs	r0, r2
    a2e8:	4607      	mov	r7, r0
	trail_size = buf->size - tmp_head_mod;
    a2ea:	1b58      	subs	r0, r3, r5

	/* Limit allocated size to trail size. */
	granted_size = MIN(trail_size, granted_size);
    a2ec:	42b8      	cmp	r0, r7

	*data = &buf->buf.buf8[tmp_head_mod];
    a2ee:	6963      	ldr	r3, [r4, #20]
	granted_size = MIN(trail_size, granted_size);
    a2f0:	bf28      	it	cs
    a2f2:	4638      	movcs	r0, r7
	*data = &buf->buf.buf8[tmp_head_mod];
    a2f4:	441d      	add	r5, r3
	buf->misc.byte_mode.tmp_head += granted_size;
    a2f6:	4406      	add	r6, r0
	*data = &buf->buf.buf8[tmp_head_mod];
    a2f8:	600d      	str	r5, [r1, #0]
	buf->misc.byte_mode.tmp_head += granted_size;
    a2fa:	60e6      	str	r6, [r4, #12]

	return granted_size;
}
    a2fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    a2fe:	fbb6 f5f3 	udiv	r5, r6, r3
    a302:	fb03 6515 	mls	r5, r3, r5, r6
    a306:	e7ea      	b.n	a2de <ring_buf_get_claim+0xe>

0000a308 <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
	if ((buf->head + size) > buf->tail) {
    a308:	6803      	ldr	r3, [r0, #0]
    a30a:	4419      	add	r1, r3
    a30c:	6843      	ldr	r3, [r0, #4]
    a30e:	4299      	cmp	r1, r3
{
    a310:	b510      	push	{r4, lr}
    a312:	4604      	mov	r4, r0
	if ((buf->head + size) > buf->tail) {
    a314:	d824      	bhi.n	a360 <ring_buf_get_finish+0x58>
		return -EINVAL;
	}

	buf->head += size;
    a316:	6001      	str	r1, [r0, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
    a318:	60c1      	str	r1, [r0, #12]
	uint32_t threshold = ring_buf_get_rewind_threshold();
    a31a:	f7ff ff8e 	bl	a23a <ring_buf_get_rewind_threshold>
	if (buf->head < threshold) {
    a31e:	6823      	ldr	r3, [r4, #0]
    a320:	4298      	cmp	r0, r3
    a322:	d81b      	bhi.n	a35c <ring_buf_get_finish+0x54>
	rew = buf->size * (threshold / buf->size);
    a324:	6923      	ldr	r3, [r4, #16]
    a326:	fbb0 f0f3 	udiv	r0, r0, r3
    a32a:	4358      	muls	r0, r3
	__asm__ volatile(
    a32c:	f04f 0320 	mov.w	r3, #32
    a330:	f3ef 8211 	mrs	r2, BASEPRI
    a334:	f383 8811 	msr	BASEPRI, r3
    a338:	f3bf 8f6f 	isb	sy
	buf->tail -= rew;
    a33c:	6863      	ldr	r3, [r4, #4]
    a33e:	1a1b      	subs	r3, r3, r0
    a340:	6063      	str	r3, [r4, #4]
	buf->head -= rew;
    a342:	6823      	ldr	r3, [r4, #0]
    a344:	1a1b      	subs	r3, r3, r0
    a346:	6023      	str	r3, [r4, #0]
	buf->misc.byte_mode.tmp_head -= rew;
    a348:	68e3      	ldr	r3, [r4, #12]
    a34a:	1a1b      	subs	r3, r3, r0
    a34c:	60e3      	str	r3, [r4, #12]
	buf->misc.byte_mode.tmp_tail -= rew;
    a34e:	68a3      	ldr	r3, [r4, #8]
    a350:	1a18      	subs	r0, r3, r0
    a352:	60a0      	str	r0, [r4, #8]
	__asm__ volatile(
    a354:	f382 8811 	msr	BASEPRI, r2
    a358:	f3bf 8f6f 	isb	sy

	byte_indexes_rewind(buf);

	return 0;
    a35c:	2000      	movs	r0, #0
    a35e:	e001      	b.n	a364 <ring_buf_get_finish+0x5c>
		return -EINVAL;
    a360:	f06f 0015 	mvn.w	r0, #21
}
    a364:	bd10      	pop	{r4, pc}

0000a366 <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
    a366:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    a36a:	4680      	mov	r8, r0
    a36c:	460d      	mov	r5, r1
    a36e:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    a370:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
    a372:	4632      	mov	r2, r6
    a374:	a901      	add	r1, sp, #4
    a376:	4640      	mov	r0, r8
    a378:	f7ff ffaa 	bl	a2d0 <ring_buf_get_claim>
    a37c:	4604      	mov	r4, r0
		if (data) {
    a37e:	b12d      	cbz	r5, a38c <ring_buf_get+0x26>
			memcpy(data, src, partial_size);
    a380:	4602      	mov	r2, r0
    a382:	9901      	ldr	r1, [sp, #4]
    a384:	4628      	mov	r0, r5
    a386:	f000 fc59 	bl	ac3c <memcpy>
			data += partial_size;
    a38a:	4425      	add	r5, r4
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
    a38c:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
    a38e:	4427      	add	r7, r4
	} while (size && partial_size);
    a390:	d001      	beq.n	a396 <ring_buf_get+0x30>
    a392:	2c00      	cmp	r4, #0
    a394:	d1ed      	bne.n	a372 <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
    a396:	4639      	mov	r1, r7
    a398:	4640      	mov	r0, r8
    a39a:	f7ff ffb5 	bl	a308 <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
    a39e:	4638      	mov	r0, r7
    a3a0:	b002      	add	sp, #8
    a3a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a3a6 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    a3a6:	4770      	bx	lr

0000a3a8 <usb_write>:
{
    a3a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a3ac:	4606      	mov	r6, r0
    a3ae:	460f      	mov	r7, r1
    a3b0:	4690      	mov	r8, r2
    a3b2:	4699      	mov	r9, r3
    a3b4:	2504      	movs	r5, #4
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    a3b6:	464b      	mov	r3, r9
    a3b8:	4642      	mov	r2, r8
    a3ba:	4639      	mov	r1, r7
    a3bc:	4630      	mov	r0, r6
    a3be:	f7f9 fa5b 	bl	3878 <usb_dc_ep_write>
		if (ret == -EAGAIN) {
    a3c2:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    a3c6:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
    a3c8:	d103      	bne.n	a3d2 <usb_write+0x2a>
	z_impl_k_yield();
    a3ca:	f7fe fba9 	bl	8b20 <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
    a3ce:	3d01      	subs	r5, #1
    a3d0:	d1f1      	bne.n	a3b6 <usb_write+0xe>
}
    a3d2:	4620      	mov	r0, r4
    a3d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000a3d8 <usb_get_dev_data_by_cfg>:
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    a3d8:	6800      	ldr	r0, [r0, #0]
    a3da:	b158      	cbz	r0, a3f4 <usb_get_dev_data_by_cfg+0x1c>
    a3dc:	3804      	subs	r0, #4
    a3de:	b900      	cbnz	r0, a3e2 <usb_get_dev_data_by_cfg+0xa>
    a3e0:	4770      	bx	lr
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg_cur = dev->config;
    a3e2:	6803      	ldr	r3, [r0, #0]

		if (cfg_cur == cfg) {
    a3e4:	685b      	ldr	r3, [r3, #4]
    a3e6:	4299      	cmp	r1, r3
    a3e8:	d004      	beq.n	a3f4 <usb_get_dev_data_by_cfg+0x1c>
Z_GENLIST_PEEK_NEXT(slist, snode)
    a3ea:	1d03      	adds	r3, r0, #4
    a3ec:	d001      	beq.n	a3f2 <usb_get_dev_data_by_cfg+0x1a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    a3ee:	6840      	ldr	r0, [r0, #4]
    a3f0:	e7f3      	b.n	a3da <usb_get_dev_data_by_cfg+0x2>
		}
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
    a3f2:	4618      	mov	r0, r3
}
    a3f4:	4770      	bx	lr

0000a3f6 <usb_get_dev_data_by_iface>:
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    a3f6:	6800      	ldr	r0, [r0, #0]
    a3f8:	b168      	cbz	r0, a416 <usb_get_dev_data_by_iface+0x20>
    a3fa:	3804      	subs	r0, #4
    a3fc:	b900      	cbnz	r0, a400 <usb_get_dev_data_by_iface+0xa>
    a3fe:	4770      	bx	lr
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    a400:	6803      	ldr	r3, [r0, #0]
		const struct usb_if_descriptor *if_desc =
    a402:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
    a404:	685b      	ldr	r3, [r3, #4]
    a406:	789b      	ldrb	r3, [r3, #2]
    a408:	428b      	cmp	r3, r1
    a40a:	d004      	beq.n	a416 <usb_get_dev_data_by_iface+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
    a40c:	1d03      	adds	r3, r0, #4
    a40e:	d001      	beq.n	a414 <usb_get_dev_data_by_iface+0x1e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    a410:	6840      	ldr	r0, [r0, #4]
    a412:	e7f1      	b.n	a3f8 <usb_get_dev_data_by_iface+0x2>
		}
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
    a414:	4618      	mov	r0, r3
}
    a416:	4770      	bx	lr

0000a418 <usb_get_dev_data_by_ep>:

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
    a418:	b530      	push	{r4, r5, lr}
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    a41a:	6800      	ldr	r0, [r0, #0]
    a41c:	b198      	cbz	r0, a446 <usb_get_dev_data_by_ep+0x2e>
    a41e:	3804      	subs	r0, #4
    a420:	b188      	cbz	r0, a446 <usb_get_dev_data_by_ep+0x2e>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    a422:	6803      	ldr	r3, [r0, #0]
    a424:	685b      	ldr	r3, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
    a426:	6a1a      	ldr	r2, [r3, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    a428:	7f1d      	ldrb	r5, [r3, #28]
			if (ep_data[i].ep_addr == ep) {
    a42a:	3a04      	subs	r2, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    a42c:	2300      	movs	r3, #0
    a42e:	b2dc      	uxtb	r4, r3
    a430:	42a5      	cmp	r5, r4
    a432:	d803      	bhi.n	a43c <usb_get_dev_data_by_ep+0x24>
Z_GENLIST_PEEK_NEXT(slist, snode)
    a434:	1d03      	adds	r3, r0, #4
    a436:	d007      	beq.n	a448 <usb_get_dev_data_by_ep+0x30>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    a438:	6840      	ldr	r0, [r0, #4]
    a43a:	e7ef      	b.n	a41c <usb_get_dev_data_by_ep+0x4>
			if (ep_data[i].ep_addr == ep) {
    a43c:	3301      	adds	r3, #1
    a43e:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    a442:	428c      	cmp	r4, r1
    a444:	d1f3      	bne.n	a42e <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
    a446:	bd30      	pop	{r4, r5, pc}
	return NULL;
    a448:	4618      	mov	r0, r3
    a44a:	e7fc      	b.n	a446 <usb_get_dev_data_by_ep+0x2e>

0000a44c <usb_transfer_is_busy>:
{
    a44c:	b508      	push	{r3, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    a44e:	f7f7 ff9d 	bl	238c <usb_ep_get_transfer>
	if (trans && trans->status == -EBUSY) {
    a452:	b128      	cbz	r0, a460 <usb_transfer_is_busy+0x14>
    a454:	6840      	ldr	r0, [r0, #4]
    a456:	f110 0f10 	cmn.w	r0, #16
    a45a:	bf14      	ite	ne
    a45c:	2000      	movne	r0, #0
    a45e:	2001      	moveq	r0, #1
}
    a460:	bd08      	pop	{r3, pc}

0000a462 <cdc_interface_config>:
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
    a462:	1c4b      	adds	r3, r1, #1
    a464:	b2db      	uxtb	r3, r3
	desc->if0.bInterfaceNumber = bInterfaceNumber;
    a466:	7081      	strb	r1, [r0, #2]
	desc->if0_union.bControlInterface = bInterfaceNumber;
    a468:	7681      	strb	r1, [r0, #26]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
    a46a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	desc->if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
    a46e:	76c3      	strb	r3, [r0, #27]
	desc->iad_cdc.bFirstInterface = bInterfaceNumber;
    a470:	f800 1c06 	strb.w	r1, [r0, #-6]
}
    a474:	4770      	bx	lr

0000a476 <cdc_acm_irq_callback_work_handler>:
	dev_data->cb(dev_data->common.dev, dev_data->cb_data);
    a476:	e950 3106 	ldrd	r3, r1, [r0, #-24]
    a47a:	6f80      	ldr	r0, [r0, #120]	; 0x78
    a47c:	4718      	bx	r3

0000a47e <cdc_acm_irq_tx_disable>:
	dev_data->tx_irq_ena = false;
    a47e:	6903      	ldr	r3, [r0, #16]
    a480:	2200      	movs	r2, #0
    a482:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
    a486:	4770      	bx	lr

0000a488 <cdc_acm_irq_tx_ready>:
	if (dev_data->tx_ready) {
    a488:	6903      	ldr	r3, [r0, #16]
}
    a48a:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
    a48e:	4770      	bx	lr

0000a490 <cdc_acm_irq_rx_disable>:
	dev_data->rx_irq_ena = false;
    a490:	6903      	ldr	r3, [r0, #16]
    a492:	2200      	movs	r2, #0
    a494:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
}
    a498:	4770      	bx	lr

0000a49a <cdc_acm_irq_rx_ready>:
	if (dev_data->rx_ready) {
    a49a:	6903      	ldr	r3, [r0, #16]
}
    a49c:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
    a4a0:	4770      	bx	lr

0000a4a2 <cdc_acm_irq_is_pending>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    a4a2:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_ready && dev_data->tx_irq_ena) {
    a4a4:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
    a4a8:	b112      	cbz	r2, a4b0 <cdc_acm_irq_is_pending+0xe>
    a4aa:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
    a4ae:	b92a      	cbnz	r2, a4bc <cdc_acm_irq_is_pending+0x1a>
	} else if (dev_data->rx_ready && dev_data->rx_irq_ena) {
    a4b0:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
    a4b4:	b118      	cbz	r0, a4be <cdc_acm_irq_is_pending+0x1c>
		return 0;
    a4b6:	f893 003b 	ldrb.w	r0, [r3, #59]	; 0x3b
    a4ba:	4770      	bx	lr
		return 1;
    a4bc:	2001      	movs	r0, #1
}
    a4be:	4770      	bx	lr

0000a4c0 <cdc_acm_irq_update>:
}
    a4c0:	2001      	movs	r0, #1
    a4c2:	4770      	bx	lr

0000a4c4 <cdc_acm_irq_callback_set>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    a4c4:	6903      	ldr	r3, [r0, #16]
	dev_data->cb_data = cb_data;
    a4c6:	e9c3 1200 	strd	r1, r2, [r3]
}
    a4ca:	4770      	bx	lr

0000a4cc <cdc_acm_line_ctrl_get>:
static int cdc_acm_line_ctrl_get(const struct device *dev,
				 uint32_t ctrl, uint32_t *val)
{
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);

	switch (ctrl) {
    a4cc:	2902      	cmp	r1, #2
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    a4ce:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
    a4d0:	d008      	beq.n	a4e4 <cdc_acm_line_ctrl_get+0x18>
    a4d2:	2904      	cmp	r1, #4
    a4d4:	d00b      	beq.n	a4ee <cdc_acm_line_ctrl_get+0x22>
    a4d6:	2901      	cmp	r1, #1
    a4d8:	d10e      	bne.n	a4f8 <cdc_acm_line_ctrl_get+0x2c>
	case UART_LINE_CTRL_BAUD_RATE:
		*val = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
    a4da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
		return 0;
	case UART_LINE_CTRL_RTS:
		*val = (dev_data->line_state &
    a4de:	6013      	str	r3, [r2, #0]
			SET_CONTROL_LINE_STATE_RTS) ? 1 : 0;
		return 0;
    a4e0:	2000      	movs	r0, #0
    a4e2:	4770      	bx	lr
			SET_CONTROL_LINE_STATE_RTS) ? 1 : 0;
    a4e4:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
    a4e8:	f3c3 0340 	ubfx	r3, r3, #1, #1
    a4ec:	e7f7      	b.n	a4de <cdc_acm_line_ctrl_get+0x12>
	case UART_LINE_CTRL_DTR:
		*val = (dev_data->line_state &
			SET_CONTROL_LINE_STATE_DTR) ? 1 : 0;
    a4ee:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
    a4f2:	f003 0301 	and.w	r3, r3, #1
    a4f6:	e7f2      	b.n	a4de <cdc_acm_line_ctrl_get+0x12>
	switch (ctrl) {
    a4f8:	f06f 0085 	mvn.w	r0, #133	; 0x85
		return 0;
	}

	return -ENOTSUP;
}
    a4fc:	4770      	bx	lr

0000a4fe <cdc_acm_poll_in>:
{
	ARG_UNUSED(dev);
	ARG_UNUSED(c);

	return -ENOTSUP;
}
    a4fe:	f06f 0085 	mvn.w	r0, #133	; 0x85
    a502:	4770      	bx	lr

0000a504 <cdc_acm_fifo_read>:
{
    a504:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    a506:	6904      	ldr	r4, [r0, #16]
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
    a508:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    a50a:	f7ff ff2c 	bl	a366 <ring_buf_get>
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
    a50e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    a510:	e9d3 3200 	ldrd	r3, r2, [r3]
    a514:	429a      	cmp	r2, r3
		dev_data->rx_ready = false;
    a516:	bf04      	itt	eq
    a518:	2300      	moveq	r3, #0
    a51a:	f884 3039 	strbeq.w	r3, [r4, #57]	; 0x39
}
    a51e:	bd10      	pop	{r4, pc}

0000a520 <cdc_acm_poll_out>:
 * The UART poll method for USB UART is simulated by waiting till
 * we get the next BULK In upcall from the USB device controller or 100 ms.
 */
static void cdc_acm_poll_out(const struct device *dev,
				      unsigned char c)
{
    a520:	b513      	push	{r0, r1, r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);

	cdc_acm_fifo_fill(dev, &c, 1);
    a522:	2201      	movs	r2, #1
{
    a524:	f88d 1007 	strb.w	r1, [sp, #7]
	cdc_acm_fifo_fill(dev, &c, 1);
    a528:	f10d 0107 	add.w	r1, sp, #7
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    a52c:	6904      	ldr	r4, [r0, #16]
	cdc_acm_fifo_fill(dev, &c, 1);
    a52e:	f7f8 f917 	bl	2760 <cdc_acm_fifo_fill>
	return z_impl_k_sem_take(sem, timeout);
    a532:	f640 42cd 	movw	r2, #3277	; 0xccd
    a536:	2300      	movs	r3, #0
    a538:	f104 0008 	add.w	r0, r4, #8
    a53c:	f7fd ff0a 	bl	8354 <z_impl_k_sem_take>
	k_sem_take(&dev_data->poll_wait_sem, K_MSEC(100));
}
    a540:	b002      	add	sp, #8
    a542:	bd10      	pop	{r4, pc}

0000a544 <cdc_acm_line_ctrl_set>:
	switch (ctrl) {
    a544:	2940      	cmp	r1, #64	; 0x40
{
    a546:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    a548:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
    a54a:	d043      	beq.n	a5d4 <cdc_acm_line_ctrl_set+0x90>
    a54c:	d813      	bhi.n	a576 <cdc_acm_line_ctrl_set+0x32>
    a54e:	2910      	cmp	r1, #16
    a550:	d033      	beq.n	a5ba <cdc_acm_line_ctrl_set+0x76>
    a552:	d806      	bhi.n	a562 <cdc_acm_line_ctrl_set+0x1e>
    a554:	2901      	cmp	r1, #1
    a556:	d01e      	beq.n	a596 <cdc_acm_line_ctrl_set+0x52>
    a558:	2908      	cmp	r1, #8
    a55a:	d020      	beq.n	a59e <cdc_acm_line_ctrl_set+0x5a>
    a55c:	f06f 0012 	mvn.w	r0, #18
}
    a560:	bd08      	pop	{r3, pc}
	switch (ctrl) {
    a562:	2920      	cmp	r1, #32
    a564:	d1fa      	bne.n	a55c <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_BREAK;
    a566:	f893 108c 	ldrb.w	r1, [r3, #140]	; 0x8c
    a56a:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
		if (val) {
    a56e:	b34a      	cbz	r2, a5c4 <cdc_acm_line_ctrl_set+0x80>
			dev_data->serial_state |= SERIAL_STATE_BREAK;
    a570:	f041 0104 	orr.w	r1, r1, #4
    a574:	e026      	b.n	a5c4 <cdc_acm_line_ctrl_set+0x80>
	switch (ctrl) {
    a576:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    a57a:	d034      	beq.n	a5e6 <cdc_acm_line_ctrl_set+0xa2>
    a57c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    a580:	d03a      	beq.n	a5f8 <cdc_acm_line_ctrl_set+0xb4>
    a582:	2980      	cmp	r1, #128	; 0x80
    a584:	d1ea      	bne.n	a55c <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_FRAMING;
    a586:	f893 108c 	ldrb.w	r1, [r3, #140]	; 0x8c
    a58a:	f001 01ef 	and.w	r1, r1, #239	; 0xef
		if (val) {
    a58e:	b1ca      	cbz	r2, a5c4 <cdc_acm_line_ctrl_set+0x80>
			dev_data->serial_state |= SERIAL_STATE_FRAMING;
    a590:	f041 0110 	orr.w	r1, r1, #16
    a594:	e016      	b.n	a5c4 <cdc_acm_line_ctrl_set+0x80>
	dev_data->line_coding.dwDTERate = sys_cpu_to_le32(baudrate);
    a596:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		return 0;
    a59a:	2000      	movs	r0, #0
    a59c:	e7e0      	b.n	a560 <cdc_acm_line_ctrl_set+0x1c>
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
    a59e:	f893 108c 	ldrb.w	r1, [r3, #140]	; 0x8c
    a5a2:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
		if (val) {
    a5a6:	b92a      	cbnz	r2, a5b4 <cdc_acm_line_ctrl_set+0x70>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
    a5a8:	f883 108c 	strb.w	r1, [r3, #140]	; 0x8c
		cdc_acm_send_notification(dev, SERIAL_STATE_RX_CARRIER);
    a5ac:	2101      	movs	r1, #1
		cdc_acm_send_notification(dev, dev_data->serial_state);
    a5ae:	f7f8 f967 	bl	2880 <cdc_acm_send_notification>
    a5b2:	e7f2      	b.n	a59a <cdc_acm_line_ctrl_set+0x56>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
    a5b4:	f041 0101 	orr.w	r1, r1, #1
    a5b8:	e7f6      	b.n	a5a8 <cdc_acm_line_ctrl_set+0x64>
		dev_data->serial_state &= ~SERIAL_STATE_TX_CARRIER;
    a5ba:	f893 108c 	ldrb.w	r1, [r3, #140]	; 0x8c
    a5be:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
		if (val) {
    a5c2:	b922      	cbnz	r2, a5ce <cdc_acm_line_ctrl_set+0x8a>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
    a5c4:	f883 108c 	strb.w	r1, [r3, #140]	; 0x8c
		cdc_acm_send_notification(dev, dev_data->serial_state);
    a5c8:	f893 108c 	ldrb.w	r1, [r3, #140]	; 0x8c
    a5cc:	e7ef      	b.n	a5ae <cdc_acm_line_ctrl_set+0x6a>
			dev_data->serial_state |= SERIAL_STATE_TX_CARRIER;
    a5ce:	f041 0102 	orr.w	r1, r1, #2
    a5d2:	e7f7      	b.n	a5c4 <cdc_acm_line_ctrl_set+0x80>
		dev_data->serial_state &= ~SERIAL_STATE_RING_SIGNAL;
    a5d4:	f893 108c 	ldrb.w	r1, [r3, #140]	; 0x8c
    a5d8:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
		if (val) {
    a5dc:	2a00      	cmp	r2, #0
    a5de:	d0f1      	beq.n	a5c4 <cdc_acm_line_ctrl_set+0x80>
			dev_data->serial_state |= SERIAL_STATE_RING_SIGNAL;
    a5e0:	f041 0108 	orr.w	r1, r1, #8
    a5e4:	e7ee      	b.n	a5c4 <cdc_acm_line_ctrl_set+0x80>
		dev_data->serial_state &= ~SERIAL_STATE_PARITY;
    a5e6:	f893 108c 	ldrb.w	r1, [r3, #140]	; 0x8c
    a5ea:	f001 01df 	and.w	r1, r1, #223	; 0xdf
		if (val) {
    a5ee:	2a00      	cmp	r2, #0
    a5f0:	d0e8      	beq.n	a5c4 <cdc_acm_line_ctrl_set+0x80>
			dev_data->serial_state |= SERIAL_STATE_PARITY;
    a5f2:	f041 0120 	orr.w	r1, r1, #32
    a5f6:	e7e5      	b.n	a5c4 <cdc_acm_line_ctrl_set+0x80>
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
    a5f8:	f893 108c 	ldrb.w	r1, [r3, #140]	; 0x8c
    a5fc:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
		if (val) {
    a600:	2a00      	cmp	r2, #0
    a602:	d0df      	beq.n	a5c4 <cdc_acm_line_ctrl_set+0x80>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
    a604:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    a608:	e7dc      	b.n	a5c4 <cdc_acm_line_ctrl_set+0x80>

0000a60a <device_get_binding>:
    a60a:	f7fd bb95 	b.w	7d38 <z_impl_device_get_binding>

0000a60e <get_sectors_cb>:
{
    a60e:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
    a610:	6802      	ldr	r2, [r0, #0]
    a612:	684c      	ldr	r4, [r1, #4]
    a614:	42a2      	cmp	r2, r4
    a616:	d316      	bcc.n	a646 <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
    a618:	688b      	ldr	r3, [r1, #8]
    a61a:	4423      	add	r3, r4
    a61c:	429a      	cmp	r2, r3
    a61e:	d206      	bcs.n	a62e <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
    a620:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
    a624:	42ab      	cmp	r3, r5
    a626:	d304      	bcc.n	a632 <get_sectors_cb+0x24>
		data->status = -ENOMEM;
    a628:	f06f 030b 	mvn.w	r3, #11
    a62c:	618b      	str	r3, [r1, #24]
		*bail_value = false;
    a62e:	2000      	movs	r0, #0
    a630:	e00a      	b.n	a648 <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
    a632:	68cd      	ldr	r5, [r1, #12]
    a634:	1b12      	subs	r2, r2, r4
    a636:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
    a63a:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
    a63e:	6842      	ldr	r2, [r0, #4]
    a640:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
    a642:	3301      	adds	r3, #1
    a644:	610b      	str	r3, [r1, #16]
		*bail_value = true;
    a646:	2001      	movs	r0, #1
}
    a648:	bd70      	pop	{r4, r5, r6, pc}

0000a64a <flash_area_close>:
}
    a64a:	4770      	bx	lr

0000a64c <flash_area_read>:
#endif /* CONFIG_FLASH_PAGE_LAYOUT */

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
    a64c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a650:	461e      	mov	r6, r3
	const struct device *dev;

	if (!is_in_flash_area_bounds(fa, off, len)) {
    a652:	6883      	ldr	r3, [r0, #8]
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    a654:	428b      	cmp	r3, r1
{
    a656:	4605      	mov	r5, r0
    a658:	460c      	mov	r4, r1
    a65a:	4617      	mov	r7, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    a65c:	d30f      	bcc.n	a67e <flash_area_read+0x32>
    a65e:	1872      	adds	r2, r6, r1
    a660:	4293      	cmp	r3, r2
    a662:	d30c      	bcc.n	a67e <flash_area_read+0x32>
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
    a664:	68c0      	ldr	r0, [r0, #12]
    a666:	f7ff ffd0 	bl	a60a <device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
    a66a:	6869      	ldr	r1, [r5, #4]
    a66c:	4421      	add	r1, r4
				    size_t len)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->read(dev, offset, data, len);
    a66e:	6883      	ldr	r3, [r0, #8]
    a670:	681c      	ldr	r4, [r3, #0]
    a672:	463a      	mov	r2, r7
    a674:	4633      	mov	r3, r6
    a676:	46a4      	mov	ip, r4
}
    a678:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    a67c:	4760      	bx	ip
    a67e:	f06f 0015 	mvn.w	r0, #21
    a682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a686 <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
    a686:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a68a:	4699      	mov	r9, r3
	const struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
    a68c:	6883      	ldr	r3, [r0, #8]
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    a68e:	428b      	cmp	r3, r1
{
    a690:	4605      	mov	r5, r0
    a692:	460c      	mov	r4, r1
    a694:	4690      	mov	r8, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    a696:	d322      	bcc.n	a6de <flash_area_write+0x58>
    a698:	eb09 0201 	add.w	r2, r9, r1
    a69c:	4293      	cmp	r3, r2
    a69e:	d31e      	bcc.n	a6de <flash_area_write+0x58>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
    a6a0:	68c0      	ldr	r0, [r0, #12]
    a6a2:	f7ff ffb2 	bl	a60a <device_get_binding>

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
    a6a6:	686d      	ldr	r5, [r5, #4]
	flash_dev = device_get_binding(fa->fa_dev_name);
    a6a8:	4606      	mov	r6, r0
	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
    a6aa:	4425      	add	r5, r4
			  size_t len);

static inline int z_impl_flash_write(const struct device *dev, off_t offset,
				     const void *data, size_t len)
{
	const struct flash_driver_api *api =
    a6ac:	6887      	ldr	r7, [r0, #8]
	/* write protection management in this function exists for keeping
	 * compatibility with out-of-tree drivers which are not aligned jet
	 * with write-protection API depreciation.
	 * This will be removed with flash_api_write_protection handler type.
	 */
	if (api->write_protection != NULL) {
    a6ae:	68fb      	ldr	r3, [r7, #12]
    a6b0:	b95b      	cbnz	r3, a6ca <flash_area_write+0x44>
		if (rc) {
			return rc;
		}
	}

	rc = api->write(dev, offset, data, len);
    a6b2:	687c      	ldr	r4, [r7, #4]
    a6b4:	464b      	mov	r3, r9
    a6b6:	4642      	mov	r2, r8
    a6b8:	4629      	mov	r1, r5
    a6ba:	4630      	mov	r0, r6
    a6bc:	47a0      	blx	r4

	if (api->write_protection != NULL) {
    a6be:	68fb      	ldr	r3, [r7, #12]
	rc = api->write(dev, offset, data, len);
    a6c0:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
    a6c2:	b943      	cbnz	r3, a6d6 <flash_area_write+0x50>

	return rc;
}
    a6c4:	4620      	mov	r0, r4
    a6c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		rc = api->write_protection(dev, false);
    a6ca:	2100      	movs	r1, #0
    a6cc:	4798      	blx	r3
		if (rc) {
    a6ce:	4604      	mov	r4, r0
    a6d0:	2800      	cmp	r0, #0
    a6d2:	d0ee      	beq.n	a6b2 <flash_area_write+0x2c>
    a6d4:	e7f6      	b.n	a6c4 <flash_area_write+0x3e>
		(void) api->write_protection(dev, true);
    a6d6:	2101      	movs	r1, #1
    a6d8:	4630      	mov	r0, r6
    a6da:	4798      	blx	r3
    a6dc:	e7f2      	b.n	a6c4 <flash_area_write+0x3e>
		return -EINVAL;
    a6de:	f06f 0415 	mvn.w	r4, #21
    a6e2:	e7ef      	b.n	a6c4 <flash_area_write+0x3e>

0000a6e4 <flash_area_erase>:
int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
	const struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
    a6e4:	6883      	ldr	r3, [r0, #8]
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    a6e6:	428b      	cmp	r3, r1
{
    a6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a6ec:	4605      	mov	r5, r0
    a6ee:	460c      	mov	r4, r1
    a6f0:	4617      	mov	r7, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    a6f2:	d324      	bcc.n	a73e <flash_area_erase+0x5a>
    a6f4:	440a      	add	r2, r1
    a6f6:	4293      	cmp	r3, r2
    a6f8:	d321      	bcc.n	a73e <flash_area_erase+0x5a>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
    a6fa:	68c0      	ldr	r0, [r0, #12]
    a6fc:	f7ff ff85 	bl	a60a <device_get_binding>

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
    a700:	686d      	ldr	r5, [r5, #4]
	flash_dev = device_get_binding(fa->fa_dev_name);
    a702:	4606      	mov	r6, r0
	rc = flash_erase(flash_dev, fa->fa_off + off, len);
    a704:	4425      	add	r5, r4
__syscall int flash_erase(const struct device *dev, off_t offset, size_t size);

static inline int z_impl_flash_erase(const struct device *dev, off_t offset,
				     size_t size)
{
	const struct flash_driver_api *api =
    a706:	f8d0 8008 	ldr.w	r8, [r0, #8]
	/* write protection management in this function exists for keeping
	 * compatibility with out-of-tree drivers which are not aligned jet
	 * with write-protection API depreciation.
	 * This will be removed with flash_api_write_protection handler type.
	 */
	if (api->write_protection != NULL) {
    a70a:	f8d8 300c 	ldr.w	r3, [r8, #12]
    a70e:	b963      	cbnz	r3, a72a <flash_area_erase+0x46>
		if (rc) {
			return rc;
		}
	}

	rc = api->erase(dev, offset, size);
    a710:	f8d8 3008 	ldr.w	r3, [r8, #8]
    a714:	463a      	mov	r2, r7
    a716:	4629      	mov	r1, r5
    a718:	4630      	mov	r0, r6
    a71a:	4798      	blx	r3

	if (api->write_protection != NULL) {
    a71c:	f8d8 300c 	ldr.w	r3, [r8, #12]
	rc = api->erase(dev, offset, size);
    a720:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
    a722:	b943      	cbnz	r3, a736 <flash_area_erase+0x52>

	return rc;
}
    a724:	4620      	mov	r0, r4
    a726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rc = api->write_protection(dev, false);
    a72a:	2100      	movs	r1, #0
    a72c:	4798      	blx	r3
		if (rc) {
    a72e:	4604      	mov	r4, r0
    a730:	2800      	cmp	r0, #0
    a732:	d0ed      	beq.n	a710 <flash_area_erase+0x2c>
    a734:	e7f6      	b.n	a724 <flash_area_erase+0x40>
		(void) api->write_protection(dev, true);
    a736:	2101      	movs	r1, #1
    a738:	4630      	mov	r0, r6
    a73a:	4798      	blx	r3
    a73c:	e7f2      	b.n	a724 <flash_area_erase+0x40>
		return -EINVAL;
    a73e:	f06f 0415 	mvn.w	r4, #21
    a742:	e7ef      	b.n	a724 <flash_area_erase+0x40>

0000a744 <flash_area_align>:

uint8_t flash_area_align(const struct flash_area *fa)
{
    a744:	b508      	push	{r3, lr}
	const struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
    a746:	68c0      	ldr	r0, [r0, #12]
    a748:	f7ff ff5f 	bl	a60a <device_get_binding>
static inline size_t z_impl_flash_get_write_block_size(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev)->write_block_size;
    a74c:	6883      	ldr	r3, [r0, #8]
    a74e:	691b      	ldr	r3, [r3, #16]
    a750:	4798      	blx	r3

	return flash_get_write_block_size(dev);
}
    a752:	7800      	ldrb	r0, [r0, #0]
    a754:	bd08      	pop	{r3, pc}

0000a756 <flash_area_erased_val>:
{
	return device_get_binding(fa->fa_dev_name);
}

uint8_t flash_area_erased_val(const struct flash_area *fa)
{
    a756:	b508      	push	{r3, lr}
	const struct flash_parameters *param;

	param = flash_get_parameters(device_get_binding(fa->fa_dev_name));
    a758:	68c0      	ldr	r0, [r0, #12]
    a75a:	f7ff ff56 	bl	a60a <device_get_binding>
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    a75e:	6883      	ldr	r3, [r0, #8]
    a760:	691b      	ldr	r3, [r3, #16]
    a762:	4798      	blx	r3

	return param->erase_value;
}
    a764:	7900      	ldrb	r0, [r0, #4]
    a766:	bd08      	pop	{r3, pc}

0000a768 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    a768:	2200      	movs	r2, #0
    a76a:	e9c0 2200 	strd	r2, r2, [r0]
    a76e:	6082      	str	r2, [r0, #8]
}
    a770:	4770      	bx	lr

0000a772 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    a772:	6902      	ldr	r2, [r0, #16]
    a774:	b2cb      	uxtb	r3, r1
    a776:	210c      	movs	r1, #12
    a778:	fb03 2101 	mla	r1, r3, r1, r2
    a77c:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
    a77e:	f000 0007 	and.w	r0, r0, #7
    a782:	4770      	bx	lr

0000a784 <set_off_state>:
	__asm__ volatile(
    a784:	f04f 0320 	mov.w	r3, #32
    a788:	f3ef 8211 	mrs	r2, BASEPRI
    a78c:	f383 8811 	msr	BASEPRI, r3
    a790:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    a794:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    a796:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    a79a:	d001      	beq.n	a7a0 <set_off_state+0x1c>
    a79c:	428b      	cmp	r3, r1
    a79e:	d107      	bne.n	a7b0 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    a7a0:	2301      	movs	r3, #1
    a7a2:	6003      	str	r3, [r0, #0]
	int err = 0;
    a7a4:	2000      	movs	r0, #0
	__asm__ volatile(
    a7a6:	f382 8811 	msr	BASEPRI, r2
    a7aa:	f3bf 8f6f 	isb	sy
}
    a7ae:	4770      	bx	lr
		err = -EPERM;
    a7b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a7b4:	e7f7      	b.n	a7a6 <set_off_state+0x22>

0000a7b6 <set_starting_state>:
{
    a7b6:	b510      	push	{r4, lr}
	__asm__ volatile(
    a7b8:	f04f 0320 	mov.w	r3, #32
    a7bc:	f3ef 8211 	mrs	r2, BASEPRI
    a7c0:	f383 8811 	msr	BASEPRI, r3
    a7c4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    a7c8:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    a7ca:	f003 0407 	and.w	r4, r3, #7
    a7ce:	2c01      	cmp	r4, #1
    a7d0:	d106      	bne.n	a7e0 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    a7d2:	6001      	str	r1, [r0, #0]
	int err = 0;
    a7d4:	2000      	movs	r0, #0
	__asm__ volatile(
    a7d6:	f382 8811 	msr	BASEPRI, r2
    a7da:	f3bf 8f6f 	isb	sy
}
    a7de:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    a7e0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    a7e4:	428b      	cmp	r3, r1
		err = -EALREADY;
    a7e6:	bf14      	ite	ne
    a7e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    a7ec:	f06f 0077 	mvneq.w	r0, #119	; 0x77
    a7f0:	e7f1      	b.n	a7d6 <set_starting_state+0x20>

0000a7f2 <set_on_state>:
	__asm__ volatile(
    a7f2:	f04f 0320 	mov.w	r3, #32
    a7f6:	f3ef 8211 	mrs	r2, BASEPRI
    a7fa:	f383 8811 	msr	BASEPRI, r3
    a7fe:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    a802:	6803      	ldr	r3, [r0, #0]
    a804:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    a808:	f043 0302 	orr.w	r3, r3, #2
    a80c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    a80e:	f382 8811 	msr	BASEPRI, r2
    a812:	f3bf 8f6f 	isb	sy
}
    a816:	4770      	bx	lr

0000a818 <onoff_started_callback>:
	return &data->mgr[type];
    a818:	6900      	ldr	r0, [r0, #16]
{
    a81a:	b410      	push	{r4}
	return &data->mgr[type];
    a81c:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    a81e:	241c      	movs	r4, #28
    a820:	fb03 0004 	mla	r0, r3, r4, r0
    a824:	2100      	movs	r1, #0
}
    a826:	bc10      	pop	{r4}
	notify(mgr, 0);
    a828:	4710      	bx	r2

0000a82a <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    a82a:	2000      	movs	r0, #0
    a82c:	f7fb ba90 	b.w	5d50 <nrfx_clock_start>

0000a830 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    a830:	2000      	movs	r0, #0
    a832:	f7fb babf 	b.w	5db4 <nrfx_clock_stop>

0000a836 <blocking_start_callback>:
{
    a836:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    a838:	f7fd bd6c 	b.w	8314 <z_impl_k_sem_give>

0000a83c <api_stop>:
{
    a83c:	b538      	push	{r3, r4, r5, lr}
    a83e:	b2cc      	uxtb	r4, r1
	err = set_off_state(&subdata->flags, ctx);
    a840:	230c      	movs	r3, #12
{
    a842:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
    a844:	4363      	muls	r3, r4
    a846:	6900      	ldr	r0, [r0, #16]
    a848:	3340      	adds	r3, #64	; 0x40
    a84a:	2180      	movs	r1, #128	; 0x80
    a84c:	4418      	add	r0, r3
    a84e:	f7ff ff99 	bl	a784 <set_off_state>
	if (err < 0) {
    a852:	2800      	cmp	r0, #0
    a854:	db05      	blt.n	a862 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
    a856:	6869      	ldr	r1, [r5, #4]
    a858:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
    a85c:	6863      	ldr	r3, [r4, #4]
    a85e:	4798      	blx	r3
	return 0;
    a860:	2000      	movs	r0, #0
}
    a862:	bd38      	pop	{r3, r4, r5, pc}

0000a864 <api_start>:
{
    a864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a868:	b2cd      	uxtb	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
    a86a:	270c      	movs	r7, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    a86c:	6904      	ldr	r4, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
    a86e:	436f      	muls	r7, r5
{
    a870:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    a872:	f107 0040 	add.w	r0, r7, #64	; 0x40
    a876:	2180      	movs	r1, #128	; 0x80
    a878:	4420      	add	r0, r4
{
    a87a:	4690      	mov	r8, r2
    a87c:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
    a87e:	f7ff ff9a 	bl	a7b6 <set_starting_state>
	if (err < 0) {
    a882:	2800      	cmp	r0, #0
    a884:	db07      	blt.n	a896 <api_start+0x32>
	subdata->cb = cb;
    a886:	443c      	add	r4, r7
	subdata->user_data = user_data;
    a888:	e9c4 890e 	strd	r8, r9, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    a88c:	6873      	ldr	r3, [r6, #4]
    a88e:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
    a892:	4798      	blx	r3
	return 0;
    a894:	2000      	movs	r0, #0
}
    a896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000a89a <ep_ctx_reset>:
	ep_ctx->buf.data = ep_ctx->buf.block.data;
    a89a:	6903      	ldr	r3, [r0, #16]
{
    a89c:	b510      	push	{r4, lr}
	ep_ctx->buf.curr = ep_ctx->buf.data;
    a89e:	e9c0 3305 	strd	r3, r3, [r0, #20]
	ep_ctx->buf.len  = 0U;
    a8a2:	2300      	movs	r3, #0
    a8a4:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
    a8a6:	7f83      	ldrb	r3, [r0, #30]
{
    a8a8:	4604      	mov	r4, r0
	if (ep_ctx->write_in_progress) {
    a8aa:	b113      	cbz	r3, a8b2 <ep_ctx_reset+0x18>
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    a8ac:	7a40      	ldrb	r0, [r0, #9]
    a8ae:	f000 fe67 	bl	b580 <nrfx_usbd_ep_abort>
	ep_ctx->read_complete = true;
    a8b2:	2301      	movs	r3, #1
    a8b4:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
    a8b6:	2300      	movs	r3, #0
    a8b8:	7763      	strb	r3, [r4, #29]
	ep_ctx->trans_zlp = false;
    a8ba:	77e3      	strb	r3, [r4, #31]
	ep_ctx->write_in_progress = false;
    a8bc:	77a3      	strb	r3, [r4, #30]
}
    a8be:	bd10      	pop	{r4, pc}

0000a8c0 <k_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
    a8c0:	f7fd bcae 	b.w	8220 <z_impl_k_mutex_unlock>

0000a8c4 <k_mutex_lock.constprop.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
    a8c4:	f7fd bc34 	b.w	8130 <z_impl_k_mutex_lock>

0000a8c8 <usb_dc_ep_check_cap>:
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    a8c8:	7803      	ldrb	r3, [r0, #0]
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    a8ca:	7901      	ldrb	r1, [r0, #4]
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    a8cc:	f003 020f 	and.w	r2, r3, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    a8d0:	b921      	cbnz	r1, a8dc <usb_dc_ep_check_cap+0x14>
    a8d2:	1e10      	subs	r0, r2, #0
    a8d4:	bf18      	it	ne
    a8d6:	2001      	movne	r0, #1
    a8d8:	4240      	negs	r0, r0
    a8da:	4770      	bx	lr
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
    a8dc:	2a08      	cmp	r2, #8
    a8de:	d806      	bhi.n	a8ee <usb_dc_ep_check_cap+0x26>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    a8e0:	2901      	cmp	r1, #1
    a8e2:	d107      	bne.n	a8f4 <usb_dc_ep_check_cap+0x2c>
    a8e4:	f083 0008 	eor.w	r0, r3, #8
    a8e8:	f340 00c0 	sbfx	r0, r0, #3, #1
    a8ec:	4770      	bx	lr
		return -1;
    a8ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a8f2:	4770      	bx	lr
	return 0;
    a8f4:	2000      	movs	r0, #0
}
    a8f6:	4770      	bx	lr

0000a8f8 <usb_dc_ep_read>:
{
    a8f8:	b570      	push	{r4, r5, r6, lr}
    a8fa:	4604      	mov	r4, r0
    a8fc:	460e      	mov	r6, r1
    a8fe:	4615      	mov	r5, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
    a900:	f7f9 f832 	bl	3968 <usb_dc_ep_read_wait>
	if (ret) {
    a904:	b930      	cbnz	r0, a914 <usb_dc_ep_read+0x1c>
	if (!data && !max_data_len) {
    a906:	b906      	cbnz	r6, a90a <usb_dc_ep_read+0x12>
    a908:	b125      	cbz	r5, a914 <usb_dc_ep_read+0x1c>
	ret = usb_dc_ep_read_continue(ep);
    a90a:	4620      	mov	r0, r4
}
    a90c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = usb_dc_ep_read_continue(ep);
    a910:	f7f9 b872 	b.w	39f8 <usb_dc_ep_read_continue>
}
    a914:	bd70      	pop	{r4, r5, r6, pc}

0000a916 <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
    a916:	b573      	push	{r0, r1, r4, r5, r6, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
    a918:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    a91c:	2908      	cmp	r1, #8
    a91e:	6e66      	ldr	r6, [r4, #100]	; 0x64
    a920:	6e65      	ldr	r5, [r4, #100]	; 0x64
    a922:	6e62      	ldr	r2, [r4, #100]	; 0x64
    a924:	6e63      	ldr	r3, [r4, #100]	; 0x64
	struct nrf_uid dev_id;

	dev_id.id[0] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 1));
    a926:	ea4f 2515 	mov.w	r5, r5, lsr #8
    a92a:	ea4f 6303 	mov.w	r3, r3, lsl #24
    a92e:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
    a932:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
    a936:	ea4f 2202 	mov.w	r2, r2, lsl #8
    a93a:	ea43 0305 	orr.w	r3, r3, r5
    a93e:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
    a942:	ea43 0302 	orr.w	r3, r3, r2
    a946:	9300      	str	r3, [sp, #0]
    a948:	6e26      	ldr	r6, [r4, #96]	; 0x60
    a94a:	6e25      	ldr	r5, [r4, #96]	; 0x60
    a94c:	6e22      	ldr	r2, [r4, #96]	; 0x60
    a94e:	6e23      	ldr	r3, [r4, #96]	; 0x60
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
    a950:	ea4f 2415 	mov.w	r4, r5, lsr #8
    a954:	ea4f 6303 	mov.w	r3, r3, lsl #24
    a958:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
    a95c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
    a960:	ea43 0304 	orr.w	r3, r3, r4
    a964:	ea4f 2402 	mov.w	r4, r2, lsl #8
    a968:	bf28      	it	cs
    a96a:	2108      	movcs	r1, #8
    a96c:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
    a970:	4323      	orrs	r3, r4

	if (length > sizeof(dev_id.id)) {
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
    a972:	460a      	mov	r2, r1
    a974:	460c      	mov	r4, r1
    a976:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
    a978:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
    a97a:	f000 f95f 	bl	ac3c <memcpy>

	return length;
}
    a97e:	4620      	mov	r0, r4
    a980:	b002      	add	sp, #8
    a982:	bd70      	pop	{r4, r5, r6, pc}

0000a984 <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    a984:	4770      	bx	lr

0000a986 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    a986:	4770      	bx	lr

0000a988 <sys_clock_disable>:
    a988:	4770      	bx	lr

0000a98a <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    a98a:	2000      	movs	r0, #0
    a98c:	f7f6 bfe8 	b.w	1960 <sys_reboot>

0000a990 <console_write>:
{
    a990:	b570      	push	{r4, r5, r6, lr}
    a992:	4606      	mov	r6, r0
    a994:	460d      	mov	r5, r1
	for (i = 0; i < cnt; i++) {
    a996:	2400      	movs	r4, #0
    a998:	42ac      	cmp	r4, r5
    a99a:	db00      	blt.n	a99e <console_write+0xe>
}
    a99c:	bd70      	pop	{r4, r5, r6, pc}
		if (console_out((int)str[i]) == EOF) {
    a99e:	5d30      	ldrb	r0, [r6, r4]
    a9a0:	f7f9 faa0 	bl	3ee4 <console_out>
    a9a4:	3001      	adds	r0, #1
    a9a6:	d0f9      	beq.n	a99c <console_write+0xc>
	for (i = 0; i < cnt; i++) {
    a9a8:	3401      	adds	r4, #1
    a9aa:	e7f5      	b.n	a998 <console_write+0x8>

0000a9ac <u32toa>:
{
    a9ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t d = 1;
    a9ae:	2301      	movs	r3, #1
        d *= 10;
    a9b0:	240a      	movs	r4, #10
    while (val / d >= 10) {
    a9b2:	fbb1 f2f3 	udiv	r2, r1, r3
    a9b6:	2a09      	cmp	r2, #9
    a9b8:	d806      	bhi.n	a9c8 <u32toa+0x1c>
    dst = tgt;
    a9ba:	4602      	mov	r2, r0
    int n = 0;
    a9bc:	2500      	movs	r5, #0
        d /= 10;
    a9be:	260a      	movs	r6, #10
    while (d) {
    a9c0:	b923      	cbnz	r3, a9cc <u32toa+0x20>
    *dst = '\0';
    a9c2:	7013      	strb	r3, [r2, #0]
}
    a9c4:	1a10      	subs	r0, r2, r0
    a9c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        d *= 10;
    a9c8:	4363      	muls	r3, r4
    a9ca:	e7f2      	b.n	a9b2 <u32toa+0x6>
        dgt = val / d;
    a9cc:	fbb1 f4f3 	udiv	r4, r1, r3
        d /= 10;
    a9d0:	fbb3 fcf6 	udiv	ip, r3, r6
        val %= d;
    a9d4:	fb03 1714 	mls	r7, r3, r4, r1
        if (n || dgt > 0 || d == 0) {
    a9d8:	b91d      	cbnz	r5, a9e2 <u32toa+0x36>
    a9da:	4299      	cmp	r1, r3
    a9dc:	d201      	bcs.n	a9e2 <u32toa+0x36>
    a9de:	2b09      	cmp	r3, #9
    a9e0:	d803      	bhi.n	a9ea <u32toa+0x3e>
            *dst++ = dgt + '0';
    a9e2:	3430      	adds	r4, #48	; 0x30
    a9e4:	f802 4b01 	strb.w	r4, [r2], #1
            ++n;
    a9e8:	3501      	adds	r5, #1
            *dst++ = dgt + '0';
    a9ea:	4663      	mov	r3, ip
    a9ec:	4639      	mov	r1, r7
    a9ee:	e7e7      	b.n	a9c0 <u32toa+0x14>

0000a9f0 <cbor_encode_text_stringz>:
CBOR_API CborError cbor_encode_negative_int(CborEncoder *encoder, uint64_t absolute_value);
CBOR_API CborError cbor_encode_simple_value(CborEncoder *encoder, uint8_t value);
CBOR_API CborError cbor_encode_tag(CborEncoder *encoder, CborTag tag);
CBOR_API CborError cbor_encode_text_string(CborEncoder *encoder, const char *string, size_t length);
CBOR_INLINE_API CborError cbor_encode_text_stringz(CborEncoder *encoder, const char *string)
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
    a9f0:	b538      	push	{r3, r4, r5, lr}
    a9f2:	4605      	mov	r5, r0
    a9f4:	4608      	mov	r0, r1
    a9f6:	460c      	mov	r4, r1
    a9f8:	f000 f8fd 	bl	abf6 <strlen>
    a9fc:	4621      	mov	r1, r4
    a9fe:	4602      	mov	r2, r0
    aa00:	4628      	mov	r0, r5
    aa02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    aa06:	f002 ba97 	b.w	cf38 <cbor_encode_text_string>

0000aa0a <value_extract>:
 *          CBOR values are always big-endian, so this function converts from
 *          big to little-endian if necessary (@ref CONFIG_BIG_ENDIAN).
 */
static bool value_extract(cbor_decode_state_t * p_state,
		void * const p_result, size_t result_len)
{
    aa0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aa0c:	6803      	ldr	r3, [r0, #0]
    aa0e:	4604      	mov	r4, r0
	cbor_decode_trace();
	cbor_decode_assert(result_len != 0, "0-length result not supported.\n");

	FAIL_AND_DECR_IF(p_state->elem_count == 0);
    aa10:	6880      	ldr	r0, [r0, #8]
{
    aa12:	460d      	mov	r5, r1
    aa14:	4617      	mov	r7, r2
	FAIL_AND_DECR_IF(p_state->elem_count == 0);
    aa16:	b910      	cbnz	r0, aa1e <value_extract+0x14>
    aa18:	3b01      	subs	r3, #1
    aa1a:	6023      	str	r3, [r4, #0]
		(p_state->p_payload) += len;
	}

	(p_state->elem_count)--;
	return true;
}
    aa1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	FAIL_AND_DECR_IF(p_state->p_payload >= p_state->p_payload_end);
    aa1e:	6861      	ldr	r1, [r4, #4]
    aa20:	4299      	cmp	r1, r3
    aa22:	d803      	bhi.n	aa2c <value_extract+0x22>
    aa24:	3b01      	subs	r3, #1
    aa26:	6023      	str	r3, [r4, #0]
		FAIL_AND_DECR_IF((p_state->p_payload + len)
    aa28:	2000      	movs	r0, #0
    aa2a:	e7f7      	b.n	aa1c <value_extract+0x12>
	uint8_t additional = ADDITIONAL(*p_state->p_payload);
    aa2c:	f813 6b01 	ldrb.w	r6, [r3], #1
	(p_state->p_payload)++;
    aa30:	6023      	str	r3, [r4, #0]
	uint8_t additional = ADDITIONAL(*p_state->p_payload);
    aa32:	f006 061f 	and.w	r6, r6, #31
	memset(p_result, 0, result_len);
    aa36:	2100      	movs	r1, #0
    aa38:	4628      	mov	r0, r5
    aa3a:	f000 f92a 	bl	ac92 <memset>
	if (additional <= VALUE_IN_HEADER) {
    aa3e:	2e17      	cmp	r6, #23
    aa40:	d805      	bhi.n	aa4e <value_extract+0x44>
		p_u8_result[0] = additional;
    aa42:	702e      	strb	r6, [r5, #0]
	(p_state->elem_count)--;
    aa44:	68a3      	ldr	r3, [r4, #8]
    aa46:	3b01      	subs	r3, #1
    aa48:	60a3      	str	r3, [r4, #8]
	return true;
    aa4a:	2001      	movs	r0, #1
    aa4c:	e7e6      	b.n	aa1c <value_extract+0x12>
	if (24 <= additional && additional <= 27) {
    aa4e:	3e18      	subs	r6, #24
    aa50:	b2f3      	uxtb	r3, r6
    aa52:	2b03      	cmp	r3, #3
    aa54:	6822      	ldr	r2, [r4, #0]
    aa56:	d807      	bhi.n	aa68 <value_extract+0x5e>
		return 1 << (additional - 24);
    aa58:	2301      	movs	r3, #1
    aa5a:	fa03 f606 	lsl.w	r6, r3, r6
		FAIL_AND_DECR_IF(len > result_len);
    aa5e:	42b7      	cmp	r7, r6
    aa60:	d203      	bcs.n	aa6a <value_extract+0x60>
		FAIL_AND_DECR_IF((p_state->p_payload + len)
    aa62:	3a01      	subs	r2, #1
    aa64:	6022      	str	r2, [r4, #0]
    aa66:	e7df      	b.n	aa28 <value_extract+0x1e>
	return 0;
    aa68:	2600      	movs	r6, #0
		FAIL_AND_DECR_IF((p_state->p_payload + len)
    aa6a:	6861      	ldr	r1, [r4, #4]
    aa6c:	1993      	adds	r3, r2, r6
    aa6e:	4299      	cmp	r1, r3
    aa70:	d3f7      	bcc.n	aa62 <value_extract+0x58>
    aa72:	1e72      	subs	r2, r6, #1
    aa74:	3d01      	subs	r5, #1
		for (uint32_t i = 0; i < len; i++) {
    aa76:	1c51      	adds	r1, r2, #1
    aa78:	6823      	ldr	r3, [r4, #0]
    aa7a:	d102      	bne.n	aa82 <value_extract+0x78>
		(p_state->p_payload) += len;
    aa7c:	441e      	add	r6, r3
    aa7e:	6026      	str	r6, [r4, #0]
    aa80:	e7e0      	b.n	aa44 <value_extract+0x3a>
			p_u8_result[i] = (p_state->p_payload)[len - i - 1];
    aa82:	5c9b      	ldrb	r3, [r3, r2]
    aa84:	f805 3f01 	strb.w	r3, [r5, #1]!
		for (uint32_t i = 0; i < len; i++) {
    aa88:	3a01      	subs	r2, #1
    aa8a:	e7f4      	b.n	aa76 <value_extract+0x6c>

0000aa8c <uint32_decode>:
}


static bool uint32_decode(cbor_decode_state_t * p_state,
		void *p_result, void *p_min_value, void *p_max_value)
{
    aa8c:	b570      	push	{r4, r5, r6, lr}
    aa8e:	4616      	mov	r6, r2
	if (!value_extract(p_state, p_result, 4)) {
    aa90:	2204      	movs	r2, #4
{
    aa92:	460d      	mov	r5, r1
    aa94:	461c      	mov	r4, r3
	if (!value_extract(p_state, p_result, 4)) {
    aa96:	f7ff ffb8 	bl	aa0a <value_extract>
    aa9a:	b158      	cbz	r0, aab4 <uint32_decode+0x28>
		FAIL();
	}

	if (!PTR_VALUE_IN_RANGE(uint32_t, p_result, p_min_value, p_max_value)) {
    aa9c:	b11e      	cbz	r6, aaa6 <uint32_decode+0x1a>
    aa9e:	682a      	ldr	r2, [r5, #0]
    aaa0:	6833      	ldr	r3, [r6, #0]
    aaa2:	429a      	cmp	r2, r3
    aaa4:	d307      	bcc.n	aab6 <uint32_decode+0x2a>
    aaa6:	b12c      	cbz	r4, aab4 <uint32_decode+0x28>
    aaa8:	6828      	ldr	r0, [r5, #0]
    aaaa:	6823      	ldr	r3, [r4, #0]
    aaac:	4298      	cmp	r0, r3
    aaae:	bf8c      	ite	hi
    aab0:	2000      	movhi	r0, #0
    aab2:	2001      	movls	r0, #1
		FAIL();
	}
	cbor_decode_print("val: %u\r\n", *(uint32_t *)p_result);
	return true;
}
    aab4:	bd70      	pop	{r4, r5, r6, pc}
		FAIL();
    aab6:	2000      	movs	r0, #0
    aab8:	e7fc      	b.n	aab4 <uint32_decode+0x28>

0000aaba <intx32_decode>:
{
    aaba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aabc:	461d      	mov	r5, r3
	uint8_t major_type = MAJOR_TYPE(*p_state->p_payload);
    aabe:	6803      	ldr	r3, [r0, #0]
    aac0:	781b      	ldrb	r3, [r3, #0]
	if (major_type != CBOR_MAJOR_TYPE_PINT
    aac2:	2b3f      	cmp	r3, #63	; 0x3f
{
    aac4:	460c      	mov	r4, r1
    aac6:	4616      	mov	r6, r2
	uint8_t major_type = MAJOR_TYPE(*p_state->p_payload);
    aac8:	ea4f 1753 	mov.w	r7, r3, lsr #5
	if (major_type != CBOR_MAJOR_TYPE_PINT
    aacc:	d901      	bls.n	aad2 <intx32_decode+0x18>
		FAIL();
    aace:	2000      	movs	r0, #0
}
    aad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!value_extract(p_state, p_result, 4)) {
    aad2:	2204      	movs	r2, #4
    aad4:	f7ff ff99 	bl	aa0a <value_extract>
    aad8:	2800      	cmp	r0, #0
    aada:	d0f8      	beq.n	aace <intx32_decode+0x14>
	if (*p_result < 0) {
    aadc:	6823      	ldr	r3, [r4, #0]
    aade:	2b00      	cmp	r3, #0
    aae0:	dbf5      	blt.n	aace <intx32_decode+0x14>
	if (major_type == CBOR_MAJOR_TYPE_NINT) {
    aae2:	2f01      	cmp	r7, #1
		*p_result = 1 - *p_result;
    aae4:	bf04      	itt	eq
    aae6:	f1c3 0301 	rsbeq	r3, r3, #1
    aaea:	6023      	streq	r3, [r4, #0]
	if (!PTR_VALUE_IN_RANGE(int32_t, p_result, p_min_value, p_max_value)) {
    aaec:	b11e      	cbz	r6, aaf6 <intx32_decode+0x3c>
    aaee:	6822      	ldr	r2, [r4, #0]
    aaf0:	6833      	ldr	r3, [r6, #0]
    aaf2:	429a      	cmp	r2, r3
    aaf4:	dbeb      	blt.n	aace <intx32_decode+0x14>
    aaf6:	2d00      	cmp	r5, #0
    aaf8:	d0ea      	beq.n	aad0 <intx32_decode+0x16>
    aafa:	6820      	ldr	r0, [r4, #0]
    aafc:	682b      	ldr	r3, [r5, #0]
    aafe:	4298      	cmp	r0, r3
    ab00:	bfcc      	ite	gt
    ab02:	2000      	movgt	r0, #0
    ab04:	2001      	movle	r0, #1
    ab06:	e7e3      	b.n	aad0 <intx32_decode+0x16>

0000ab08 <strx_start_decode>:
}


bool strx_start_decode(cbor_decode_state_t * p_state,
		cbor_string_type_t *p_result, void *p_min_len, void *p_max_len)
{
    ab08:	b570      	push	{r4, r5, r6, lr}
    ab0a:	460d      	mov	r5, r1
	uint8_t major_type = MAJOR_TYPE(*p_state->p_payload);
    ab0c:	6801      	ldr	r1, [r0, #0]
    ab0e:	780c      	ldrb	r4, [r1, #0]
    ab10:	0964      	lsrs	r4, r4, #5
	cbor_string_type_t *p_str_result = (cbor_string_type_t *)p_result;

	if (major_type != CBOR_MAJOR_TYPE_BSTR
    ab12:	3c02      	subs	r4, #2
    ab14:	2c01      	cmp	r4, #1
{
    ab16:	4606      	mov	r6, r0
	if (major_type != CBOR_MAJOR_TYPE_BSTR
    ab18:	d901      	bls.n	ab1e <strx_start_decode+0x16>
		&& major_type != CBOR_MAJOR_TYPE_TSTR) {
		/* Value to be read doesn't have the right type. */
		FAIL();
    ab1a:	2000      	movs	r0, #0
			(size_t *)p_max_len)) {
		FAIL();
	}
	p_str_result->value = p_state->p_payload;
	return true;
}
    ab1c:	bd70      	pop	{r4, r5, r6, pc}
	return uint32_decode(p_state,
    ab1e:	1d29      	adds	r1, r5, #4
    ab20:	f7ff ffb4 	bl	aa8c <uint32_decode>
	if (!size_decode(p_state,
    ab24:	2800      	cmp	r0, #0
    ab26:	d0f8      	beq.n	ab1a <strx_start_decode+0x12>
	p_str_result->value = p_state->p_payload;
    ab28:	6833      	ldr	r3, [r6, #0]
    ab2a:	602b      	str	r3, [r5, #0]
	return true;
    ab2c:	e7f6      	b.n	ab1c <strx_start_decode+0x14>

0000ab2e <strx_decode>:


bool strx_decode(cbor_decode_state_t * p_state,
		cbor_string_type_t *p_result, void *p_min_len, void *p_max_len)
{
    ab2e:	b538      	push	{r3, r4, r5, lr}
    ab30:	4604      	mov	r4, r0
    ab32:	460d      	mov	r5, r1
	if (!strx_start_decode(p_state, p_result,
    ab34:	f7ff ffe8 	bl	ab08 <strx_start_decode>
    ab38:	b118      	cbz	r0, ab42 <strx_decode+0x14>
				p_min_len, p_max_len)) {
		return false;
	}
	(p_state->p_payload) += p_result->len;
    ab3a:	6823      	ldr	r3, [r4, #0]
    ab3c:	686a      	ldr	r2, [r5, #4]
    ab3e:	4413      	add	r3, r2
    ab40:	6023      	str	r3, [r4, #0]
	return true;
}
    ab42:	bd38      	pop	{r3, r4, r5, pc}

0000ab44 <list_start_decode>:


bool list_start_decode(cbor_decode_state_t * p_state,
		size_t *p_result, size_t min_num, size_t max_num)
{
    ab44:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ab46:	e9cd 3200 	strd	r3, r2, [sp]
	uint8_t major_type = MAJOR_TYPE(*p_state->p_payload);
    ab4a:	6803      	ldr	r3, [r0, #0]
    ab4c:	781e      	ldrb	r6, [r3, #0]

	*p_result = p_state->elem_count;
    ab4e:	6883      	ldr	r3, [r0, #8]
    ab50:	600b      	str	r3, [r1, #0]
	uint8_t major_type = MAJOR_TYPE(*p_state->p_payload);
    ab52:	0976      	lsrs	r6, r6, #5

	if (major_type != CBOR_MAJOR_TYPE_LIST
    ab54:	1f33      	subs	r3, r6, #4
    ab56:	2b01      	cmp	r3, #1
{
    ab58:	4604      	mov	r4, r0
    ab5a:	460d      	mov	r5, r1
	if (major_type != CBOR_MAJOR_TYPE_LIST
    ab5c:	d902      	bls.n	ab64 <list_start_decode+0x20>
		&& major_type != CBOR_MAJOR_TYPE_MAP) {
		FAIL();
    ab5e:	2000      	movs	r0, #0
	}
	size_t tmp = *p_result;
	*p_result = p_state->elem_count;
	p_state->elem_count = major_type == CBOR_MAJOR_TYPE_MAP ? tmp * 2 : tmp;
	return true;
}
    ab60:	b002      	add	sp, #8
    ab62:	bd70      	pop	{r4, r5, r6, pc}
	if (!uint32_decode(p_state,
    ab64:	466b      	mov	r3, sp
    ab66:	aa01      	add	r2, sp, #4
    ab68:	f7ff ff90 	bl	aa8c <uint32_decode>
    ab6c:	2800      	cmp	r0, #0
    ab6e:	d0f6      	beq.n	ab5e <list_start_decode+0x1a>
	size_t tmp = *p_result;
    ab70:	682b      	ldr	r3, [r5, #0]
	*p_result = p_state->elem_count;
    ab72:	68a2      	ldr	r2, [r4, #8]
    ab74:	602a      	str	r2, [r5, #0]
	p_state->elem_count = major_type == CBOR_MAJOR_TYPE_MAP ? tmp * 2 : tmp;
    ab76:	2e05      	cmp	r6, #5
    ab78:	bf08      	it	eq
    ab7a:	005b      	lsleq	r3, r3, #1
    ab7c:	60a3      	str	r3, [r4, #8]
	return true;
    ab7e:	e7ef      	b.n	ab60 <list_start_decode+0x1c>

0000ab80 <multi_decode>:
		cbor_decode_state_t * p_state,
		void *p_result,
		void *p_min_result,
		void *p_max_result,
		size_t result_len)
{
    ab80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ab84:	460f      	mov	r7, r1
    ab86:	e9dd 510c 	ldrd	r5, r1, [sp, #48]	; 0x30
    ab8a:	4680      	mov	r8, r0
    ab8c:	4616      	mov	r6, r2
    ab8e:	4699      	mov	r9, r3
	for (size_t i = 0; i < max_decode; i++) {
    ab90:	2400      	movs	r4, #0
    ab92:	42bc      	cmp	r4, r7
    ab94:	d102      	bne.n	ab9c <multi_decode+0x1c>
			}
			return true;
		}
	}
	cbor_decode_print("Found %zu elements.\n", max_decode);
	*p_num_decode = max_decode;
    ab96:	6034      	str	r4, [r6, #0]
	return true;
    ab98:	2001      	movs	r0, #1
    ab9a:	e016      	b.n	abca <multi_decode+0x4a>
		if (!decoder(p_state,
    ab9c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    aba0:	4628      	mov	r0, r5
    aba2:	9101      	str	r1, [sp, #4]
		uint8_t const *p_payload_bak = p_state->p_payload;
    aba4:	f8d5 b000 	ldr.w	fp, [r5]
		size_t elem_count_bak = p_state->elem_count;
    aba8:	f8d5 a008 	ldr.w	sl, [r5, #8]
		if (!decoder(p_state,
    abac:	47c8      	blx	r9
    abae:	9b10      	ldr	r3, [sp, #64]	; 0x40
    abb0:	9901      	ldr	r1, [sp, #4]
    abb2:	4419      	add	r1, r3
    abb4:	b960      	cbnz	r0, abd0 <multi_decode+0x50>
			if (i < min_decode) {
    abb6:	4544      	cmp	r4, r8
			*p_num_decode = i;
    abb8:	6034      	str	r4, [r6, #0]
			if (i < min_decode) {
    abba:	bf38      	it	cc
    abbc:	2000      	movcc	r0, #0
			p_state->p_payload = p_payload_bak;
    abbe:	f8c5 b000 	str.w	fp, [r5]
			p_state->elem_count = elem_count_bak;
    abc2:	f8c5 a008 	str.w	sl, [r5, #8]
			if (i < min_decode) {
    abc6:	bf28      	it	cs
    abc8:	2001      	movcs	r0, #1
}
    abca:	b003      	add	sp, #12
    abcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < max_decode; i++) {
    abd0:	3401      	adds	r4, #1
    abd2:	e7de      	b.n	ab92 <multi_decode+0x12>

0000abd4 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    abd4:	2100      	movs	r1, #0
    abd6:	2001      	movs	r0, #1
    abd8:	f000 b800 	b.w	abdc <z_arm_fatal_error>

0000abdc <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    abdc:	f002 b9ee 	b.w	cfbc <z_fatal_error>

0000abe0 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    abe0:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    abe2:	6800      	ldr	r0, [r0, #0]
    abe4:	f002 b9ea 	b.w	cfbc <z_fatal_error>

0000abe8 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    abe8:	b508      	push	{r3, lr}
	handler();
    abea:	f7f9 ff1f 	bl	4a2c <z_SysNmiOnReset>
	z_arm_int_exit();
}
    abee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    abf2:	f7fa b873 	b.w	4cdc <z_arm_exc_exit>

0000abf6 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    abf6:	4603      	mov	r3, r0
	size_t n = 0;
    abf8:	2000      	movs	r0, #0

	while (*s != '\0') {
    abfa:	5c1a      	ldrb	r2, [r3, r0]
    abfc:	b902      	cbnz	r2, ac00 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    abfe:	4770      	bx	lr
		n++;
    ac00:	3001      	adds	r0, #1
    ac02:	e7fa      	b.n	abfa <strlen+0x4>

0000ac04 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    ac04:	1e43      	subs	r3, r0, #1
    ac06:	3901      	subs	r1, #1
    ac08:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    ac0c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    ac10:	4282      	cmp	r2, r0
    ac12:	d101      	bne.n	ac18 <strcmp+0x14>
    ac14:	2a00      	cmp	r2, #0
    ac16:	d1f7      	bne.n	ac08 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    ac18:	1a10      	subs	r0, r2, r0
    ac1a:	4770      	bx	lr

0000ac1c <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    ac1c:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    ac1e:	b15a      	cbz	r2, ac38 <memcmp+0x1c>
    ac20:	3901      	subs	r1, #1
    ac22:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    ac24:	f810 2b01 	ldrb.w	r2, [r0], #1
    ac28:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    ac2c:	42a0      	cmp	r0, r4
    ac2e:	d001      	beq.n	ac34 <memcmp+0x18>
    ac30:	429a      	cmp	r2, r3
    ac32:	d0f7      	beq.n	ac24 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    ac34:	1ad0      	subs	r0, r2, r3
}
    ac36:	bd10      	pop	{r4, pc}
		return 0;
    ac38:	4610      	mov	r0, r2
    ac3a:	e7fc      	b.n	ac36 <memcmp+0x1a>

0000ac3c <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    ac3c:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    ac3e:	ea81 0400 	eor.w	r4, r1, r0
    ac42:	07a5      	lsls	r5, r4, #30
    ac44:	4603      	mov	r3, r0
    ac46:	d00b      	beq.n	ac60 <memcpy+0x24>
    ac48:	3b01      	subs	r3, #1
    ac4a:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    ac4c:	4291      	cmp	r1, r2
    ac4e:	d11b      	bne.n	ac88 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    ac50:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    ac52:	2a00      	cmp	r2, #0
    ac54:	d0fc      	beq.n	ac50 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    ac56:	f811 4b01 	ldrb.w	r4, [r1], #1
    ac5a:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    ac5e:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
    ac60:	079c      	lsls	r4, r3, #30
    ac62:	d1f6      	bne.n	ac52 <memcpy+0x16>
    ac64:	f022 0403 	bic.w	r4, r2, #3
    ac68:	1f1d      	subs	r5, r3, #4
    ac6a:	0896      	lsrs	r6, r2, #2
    ac6c:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    ac6e:	42b9      	cmp	r1, r7
    ac70:	d105      	bne.n	ac7e <memcpy+0x42>
    ac72:	f06f 0503 	mvn.w	r5, #3
    ac76:	fb05 2206 	mla	r2, r5, r6, r2
    ac7a:	4423      	add	r3, r4
    ac7c:	e7e4      	b.n	ac48 <memcpy+0xc>
			*(d_word++) = *(s_word++);
    ac7e:	f851 cb04 	ldr.w	ip, [r1], #4
    ac82:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
    ac86:	e7f2      	b.n	ac6e <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
    ac88:	f811 4b01 	ldrb.w	r4, [r1], #1
    ac8c:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    ac90:	e7dc      	b.n	ac4c <memcpy+0x10>

0000ac92 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    ac92:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    ac94:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    ac96:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    ac98:	079c      	lsls	r4, r3, #30
    ac9a:	d111      	bne.n	acc0 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    ac9c:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    aca0:	f022 0603 	bic.w	r6, r2, #3
    aca4:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    aca8:	441e      	add	r6, r3
    acaa:	0894      	lsrs	r4, r2, #2
    acac:	42b3      	cmp	r3, r6
    acae:	d10d      	bne.n	accc <memset+0x3a>
    acb0:	f06f 0503 	mvn.w	r5, #3
    acb4:	fb05 2204 	mla	r2, r5, r4, r2
    acb8:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    acba:	4293      	cmp	r3, r2
    acbc:	d109      	bne.n	acd2 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    acbe:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    acc0:	2a00      	cmp	r2, #0
    acc2:	d0fc      	beq.n	acbe <memset+0x2c>
		*(d_byte++) = c_byte;
    acc4:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    acc8:	3a01      	subs	r2, #1
    acca:	e7e5      	b.n	ac98 <memset+0x6>
		*(d_word++) = c_word;
    accc:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
    acd0:	e7ec      	b.n	acac <memset+0x1a>
		*(d_byte++) = c_byte;
    acd2:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    acd6:	e7f0      	b.n	acba <memset+0x28>

0000acd8 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
    acd8:	f7fa bf66 	b.w	5ba8 <SystemInit>

0000acdc <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
void pm_power_state_set(struct pm_state_info info)
{
    acdc:	b084      	sub	sp, #16
    acde:	ab04      	add	r3, sp, #16
    ace0:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    ace4:	f89d 3004 	ldrb.w	r3, [sp, #4]
    ace8:	2b06      	cmp	r3, #6
    acea:	d108      	bne.n	acfe <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    acec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    acf0:	2201      	movs	r2, #1
    acf2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    acf6:	f3bf 8f4f 	dsb	sy
        __WFE();
    acfa:	bf20      	wfe
    while (true)
    acfc:	e7fd      	b.n	acfa <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    acfe:	b004      	add	sp, #16
    ad00:	4770      	bx	lr

0000ad02 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    ad02:	b084      	sub	sp, #16
    ad04:	ab04      	add	r3, sp, #16
    ad06:	e903 0007 	stmdb	r3, {r0, r1, r2}
    ad0a:	2300      	movs	r3, #0
    ad0c:	f383 8811 	msr	BASEPRI, r3
    ad10:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    ad14:	b004      	add	sp, #16
    ad16:	4770      	bx	lr

0000ad18 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
    ad18:	b570      	push	{r4, r5, r6, lr}
    ad1a:	460e      	mov	r6, r1
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    ad1c:	6801      	ldr	r1, [r0, #0]
{
    ad1e:	4615      	mov	r5, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    ad20:	b189      	cbz	r1, ad46 <gpio_fire_callbacks+0x2e>
	return node->next;
    ad22:	680c      	ldr	r4, [r1, #0]
    ad24:	2c00      	cmp	r4, #0
    ad26:	bf38      	it	cc
    ad28:	2400      	movcc	r4, #0
		if (cb->pin_mask & pins) {
    ad2a:	688a      	ldr	r2, [r1, #8]
    ad2c:	402a      	ands	r2, r5
    ad2e:	d002      	beq.n	ad36 <gpio_fire_callbacks+0x1e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    ad30:	684b      	ldr	r3, [r1, #4]
    ad32:	4630      	mov	r0, r6
    ad34:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    ad36:	b134      	cbz	r4, ad46 <gpio_fire_callbacks+0x2e>
    ad38:	6823      	ldr	r3, [r4, #0]
    ad3a:	2b00      	cmp	r3, #0
    ad3c:	bf38      	it	cc
    ad3e:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    ad40:	4621      	mov	r1, r4
    ad42:	461c      	mov	r4, r3
    ad44:	e7f1      	b.n	ad2a <gpio_fire_callbacks+0x12>
		}
	}
}
    ad46:	bd70      	pop	{r4, r5, r6, pc}

0000ad48 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    ad48:	6843      	ldr	r3, [r0, #4]
    ad4a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    ad4c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    ad50:	600b      	str	r3, [r1, #0]
}
    ad52:	2000      	movs	r0, #0
    ad54:	4770      	bx	lr

0000ad56 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    ad56:	6843      	ldr	r3, [r0, #4]
    ad58:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    ad5a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    ad5e:	4042      	eors	r2, r0
    ad60:	400a      	ands	r2, r1
    ad62:	4042      	eors	r2, r0
    p_reg->OUT = value;
    ad64:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    ad68:	2000      	movs	r0, #0
    ad6a:	4770      	bx	lr

0000ad6c <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    ad6c:	6843      	ldr	r3, [r0, #4]
    ad6e:	685b      	ldr	r3, [r3, #4]
}
    ad70:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    ad72:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    ad76:	4770      	bx	lr

0000ad78 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    ad78:	6843      	ldr	r3, [r0, #4]
    ad7a:	685b      	ldr	r3, [r3, #4]
}
    ad7c:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    ad7e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    ad82:	4770      	bx	lr

0000ad84 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    ad84:	6843      	ldr	r3, [r0, #4]
    ad86:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    ad88:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    ad8c:	404b      	eors	r3, r1
    p_reg->OUT = value;
    ad8e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    ad92:	2000      	movs	r0, #0
    ad94:	4770      	bx	lr

0000ad96 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    ad96:	6903      	ldr	r3, [r0, #16]
Z_GENLIST_IS_EMPTY(slist)
    ad98:	6858      	ldr	r0, [r3, #4]
{
    ad9a:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    ad9c:	b158      	cbz	r0, adb6 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    ad9e:	2400      	movs	r4, #0
    ada0:	4281      	cmp	r1, r0
    ada2:	d113      	bne.n	adcc <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
    ada4:	6808      	ldr	r0, [r1, #0]
    ada6:	b95c      	cbnz	r4, adc0 <gpio_nrfx_manage_callback+0x2a>
    ada8:	689c      	ldr	r4, [r3, #8]
	list->head = node;
    adaa:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    adac:	42a1      	cmp	r1, r4
    adae:	d100      	bne.n	adb2 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    adb0:	6098      	str	r0, [r3, #8]
	parent->next = child;
    adb2:	2000      	movs	r0, #0
    adb4:	6008      	str	r0, [r1, #0]
	if (set) {
    adb6:	b972      	cbnz	r2, add6 <gpio_nrfx_manage_callback+0x40>
	return 0;
    adb8:	2000      	movs	r0, #0
}
    adba:	bd30      	pop	{r4, r5, pc}
    adbc:	4628      	mov	r0, r5
    adbe:	e7ef      	b.n	ada0 <gpio_nrfx_manage_callback+0xa>
    adc0:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    adc2:	6898      	ldr	r0, [r3, #8]
    adc4:	4281      	cmp	r1, r0
	list->tail = node;
    adc6:	bf08      	it	eq
    adc8:	609c      	streq	r4, [r3, #8]
}
    adca:	e7f2      	b.n	adb2 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    adcc:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    adce:	4604      	mov	r4, r0
    add0:	2d00      	cmp	r5, #0
    add2:	d1f3      	bne.n	adbc <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    add4:	b13a      	cbz	r2, ade6 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
    add6:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    add8:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    adda:	6898      	ldr	r0, [r3, #8]
	list->head = node;
    addc:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    adde:	2800      	cmp	r0, #0
    ade0:	d1ea      	bne.n	adb8 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    ade2:	6099      	str	r1, [r3, #8]
}
    ade4:	e7e9      	b.n	adba <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    ade6:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    adea:	e7e6      	b.n	adba <gpio_nrfx_manage_callback+0x24>

0000adec <cfg_level_pins>:
{
    adec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct gpio_nrfx_data *data = get_port_data(port);
    adf0:	6907      	ldr	r7, [r0, #16]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    adf2:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
    adf6:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    adf8:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
    adfc:	4313      	orrs	r3, r2
    adfe:	ea24 0403 	bic.w	r4, r4, r3
	uint32_t bit = 1U << pin;
    ae02:	2601      	movs	r6, #1
	uint32_t pin = 0U;
    ae04:	2500      	movs	r5, #0
	while (level_pins) {
    ae06:	b90c      	cbnz	r4, ae0c <cfg_level_pins+0x20>
}
    ae08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
    ae0c:	4226      	tst	r6, r4
    ae0e:	d010      	beq.n	ae32 <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    ae10:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    ae12:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
    ae16:	40e9      	lsrs	r1, r5
    ae18:	f001 0101 	and.w	r1, r1, #1
    ae1c:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    ae20:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    ae24:	b2c9      	uxtb	r1, r1
    ae26:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
    ae2a:	f7fa f931 	bl	5090 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    ae2e:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
    ae32:	3501      	adds	r5, #1
		bit <<= 1;
    ae34:	0076      	lsls	r6, r6, #1
    ae36:	e7e6      	b.n	ae06 <cfg_level_pins+0x1a>

0000ae38 <is_regular_addr_valid>:
{
    ae38:	b538      	push	{r3, r4, r5, lr}
    ae3a:	4604      	mov	r4, r0
    ae3c:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
    ae3e:	f000 fac8 	bl	b3d2 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
    ae42:	4284      	cmp	r4, r0
    ae44:	d209      	bcs.n	ae5a <is_regular_addr_valid+0x22>
    ae46:	2c00      	cmp	r4, #0
    ae48:	db07      	blt.n	ae5a <is_regular_addr_valid+0x22>
	    addr < 0 ||
    ae4a:	42a8      	cmp	r0, r5
    ae4c:	d305      	bcc.n	ae5a <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
    ae4e:	442c      	add	r4, r5
	    len > flash_size ||
    ae50:	4284      	cmp	r4, r0
    ae52:	bf8c      	ite	hi
    ae54:	2000      	movhi	r0, #0
    ae56:	2001      	movls	r0, #1
}
    ae58:	bd38      	pop	{r3, r4, r5, pc}
		return false;
    ae5a:	2000      	movs	r0, #0
    ae5c:	e7fc      	b.n	ae58 <is_regular_addr_valid+0x20>

0000ae5e <flash_nrf_read>:
{
    ae5e:	b570      	push	{r4, r5, r6, lr}
    ae60:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
    ae62:	4628      	mov	r0, r5
    ae64:	4619      	mov	r1, r3
{
    ae66:	4616      	mov	r6, r2
    ae68:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    ae6a:	f7ff ffe5 	bl	ae38 <is_regular_addr_valid>
    ae6e:	b138      	cbz	r0, ae80 <flash_nrf_read+0x22>
	if (!len) {
    ae70:	b14c      	cbz	r4, ae86 <flash_nrf_read+0x28>
	memcpy(data, (void *)addr, len);
    ae72:	4622      	mov	r2, r4
    ae74:	4629      	mov	r1, r5
    ae76:	4630      	mov	r0, r6
    ae78:	f7ff fee0 	bl	ac3c <memcpy>
	return 0;
    ae7c:	2000      	movs	r0, #0
}
    ae7e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    ae80:	f06f 0015 	mvn.w	r0, #21
    ae84:	e7fb      	b.n	ae7e <flash_nrf_read+0x20>
		return 0;
    ae86:	4620      	mov	r0, r4
    ae88:	e7f9      	b.n	ae7e <flash_nrf_read+0x20>

0000ae8a <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
				   bool use_addr, struct flash_pages_info *info)
{
    ae8a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    ae8e:	461e      	mov	r6, r3
	off_t group_offs = 0;
	uint32_t num_in_group;
	off_t end = 0;
	size_t layout_size;

	api->page_layout(dev, &layout, &layout_size);
    ae90:	6883      	ldr	r3, [r0, #8]
{
    ae92:	460c      	mov	r4, r1
	api->page_layout(dev, &layout, &layout_size);
    ae94:	695b      	ldr	r3, [r3, #20]
    ae96:	4669      	mov	r1, sp
{
    ae98:	4617      	mov	r7, r2
	api->page_layout(dev, &layout, &layout_size);
    ae9a:	aa01      	add	r2, sp, #4
    ae9c:	4798      	blx	r3

	while (layout_size--) {
    ae9e:	e9dd 1000 	ldrd	r1, r0, [sp]
    aea2:	2300      	movs	r3, #0
    aea4:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
	off_t end = 0;
    aea8:	461d      	mov	r5, r3
	off_t group_offs = 0;
    aeaa:	469e      	mov	lr, r3
	size_t page_count = 0;
    aeac:	469c      	mov	ip, r3
	while (layout_size--) {
    aeae:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    aeb2:	d102      	bne.n	aeba <flash_get_page_info+0x30>
		page_count += layout->pages_count;

		layout++;
	}

	return -EINVAL; /* page of the index doesn't exist */
    aeb4:	f06f 0015 	mvn.w	r0, #21
    aeb8:	e018      	b.n	aeec <flash_get_page_info+0x62>
		if (use_addr) {
    aeba:	680a      	ldr	r2, [r1, #0]
    aebc:	b1cf      	cbz	r7, aef2 <flash_get_page_info+0x68>
			end += layout->pages_count * layout->pages_size;
    aebe:	6848      	ldr	r0, [r1, #4]
    aec0:	fb00 5502 	mla	r5, r0, r2, r5
		if (offs < end) {
    aec4:	42a5      	cmp	r5, r4
    aec6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    aeca:	dd17      	ble.n	aefc <flash_get_page_info+0x72>
    aecc:	b103      	cbz	r3, aed0 <flash_get_page_info+0x46>
    aece:	9100      	str	r1, [sp, #0]
			info->size = layout->pages_size;
    aed0:	9b00      	ldr	r3, [sp, #0]
    aed2:	685b      	ldr	r3, [r3, #4]
    aed4:	6073      	str	r3, [r6, #4]
			if (use_addr) {
    aed6:	b177      	cbz	r7, aef6 <flash_get_page_info+0x6c>
				num_in_group = (offs - group_offs) /
    aed8:	eba4 040e 	sub.w	r4, r4, lr
    aedc:	fbb4 f4f3 	udiv	r4, r4, r3
			info->start_offset = group_offs +
    aee0:	fb04 e303 	mla	r3, r4, r3, lr
			info->index = page_count + num_in_group;
    aee4:	4464      	add	r4, ip
			info->start_offset = group_offs +
    aee6:	6033      	str	r3, [r6, #0]
			info->index = page_count + num_in_group;
    aee8:	60b4      	str	r4, [r6, #8]
			return 0;
    aeea:	2000      	movs	r0, #0
}
    aeec:	b002      	add	sp, #8
    aeee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			end += layout->pages_count;
    aef2:	4415      	add	r5, r2
    aef4:	e7e6      	b.n	aec4 <flash_get_page_info+0x3a>
				num_in_group = offs - page_count;
    aef6:	eba4 040c 	sub.w	r4, r4, ip
    aefa:	e7f1      	b.n	aee0 <flash_get_page_info+0x56>
		group_offs += layout->pages_count * layout->pages_size;
    aefc:	684b      	ldr	r3, [r1, #4]
		page_count += layout->pages_count;
    aefe:	4494      	add	ip, r2
		group_offs += layout->pages_count * layout->pages_size;
    af00:	fb03 ee02 	mla	lr, r3, r2, lr
		layout++;
    af04:	3108      	adds	r1, #8
    af06:	2301      	movs	r3, #1
    af08:	e7d1      	b.n	aeae <flash_get_page_info+0x24>

0000af0a <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
    af0a:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, true, info);
    af0c:	2201      	movs	r2, #1
    af0e:	f7ff bfbc 	b.w	ae8a <flash_get_page_info>

0000af12 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
    af12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
    af16:	6883      	ldr	r3, [r0, #8]
{
    af18:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
    af1a:	695b      	ldr	r3, [r3, #20]
{
    af1c:	4688      	mov	r8, r1
    af1e:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
    af20:	a901      	add	r1, sp, #4
    af22:	aa02      	add	r2, sp, #8
    af24:	4798      	blx	r3
	off_t off = 0;
    af26:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
    af28:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
    af2a:	4625      	mov	r5, r4
    af2c:	9b02      	ldr	r3, [sp, #8]
    af2e:	42ab      	cmp	r3, r5
    af30:	d802      	bhi.n	af38 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
    af32:	b006      	add	sp, #24
    af34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
    af38:	9f01      	ldr	r7, [sp, #4]
    af3a:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
    af3e:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
    af40:	687b      	ldr	r3, [r7, #4]
    af42:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    af44:	683a      	ldr	r2, [r7, #0]
    af46:	42b2      	cmp	r2, r6
    af48:	eb0a 0306 	add.w	r3, sl, r6
    af4c:	d802      	bhi.n	af54 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
    af4e:	3501      	adds	r5, #1
    af50:	469a      	mov	sl, r3
    af52:	e7eb      	b.n	af2c <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
    af54:	4649      	mov	r1, r9
    af56:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
    af58:	9403      	str	r4, [sp, #12]
			page_info.index = page;
    af5a:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
    af5c:	47c0      	blx	r8
    af5e:	2800      	cmp	r0, #0
    af60:	d0e7      	beq.n	af32 <flash_page_foreach+0x20>
			off += page_info.size;
    af62:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    af64:	3601      	adds	r6, #1
			off += page_info.size;
    af66:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
    af68:	e7ec      	b.n	af44 <flash_page_foreach+0x32>

0000af6a <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    af6a:	6843      	ldr	r3, [r0, #4]
    af6c:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    af6e:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    af72:	05d1      	lsls	r1, r2, #23
{
    af74:	b410      	push	{r4}
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    af76:	d518      	bpl.n	afaa <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    af78:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    af7c:	b1aa      	cbz	r2, afaa <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
    af7e:	f04f 0120 	mov.w	r1, #32
    af82:	f3ef 8211 	mrs	r2, BASEPRI
    af86:	f381 8811 	msr	BASEPRI, r1
    af8a:	f3bf 8f6f 	isb	sy
    af8e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    af92:	b131      	cbz	r1, afa2 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    af94:	2100      	movs	r1, #0
    af96:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    af9a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    af9e:	2101      	movs	r1, #1
    afa0:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    afa2:	f382 8811 	msr	BASEPRI, r2
    afa6:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    afaa:	6842      	ldr	r2, [r0, #4]
    afac:	6852      	ldr	r2, [r2, #4]
    afae:	06d2      	lsls	r2, r2, #27
    afb0:	d51a      	bpl.n	afe8 <uarte_nrfx_isr_int+0x7e>
	__asm__ volatile(
    afb2:	f04f 0220 	mov.w	r2, #32
    afb6:	f3ef 8111 	mrs	r1, BASEPRI
    afba:	f382 8811 	msr	BASEPRI, r2
    afbe:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    afc2:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    afc6:	b112      	cbz	r2, afce <uarte_nrfx_isr_int+0x64>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    afc8:	2200      	movs	r2, #0
    afca:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
    afce:	6902      	ldr	r2, [r0, #16]
    afd0:	68d2      	ldr	r2, [r2, #12]
    afd2:	b10a      	cbz	r2, afd8 <uarte_nrfx_isr_int+0x6e>
    afd4:	6912      	ldr	r2, [r2, #16]
    afd6:	b91a      	cbnz	r2, afe0 <uarte_nrfx_isr_int+0x76>
    p_reg->INTENCLR = mask;
    afd8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    afdc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
    afe0:	f381 8811 	msr	BASEPRI, r1
    afe4:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
    afe8:	6902      	ldr	r2, [r0, #16]
    afea:	68d2      	ldr	r2, [r2, #12]
    afec:	b15a      	cbz	r2, b006 <uarte_nrfx_isr_int+0x9c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    afee:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    aff2:	b151      	cbz	r1, b00a <uarte_nrfx_isr_int+0xa0>
		if (data->int_driven->disable_tx_irq) {
    aff4:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
    aff6:	2100      	movs	r1, #0
    aff8:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
    affa:	b134      	cbz	r4, b00a <uarte_nrfx_isr_int+0xa0>
    p_reg->INTENCLR = mask;
    affc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    b000:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
    b004:	7391      	strb	r1, [r2, #14]
}
    b006:	bc10      	pop	{r4}
    b008:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b00a:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    b00e:	b121      	cbz	r1, b01a <uarte_nrfx_isr_int+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b010:	2100      	movs	r1, #0
    b012:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
    b016:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
    b01a:	6813      	ldr	r3, [r2, #0]
    b01c:	2b00      	cmp	r3, #0
    b01e:	d0f2      	beq.n	b006 <uarte_nrfx_isr_int+0x9c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
    b020:	6851      	ldr	r1, [r2, #4]
}
    b022:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
    b024:	4718      	bx	r3

0000b026 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    b026:	6902      	ldr	r2, [r0, #16]
{
    b028:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    b02a:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    b02e:	e883 0003 	stmia.w	r3, {r0, r1}
}
    b032:	2000      	movs	r0, #0
    b034:	4770      	bx	lr

0000b036 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    b036:	6843      	ldr	r3, [r0, #4]
    b038:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    b03a:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    b03e:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    b042:	4770      	bx	lr

0000b044 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    b044:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    b046:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b048:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    b04c:	b940      	cbnz	r0, b060 <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    b04e:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    b050:	0712      	lsls	r2, r2, #28
    b052:	d406      	bmi.n	b062 <is_tx_ready+0x1e>
    b054:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    b058:	3800      	subs	r0, #0
    b05a:	bf18      	it	ne
    b05c:	2001      	movne	r0, #1
    b05e:	4770      	bx	lr
    b060:	2001      	movs	r0, #1
}
    b062:	4770      	bx	lr

0000b064 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    b064:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    b066:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    b068:	681b      	ldr	r3, [r3, #0]
    b06a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    b06e:	b148      	cbz	r0, b084 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    b070:	7d52      	ldrb	r2, [r2, #21]
    b072:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b074:	2000      	movs	r0, #0
    b076:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    b07a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b07e:	2201      	movs	r2, #1
    b080:	601a      	str	r2, [r3, #0]
	return 0;
    b082:	4770      	bx	lr
		return -1;
    b084:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    b088:	4770      	bx	lr

0000b08a <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    b08a:	2a00      	cmp	r2, #0
{
    b08c:	b510      	push	{r4, lr}
    b08e:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    b090:	dd0f      	ble.n	b0b2 <uarte_nrfx_fifo_read+0x28>
	return config->uarte_regs;
    b092:	6843      	ldr	r3, [r0, #4]
    b094:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b096:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    b09a:	b148      	cbz	r0, b0b0 <uarte_nrfx_fifo_read+0x26>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    b09c:	6922      	ldr	r2, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b09e:	2000      	movs	r0, #0
    b0a0:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    b0a4:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
    b0a8:	7d52      	ldrb	r2, [r2, #21]
    b0aa:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b0ac:	2001      	movs	r0, #1
    b0ae:	6018      	str	r0, [r3, #0]
}
    b0b0:	bd10      	pop	{r4, pc}
	int num_rx = 0;
    b0b2:	2000      	movs	r0, #0
    b0b4:	e7fc      	b.n	b0b0 <uarte_nrfx_fifo_read+0x26>

0000b0b6 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
    b0b6:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    b0b8:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
    b0ba:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
    b0bc:	f04f 0020 	mov.w	r0, #32
    b0c0:	f3ef 8311 	mrs	r3, BASEPRI
    b0c4:	f380 8811 	msr	BASEPRI, r0
    b0c8:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
    b0cc:	68c9      	ldr	r1, [r1, #12]
    b0ce:	2000      	movs	r0, #0
    b0d0:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
    b0d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    b0d6:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
    b0da:	f383 8811 	msr	BASEPRI, r3
    b0de:	f3bf 8f6f 	isb	sy
}
    b0e2:	4770      	bx	lr

0000b0e4 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
    b0e4:	6903      	ldr	r3, [r0, #16]
    b0e6:	68db      	ldr	r3, [r3, #12]
    b0e8:	2201      	movs	r2, #1
    b0ea:	739a      	strb	r2, [r3, #14]
}
    b0ec:	4770      	bx	lr

0000b0ee <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
    b0ee:	6903      	ldr	r3, [r0, #16]
    b0f0:	68db      	ldr	r3, [r3, #12]
    b0f2:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    b0f4:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    b0f8:	b962      	cbnz	r2, b114 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
    b0fa:	6842      	ldr	r2, [r0, #4]
    b0fc:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b0fe:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
    b102:	b140      	cbz	r0, b116 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
    b104:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
    b108:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
    b10c:	d003      	beq.n	b116 <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
    b10e:	6119      	str	r1, [r3, #16]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    b110:	2001      	movs	r0, #1
    b112:	4770      	bx	lr
    b114:	2000      	movs	r0, #0
}
    b116:	4770      	bx	lr

0000b118 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
    b118:	6843      	ldr	r3, [r0, #4]
    b11a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b11c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
    b120:	3800      	subs	r0, #0
    b122:	bf18      	it	ne
    b124:	2001      	movne	r0, #1
    b126:	4770      	bx	lr

0000b128 <uarte_nrfx_irq_rx_enable>:
	return config->uarte_regs;
    b128:	6843      	ldr	r3, [r0, #4]
    b12a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    b12c:	2210      	movs	r2, #16
    b12e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    b132:	4770      	bx	lr

0000b134 <uarte_nrfx_irq_rx_disable>:
	return config->uarte_regs;
    b134:	6843      	ldr	r3, [r0, #4]
    b136:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    b138:	2210      	movs	r2, #16
    b13a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    b13e:	4770      	bx	lr

0000b140 <uarte_nrfx_irq_err_enable>:
	return config->uarte_regs;
    b140:	6843      	ldr	r3, [r0, #4]
    b142:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    b144:	f44f 7200 	mov.w	r2, #512	; 0x200
    b148:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    b14c:	4770      	bx	lr

0000b14e <uarte_nrfx_irq_err_disable>:
	return config->uarte_regs;
    b14e:	6843      	ldr	r3, [r0, #4]
    b150:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    b152:	f44f 7200 	mov.w	r2, #512	; 0x200
    b156:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    b15a:	4770      	bx	lr

0000b15c <uarte_nrfx_irq_update>:
}
    b15c:	2001      	movs	r0, #1
    b15e:	4770      	bx	lr

0000b160 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
    b160:	6903      	ldr	r3, [r0, #16]
    b162:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
    b164:	e9c3 1200 	strd	r1, r2, [r3]
}
    b168:	4770      	bx	lr

0000b16a <tx_start>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    b16a:	6840      	ldr	r0, [r0, #4]
	return config->uarte_regs;
    b16c:	6803      	ldr	r3, [r0, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    b16e:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    b172:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b176:	2200      	movs	r2, #0
    b178:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    b17c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    b180:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    b184:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    b188:	6842      	ldr	r2, [r0, #4]
    b18a:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    b18c:	bf41      	itttt	mi
    b18e:	2208      	movmi	r2, #8
    b190:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    b194:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    b198:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b19c:	2201      	movs	r2, #1
    b19e:	609a      	str	r2, [r3, #8]
}
    b1a0:	4770      	bx	lr

0000b1a2 <uarte_nrfx_fifo_fill>:
{
    b1a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    b1a4:	6906      	ldr	r6, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
    b1a6:	68f3      	ldr	r3, [r6, #12]
    b1a8:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    b1aa:	f3bf 8f5b 	dmb	ish
    b1ae:	4294      	cmp	r4, r2
    b1b0:	bfa8      	it	ge
    b1b2:	4614      	movge	r4, r2
{
    b1b4:	4605      	mov	r5, r0
    b1b6:	3310      	adds	r3, #16
    b1b8:	2201      	movs	r2, #1
    b1ba:	e853 0f00 	ldrex	r0, [r3]
    b1be:	2800      	cmp	r0, #0
    b1c0:	d103      	bne.n	b1ca <uarte_nrfx_fifo_fill+0x28>
    b1c2:	e843 2700 	strex	r7, r2, [r3]
    b1c6:	2f00      	cmp	r7, #0
    b1c8:	d1f7      	bne.n	b1ba <uarte_nrfx_fifo_fill+0x18>
    b1ca:	f3bf 8f5b 	dmb	ish
    b1ce:	bf0c      	ite	eq
    b1d0:	4613      	moveq	r3, r2
    b1d2:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
    b1d4:	d01d      	beq.n	b212 <uarte_nrfx_fifo_fill+0x70>
		return 0;
    b1d6:	461c      	mov	r4, r3
}
    b1d8:	4620      	mov	r0, r4
    b1da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
    b1dc:	68f2      	ldr	r2, [r6, #12]
    b1de:	5cc8      	ldrb	r0, [r1, r3]
    b1e0:	6892      	ldr	r2, [r2, #8]
    b1e2:	54d0      	strb	r0, [r2, r3]
	for (int i = 0; i < len; i++) {
    b1e4:	3301      	adds	r3, #1
    b1e6:	42a3      	cmp	r3, r4
    b1e8:	dbf8      	blt.n	b1dc <uarte_nrfx_fifo_fill+0x3a>
	__asm__ volatile(
    b1ea:	f04f 0320 	mov.w	r3, #32
    b1ee:	f3ef 8711 	mrs	r7, BASEPRI
    b1f2:	f383 8811 	msr	BASEPRI, r3
    b1f6:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
    b1fa:	4628      	mov	r0, r5
    b1fc:	f7ff ff22 	bl	b044 <is_tx_ready>
    b200:	68f3      	ldr	r3, [r6, #12]
    b202:	b940      	cbnz	r0, b216 <uarte_nrfx_fifo_fill+0x74>
		data->int_driven->fifo_fill_lock = 0;
    b204:	6118      	str	r0, [r3, #16]
		len = 0;
    b206:	4604      	mov	r4, r0
	__asm__ volatile(
    b208:	f387 8811 	msr	BASEPRI, r7
    b20c:	f3bf 8f6f 	isb	sy
	return len;
    b210:	e7e2      	b.n	b1d8 <uarte_nrfx_fifo_fill+0x36>
	for (int i = 0; i < len; i++) {
    b212:	2300      	movs	r3, #0
    b214:	e7e7      	b.n	b1e6 <uarte_nrfx_fifo_fill+0x44>
		tx_start(dev, data->int_driven->tx_buffer, len);
    b216:	6899      	ldr	r1, [r3, #8]
    b218:	4622      	mov	r2, r4
    b21a:	4628      	mov	r0, r5
    b21c:	f7ff ffa5 	bl	b16a <tx_start>
    b220:	e7f2      	b.n	b208 <uarte_nrfx_fifo_fill+0x66>

0000b222 <uarte_nrfx_irq_is_pending>:
{
    b222:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
    b224:	6843      	ldr	r3, [r0, #4]
    b226:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    b228:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
    b22c:	025b      	lsls	r3, r3, #9
{
    b22e:	4604      	mov	r4, r0
		||
    b230:	d405      	bmi.n	b23e <uarte_nrfx_irq_is_pending+0x1c>
    b232:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    b236:	f010 0010 	ands.w	r0, r0, #16
    b23a:	d106      	bne.n	b24a <uarte_nrfx_irq_is_pending+0x28>
}
    b23c:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
    b23e:	f7ff ff56 	bl	b0ee <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
    b242:	2800      	cmp	r0, #0
    b244:	d0f5      	beq.n	b232 <uarte_nrfx_irq_is_pending+0x10>
		||
    b246:	2001      	movs	r0, #1
    b248:	e7f8      	b.n	b23c <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
    b24a:	4620      	mov	r0, r4
    b24c:	f7ff ff64 	bl	b118 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
    b250:	3800      	subs	r0, #0
    b252:	bf18      	it	ne
    b254:	2001      	movne	r0, #1
    b256:	e7f1      	b.n	b23c <uarte_nrfx_irq_is_pending+0x1a>

0000b258 <fprotect_area>:

int fprotect_area(uint32_t start, size_t length)
{
	return fprotect_set_permission(start, length,
    b258:	2202      	movs	r2, #2
    b25a:	f7fa bb8f 	b.w	597c <fprotect_set_permission>

0000b25e <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    b25e:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    b260:	2000      	movs	r0, #0
    b262:	f7f9 fe7d 	bl	4f60 <sys_arch_reboot>

0000b266 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    b266:	f7fd bf0d 	b.w	9084 <nrf_cc3xx_platform_init_no_rng>

0000b26a <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    b26a:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    b26c:	f7f8 fd1c 	bl	3ca8 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    b270:	f7f8 fdce 	bl	3e10 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    b274:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    b278:	f7fd bf04 	b.w	9084 <nrf_cc3xx_platform_init_no_rng>

0000b27c <bootutil_buffer_is_erased.part.0>:
bool bootutil_buffer_is_erased(const struct flash_area *area,
    b27c:	b538      	push	{r3, r4, r5, lr}
    b27e:	460c      	mov	r4, r1
    b280:	4615      	mov	r5, r2
    b282:	4425      	add	r5, r4
    erased_val = flash_area_erased_val(area);
    b284:	f7ff fa67 	bl	a756 <flash_area_erased_val>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    b288:	4621      	mov	r1, r4
    b28a:	42a9      	cmp	r1, r5
    b28c:	d101      	bne.n	b292 <bootutil_buffer_is_erased.part.0+0x16>
    return true;
    b28e:	2001      	movs	r0, #1
}
    b290:	bd38      	pop	{r3, r4, r5, pc}
        if (u8b[i] != erased_val) {
    b292:	f811 3b01 	ldrb.w	r3, [r1], #1
    b296:	4298      	cmp	r0, r3
    b298:	d0f7      	beq.n	b28a <bootutil_buffer_is_erased.part.0+0xe>
            return false;
    b29a:	2000      	movs	r0, #0
    b29c:	e7f8      	b.n	b290 <bootutil_buffer_is_erased.part.0+0x14>

0000b29e <boot_swap_info_off>:
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    b29e:	6880      	ldr	r0, [r0, #8]
}
    b2a0:	3828      	subs	r0, #40	; 0x28
    b2a2:	4770      	bx	lr

0000b2a4 <boot_magic_compatible_check>:
    switch (tbl_val) {
    b2a4:	2804      	cmp	r0, #4
    b2a6:	d009      	beq.n	b2bc <boot_magic_compatible_check+0x18>
    b2a8:	2805      	cmp	r0, #5
    b2aa:	d103      	bne.n	b2b4 <boot_magic_compatible_check+0x10>
        return val != BOOT_MAGIC_GOOD;
    b2ac:	1e48      	subs	r0, r1, #1
    b2ae:	bf18      	it	ne
    b2b0:	2001      	movne	r0, #1
    b2b2:	4770      	bx	lr
        return tbl_val == val;
    b2b4:	1a43      	subs	r3, r0, r1
    b2b6:	4258      	negs	r0, r3
    b2b8:	4158      	adcs	r0, r3
    b2ba:	4770      	bx	lr
    switch (tbl_val) {
    b2bc:	2001      	movs	r0, #1
}
    b2be:	4770      	bx	lr

0000b2c0 <bootutil_buffer_is_erased>:
    if (buffer == NULL || len == 0) {
    b2c0:	b111      	cbz	r1, b2c8 <bootutil_buffer_is_erased+0x8>
    b2c2:	b10a      	cbz	r2, b2c8 <bootutil_buffer_is_erased+0x8>
    b2c4:	f7ff bfda 	b.w	b27c <bootutil_buffer_is_erased.part.0>
}
    b2c8:	2000      	movs	r0, #0
    b2ca:	4770      	bx	lr

0000b2cc <boot_read_flag>:
{
    b2cc:	b538      	push	{r3, r4, r5, lr}
    b2ce:	460c      	mov	r4, r1
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    b2d0:	2301      	movs	r3, #1
{
    b2d2:	4611      	mov	r1, r2
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    b2d4:	4622      	mov	r2, r4
{
    b2d6:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    b2d8:	f7ff f9b8 	bl	a64c <flash_area_read>
    if (rc < 0) {
    b2dc:	2800      	cmp	r0, #0
    b2de:	db10      	blt.n	b302 <boot_read_flag+0x36>
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
    b2e0:	2201      	movs	r2, #1
    b2e2:	4621      	mov	r1, r4
    b2e4:	4628      	mov	r0, r5
    b2e6:	f7ff ffeb 	bl	b2c0 <bootutil_buffer_is_erased>
    b2ea:	b118      	cbz	r0, b2f4 <boot_read_flag+0x28>
        *flag = BOOT_FLAG_UNSET;
    b2ec:	2303      	movs	r3, #3
    b2ee:	7023      	strb	r3, [r4, #0]
    return 0;
    b2f0:	2000      	movs	r0, #0
}
    b2f2:	bd38      	pop	{r3, r4, r5, pc}
    if (flag != BOOT_FLAG_SET) {
    b2f4:	7823      	ldrb	r3, [r4, #0]
    b2f6:	2b01      	cmp	r3, #1
        return BOOT_FLAG_BAD;
    b2f8:	bf0c      	ite	eq
    b2fa:	2301      	moveq	r3, #1
    b2fc:	2302      	movne	r3, #2
        *flag = boot_flag_decode(*flag);
    b2fe:	7023      	strb	r3, [r4, #0]
    b300:	e7f7      	b.n	b2f2 <boot_read_flag+0x26>
        return BOOT_EFLASH;
    b302:	2001      	movs	r0, #1
    b304:	e7f5      	b.n	b2f2 <boot_read_flag+0x26>

0000b306 <boot_write_trailer>:
{
    b306:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    b30a:	461d      	mov	r5, r3
    b30c:	4606      	mov	r6, r0
    b30e:	460f      	mov	r7, r1
    b310:	4690      	mov	r8, r2
    align = flash_area_align(fap);
    b312:	f7ff fa17 	bl	a744 <flash_area_align>
    align = (inlen + align - 1) & ~(align - 1);
    b316:	1944      	adds	r4, r0, r5
    b318:	3c01      	subs	r4, #1
    b31a:	4240      	negs	r0, r0
    b31c:	4004      	ands	r4, r0
    b31e:	b2e4      	uxtb	r4, r4
    if (align > BOOT_MAX_ALIGN) {
    b320:	2c08      	cmp	r4, #8
    b322:	d81a      	bhi.n	b35a <boot_write_trailer+0x54>
    erased_val = flash_area_erased_val(fap);
    b324:	4630      	mov	r0, r6
    b326:	f7ff fa16 	bl	a756 <flash_area_erased_val>
    memcpy(buf, inbuf, inlen);
    b32a:	462a      	mov	r2, r5
    erased_val = flash_area_erased_val(fap);
    b32c:	4681      	mov	r9, r0
    memcpy(buf, inbuf, inlen);
    b32e:	4641      	mov	r1, r8
    b330:	4668      	mov	r0, sp
    b332:	f7ff fc83 	bl	ac3c <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
    b336:	1b62      	subs	r2, r4, r5
    b338:	4649      	mov	r1, r9
    b33a:	eb0d 0005 	add.w	r0, sp, r5
    b33e:	f7ff fca8 	bl	ac92 <memset>
    rc = flash_area_write(fap, off, buf, align);
    b342:	4623      	mov	r3, r4
    b344:	466a      	mov	r2, sp
    b346:	4639      	mov	r1, r7
    b348:	4630      	mov	r0, r6
    b34a:	f7ff f99c 	bl	a686 <flash_area_write>
    if (rc != 0) {
    b34e:	3800      	subs	r0, #0
    b350:	bf18      	it	ne
    b352:	2001      	movne	r0, #1
}
    b354:	b003      	add	sp, #12
    b356:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
    b35a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b35e:	e7f9      	b.n	b354 <boot_write_trailer+0x4e>

0000b360 <boot_write_trailer_flag>:
{
    b360:	b507      	push	{r0, r1, r2, lr}
    return boot_write_trailer(fap, off, buf, 1);
    b362:	2301      	movs	r3, #1
    const uint8_t buf[1] = { flag_val };
    b364:	f88d 2004 	strb.w	r2, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
    b368:	aa01      	add	r2, sp, #4
    b36a:	f7ff ffcc 	bl	b306 <boot_write_trailer>
}
    b36e:	b003      	add	sp, #12
    b370:	f85d fb04 	ldr.w	pc, [sp], #4

0000b374 <boot_write_image_ok>:
    return boot_magic_off(fap) - BOOT_MAX_ALIGN;
    b374:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    b376:	2201      	movs	r2, #1
    b378:	3918      	subs	r1, #24
    b37a:	f7ff bff1 	b.w	b360 <boot_write_trailer_flag>

0000b37e <boot_read_image_ok>:
    return boot_magic_off(fap) - BOOT_MAX_ALIGN;
    b37e:	6882      	ldr	r2, [r0, #8]
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
    b380:	3a18      	subs	r2, #24
    b382:	f7ff bfa3 	b.w	b2cc <boot_read_flag>

0000b386 <boot_read_swap_state_by_id>:
{
    b386:	b513      	push	{r0, r1, r4, lr}
    b388:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
    b38a:	b2c0      	uxtb	r0, r0
    b38c:	a901      	add	r1, sp, #4
    b38e:	f7f7 fb57 	bl	2a40 <flash_area_open>
    if (rc != 0) {
    b392:	b950      	cbnz	r0, b3aa <boot_read_swap_state_by_id+0x24>
    rc = boot_read_swap_state(fap, state);
    b394:	4621      	mov	r1, r4
    b396:	9801      	ldr	r0, [sp, #4]
    b398:	f7fa fb54 	bl	5a44 <boot_read_swap_state>
    b39c:	4604      	mov	r4, r0
    flash_area_close(fap);
    b39e:	9801      	ldr	r0, [sp, #4]
    b3a0:	f7ff f953 	bl	a64a <flash_area_close>
}
    b3a4:	4620      	mov	r0, r4
    b3a6:	b002      	add	sp, #8
    b3a8:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    b3aa:	2401      	movs	r4, #1
    b3ac:	e7fa      	b.n	b3a4 <boot_read_swap_state_by_id+0x1e>

0000b3ae <boot_write_swap_info>:
{
    b3ae:	b507      	push	{r0, r1, r2, lr}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    b3b0:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    b3b4:	f88d 1007 	strb.w	r1, [sp, #7]
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    b3b8:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    b3ba:	2301      	movs	r3, #1
    b3bc:	f10d 0207 	add.w	r2, sp, #7
    b3c0:	3928      	subs	r1, #40	; 0x28
    b3c2:	f7ff ffa0 	bl	b306 <boot_write_trailer>
}
    b3c6:	b003      	add	sp, #12
    b3c8:	f85d fb04 	ldr.w	pc, [sp], #4

0000b3cc <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    b3cc:	4700      	bx	r0

0000b3ce <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    b3ce:	f002 b84b 	b.w	d468 <z_impl_k_busy_wait>

0000b3d2 <nrfx_nvmc_flash_size_get>:
    return p_reg->CODEPAGESIZE;
    b3d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    b3d6:	691a      	ldr	r2, [r3, #16]
    return p_reg->CODESIZE;
    b3d8:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
    b3da:	4350      	muls	r0, r2
    b3dc:	4770      	bx	lr

0000b3de <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
    b3de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    b3e2:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
    b3e4:	4770      	bx	lr

0000b3e6 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
    b3e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    b3ea:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
    b3ec:	4770      	bx	lr

0000b3ee <nrf_power_event_get_and_clear.constprop.0>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b3ee:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
    b3f2:	681a      	ldr	r2, [r3, #0]
    b3f4:	2a00      	cmp	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b3f6:	bf1f      	itttt	ne
    b3f8:	2200      	movne	r2, #0
    b3fa:	601a      	strne	r2, [r3, #0]
    b3fc:	681b      	ldrne	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b3fe:	2001      	movne	r0, #1
    b400:	bf08      	it	eq
    b402:	2000      	moveq	r0, #0
}
    b404:	4770      	bx	lr

0000b406 <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
    b406:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b40a:	f44f 7260 	mov.w	r2, #896	; 0x380
    b40e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    b412:	4770      	bx	lr

0000b414 <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
    b414:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b418:	f44f 7260 	mov.w	r2, #896	; 0x380
    b41c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    b420:	4770      	bx	lr

0000b422 <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
    b422:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
    b424:	f7fa fe1e 	bl	6064 <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
    b428:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
    b42c:	f7fa bd08 	b.w	5e40 <nrfx_clock_irq_handler>

0000b430 <nrfx_usbd_consumer>:
{
    b430:	b530      	push	{r4, r5, lr}
    size_t size = p_transfer->size;
    b432:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
    b434:	680d      	ldr	r5, [r1, #0]
    b436:	429c      	cmp	r4, r3
        p_next->p_data = p_transfer->p_data;
    b438:	bf29      	itett	cs
    b43a:	e9c0 5300 	strdcs	r5, r3, [r0]
        p_next->size = 0;
    b43e:	2100      	movcc	r1, #0
        size -= data_size;
    b440:	1ae4      	subcs	r4, r4, r3
        p_transfer->p_data.addr += data_size;
    b442:	18ed      	addcs	r5, r5, r3
        p_next->p_data = p_transfer->p_data;
    b444:	bf32      	itee	cc
    b446:	e9c0 5100 	strdcc	r5, r1, [r0]
        p_transfer->size = size;
    b44a:	604c      	strcs	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
    b44c:	600d      	strcs	r5, [r1, #0]
    return (ep_size == data_size) && (size != 0);
    b44e:	429a      	cmp	r2, r3
    b450:	d103      	bne.n	b45a <nrfx_usbd_consumer+0x2a>
    b452:	1e20      	subs	r0, r4, #0
    b454:	bf18      	it	ne
    b456:	2001      	movne	r0, #1
}
    b458:	bd30      	pop	{r4, r5, pc}
    return (ep_size == data_size) && (size != 0);
    b45a:	2000      	movs	r0, #0
    b45c:	e7fc      	b.n	b458 <nrfx_usbd_consumer+0x28>

0000b45e <nrfx_usbd_feeder_ram>:
    size_t tx_size = p_transfer->size;
    b45e:	684b      	ldr	r3, [r1, #4]
{
    b460:	b510      	push	{r4, lr}
    b462:	429a      	cmp	r2, r3
    p_next->p_data = p_transfer->p_data;
    b464:	680c      	ldr	r4, [r1, #0]
    b466:	bf28      	it	cs
    b468:	461a      	movcs	r2, r3
    p_next->size = tx_size;
    b46a:	e9c0 4200 	strd	r4, r2, [r0]
    p_transfer->size -= tx_size;
    b46e:	1a98      	subs	r0, r3, r2
    p_transfer->p_data.addr += tx_size;
    b470:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
    b472:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    b474:	441a      	add	r2, r3
}
    b476:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
    b478:	600a      	str	r2, [r1, #0]
}
    b47a:	bf18      	it	ne
    b47c:	2001      	movne	r0, #1
    b47e:	bd10      	pop	{r4, pc}

0000b480 <nrfx_usbd_feeder_ram_zlp>:
{
    b480:	b530      	push	{r4, r5, lr}
    size_t tx_size = p_transfer->size;
    b482:	684c      	ldr	r4, [r1, #4]
    if (tx_size > ep_size)
    b484:	680b      	ldr	r3, [r1, #0]
    b486:	42a2      	cmp	r2, r4
    b488:	bf28      	it	cs
    b48a:	4622      	movcs	r2, r4
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    b48c:	2a00      	cmp	r2, #0
    b48e:	bf14      	ite	ne
    b490:	461d      	movne	r5, r3
    b492:	2500      	moveq	r5, #0
    p_next->size = tx_size;
    b494:	e9c0 5200 	strd	r5, r2, [r0]
    p_transfer->size -= tx_size;
    b498:	eba4 0402 	sub.w	r4, r4, r2
    p_transfer->p_data.addr += tx_size;
    b49c:	441a      	add	r2, r3
    p_transfer->size -= tx_size;
    b49e:	604c      	str	r4, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    b4a0:	600a      	str	r2, [r1, #0]
}
    b4a2:	bf14      	ite	ne
    b4a4:	2001      	movne	r0, #1
    b4a6:	2000      	moveq	r0, #0
    b4a8:	bd30      	pop	{r4, r5, pc}

0000b4aa <ep2bit>:
    return NRFX_USBD_EP_BITPOS(ep);
    b4aa:	b243      	sxtb	r3, r0
    b4ac:	2b00      	cmp	r3, #0
    b4ae:	bfb4      	ite	lt
    b4b0:	2000      	movlt	r0, #0
    b4b2:	2010      	movge	r0, #16
    b4b4:	f003 030f 	and.w	r3, r3, #15
}
    b4b8:	4418      	add	r0, r3
    b4ba:	4770      	bx	lr

0000b4bc <ev_started_handler>:
}
    b4bc:	4770      	bx	lr

0000b4be <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    b4be:	f7fa bfa1 	b.w	6404 <nrf_usbd_ep0in_dma_handler>

0000b4c2 <nrf_usbd_epin_dma_handler>:
{
    b4c2:	b508      	push	{r3, lr}
    b4c4:	4601      	mov	r1, r0
    usbd_dma_pending_clear();
    b4c6:	f7fa fe7f 	bl	61c8 <usbd_dma_pending_clear>
    usbd_ep_state_t * p_state = ep_state_access(ep);
    b4ca:	4608      	mov	r0, r1
    b4cc:	f7fa fe6e 	bl	61ac <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    b4d0:	7b83      	ldrb	r3, [r0, #14]
    b4d2:	2b03      	cmp	r3, #3
    b4d4:	d10a      	bne.n	b4ec <nrf_usbd_epin_dma_handler+0x2a>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    b4d6:	4608      	mov	r0, r1
    b4d8:	f7ff ffe7 	bl	b4aa <ep2bit>
    b4dc:	2301      	movs	r3, #1
    b4de:	fa03 f000 	lsl.w	r0, r3, r0
    b4e2:	43c0      	mvns	r0, r0
}
    b4e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    b4e8:	f7fa bf7a 	b.w	63e0 <atomic_and.constprop.0>
    else if (p_state->handler.feeder == NULL)
    b4ec:	6803      	ldr	r3, [r0, #0]
    b4ee:	2b00      	cmp	r3, #0
    b4f0:	d0f1      	beq.n	b4d6 <nrf_usbd_epin_dma_handler+0x14>
}
    b4f2:	bd08      	pop	{r3, pc}

0000b4f4 <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
    b4f4:	2087      	movs	r0, #135	; 0x87
    b4f6:	f7ff bfe4 	b.w	b4c2 <nrf_usbd_epin_dma_handler>

0000b4fa <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
    b4fa:	2086      	movs	r0, #134	; 0x86
    b4fc:	f7ff bfe1 	b.w	b4c2 <nrf_usbd_epin_dma_handler>

0000b500 <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
    b500:	2085      	movs	r0, #133	; 0x85
    b502:	f7ff bfde 	b.w	b4c2 <nrf_usbd_epin_dma_handler>

0000b506 <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
    b506:	2084      	movs	r0, #132	; 0x84
    b508:	f7ff bfdb 	b.w	b4c2 <nrf_usbd_epin_dma_handler>

0000b50c <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
    b50c:	2083      	movs	r0, #131	; 0x83
    b50e:	f7ff bfd8 	b.w	b4c2 <nrf_usbd_epin_dma_handler>

0000b512 <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
    b512:	2082      	movs	r0, #130	; 0x82
    b514:	f7ff bfd5 	b.w	b4c2 <nrf_usbd_epin_dma_handler>

0000b518 <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
    b518:	2081      	movs	r0, #129	; 0x81
    b51a:	f7ff bfd2 	b.w	b4c2 <nrf_usbd_epin_dma_handler>

0000b51e <nrfx_usbd_ep_max_packet_size_set>:
{
    b51e:	b508      	push	{r3, lr}
    usbd_ep_state_t * p_state = ep_state_access(ep);
    b520:	f7fa fe44 	bl	61ac <ep_state_access>
    p_state->max_packet_size = size;
    b524:	8181      	strh	r1, [r0, #12]
}
    b526:	bd08      	pop	{r3, pc}

0000b528 <nrfx_usbd_ep_status_get>:
{
    b528:	b508      	push	{r3, lr}
    usbd_ep_state_t const * p_state = ep_state_access(ep);
    b52a:	f7fa fe3f 	bl	61ac <ep_state_access>
	__asm__ volatile(
    b52e:	f04f 0220 	mov.w	r2, #32
    b532:	f3ef 8311 	mrs	r3, BASEPRI
    b536:	f382 8811 	msr	BASEPRI, r2
    b53a:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
    b53e:	6882      	ldr	r2, [r0, #8]
    b540:	600a      	str	r2, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    b542:	6802      	ldr	r2, [r0, #0]
    b544:	b92a      	cbnz	r2, b552 <nrfx_usbd_ep_status_get+0x2a>
    b546:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
    b548:	f383 8811 	msr	BASEPRI, r3
    b54c:	f3bf 8f6f 	isb	sy
}
    b550:	bd08      	pop	{r3, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    b552:	2004      	movs	r0, #4
    b554:	e7f8      	b.n	b548 <nrfx_usbd_ep_status_get+0x20>

0000b556 <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
    b556:	2007      	movs	r0, #7
    b558:	f7fb ba9e 	b.w	6a98 <nrf_usbd_epout_dma_handler>

0000b55c <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
    b55c:	2006      	movs	r0, #6
    b55e:	f7fb ba9b 	b.w	6a98 <nrf_usbd_epout_dma_handler>

0000b562 <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
    b562:	2005      	movs	r0, #5
    b564:	f7fb ba98 	b.w	6a98 <nrf_usbd_epout_dma_handler>

0000b568 <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
    b568:	2004      	movs	r0, #4
    b56a:	f7fb ba95 	b.w	6a98 <nrf_usbd_epout_dma_handler>

0000b56e <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
    b56e:	2003      	movs	r0, #3
    b570:	f7fb ba92 	b.w	6a98 <nrf_usbd_epout_dma_handler>

0000b574 <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
    b574:	2002      	movs	r0, #2
    b576:	f7fb ba8f 	b.w	6a98 <nrf_usbd_epout_dma_handler>

0000b57a <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
    b57a:	2001      	movs	r0, #1
    b57c:	f7fb ba8c 	b.w	6a98 <nrf_usbd_epout_dma_handler>

0000b580 <nrfx_usbd_ep_abort>:
    usbd_ep_abort(ep);
    b580:	f7fb bb7c 	b.w	6c7c <usbd_ep_abort>

0000b584 <_mbedtls_init>:
	ARG_UNUSED(device);

	init_heap();

	return 0;
}
    b584:	2000      	movs	r0, #0
    b586:	4770      	bx	lr

0000b588 <mbedtls_asn1_get_len>:
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
    if( ( end - *p ) < 1 )
    b588:	6803      	ldr	r3, [r0, #0]
{
    b58a:	b570      	push	{r4, r5, r6, lr}
    if( ( end - *p ) < 1 )
    b58c:	1acd      	subs	r5, r1, r3
    b58e:	2d00      	cmp	r5, #0
    b590:	dd0d      	ble.n	b5ae <mbedtls_asn1_get_len+0x26>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( ( **p & 0x80 ) == 0 )
    b592:	f993 6000 	ldrsb.w	r6, [r3]
    b596:	781c      	ldrb	r4, [r3, #0]
    b598:	2e00      	cmp	r6, #0
    b59a:	db0b      	blt.n	b5b4 <mbedtls_asn1_get_len+0x2c>
        *len = *(*p)++;
    b59c:	1c5c      	adds	r4, r3, #1
    b59e:	6004      	str	r4, [r0, #0]
    b5a0:	781b      	ldrb	r3, [r3, #0]
    b5a2:	6013      	str	r3, [r2, #0]
        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
        }
    }

    if( *len > (size_t) ( end - *p ) )
    b5a4:	6803      	ldr	r3, [r0, #0]
    b5a6:	1ac9      	subs	r1, r1, r3
    b5a8:	6813      	ldr	r3, [r2, #0]
    b5aa:	428b      	cmp	r3, r1
    b5ac:	d932      	bls.n	b614 <mbedtls_asn1_get_len+0x8c>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    b5ae:	f06f 005f 	mvn.w	r0, #95	; 0x5f

    return( 0 );
}
    b5b2:	bd70      	pop	{r4, r5, r6, pc}
        switch( **p & 0x7F )
    b5b4:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    b5b8:	3c01      	subs	r4, #1
    b5ba:	2c03      	cmp	r4, #3
    b5bc:	d827      	bhi.n	b60e <mbedtls_asn1_get_len+0x86>
    b5be:	e8df f004 	tbb	[pc, r4]
    b5c2:	0902      	.short	0x0902
    b5c4:	1e12      	.short	0x1e12
            if( ( end - *p ) < 2 )
    b5c6:	2d01      	cmp	r5, #1
    b5c8:	d0f1      	beq.n	b5ae <mbedtls_asn1_get_len+0x26>
            *len = (*p)[1];
    b5ca:	785c      	ldrb	r4, [r3, #1]
    b5cc:	6014      	str	r4, [r2, #0]
            (*p) += 2;
    b5ce:	3302      	adds	r3, #2
            (*p) += 5;
    b5d0:	6003      	str	r3, [r0, #0]
            break;
    b5d2:	e7e7      	b.n	b5a4 <mbedtls_asn1_get_len+0x1c>
            if( ( end - *p ) < 3 )
    b5d4:	2d02      	cmp	r5, #2
    b5d6:	ddea      	ble.n	b5ae <mbedtls_asn1_get_len+0x26>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
    b5d8:	f8b3 4001 	ldrh.w	r4, [r3, #1]
    b5dc:	ba64      	rev16	r4, r4
    b5de:	b2a4      	uxth	r4, r4
    b5e0:	6014      	str	r4, [r2, #0]
            (*p) += 3;
    b5e2:	3303      	adds	r3, #3
    b5e4:	e7f4      	b.n	b5d0 <mbedtls_asn1_get_len+0x48>
            if( ( end - *p ) < 4 )
    b5e6:	2d03      	cmp	r5, #3
    b5e8:	dde1      	ble.n	b5ae <mbedtls_asn1_get_len+0x26>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    b5ea:	789c      	ldrb	r4, [r3, #2]
            *len = ( (size_t)(*p)[1] << 16 ) |
    b5ec:	785d      	ldrb	r5, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    b5ee:	0224      	lsls	r4, r4, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
    b5f0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    b5f4:	78dd      	ldrb	r5, [r3, #3]
    b5f6:	432c      	orrs	r4, r5
            *len = ( (size_t)(*p)[1] << 16 ) |
    b5f8:	6014      	str	r4, [r2, #0]
            (*p) += 4;
    b5fa:	3304      	adds	r3, #4
    b5fc:	e7e8      	b.n	b5d0 <mbedtls_asn1_get_len+0x48>
            if( ( end - *p ) < 5 )
    b5fe:	2d04      	cmp	r5, #4
    b600:	ddd5      	ble.n	b5ae <mbedtls_asn1_get_len+0x26>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    b602:	f8d3 4001 	ldr.w	r4, [r3, #1]
    b606:	ba24      	rev	r4, r4
    b608:	6014      	str	r4, [r2, #0]
            (*p) += 5;
    b60a:	3305      	adds	r3, #5
    b60c:	e7e0      	b.n	b5d0 <mbedtls_asn1_get_len+0x48>
    if( ( **p & 0x80 ) == 0 )
    b60e:	f06f 0063 	mvn.w	r0, #99	; 0x63
    b612:	e7ce      	b.n	b5b2 <mbedtls_asn1_get_len+0x2a>
    return( 0 );
    b614:	2000      	movs	r0, #0
    b616:	e7cc      	b.n	b5b2 <mbedtls_asn1_get_len+0x2a>

0000b618 <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
    b618:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
    b61a:	6804      	ldr	r4, [r0, #0]
    b61c:	1b0e      	subs	r6, r1, r4
    b61e:	2e00      	cmp	r6, #0
    b620:	dd07      	ble.n	b632 <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
    b622:	7826      	ldrb	r6, [r4, #0]
    b624:	429e      	cmp	r6, r3
    b626:	d108      	bne.n	b63a <mbedtls_asn1_get_tag+0x22>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
    b628:	3401      	adds	r4, #1
    b62a:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
    b62c:	bc70      	pop	{r4, r5, r6}
    return( mbedtls_asn1_get_len( p, end, len ) );
    b62e:	f7ff bfab 	b.w	b588 <mbedtls_asn1_get_len>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    b632:	f06f 005f 	mvn.w	r0, #95	; 0x5f
}
    b636:	bc70      	pop	{r4, r5, r6}
    b638:	4770      	bx	lr
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
    b63a:	f06f 0061 	mvn.w	r0, #97	; 0x61
    b63e:	e7fa      	b.n	b636 <mbedtls_asn1_get_tag+0x1e>

0000b640 <mbedtls_asn1_get_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
    b640:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    b642:	2302      	movs	r3, #2
{
    b644:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    b646:	aa01      	add	r2, sp, #4
{
    b648:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    b64a:	f7ff ffe5 	bl	b618 <mbedtls_asn1_get_tag>
    b64e:	b940      	cbnz	r0, b662 <mbedtls_asn1_get_mpi+0x22>
        return( ret );

    ret = mbedtls_mpi_read_binary( X, *p, len );
    b650:	9a01      	ldr	r2, [sp, #4]
    b652:	6821      	ldr	r1, [r4, #0]
    b654:	4628      	mov	r0, r5
    b656:	f000 fbd3 	bl	be00 <mbedtls_mpi_read_binary>

    *p += len;
    b65a:	6823      	ldr	r3, [r4, #0]
    b65c:	9a01      	ldr	r2, [sp, #4]
    b65e:	4413      	add	r3, r2
    b660:	6023      	str	r3, [r4, #0]

    return( ret );
}
    b662:	b003      	add	sp, #12
    b664:	bd30      	pop	{r4, r5, pc}

0000b666 <mpi_sub_hlp>:
 *                      0 if `d >= s`.
 */
static mbedtls_mpi_uint mpi_sub_hlp( size_t n,
                                     mbedtls_mpi_uint *d,
                                     const mbedtls_mpi_uint *s )
{
    b666:	b5f0      	push	{r4, r5, r6, r7, lr}
    b668:	4605      	mov	r5, r0
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
    b66a:	2000      	movs	r0, #0
    b66c:	3904      	subs	r1, #4
    b66e:	4604      	mov	r4, r0
    b670:	42ac      	cmp	r4, r5
    b672:	d100      	bne.n	b676 <mpi_sub_hlp+0x10>
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
    }

    return( c );
}
    b674:	bdf0      	pop	{r4, r5, r6, r7, pc}
        z = ( *d <  c );     *d -=  c;
    b676:	f851 7f04 	ldr.w	r7, [r1, #4]!
    b67a:	1a3b      	subs	r3, r7, r0
    b67c:	600b      	str	r3, [r1, #0]
        c = ( *d < *s ) + z; *d -= *s;
    b67e:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
    b682:	42b3      	cmp	r3, r6
    b684:	bf2c      	ite	cs
    b686:	f04f 0c00 	movcs.w	ip, #0
    b68a:	f04f 0c01 	movcc.w	ip, #1
    b68e:	1b9b      	subs	r3, r3, r6
    b690:	4287      	cmp	r7, r0
    b692:	bf2c      	ite	cs
    b694:	4660      	movcs	r0, ip
    b696:	f10c 0001 	addcc.w	r0, ip, #1
    b69a:	600b      	str	r3, [r1, #0]
    for( i = c = 0; i < n; i++, s++, d++ )
    b69c:	3401      	adds	r4, #1
    b69e:	e7e7      	b.n	b670 <mpi_sub_hlp+0xa>

0000b6a0 <mpi_mul_hlp>:
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
    b6a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
    b6a4:	4684      	mov	ip, r0
    b6a6:	460d      	mov	r5, r1
    b6a8:	f102 0440 	add.w	r4, r2, #64	; 0x40
    mbedtls_mpi_uint c = 0, t = 0;
    b6ac:	f04f 0e00 	mov.w	lr, #0
    for( ; i >= 16; i -= 16 )
    b6b0:	f1bc 0f0f 	cmp.w	ip, #15
    b6b4:	f854 8c40 	ldr.w	r8, [r4, #-64]
    b6b8:	f105 0540 	add.w	r5, r5, #64	; 0x40
    b6bc:	f104 0440 	add.w	r4, r4, #64	; 0x40
    b6c0:	f200 80ae 	bhi.w	b820 <mpi_mul_hlp+0x180>
    b6c4:	0904      	lsrs	r4, r0, #4
    b6c6:	f06f 050f 	mvn.w	r5, #15
    b6ca:	fb05 0004 	mla	r0, r5, r4, r0
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
    b6ce:	2807      	cmp	r0, #7
    b6d0:	ea4f 1984 	mov.w	r9, r4, lsl #6
    b6d4:	eb01 1584 	add.w	r5, r1, r4, lsl #6
    b6d8:	eb02 1484 	add.w	r4, r2, r4, lsl #6
    b6dc:	f240 808b 	bls.w	b7f6 <mpi_mul_hlp+0x156>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
    b6e0:	f851 6009 	ldr.w	r6, [r1, r9]
    b6e4:	fba3 6706 	umull	r6, r7, r3, r6
    b6e8:	eb1e 0e06 	adds.w	lr, lr, r6
    b6ec:	bf2c      	ite	cs
    b6ee:	f04f 0c01 	movcs.w	ip, #1
    b6f2:	f04f 0c00 	movcc.w	ip, #0
    b6f6:	eb18 010e 	adds.w	r1, r8, lr
    b6fa:	f842 1009 	str.w	r1, [r2, r9]
    b6fe:	686e      	ldr	r6, [r5, #4]
    b700:	44bc      	add	ip, r7
    b702:	bf2c      	ite	cs
    b704:	2201      	movcs	r2, #1
    b706:	2200      	movcc	r2, #0
    b708:	fba3 6706 	umull	r6, r7, r3, r6
    b70c:	4462      	add	r2, ip
    b70e:	1992      	adds	r2, r2, r6
    b710:	bf2c      	ite	cs
    b712:	2101      	movcs	r1, #1
    b714:	2100      	movcc	r1, #0
    b716:	eb01 0c07 	add.w	ip, r1, r7
    b71a:	6861      	ldr	r1, [r4, #4]
    b71c:	1852      	adds	r2, r2, r1
    b71e:	6062      	str	r2, [r4, #4]
        MULADDC_CORE   MULADDC_CORE
    b720:	68ae      	ldr	r6, [r5, #8]
        MULADDC_CORE   MULADDC_CORE
    b722:	bf2c      	ite	cs
    b724:	2101      	movcs	r1, #1
    b726:	2100      	movcc	r1, #0
        MULADDC_CORE   MULADDC_CORE
    b728:	fba3 6706 	umull	r6, r7, r3, r6
        MULADDC_CORE   MULADDC_CORE
    b72c:	4461      	add	r1, ip
        MULADDC_CORE   MULADDC_CORE
    b72e:	1989      	adds	r1, r1, r6
    b730:	bf2c      	ite	cs
    b732:	2201      	movcs	r2, #1
    b734:	2200      	movcc	r2, #0
    b736:	eb02 0c07 	add.w	ip, r2, r7
    b73a:	68a2      	ldr	r2, [r4, #8]
    b73c:	1889      	adds	r1, r1, r2
    b73e:	60a1      	str	r1, [r4, #8]
    b740:	68ee      	ldr	r6, [r5, #12]
    b742:	bf2c      	ite	cs
    b744:	2201      	movcs	r2, #1
    b746:	2200      	movcc	r2, #0
    b748:	fba3 6706 	umull	r6, r7, r3, r6
    b74c:	4462      	add	r2, ip
    b74e:	1992      	adds	r2, r2, r6
    b750:	bf2c      	ite	cs
    b752:	2101      	movcs	r1, #1
    b754:	2100      	movcc	r1, #0
    b756:	eb01 0c07 	add.w	ip, r1, r7
    b75a:	68e1      	ldr	r1, [r4, #12]
    b75c:	1852      	adds	r2, r2, r1
    b75e:	60e2      	str	r2, [r4, #12]

        MULADDC_CORE   MULADDC_CORE
    b760:	692e      	ldr	r6, [r5, #16]
        MULADDC_CORE   MULADDC_CORE
    b762:	bf2c      	ite	cs
    b764:	2101      	movcs	r1, #1
    b766:	2100      	movcc	r1, #0
        MULADDC_CORE   MULADDC_CORE
    b768:	fba3 6706 	umull	r6, r7, r3, r6
        MULADDC_CORE   MULADDC_CORE
    b76c:	4461      	add	r1, ip
        MULADDC_CORE   MULADDC_CORE
    b76e:	1989      	adds	r1, r1, r6
    b770:	bf2c      	ite	cs
    b772:	2201      	movcs	r2, #1
    b774:	2200      	movcc	r2, #0
    b776:	eb02 0c07 	add.w	ip, r2, r7
    b77a:	6922      	ldr	r2, [r4, #16]
    b77c:	1889      	adds	r1, r1, r2
    b77e:	6121      	str	r1, [r4, #16]
    b780:	696e      	ldr	r6, [r5, #20]
    b782:	bf2c      	ite	cs
    b784:	2201      	movcs	r2, #1
    b786:	2200      	movcc	r2, #0
    b788:	fba3 6706 	umull	r6, r7, r3, r6
    b78c:	4462      	add	r2, ip
    b78e:	1992      	adds	r2, r2, r6
    b790:	bf2c      	ite	cs
    b792:	2101      	movcs	r1, #1
    b794:	2100      	movcc	r1, #0
    b796:	eb01 0c07 	add.w	ip, r1, r7
    b79a:	6961      	ldr	r1, [r4, #20]
    b79c:	1852      	adds	r2, r2, r1
    b79e:	6162      	str	r2, [r4, #20]
        MULADDC_CORE   MULADDC_CORE
    b7a0:	69ae      	ldr	r6, [r5, #24]
        MULADDC_CORE   MULADDC_CORE
    b7a2:	bf2c      	ite	cs
    b7a4:	2101      	movcs	r1, #1
    b7a6:	2100      	movcc	r1, #0
        MULADDC_CORE   MULADDC_CORE
    b7a8:	fba3 6706 	umull	r6, r7, r3, r6
        MULADDC_CORE   MULADDC_CORE
    b7ac:	4461      	add	r1, ip
        MULADDC_CORE   MULADDC_CORE
    b7ae:	1989      	adds	r1, r1, r6
    b7b0:	bf2c      	ite	cs
    b7b2:	2201      	movcs	r2, #1
    b7b4:	2200      	movcc	r2, #0
    b7b6:	eb02 0c07 	add.w	ip, r2, r7
    b7ba:	69a2      	ldr	r2, [r4, #24]
    b7bc:	1889      	adds	r1, r1, r2
    b7be:	61a1      	str	r1, [r4, #24]
    b7c0:	69ee      	ldr	r6, [r5, #28]
    b7c2:	bf2c      	ite	cs
    b7c4:	2201      	movcs	r2, #1
    b7c6:	2200      	movcc	r2, #0
    b7c8:	fba3 6706 	umull	r6, r7, r3, r6
    b7cc:	4462      	add	r2, ip
    b7ce:	1992      	adds	r2, r2, r6
    b7d0:	69e6      	ldr	r6, [r4, #28]
    b7d2:	bf2c      	ite	cs
    b7d4:	f04f 0e01 	movcs.w	lr, #1
    b7d8:	f04f 0e00 	movcc.w	lr, #0
    b7dc:	1992      	adds	r2, r2, r6
    b7de:	eb0e 0107 	add.w	r1, lr, r7
    b7e2:	bf2c      	ite	cs
    b7e4:	f04f 0e01 	movcs.w	lr, #1
    b7e8:	f04f 0e00 	movcc.w	lr, #0
    b7ec:	61e2      	str	r2, [r4, #28]
    b7ee:	448e      	add	lr, r1
    for( ; i >= 8; i -= 8 )
    b7f0:	3808      	subs	r0, #8
        MULADDC_CORE   MULADDC_CORE
    b7f2:	3420      	adds	r4, #32
    b7f4:	3520      	adds	r5, #32
    b7f6:	ea4f 0c80 	mov.w	ip, r0, lsl #2
    b7fa:	4621      	mov	r1, r4
    b7fc:	eb05 0080 	add.w	r0, r5, r0, lsl #2
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
    b800:	4285      	cmp	r5, r0
    b802:	f851 2b04 	ldr.w	r2, [r1], #4
    b806:	f040 819a 	bne.w	bb3e <mpi_mul_hlp+0x49e>
    b80a:	4464      	add	r4, ip
#endif /* MULADDC_HUIT */

    t++;

    do {
        *d += c; c = ( *d < c ); d++;
    b80c:	6823      	ldr	r3, [r4, #0]
    b80e:	eb13 030e 	adds.w	r3, r3, lr
    b812:	f844 3b04 	str.w	r3, [r4], #4
    b816:	f04f 0e01 	mov.w	lr, #1
    }
    while( c != 0 );
    b81a:	d2f7      	bcs.n	b80c <mpi_mul_hlp+0x16c>
}
    b81c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        MULADDC_CORE   MULADDC_CORE
    b820:	f855 6c40 	ldr.w	r6, [r5, #-64]
    b824:	fba3 6706 	umull	r6, r7, r3, r6
    b828:	eb1e 0e06 	adds.w	lr, lr, r6
    b82c:	bf2c      	ite	cs
    b82e:	f04f 0901 	movcs.w	r9, #1
    b832:	f04f 0900 	movcc.w	r9, #0
    b836:	eb1e 0608 	adds.w	r6, lr, r8
    b83a:	f844 6c80 	str.w	r6, [r4, #-128]
    b83e:	f855 6c3c 	ldr.w	r6, [r5, #-60]
    b842:	44b9      	add	r9, r7
    b844:	bf2c      	ite	cs
    b846:	f04f 0801 	movcs.w	r8, #1
    b84a:	f04f 0800 	movcc.w	r8, #0
    b84e:	fba3 6706 	umull	r6, r7, r3, r6
    b852:	44c8      	add	r8, r9
    b854:	eb18 0806 	adds.w	r8, r8, r6
    b858:	f854 6c7c 	ldr.w	r6, [r4, #-124]
    b85c:	bf2c      	ite	cs
    b85e:	f04f 0e01 	movcs.w	lr, #1
    b862:	f04f 0e00 	movcc.w	lr, #0
    b866:	eb16 0608 	adds.w	r6, r6, r8
    b86a:	f844 6c7c 	str.w	r6, [r4, #-124]
        MULADDC_CORE   MULADDC_CORE
    b86e:	f855 6c38 	ldr.w	r6, [r5, #-56]
        MULADDC_CORE   MULADDC_CORE
    b872:	eb0e 0907 	add.w	r9, lr, r7
    b876:	bf2c      	ite	cs
    b878:	f04f 0e01 	movcs.w	lr, #1
    b87c:	f04f 0e00 	movcc.w	lr, #0
        MULADDC_CORE   MULADDC_CORE
    b880:	fba3 6706 	umull	r6, r7, r3, r6
        MULADDC_CORE   MULADDC_CORE
    b884:	44ce      	add	lr, r9
        MULADDC_CORE   MULADDC_CORE
    b886:	eb1e 0e06 	adds.w	lr, lr, r6
    b88a:	bf2c      	ite	cs
    b88c:	f04f 0801 	movcs.w	r8, #1
    b890:	f04f 0800 	movcc.w	r8, #0
    b894:	eb08 0907 	add.w	r9, r8, r7
    b898:	f854 7c78 	ldr.w	r7, [r4, #-120]
    b89c:	eb17 070e 	adds.w	r7, r7, lr
    b8a0:	f844 7c78 	str.w	r7, [r4, #-120]
    b8a4:	f855 6c34 	ldr.w	r6, [r5, #-52]
    b8a8:	bf2c      	ite	cs
    b8aa:	f04f 0801 	movcs.w	r8, #1
    b8ae:	f04f 0800 	movcc.w	r8, #0
    b8b2:	fba3 6706 	umull	r6, r7, r3, r6
    b8b6:	44c8      	add	r8, r9
    b8b8:	eb18 0806 	adds.w	r8, r8, r6
    b8bc:	f854 6c74 	ldr.w	r6, [r4, #-116]
    b8c0:	bf2c      	ite	cs
    b8c2:	f04f 0e01 	movcs.w	lr, #1
    b8c6:	f04f 0e00 	movcc.w	lr, #0
    b8ca:	eb16 0608 	adds.w	r6, r6, r8
    b8ce:	f844 6c74 	str.w	r6, [r4, #-116]
        MULADDC_CORE   MULADDC_CORE
    b8d2:	f855 6c30 	ldr.w	r6, [r5, #-48]
        MULADDC_CORE   MULADDC_CORE
    b8d6:	eb0e 0907 	add.w	r9, lr, r7
    b8da:	bf2c      	ite	cs
    b8dc:	f04f 0e01 	movcs.w	lr, #1
    b8e0:	f04f 0e00 	movcc.w	lr, #0
        MULADDC_CORE   MULADDC_CORE
    b8e4:	fba3 6706 	umull	r6, r7, r3, r6
        MULADDC_CORE   MULADDC_CORE
    b8e8:	44ce      	add	lr, r9
        MULADDC_CORE   MULADDC_CORE
    b8ea:	eb1e 0e06 	adds.w	lr, lr, r6
    b8ee:	bf2c      	ite	cs
    b8f0:	f04f 0801 	movcs.w	r8, #1
    b8f4:	f04f 0800 	movcc.w	r8, #0
    b8f8:	eb08 0907 	add.w	r9, r8, r7
    b8fc:	f854 7c70 	ldr.w	r7, [r4, #-112]
    b900:	eb17 070e 	adds.w	r7, r7, lr
    b904:	f844 7c70 	str.w	r7, [r4, #-112]
    b908:	f855 6c2c 	ldr.w	r6, [r5, #-44]
    b90c:	bf2c      	ite	cs
    b90e:	f04f 0801 	movcs.w	r8, #1
    b912:	f04f 0800 	movcc.w	r8, #0
    b916:	fba3 6706 	umull	r6, r7, r3, r6
    b91a:	44c8      	add	r8, r9
    b91c:	eb18 0806 	adds.w	r8, r8, r6
    b920:	f854 6c6c 	ldr.w	r6, [r4, #-108]
    b924:	bf2c      	ite	cs
    b926:	f04f 0e01 	movcs.w	lr, #1
    b92a:	f04f 0e00 	movcc.w	lr, #0
    b92e:	eb16 0608 	adds.w	r6, r6, r8
    b932:	f844 6c6c 	str.w	r6, [r4, #-108]
        MULADDC_CORE   MULADDC_CORE
    b936:	f855 6c28 	ldr.w	r6, [r5, #-40]
        MULADDC_CORE   MULADDC_CORE
    b93a:	eb0e 0907 	add.w	r9, lr, r7
    b93e:	bf2c      	ite	cs
    b940:	f04f 0e01 	movcs.w	lr, #1
    b944:	f04f 0e00 	movcc.w	lr, #0
        MULADDC_CORE   MULADDC_CORE
    b948:	fba3 6706 	umull	r6, r7, r3, r6
        MULADDC_CORE   MULADDC_CORE
    b94c:	44ce      	add	lr, r9
        MULADDC_CORE   MULADDC_CORE
    b94e:	eb1e 0e06 	adds.w	lr, lr, r6
    b952:	bf2c      	ite	cs
    b954:	f04f 0801 	movcs.w	r8, #1
    b958:	f04f 0800 	movcc.w	r8, #0
    b95c:	eb08 0907 	add.w	r9, r8, r7
    b960:	f854 7c68 	ldr.w	r7, [r4, #-104]
    b964:	eb17 070e 	adds.w	r7, r7, lr
    b968:	f844 7c68 	str.w	r7, [r4, #-104]
    b96c:	f855 6c24 	ldr.w	r6, [r5, #-36]
    b970:	bf2c      	ite	cs
    b972:	f04f 0801 	movcs.w	r8, #1
    b976:	f04f 0800 	movcc.w	r8, #0
    b97a:	fba3 6706 	umull	r6, r7, r3, r6
    b97e:	44c8      	add	r8, r9
    b980:	eb18 0806 	adds.w	r8, r8, r6
    b984:	f854 6c64 	ldr.w	r6, [r4, #-100]
    b988:	bf2c      	ite	cs
    b98a:	f04f 0e01 	movcs.w	lr, #1
    b98e:	f04f 0e00 	movcc.w	lr, #0
    b992:	eb16 0608 	adds.w	r6, r6, r8
    b996:	f844 6c64 	str.w	r6, [r4, #-100]
        MULADDC_CORE   MULADDC_CORE
    b99a:	f855 6c20 	ldr.w	r6, [r5, #-32]
        MULADDC_CORE   MULADDC_CORE
    b99e:	eb0e 0907 	add.w	r9, lr, r7
    b9a2:	bf2c      	ite	cs
    b9a4:	f04f 0e01 	movcs.w	lr, #1
    b9a8:	f04f 0e00 	movcc.w	lr, #0
        MULADDC_CORE   MULADDC_CORE
    b9ac:	fba3 6706 	umull	r6, r7, r3, r6
        MULADDC_CORE   MULADDC_CORE
    b9b0:	44ce      	add	lr, r9
        MULADDC_CORE   MULADDC_CORE
    b9b2:	eb1e 0e06 	adds.w	lr, lr, r6
    b9b6:	bf2c      	ite	cs
    b9b8:	f04f 0801 	movcs.w	r8, #1
    b9bc:	f04f 0800 	movcc.w	r8, #0
    b9c0:	eb08 0907 	add.w	r9, r8, r7
    b9c4:	f854 7c60 	ldr.w	r7, [r4, #-96]
    b9c8:	eb17 070e 	adds.w	r7, r7, lr
    b9cc:	f844 7c60 	str.w	r7, [r4, #-96]
    b9d0:	f855 6c1c 	ldr.w	r6, [r5, #-28]
    b9d4:	bf2c      	ite	cs
    b9d6:	f04f 0801 	movcs.w	r8, #1
    b9da:	f04f 0800 	movcc.w	r8, #0
    b9de:	fba3 6706 	umull	r6, r7, r3, r6
    b9e2:	44c8      	add	r8, r9
    b9e4:	eb18 0806 	adds.w	r8, r8, r6
    b9e8:	f854 6c5c 	ldr.w	r6, [r4, #-92]
    b9ec:	bf2c      	ite	cs
    b9ee:	f04f 0e01 	movcs.w	lr, #1
    b9f2:	f04f 0e00 	movcc.w	lr, #0
    b9f6:	eb16 0608 	adds.w	r6, r6, r8
    b9fa:	f844 6c5c 	str.w	r6, [r4, #-92]
        MULADDC_CORE   MULADDC_CORE
    b9fe:	f855 6c18 	ldr.w	r6, [r5, #-24]
        MULADDC_CORE   MULADDC_CORE
    ba02:	eb0e 0907 	add.w	r9, lr, r7
    ba06:	bf2c      	ite	cs
    ba08:	f04f 0e01 	movcs.w	lr, #1
    ba0c:	f04f 0e00 	movcc.w	lr, #0
        MULADDC_CORE   MULADDC_CORE
    ba10:	fba3 6706 	umull	r6, r7, r3, r6
        MULADDC_CORE   MULADDC_CORE
    ba14:	44ce      	add	lr, r9
        MULADDC_CORE   MULADDC_CORE
    ba16:	eb1e 0e06 	adds.w	lr, lr, r6
    ba1a:	bf2c      	ite	cs
    ba1c:	f04f 0801 	movcs.w	r8, #1
    ba20:	f04f 0800 	movcc.w	r8, #0
    ba24:	eb08 0907 	add.w	r9, r8, r7
    ba28:	f854 7c58 	ldr.w	r7, [r4, #-88]
    ba2c:	eb17 070e 	adds.w	r7, r7, lr
    ba30:	f844 7c58 	str.w	r7, [r4, #-88]
    ba34:	f855 6c14 	ldr.w	r6, [r5, #-20]
    ba38:	bf2c      	ite	cs
    ba3a:	f04f 0801 	movcs.w	r8, #1
    ba3e:	f04f 0800 	movcc.w	r8, #0
    ba42:	fba3 6706 	umull	r6, r7, r3, r6
    ba46:	44c8      	add	r8, r9
    ba48:	eb18 0806 	adds.w	r8, r8, r6
    ba4c:	f854 6c54 	ldr.w	r6, [r4, #-84]
    ba50:	bf2c      	ite	cs
    ba52:	f04f 0e01 	movcs.w	lr, #1
    ba56:	f04f 0e00 	movcc.w	lr, #0
    ba5a:	eb16 0608 	adds.w	r6, r6, r8
    ba5e:	f844 6c54 	str.w	r6, [r4, #-84]
        MULADDC_CORE   MULADDC_CORE
    ba62:	f855 6c10 	ldr.w	r6, [r5, #-16]
        MULADDC_CORE   MULADDC_CORE
    ba66:	eb0e 0907 	add.w	r9, lr, r7
    ba6a:	bf2c      	ite	cs
    ba6c:	f04f 0e01 	movcs.w	lr, #1
    ba70:	f04f 0e00 	movcc.w	lr, #0
        MULADDC_CORE   MULADDC_CORE
    ba74:	fba3 6706 	umull	r6, r7, r3, r6
        MULADDC_CORE   MULADDC_CORE
    ba78:	44ce      	add	lr, r9
        MULADDC_CORE   MULADDC_CORE
    ba7a:	eb1e 0e06 	adds.w	lr, lr, r6
    ba7e:	bf2c      	ite	cs
    ba80:	f04f 0801 	movcs.w	r8, #1
    ba84:	f04f 0800 	movcc.w	r8, #0
    ba88:	eb08 0907 	add.w	r9, r8, r7
    ba8c:	f854 7c50 	ldr.w	r7, [r4, #-80]
    ba90:	eb17 070e 	adds.w	r7, r7, lr
    ba94:	f844 7c50 	str.w	r7, [r4, #-80]
    ba98:	f855 6c0c 	ldr.w	r6, [r5, #-12]
    ba9c:	bf2c      	ite	cs
    ba9e:	f04f 0801 	movcs.w	r8, #1
    baa2:	f04f 0800 	movcc.w	r8, #0
    baa6:	fba3 6706 	umull	r6, r7, r3, r6
    baaa:	44c8      	add	r8, r9
    baac:	eb18 0806 	adds.w	r8, r8, r6
    bab0:	f854 6c4c 	ldr.w	r6, [r4, #-76]
    bab4:	bf2c      	ite	cs
    bab6:	f04f 0e01 	movcs.w	lr, #1
    baba:	f04f 0e00 	movcc.w	lr, #0
    babe:	eb16 0608 	adds.w	r6, r6, r8
    bac2:	f844 6c4c 	str.w	r6, [r4, #-76]
        MULADDC_CORE   MULADDC_CORE
    bac6:	f855 6c08 	ldr.w	r6, [r5, #-8]
        MULADDC_CORE   MULADDC_CORE
    baca:	eb0e 0907 	add.w	r9, lr, r7
    bace:	bf2c      	ite	cs
    bad0:	f04f 0e01 	movcs.w	lr, #1
    bad4:	f04f 0e00 	movcc.w	lr, #0
        MULADDC_CORE   MULADDC_CORE
    bad8:	fba3 6706 	umull	r6, r7, r3, r6
        MULADDC_CORE   MULADDC_CORE
    badc:	44ce      	add	lr, r9
        MULADDC_CORE   MULADDC_CORE
    bade:	eb1e 0e06 	adds.w	lr, lr, r6
    bae2:	bf2c      	ite	cs
    bae4:	f04f 0801 	movcs.w	r8, #1
    bae8:	f04f 0800 	movcc.w	r8, #0
    baec:	eb08 0907 	add.w	r9, r8, r7
    baf0:	f854 7c48 	ldr.w	r7, [r4, #-72]
    baf4:	eb17 070e 	adds.w	r7, r7, lr
    baf8:	f844 7c48 	str.w	r7, [r4, #-72]
    bafc:	f855 6c04 	ldr.w	r6, [r5, #-4]
    bb00:	bf2c      	ite	cs
    bb02:	f04f 0801 	movcs.w	r8, #1
    bb06:	f04f 0800 	movcc.w	r8, #0
    bb0a:	fba3 6706 	umull	r6, r7, r3, r6
    bb0e:	44c8      	add	r8, r9
    bb10:	eb18 0806 	adds.w	r8, r8, r6
    bb14:	f854 6c44 	ldr.w	r6, [r4, #-68]
    bb18:	bf2c      	ite	cs
    bb1a:	f04f 0e01 	movcs.w	lr, #1
    bb1e:	f04f 0e00 	movcc.w	lr, #0
    bb22:	eb16 0608 	adds.w	r6, r6, r8
    bb26:	4477      	add	r7, lr
    bb28:	bf2c      	ite	cs
    bb2a:	f04f 0e01 	movcs.w	lr, #1
    bb2e:	f04f 0e00 	movcc.w	lr, #0
    bb32:	44be      	add	lr, r7
    bb34:	f844 6c44 	str.w	r6, [r4, #-68]
    for( ; i >= 16; i -= 16 )
    bb38:	f1ac 0c10 	sub.w	ip, ip, #16
    bb3c:	e5b8      	b.n	b6b0 <mpi_mul_hlp+0x10>
        MULADDC_CORE
    bb3e:	f855 6b04 	ldr.w	r6, [r5], #4
    bb42:	fba3 7806 	umull	r7, r8, r3, r6
    bb46:	eb1e 0e07 	adds.w	lr, lr, r7
    bb4a:	bf2c      	ite	cs
    bb4c:	2601      	movcs	r6, #1
    bb4e:	2600      	movcc	r6, #0
    bb50:	eb12 020e 	adds.w	r2, r2, lr
    bb54:	4446      	add	r6, r8
    bb56:	bf2c      	ite	cs
    bb58:	f04f 0e01 	movcs.w	lr, #1
    bb5c:	f04f 0e00 	movcc.w	lr, #0
    bb60:	44b6      	add	lr, r6
    bb62:	f841 2c04 	str.w	r2, [r1, #-4]
    for( ; i > 0; i-- )
    bb66:	e64b      	b.n	b800 <mpi_mul_hlp+0x160>

0000bb68 <mpi_bigendian_to_host.part.0>:
static void mpi_bigendian_to_host( mbedtls_mpi_uint * const p, size_t limbs )
    bb68:	b573      	push	{r0, r1, r4, r5, r6, lr}
    for( cur_limb_left = p, cur_limb_right = p + ( limbs - 1 );
    bb6a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    bb6e:	3901      	subs	r1, #1
    bb70:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    bb74:	4281      	cmp	r1, r0
    bb76:	d201      	bcs.n	bb7c <mpi_bigendian_to_host.part.0+0x14>
}
    bb78:	b002      	add	sp, #8
    bb7a:	bd70      	pop	{r4, r5, r6, pc}
    return( mpi_uint_bigendian_to_host_c( x ) );
    bb7c:	6803      	ldr	r3, [r0, #0]
    bb7e:	9301      	str	r3, [sp, #4]
        tmp             = mpi_uint_bigendian_to_host( *cur_limb_left  );
    bb80:	2304      	movs	r3, #4
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    bb82:	eb0d 0203 	add.w	r2, sp, r3
    mbedtls_mpi_uint tmp = 0;
    bb86:	2500      	movs	r5, #0
    bb88:	4614      	mov	r4, r2
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    bb8a:	f812 6b01 	ldrb.w	r6, [r2], #1
    bb8e:	3b01      	subs	r3, #1
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    bb90:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    bb94:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    bb98:	d1f7      	bne.n	bb8a <mpi_bigendian_to_host.part.0+0x22>
    return( mpi_uint_bigendian_to_host_c( x ) );
    bb9a:	680a      	ldr	r2, [r1, #0]
    bb9c:	9201      	str	r2, [sp, #4]
        *cur_limb_left  = mpi_uint_bigendian_to_host( *cur_limb_right );
    bb9e:	2204      	movs	r2, #4
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    bba0:	f814 6b01 	ldrb.w	r6, [r4], #1
    bba4:	3a01      	subs	r2, #1
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    bba6:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    bbaa:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    bbae:	d1f7      	bne.n	bba0 <mpi_bigendian_to_host.part.0+0x38>
        *cur_limb_left  = mpi_uint_bigendian_to_host( *cur_limb_right );
    bbb0:	f840 3b04 	str.w	r3, [r0], #4
        *cur_limb_right = tmp;
    bbb4:	f841 5904 	str.w	r5, [r1], #-4
         cur_limb_left++, cur_limb_right-- )
    bbb8:	e7dc      	b.n	bb74 <mpi_bigendian_to_host.part.0+0xc>

0000bbba <mpi_montmul.isra.0>:
 *                      Its initial content is unused and
 *                      its final content is indeterminate.
 *                      Note that unlike the usual convention in the library
 *                      for `const mbedtls_mpi*`, the content of T can change.
 */
static void mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
    bbba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bbbe:	b085      	sub	sp, #20
    bbc0:	4617      	mov	r7, r2
    bbc2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    bbc4:	9000      	str	r0, [sp, #0]
                         const mbedtls_mpi *T )
{
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    memset( T->p, 0, T->n * ciL );
    bbc6:	6862      	ldr	r2, [r4, #4]
    bbc8:	68a0      	ldr	r0, [r4, #8]
static void mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
    bbca:	9303      	str	r3, [sp, #12]
    bbcc:	468a      	mov	sl, r1
    memset( T->p, 0, T->n * ciL );
    bbce:	0092      	lsls	r2, r2, #2
    bbd0:	2100      	movs	r1, #0
    bbd2:	f7ff f85e 	bl	ac92 <memset>

    d = T->p;
    n = N->n;
    bbd6:	f8d7 9004 	ldr.w	r9, [r7, #4]
    m = ( B->n < n ) ? B->n : n;
    bbda:	f8da 3004 	ldr.w	r3, [sl, #4]
    d = T->p;
    bbde:	68a6      	ldr	r6, [r4, #8]
    m = ( B->n < n ) ? B->n : n;
    bbe0:	454b      	cmp	r3, r9
    bbe2:	bf28      	it	cs
    bbe4:	464b      	movcs	r3, r9
        u1 = ( d[0] + u0 * B->p[0] ) * mm;

        mpi_mul_hlp( m, B->p, d, u0 );
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
    bbe6:	f109 0401 	add.w	r4, r9, #1
    m = ( B->n < n ) ? B->n : n;
    bbea:	9301      	str	r3, [sp, #4]
        *d++ = u0; d[n + 1] = 0;
    bbec:	00a4      	lsls	r4, r4, #2
    d = T->p;
    bbee:	46b0      	mov	r8, r6
    for( i = 0; i < n; i++ )
    bbf0:	2500      	movs	r5, #0
    bbf2:	9b00      	ldr	r3, [sp, #0]
    bbf4:	45a9      	cmp	r9, r5
    bbf6:	6818      	ldr	r0, [r3, #0]
    bbf8:	d120      	bne.n	bc3c <mpi_montmul.isra.0+0x82>
    bbfa:	3c04      	subs	r4, #4
    bbfc:	eb06 0804 	add.w	r8, r6, r4
     * plus N. We now potentially subtract N, avoiding leaking whether the
     * subtraction is performed through side channels. */

    /* Copy the n least significant limbs of d to A, so that
     * A = d if d < N (recall that N has n limbs). */
    memcpy( A->p, d, n * ciL );
    bc00:	4622      	mov	r2, r4
    bc02:	4641      	mov	r1, r8
    bc04:	f7ff f81a 	bl	ac3c <memcpy>
    /* If d >= N then we want to set A to d - N. To prevent timing attacks,
     * do the calculation without using conditional tests. */
    /* Set d to d0 + (2^biL)^n - N where d0 is the current value of d. */
    d[n] += 1;
    bc08:	f856 3014 	ldr.w	r3, [r6, r4, lsl #1]
    d[n] -= mpi_sub_hlp( n, d, N->p );
    bc0c:	68ba      	ldr	r2, [r7, #8]
    d[n] += 1;
    bc0e:	3301      	adds	r3, #1
    bc10:	f846 3014 	str.w	r3, [r6, r4, lsl #1]
    d[n] -= mpi_sub_hlp( n, d, N->p );
    bc14:	4641      	mov	r1, r8
    bc16:	4628      	mov	r0, r5
    bc18:	f7ff fd25 	bl	b666 <mpi_sub_hlp>
    bc1c:	f856 3014 	ldr.w	r3, [r6, r4, lsl #1]
    bc20:	1a18      	subs	r0, r3, r0
     * so d[n] == 0 and we want to keep A as it is.
     * If d0 >= N then d >= (2^biL)^n, and d <= (2^biL)^n + N < 2 * (2^biL)^n
     * so d[n] == 1 and we want to set A to the result of the subtraction
     * which is d - (2^biL)^n, i.e. the n least significant limbs of d.
     * This exactly corresponds to a conditional assignment. */
    mpi_safe_cond_assign( n, A->p, d, (unsigned char) d[n] );
    bc22:	9b00      	ldr	r3, [sp, #0]
    d[n] -= mpi_sub_hlp( n, d, N->p );
    bc24:	f846 0014 	str.w	r0, [r6, r4, lsl #1]
    mpi_safe_cond_assign( n, A->p, d, (unsigned char) d[n] );
    bc28:	b2c0      	uxtb	r0, r0
    bc2a:	681c      	ldr	r4, [r3, #0]
        dest[i] = dest[i] * ( 1 - assign ) + src[i] * assign;
    bc2c:	f1c0 0601 	rsb	r6, r0, #1
    for( i = 0; i < n; i++ )
    bc30:	2300      	movs	r3, #0
    bc32:	429d      	cmp	r5, r3
    bc34:	d120      	bne.n	bc78 <mpi_montmul.isra.0+0xbe>
}
    bc36:	b005      	add	sp, #20
    bc38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
    bc3c:	f8da 1008 	ldr.w	r1, [sl, #8]
        u0 = A->p[i];
    bc40:	f850 b025 	ldr.w	fp, [r0, r5, lsl #2]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
    bc44:	680b      	ldr	r3, [r1, #0]
    bc46:	f8d8 0000 	ldr.w	r0, [r8]
    bc4a:	9a03      	ldr	r2, [sp, #12]
    bc4c:	fb03 030b 	mla	r3, r3, fp, r0
    bc50:	4353      	muls	r3, r2
        mpi_mul_hlp( m, B->p, d, u0 );
    bc52:	9801      	ldr	r0, [sp, #4]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
    bc54:	9302      	str	r3, [sp, #8]
        mpi_mul_hlp( m, B->p, d, u0 );
    bc56:	4642      	mov	r2, r8
    bc58:	465b      	mov	r3, fp
    bc5a:	f7ff fd21 	bl	b6a0 <mpi_mul_hlp>
        mpi_mul_hlp( n, N->p, d, u1 );
    bc5e:	9b02      	ldr	r3, [sp, #8]
    bc60:	68b9      	ldr	r1, [r7, #8]
    bc62:	4642      	mov	r2, r8
    bc64:	4648      	mov	r0, r9
    bc66:	f7ff fd1b 	bl	b6a0 <mpi_mul_hlp>
        *d++ = u0; d[n + 1] = 0;
    bc6a:	f848 bb04 	str.w	fp, [r8], #4
    bc6e:	2300      	movs	r3, #0
    bc70:	f848 3004 	str.w	r3, [r8, r4]
    for( i = 0; i < n; i++ )
    bc74:	3501      	adds	r5, #1
    bc76:	e7bc      	b.n	bbf2 <mpi_montmul.isra.0+0x38>
        dest[i] = dest[i] * ( 1 - assign ) + src[i] * assign;
    bc78:	f858 1023 	ldr.w	r1, [r8, r3, lsl #2]
    bc7c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    bc80:	4341      	muls	r1, r0
    bc82:	fb02 1206 	mla	r2, r2, r6, r1
    bc86:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for( i = 0; i < n; i++ )
    bc8a:	3301      	adds	r3, #1
    bc8c:	e7d1      	b.n	bc32 <mpi_montmul.isra.0+0x78>

0000bc8e <mbedtls_mpi_init>:
    X->n = 0;
    bc8e:	2300      	movs	r3, #0
    bc90:	2201      	movs	r2, #1
    bc92:	e9c0 2300 	strd	r2, r3, [r0]
    X->p = NULL;
    bc96:	6083      	str	r3, [r0, #8]
}
    bc98:	4770      	bx	lr

0000bc9a <mbedtls_mpi_free>:
{
    bc9a:	b510      	push	{r4, lr}
    if( X == NULL )
    bc9c:	4604      	mov	r4, r0
    bc9e:	b168      	cbz	r0, bcbc <mbedtls_mpi_free+0x22>
    if( X->p != NULL )
    bca0:	6880      	ldr	r0, [r0, #8]
    bca2:	b130      	cbz	r0, bcb2 <mbedtls_mpi_free+0x18>
    mbedtls_platform_zeroize( v, ciL * n );
    bca4:	6861      	ldr	r1, [r4, #4]
    bca6:	0089      	lsls	r1, r1, #2
    bca8:	f7fb fb96 	bl	73d8 <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
    bcac:	68a0      	ldr	r0, [r4, #8]
    bcae:	f7fb fb83 	bl	73b8 <mbedtls_free>
    X->n = 0;
    bcb2:	2300      	movs	r3, #0
    bcb4:	2201      	movs	r2, #1
    bcb6:	e9c4 2300 	strd	r2, r3, [r4]
    X->p = NULL;
    bcba:	60a3      	str	r3, [r4, #8]
}
    bcbc:	bd10      	pop	{r4, pc}

0000bcbe <mbedtls_mpi_grow>:
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
    bcbe:	f242 7310 	movw	r3, #10000	; 0x2710
    bcc2:	4299      	cmp	r1, r3
{
    bcc4:	b570      	push	{r4, r5, r6, lr}
    bcc6:	4604      	mov	r4, r0
    bcc8:	460d      	mov	r5, r1
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
    bcca:	d902      	bls.n	bcd2 <mbedtls_mpi_grow+0x14>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
    bccc:	f06f 000f 	mvn.w	r0, #15
}
    bcd0:	bd70      	pop	{r4, r5, r6, pc}
    if( X->n < nblimbs )
    bcd2:	6843      	ldr	r3, [r0, #4]
    bcd4:	428b      	cmp	r3, r1
    bcd6:	d216      	bcs.n	bd06 <mbedtls_mpi_grow+0x48>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
    bcd8:	2104      	movs	r1, #4
    bcda:	4628      	mov	r0, r5
    bcdc:	f7fb fb66 	bl	73ac <mbedtls_calloc>
    bce0:	4606      	mov	r6, r0
    bce2:	2800      	cmp	r0, #0
    bce4:	d0f2      	beq.n	bccc <mbedtls_mpi_grow+0xe>
        if( X->p != NULL )
    bce6:	68a1      	ldr	r1, [r4, #8]
    bce8:	b159      	cbz	r1, bd02 <mbedtls_mpi_grow+0x44>
            memcpy( p, X->p, X->n * ciL );
    bcea:	6862      	ldr	r2, [r4, #4]
    bcec:	0092      	lsls	r2, r2, #2
    bcee:	f7fe ffa5 	bl	ac3c <memcpy>
    mbedtls_platform_zeroize( v, ciL * n );
    bcf2:	6861      	ldr	r1, [r4, #4]
    bcf4:	68a0      	ldr	r0, [r4, #8]
    bcf6:	0089      	lsls	r1, r1, #2
    bcf8:	f7fb fb6e 	bl	73d8 <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
    bcfc:	68a0      	ldr	r0, [r4, #8]
    bcfe:	f7fb fb5b 	bl	73b8 <mbedtls_free>
        X->p = p;
    bd02:	e9c4 5601 	strd	r5, r6, [r4, #4]
    return( 0 );
    bd06:	2000      	movs	r0, #0
    bd08:	e7e2      	b.n	bcd0 <mbedtls_mpi_grow+0x12>

0000bd0a <mbedtls_mpi_copy>:
    if( X == Y )
    bd0a:	4288      	cmp	r0, r1
{
    bd0c:	b570      	push	{r4, r5, r6, lr}
    bd0e:	4605      	mov	r5, r0
    bd10:	460e      	mov	r6, r1
    if( X == Y )
    bd12:	d003      	beq.n	bd1c <mbedtls_mpi_copy+0x12>
    if( Y->n == 0 )
    bd14:	684c      	ldr	r4, [r1, #4]
    bd16:	b93c      	cbnz	r4, bd28 <mbedtls_mpi_copy+0x1e>
        mbedtls_mpi_free( X );
    bd18:	f7ff ffbf 	bl	bc9a <mbedtls_mpi_free>
        return( 0 );
    bd1c:	2000      	movs	r0, #0
    bd1e:	e011      	b.n	bd44 <mbedtls_mpi_copy+0x3a>
        if( Y->p[i] != 0 )
    bd20:	68b3      	ldr	r3, [r6, #8]
    bd22:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    bd26:	b913      	cbnz	r3, bd2e <mbedtls_mpi_copy+0x24>
    for( i = Y->n - 1; i > 0; i-- )
    bd28:	3c01      	subs	r4, #1
    bd2a:	2c00      	cmp	r4, #0
    bd2c:	d1f8      	bne.n	bd20 <mbedtls_mpi_copy+0x16>
    if( X->n < i )
    bd2e:	686a      	ldr	r2, [r5, #4]
    X->s = Y->s;
    bd30:	6833      	ldr	r3, [r6, #0]
    bd32:	602b      	str	r3, [r5, #0]
    i++;
    bd34:	3401      	adds	r4, #1
    if( X->n < i )
    bd36:	42a2      	cmp	r2, r4
    bd38:	d205      	bcs.n	bd46 <mbedtls_mpi_copy+0x3c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
    bd3a:	4621      	mov	r1, r4
    bd3c:	4628      	mov	r0, r5
    bd3e:	f7ff ffbe 	bl	bcbe <mbedtls_mpi_grow>
    bd42:	b140      	cbz	r0, bd56 <mbedtls_mpi_copy+0x4c>
}
    bd44:	bd70      	pop	{r4, r5, r6, pc}
        memset( X->p + i, 0, ( X->n - i ) * ciL );
    bd46:	68a8      	ldr	r0, [r5, #8]
    bd48:	1b12      	subs	r2, r2, r4
    bd4a:	0092      	lsls	r2, r2, #2
    bd4c:	2100      	movs	r1, #0
    bd4e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    bd52:	f7fe ff9e 	bl	ac92 <memset>
    memcpy( X->p, Y->p, i * ciL );
    bd56:	68b1      	ldr	r1, [r6, #8]
    bd58:	68a8      	ldr	r0, [r5, #8]
    bd5a:	00a2      	lsls	r2, r4, #2
    bd5c:	f7fe ff6e 	bl	ac3c <memcpy>
    bd60:	e7dc      	b.n	bd1c <mbedtls_mpi_copy+0x12>

0000bd62 <mbedtls_mpi_lset>:
{
    bd62:	b570      	push	{r4, r5, r6, lr}
    bd64:	460e      	mov	r6, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    bd66:	2101      	movs	r1, #1
{
    bd68:	4604      	mov	r4, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    bd6a:	f7ff ffa8 	bl	bcbe <mbedtls_mpi_grow>
    bd6e:	4605      	mov	r5, r0
    bd70:	b988      	cbnz	r0, bd96 <mbedtls_mpi_lset+0x34>
    memset( X->p, 0, X->n * ciL );
    bd72:	6862      	ldr	r2, [r4, #4]
    bd74:	4601      	mov	r1, r0
    bd76:	0092      	lsls	r2, r2, #2
    bd78:	68a0      	ldr	r0, [r4, #8]
    bd7a:	f7fe ff8a 	bl	ac92 <memset>
    X->p[0] = ( z < 0 ) ? -z : z;
    bd7e:	68a3      	ldr	r3, [r4, #8]
    bd80:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
    X->s    = ( z < 0 ) ? -1 : 1;
    bd84:	2e00      	cmp	r6, #0
    X->p[0] = ( z < 0 ) ? -z : z;
    bd86:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
    bd8a:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
    bd8c:	bfb4      	ite	lt
    bd8e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
    bd92:	2301      	movge	r3, #1
    bd94:	6023      	str	r3, [r4, #0]
}
    bd96:	4628      	mov	r0, r5
    bd98:	bd70      	pop	{r4, r5, r6, pc}

0000bd9a <mbedtls_mpi_get_bit>:
    if( X->n * biL <= pos )
    bd9a:	6843      	ldr	r3, [r0, #4]
    bd9c:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
    bda0:	bf3f      	itttt	cc
    bda2:	094a      	lsrcc	r2, r1, #5
    bda4:	6883      	ldrcc	r3, [r0, #8]
    bda6:	f853 0022 	ldrcc.w	r0, [r3, r2, lsl #2]
    bdaa:	f001 011f 	andcc.w	r1, r1, #31
    bdae:	bf3a      	itte	cc
    bdb0:	fa20 f101 	lsrcc.w	r1, r0, r1
    bdb4:	f001 0001 	andcc.w	r0, r1, #1
        return( 0 );
    bdb8:	2000      	movcs	r0, #0
}
    bdba:	4770      	bx	lr

0000bdbc <mbedtls_mpi_bitlen>:
{
    bdbc:	4602      	mov	r2, r0
    if( X->n == 0 )
    bdbe:	6840      	ldr	r0, [r0, #4]
    bdc0:	b188      	cbz	r0, bde6 <mbedtls_mpi_bitlen+0x2a>
    for( i = X->n - 1; i > 0; i-- )
    bdc2:	6892      	ldr	r2, [r2, #8]
    bdc4:	1e43      	subs	r3, r0, #1
    bdc6:	b97b      	cbnz	r3, bde8 <mbedtls_mpi_bitlen+0x2c>
    j = biL - mbedtls_clz( X->p[i] );
    bdc8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    for( j = 0; j < biL; j++ )
    bdcc:	2000      	movs	r0, #0
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
    bdce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
        if( x & mask ) break;
    bdd2:	4211      	tst	r1, r2
    bdd4:	d104      	bne.n	bde0 <mbedtls_mpi_bitlen+0x24>
    for( j = 0; j < biL; j++ )
    bdd6:	3001      	adds	r0, #1
    bdd8:	2820      	cmp	r0, #32
        mask >>= 1;
    bdda:	ea4f 0252 	mov.w	r2, r2, lsr #1
    for( j = 0; j < biL; j++ )
    bdde:	d1f8      	bne.n	bdd2 <mbedtls_mpi_bitlen+0x16>
    return( ( i * biL ) + j );
    bde0:	3301      	adds	r3, #1
    bde2:	ebc0 1043 	rsb	r0, r0, r3, lsl #5
}
    bde6:	4770      	bx	lr
        if( X->p[i] != 0 )
    bde8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    bdec:	2900      	cmp	r1, #0
    bdee:	d1eb      	bne.n	bdc8 <mbedtls_mpi_bitlen+0xc>
    for( i = X->n - 1; i > 0; i-- )
    bdf0:	3b01      	subs	r3, #1
    bdf2:	e7e8      	b.n	bdc6 <mbedtls_mpi_bitlen+0xa>

0000bdf4 <mbedtls_mpi_size>:
{
    bdf4:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
    bdf6:	f7ff ffe1 	bl	bdbc <mbedtls_mpi_bitlen>
    bdfa:	3007      	adds	r0, #7
}
    bdfc:	08c0      	lsrs	r0, r0, #3
    bdfe:	bd08      	pop	{r3, pc}

0000be00 <mbedtls_mpi_read_binary>:
{
    be00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
    be04:	f012 0503 	ands.w	r5, r2, #3
    be08:	bf18      	it	ne
    be0a:	2501      	movne	r5, #1
    if( X->n != limbs )
    be0c:	6843      	ldr	r3, [r0, #4]
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
    be0e:	eb05 0592 	add.w	r5, r5, r2, lsr #2
    if( X->n != limbs )
    be12:	42ab      	cmp	r3, r5
{
    be14:	4604      	mov	r4, r0
    be16:	4688      	mov	r8, r1
    be18:	4617      	mov	r7, r2
    if( X->n != limbs )
    be1a:	d108      	bne.n	be2e <mbedtls_mpi_read_binary+0x2e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
    be1c:	2100      	movs	r1, #0
    be1e:	4620      	mov	r0, r4
    be20:	f7ff ff9f 	bl	bd62 <mbedtls_mpi_lset>
    be24:	4606      	mov	r6, r0
    be26:	b188      	cbz	r0, be4c <mbedtls_mpi_read_binary+0x4c>
}
    be28:	4630      	mov	r0, r6
    be2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        mbedtls_mpi_free( X );
    be2e:	f7ff ff34 	bl	bc9a <mbedtls_mpi_free>
    X->n = 0;
    be32:	2300      	movs	r3, #0
    be34:	2201      	movs	r2, #1
    be36:	e9c4 2300 	strd	r2, r3, [r4]
    X->p = NULL;
    be3a:	60a3      	str	r3, [r4, #8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
    be3c:	4629      	mov	r1, r5
    be3e:	4620      	mov	r0, r4
    be40:	f7ff ff3d 	bl	bcbe <mbedtls_mpi_grow>
    be44:	4606      	mov	r6, r0
    be46:	2800      	cmp	r0, #0
    be48:	d0e8      	beq.n	be1c <mbedtls_mpi_read_binary+0x1c>
    be4a:	e7ed      	b.n	be28 <mbedtls_mpi_read_binary+0x28>
    if( buf != NULL )
    be4c:	f1b8 0f00 	cmp.w	r8, #0
    be50:	d0ea      	beq.n	be28 <mbedtls_mpi_read_binary+0x28>
        memcpy( Xp + overhead, buf, buflen );
    be52:	68a3      	ldr	r3, [r4, #8]
    size_t const overhead = ( limbs * ciL ) - buflen;
    be54:	ebc7 0085 	rsb	r0, r7, r5, lsl #2
        memcpy( Xp + overhead, buf, buflen );
    be58:	463a      	mov	r2, r7
    be5a:	4641      	mov	r1, r8
    be5c:	4418      	add	r0, r3
    be5e:	f7fe feed 	bl	ac3c <memcpy>
    if( limbs == 0 )
    be62:	2d00      	cmp	r5, #0
    be64:	d0e0      	beq.n	be28 <mbedtls_mpi_read_binary+0x28>
    be66:	68a0      	ldr	r0, [r4, #8]
    be68:	4629      	mov	r1, r5
    be6a:	f7ff fe7d 	bl	bb68 <mpi_bigendian_to_host.part.0>
    return( ret );
    be6e:	e7db      	b.n	be28 <mbedtls_mpi_read_binary+0x28>

0000be70 <mbedtls_mpi_write_binary>:
{
    be70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    be72:	4604      	mov	r4, r0
    be74:	4608      	mov	r0, r1
    stored_bytes = X->n * ciL;
    be76:	6863      	ldr	r3, [r4, #4]
    if( stored_bytes < buflen )
    be78:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
    stored_bytes = X->n * ciL;
    be7c:	ea4f 0583 	mov.w	r5, r3, lsl #2
    if( stored_bytes < buflen )
    be80:	d91c      	bls.n	bebc <mbedtls_mpi_write_binary+0x4c>
        p = buf + buflen - stored_bytes;
    be82:	1b52      	subs	r2, r2, r5
    be84:	188e      	adds	r6, r1, r2
        memset( buf, 0, buflen - stored_bytes );
    be86:	2100      	movs	r1, #0
    be88:	f7fe ff03 	bl	ac92 <memset>
        p = buf + buflen - stored_bytes;
    be8c:	4630      	mov	r0, r6
    be8e:	462a      	mov	r2, r5
    for( i = 0; i < bytes_to_copy; i++ )
    be90:	1881      	adds	r1, r0, r2
    be92:	2300      	movs	r3, #0
    be94:	429a      	cmp	r2, r3
    be96:	d113      	bne.n	bec0 <mbedtls_mpi_write_binary+0x50>
    return( 0 );
    be98:	2000      	movs	r0, #0
}
    be9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if( GET_BYTE( X, i ) != 0 )
    be9c:	68a7      	ldr	r7, [r4, #8]
    be9e:	f023 0c03 	bic.w	ip, r3, #3
    bea2:	f003 0103 	and.w	r1, r3, #3
    bea6:	00ce      	lsls	r6, r1, #3
    bea8:	f857 100c 	ldr.w	r1, [r7, ip]
    beac:	40f1      	lsrs	r1, r6
    beae:	f011 0fff 	tst.w	r1, #255	; 0xff
    beb2:	d111      	bne.n	bed8 <mbedtls_mpi_write_binary+0x68>
        for( i = bytes_to_copy; i < stored_bytes; i++ )
    beb4:	3301      	adds	r3, #1
    beb6:	42ab      	cmp	r3, r5
    beb8:	d1f0      	bne.n	be9c <mbedtls_mpi_write_binary+0x2c>
    beba:	e7e9      	b.n	be90 <mbedtls_mpi_write_binary+0x20>
    bebc:	4613      	mov	r3, r2
    bebe:	e7fa      	b.n	beb6 <mbedtls_mpi_write_binary+0x46>
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
    bec0:	68a7      	ldr	r7, [r4, #8]
    bec2:	f023 0603 	bic.w	r6, r3, #3
    bec6:	f003 0003 	and.w	r0, r3, #3
    beca:	00c5      	lsls	r5, r0, #3
    becc:	59b8      	ldr	r0, [r7, r6]
    bece:	40e8      	lsrs	r0, r5
    bed0:	f801 0d01 	strb.w	r0, [r1, #-1]!
    for( i = 0; i < bytes_to_copy; i++ )
    bed4:	3301      	adds	r3, #1
    bed6:	e7dd      	b.n	be94 <mbedtls_mpi_write_binary+0x24>
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
    bed8:	f06f 0007 	mvn.w	r0, #7
    bedc:	e7dd      	b.n	be9a <mbedtls_mpi_write_binary+0x2a>

0000bede <mbedtls_mpi_shift_l>:
{
    bede:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bee0:	4604      	mov	r4, r0
    bee2:	460e      	mov	r6, r1
    v0 = count / (biL    );
    bee4:	094d      	lsrs	r5, r1, #5
    t1 = count & (biL - 1);
    bee6:	f001 071f 	and.w	r7, r1, #31
    i = mbedtls_mpi_bitlen( X ) + count;
    beea:	f7ff ff67 	bl	bdbc <mbedtls_mpi_bitlen>
    if( X->n * biL < i )
    beee:	6863      	ldr	r3, [r4, #4]
    i = mbedtls_mpi_bitlen( X ) + count;
    bef0:	4430      	add	r0, r6
    if( X->n * biL < i )
    bef2:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
    bef6:	d805      	bhi.n	bf04 <mbedtls_mpi_shift_l+0x26>
    if( v0 > 0 )
    bef8:	2e1f      	cmp	r6, #31
    befa:	d80f      	bhi.n	bf1c <mbedtls_mpi_shift_l+0x3e>
    if( t1 > 0 )
    befc:	2f00      	cmp	r7, #0
    befe:	d13a      	bne.n	bf76 <mbedtls_mpi_shift_l+0x98>
    ret = 0;
    bf00:	2000      	movs	r0, #0
    bf02:	e00a      	b.n	bf1a <mbedtls_mpi_shift_l+0x3c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
    bf04:	f010 011f 	ands.w	r1, r0, #31
    bf08:	bf18      	it	ne
    bf0a:	2101      	movne	r1, #1
    bf0c:	eb01 1150 	add.w	r1, r1, r0, lsr #5
    bf10:	4620      	mov	r0, r4
    bf12:	f7ff fed4 	bl	bcbe <mbedtls_mpi_grow>
    bf16:	2800      	cmp	r0, #0
    bf18:	d0ee      	beq.n	bef8 <mbedtls_mpi_shift_l+0x1a>
}
    bf1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for( i = X->n; i > v0; i-- )
    bf1c:	6863      	ldr	r3, [r4, #4]
    bf1e:	f06f 0003 	mvn.w	r0, #3
    bf22:	009a      	lsls	r2, r3, #2
    bf24:	4368      	muls	r0, r5
    bf26:	4619      	mov	r1, r3
    bf28:	42a9      	cmp	r1, r5
    bf2a:	f1a2 0204 	sub.w	r2, r2, #4
    bf2e:	d80a      	bhi.n	bf46 <mbedtls_mpi_shift_l+0x68>
    bf30:	42ab      	cmp	r3, r5
    bf32:	bf28      	it	cs
    bf34:	462b      	movcs	r3, r5
    bf36:	009b      	lsls	r3, r3, #2
            X->p[i - 1] = 0;
    bf38:	2200      	movs	r2, #0
        for( ; i > 0; i-- )
    bf3a:	3b04      	subs	r3, #4
    bf3c:	1d19      	adds	r1, r3, #4
    bf3e:	d0dd      	beq.n	befc <mbedtls_mpi_shift_l+0x1e>
            X->p[i - 1] = 0;
    bf40:	68a1      	ldr	r1, [r4, #8]
    bf42:	50ca      	str	r2, [r1, r3]
        for( ; i > 0; i-- )
    bf44:	e7f9      	b.n	bf3a <mbedtls_mpi_shift_l+0x5c>
            X->p[i - 1] = X->p[i - v0 - 1];
    bf46:	68a6      	ldr	r6, [r4, #8]
    bf48:	eb06 0c02 	add.w	ip, r6, r2
        for( i = X->n; i > v0; i-- )
    bf4c:	3901      	subs	r1, #1
            X->p[i - 1] = X->p[i - v0 - 1];
    bf4e:	f85c c000 	ldr.w	ip, [ip, r0]
    bf52:	f846 c002 	str.w	ip, [r6, r2]
        for( i = X->n; i > v0; i-- )
    bf56:	e7e7      	b.n	bf28 <mbedtls_mpi_shift_l+0x4a>
            r1 = X->p[i] >> (biL - t1);
    bf58:	68a0      	ldr	r0, [r4, #8]
    bf5a:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
            X->p[i] <<= t1;
    bf5e:	fa01 f307 	lsl.w	r3, r1, r7
            X->p[i] |= r0;
    bf62:	4313      	orrs	r3, r2
    bf64:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
            r0 = r1;
    bf68:	fa21 f206 	lsr.w	r2, r1, r6
        for( i = v0; i < X->n; i++ )
    bf6c:	3501      	adds	r5, #1
    bf6e:	6863      	ldr	r3, [r4, #4]
    bf70:	42ab      	cmp	r3, r5
    bf72:	d8f1      	bhi.n	bf58 <mbedtls_mpi_shift_l+0x7a>
    bf74:	e7c4      	b.n	bf00 <mbedtls_mpi_shift_l+0x22>
    mbedtls_mpi_uint r0 = 0, r1;
    bf76:	2200      	movs	r2, #0
            r1 = X->p[i] >> (biL - t1);
    bf78:	f1c7 0620 	rsb	r6, r7, #32
    bf7c:	e7f7      	b.n	bf6e <mbedtls_mpi_shift_l+0x90>

0000bf7e <mbedtls_mpi_shift_r>:
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    bf7e:	6843      	ldr	r3, [r0, #4]
{
    bf80:	b4f0      	push	{r4, r5, r6, r7}
    v0 = count /  biL;
    bf82:	094c      	lsrs	r4, r1, #5
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    bf84:	42a3      	cmp	r3, r4
    v1 = count & (biL - 1);
    bf86:	f001 021f 	and.w	r2, r1, #31
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    bf8a:	d301      	bcc.n	bf90 <mbedtls_mpi_shift_r+0x12>
    bf8c:	d104      	bne.n	bf98 <mbedtls_mpi_shift_r+0x1a>
    bf8e:	b36a      	cbz	r2, bfec <mbedtls_mpi_shift_r+0x6e>
}
    bf90:	bcf0      	pop	{r4, r5, r6, r7}
        return mbedtls_mpi_lset( X, 0 );
    bf92:	2100      	movs	r1, #0
    bf94:	f7ff bee5 	b.w	bd62 <mbedtls_mpi_lset>
    if( v0 > 0 )
    bf98:	291f      	cmp	r1, #31
    bf9a:	d829      	bhi.n	bff0 <mbedtls_mpi_shift_r+0x72>
    if( v1 > 0 )
    bf9c:	b9aa      	cbnz	r2, bfca <mbedtls_mpi_shift_r+0x4c>
}
    bf9e:	2000      	movs	r0, #0
    bfa0:	bcf0      	pop	{r4, r5, r6, r7}
    bfa2:	4770      	bx	lr
            X->p[i] = X->p[i + v0];
    bfa4:	6885      	ldr	r5, [r0, #8]
    bfa6:	586e      	ldr	r6, [r5, r1]
    bfa8:	f845 6023 	str.w	r6, [r5, r3, lsl #2]
        for( i = 0; i < X->n - v0; i++ )
    bfac:	3104      	adds	r1, #4
    bfae:	3301      	adds	r3, #1
    bfb0:	6845      	ldr	r5, [r0, #4]
    bfb2:	1b2d      	subs	r5, r5, r4
    bfb4:	429d      	cmp	r5, r3
    bfb6:	d8f5      	bhi.n	bfa4 <mbedtls_mpi_shift_r+0x26>
            X->p[i] = 0;
    bfb8:	2400      	movs	r4, #0
        for( ; i < X->n; i++ )
    bfba:	6841      	ldr	r1, [r0, #4]
    bfbc:	4299      	cmp	r1, r3
    bfbe:	d9ed      	bls.n	bf9c <mbedtls_mpi_shift_r+0x1e>
            X->p[i] = 0;
    bfc0:	6881      	ldr	r1, [r0, #8]
    bfc2:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
        for( ; i < X->n; i++ )
    bfc6:	3301      	adds	r3, #1
    bfc8:	e7f7      	b.n	bfba <mbedtls_mpi_shift_r+0x3c>
        for( i = X->n; i > 0; i-- )
    bfca:	6843      	ldr	r3, [r0, #4]
    mbedtls_mpi_uint r0 = 0, r1;
    bfcc:	2400      	movs	r4, #0
            r1 = X->p[i - 1] << (biL - v1);
    bfce:	f1c2 0720 	rsb	r7, r2, #32
        for( i = X->n; i > 0; i-- )
    bfd2:	3b01      	subs	r3, #1
    bfd4:	d3e3      	bcc.n	bf9e <mbedtls_mpi_shift_r+0x20>
            r1 = X->p[i - 1] << (biL - v1);
    bfd6:	6886      	ldr	r6, [r0, #8]
    bfd8:	f856 5023 	ldr.w	r5, [r6, r3, lsl #2]
            X->p[i - 1] >>= v1;
    bfdc:	fa25 f102 	lsr.w	r1, r5, r2
            X->p[i - 1] |= r0;
    bfe0:	4321      	orrs	r1, r4
    bfe2:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
            r0 = r1;
    bfe6:	fa05 f407 	lsl.w	r4, r5, r7
    bfea:	e7f2      	b.n	bfd2 <mbedtls_mpi_shift_r+0x54>
    if( v0 > 0 )
    bfec:	291f      	cmp	r1, #31
    bfee:	d9d6      	bls.n	bf9e <mbedtls_mpi_shift_r+0x20>
    bff0:	00a1      	lsls	r1, r4, #2
{
    bff2:	2300      	movs	r3, #0
    bff4:	e7dc      	b.n	bfb0 <mbedtls_mpi_shift_r+0x32>

0000bff6 <mbedtls_mpi_cmp_abs>:
{
    bff6:	b530      	push	{r4, r5, lr}
    for( i = X->n; i > 0; i-- )
    bff8:	6843      	ldr	r3, [r0, #4]
    bffa:	b92b      	cbnz	r3, c008 <mbedtls_mpi_cmp_abs+0x12>
    for( j = Y->n; j > 0; j-- )
    bffc:	684a      	ldr	r2, [r1, #4]
    bffe:	b962      	cbnz	r2, c01a <mbedtls_mpi_cmp_abs+0x24>
    if( i == 0 && j == 0 )
    c000:	1e18      	subs	r0, r3, #0
    c002:	bf18      	it	ne
    c004:	2001      	movne	r0, #1
    c006:	e028      	b.n	c05a <mbedtls_mpi_cmp_abs+0x64>
        if( X->p[i - 1] != 0 )
    c008:	6882      	ldr	r2, [r0, #8]
    c00a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    c00e:	f852 2c04 	ldr.w	r2, [r2, #-4]
    c012:	2a00      	cmp	r2, #0
    c014:	d1f2      	bne.n	bffc <mbedtls_mpi_cmp_abs+0x6>
    for( i = X->n; i > 0; i-- )
    c016:	3b01      	subs	r3, #1
    c018:	e7ef      	b.n	bffa <mbedtls_mpi_cmp_abs+0x4>
        if( Y->p[j - 1] != 0 )
    c01a:	688c      	ldr	r4, [r1, #8]
    c01c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
    c020:	f855 5c04 	ldr.w	r5, [r5, #-4]
    c024:	b985      	cbnz	r5, c048 <mbedtls_mpi_cmp_abs+0x52>
    for( j = Y->n; j > 0; j-- )
    c026:	3a01      	subs	r2, #1
    c028:	e7e9      	b.n	bffe <mbedtls_mpi_cmp_abs+0x8>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
    c02a:	6882      	ldr	r2, [r0, #8]
    c02c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    c030:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    c034:	4291      	cmp	r1, r2
    c036:	d805      	bhi.n	c044 <mbedtls_mpi_cmp_abs+0x4e>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
    c038:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    c03c:	d20a      	bcs.n	c054 <mbedtls_mpi_cmp_abs+0x5e>
    if( j > i ) return( -1 );
    c03e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c042:	e00a      	b.n	c05a <mbedtls_mpi_cmp_abs+0x64>
    if( i > j ) return(  1 );
    c044:	2001      	movs	r0, #1
    c046:	e008      	b.n	c05a <mbedtls_mpi_cmp_abs+0x64>
    if( i == 0 && j == 0 )
    c048:	b10b      	cbz	r3, c04e <mbedtls_mpi_cmp_abs+0x58>
    if( i > j ) return(  1 );
    c04a:	4293      	cmp	r3, r2
    c04c:	d8fa      	bhi.n	c044 <mbedtls_mpi_cmp_abs+0x4e>
    if( j > i ) return( -1 );
    c04e:	4293      	cmp	r3, r2
    c050:	d3f5      	bcc.n	c03e <mbedtls_mpi_cmp_abs+0x48>
    c052:	3b01      	subs	r3, #1
    for( ; i > 0; i-- )
    c054:	1c5a      	adds	r2, r3, #1
    c056:	d1e8      	bne.n	c02a <mbedtls_mpi_cmp_abs+0x34>
    return( 0 );
    c058:	2000      	movs	r0, #0
}
    c05a:	bd30      	pop	{r4, r5, pc}

0000c05c <mbedtls_mpi_cmp_mpi>:
{
    c05c:	b530      	push	{r4, r5, lr}
    for( i = X->n; i > 0; i-- )
    c05e:	6843      	ldr	r3, [r0, #4]
{
    c060:	4602      	mov	r2, r0
    for( i = X->n; i > 0; i-- )
    c062:	b923      	cbnz	r3, c06e <mbedtls_mpi_cmp_mpi+0x12>
    for( j = Y->n; j > 0; j-- )
    c064:	6848      	ldr	r0, [r1, #4]
    c066:	b958      	cbnz	r0, c080 <mbedtls_mpi_cmp_mpi+0x24>
    if( i == 0 && j == 0 )
    c068:	2b00      	cmp	r3, #0
    c06a:	d138      	bne.n	c0de <mbedtls_mpi_cmp_mpi+0x82>
    c06c:	e031      	b.n	c0d2 <mbedtls_mpi_cmp_mpi+0x76>
        if( X->p[i - 1] != 0 )
    c06e:	6890      	ldr	r0, [r2, #8]
    c070:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    c074:	f850 0c04 	ldr.w	r0, [r0, #-4]
    c078:	2800      	cmp	r0, #0
    c07a:	d1f3      	bne.n	c064 <mbedtls_mpi_cmp_mpi+0x8>
    for( i = X->n; i > 0; i-- )
    c07c:	3b01      	subs	r3, #1
    c07e:	e7f0      	b.n	c062 <mbedtls_mpi_cmp_mpi+0x6>
        if( Y->p[j - 1] != 0 )
    c080:	688c      	ldr	r4, [r1, #8]
    c082:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    c086:	f855 5c04 	ldr.w	r5, [r5, #-4]
    c08a:	bb25      	cbnz	r5, c0d6 <mbedtls_mpi_cmp_mpi+0x7a>
    for( j = Y->n; j > 0; j-- )
    c08c:	3801      	subs	r0, #1
    c08e:	e7ea      	b.n	c066 <mbedtls_mpi_cmp_mpi+0xa>
    if( j > i ) return( -Y->s );
    c090:	4283      	cmp	r3, r0
    c092:	6809      	ldr	r1, [r1, #0]
    c094:	d201      	bcs.n	c09a <mbedtls_mpi_cmp_mpi+0x3e>
    c096:	4248      	negs	r0, r1
    c098:	e022      	b.n	c0e0 <mbedtls_mpi_cmp_mpi+0x84>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
    c09a:	6810      	ldr	r0, [r2, #0]
    c09c:	2800      	cmp	r0, #0
    c09e:	dd03      	ble.n	c0a8 <mbedtls_mpi_cmp_mpi+0x4c>
    c0a0:	2900      	cmp	r1, #0
    c0a2:	da13      	bge.n	c0cc <mbedtls_mpi_cmp_mpi+0x70>
    c0a4:	2001      	movs	r0, #1
    c0a6:	e01b      	b.n	c0e0 <mbedtls_mpi_cmp_mpi+0x84>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
    c0a8:	2900      	cmp	r1, #0
    c0aa:	dd0f      	ble.n	c0cc <mbedtls_mpi_cmp_mpi+0x70>
    c0ac:	b170      	cbz	r0, c0cc <mbedtls_mpi_cmp_mpi+0x70>
    c0ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c0b2:	e015      	b.n	c0e0 <mbedtls_mpi_cmp_mpi+0x84>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
    c0b4:	6891      	ldr	r1, [r2, #8]
    c0b6:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
    c0ba:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
    c0be:	428d      	cmp	r5, r1
    c0c0:	d80e      	bhi.n	c0e0 <mbedtls_mpi_cmp_mpi+0x84>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    c0c2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    c0c6:	d202      	bcs.n	c0ce <mbedtls_mpi_cmp_mpi+0x72>
    c0c8:	4240      	negs	r0, r0
    c0ca:	e009      	b.n	c0e0 <mbedtls_mpi_cmp_mpi+0x84>
    c0cc:	3b01      	subs	r3, #1
    for( ; i > 0; i-- )
    c0ce:	1c59      	adds	r1, r3, #1
    c0d0:	d1f0      	bne.n	c0b4 <mbedtls_mpi_cmp_mpi+0x58>
    return( 0 );
    c0d2:	2000      	movs	r0, #0
    c0d4:	e004      	b.n	c0e0 <mbedtls_mpi_cmp_mpi+0x84>
    if( i == 0 && j == 0 )
    c0d6:	2b00      	cmp	r3, #0
    c0d8:	d0da      	beq.n	c090 <mbedtls_mpi_cmp_mpi+0x34>
    if( i > j ) return(  X->s );
    c0da:	4283      	cmp	r3, r0
    c0dc:	d9d8      	bls.n	c090 <mbedtls_mpi_cmp_mpi+0x34>
    c0de:	6810      	ldr	r0, [r2, #0]
}
    c0e0:	bd30      	pop	{r4, r5, pc}

0000c0e2 <mbedtls_mpi_cmp_int>:
{
    c0e2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    *p  = ( z < 0 ) ? -z : z;
    c0e4:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
    c0e8:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
    Y.s = ( z < 0 ) ? -1 : 1;
    c0ec:	2900      	cmp	r1, #0
    *p  = ( z < 0 ) ? -z : z;
    c0ee:	9300      	str	r3, [sp, #0]
    Y.s = ( z < 0 ) ? -1 : 1;
    c0f0:	bfb4      	ite	lt
    c0f2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
    c0f6:	2301      	movge	r3, #1
    c0f8:	9301      	str	r3, [sp, #4]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
    c0fa:	a901      	add	r1, sp, #4
    Y.n = 1;
    c0fc:	2301      	movs	r3, #1
    c0fe:	9302      	str	r3, [sp, #8]
    Y.p = p;
    c100:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
    c104:	f7ff ffaa 	bl	c05c <mbedtls_mpi_cmp_mpi>
}
    c108:	b005      	add	sp, #20
    c10a:	f85d fb04 	ldr.w	pc, [sp], #4

0000c10e <mbedtls_mpi_add_abs>:
    if( X == B )
    c10e:	4290      	cmp	r0, r2
{
    c110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c114:	4607      	mov	r7, r0
    c116:	460d      	mov	r5, r1
    c118:	4616      	mov	r6, r2
    if( X == B )
    c11a:	d002      	beq.n	c122 <mbedtls_mpi_add_abs+0x14>
    if( X != A )
    c11c:	4288      	cmp	r0, r1
    c11e:	d129      	bne.n	c174 <mbedtls_mpi_add_abs+0x66>
{
    c120:	4635      	mov	r5, r6
    X->s = 1;
    c122:	2301      	movs	r3, #1
    for( j = B->n; j > 0; j-- )
    c124:	686e      	ldr	r6, [r5, #4]
    X->s = 1;
    c126:	603b      	str	r3, [r7, #0]
    for( j = B->n; j > 0; j-- )
    c128:	bb66      	cbnz	r6, c184 <mbedtls_mpi_add_abs+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    c12a:	4631      	mov	r1, r6
    c12c:	4638      	mov	r0, r7
    c12e:	f7ff fdc6 	bl	bcbe <mbedtls_mpi_grow>
    c132:	4604      	mov	r4, r0
    c134:	bb18      	cbnz	r0, c17e <mbedtls_mpi_add_abs+0x70>
    o = B->p; p = X->p; c = 0;
    c136:	68bb      	ldr	r3, [r7, #8]
    c138:	68a9      	ldr	r1, [r5, #8]
    c13a:	4605      	mov	r5, r0
    for( i = 0; i < j; i++, o++, p++ )
    c13c:	4286      	cmp	r6, r0
    c13e:	d12a      	bne.n	c196 <mbedtls_mpi_add_abs+0x88>
    c140:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    while( c != 0 )
    c144:	b1dd      	cbz	r5, c17e <mbedtls_mpi_add_abs+0x70>
        if( i >= X->n )
    c146:	687a      	ldr	r2, [r7, #4]
    c148:	42b2      	cmp	r2, r6
    c14a:	f106 0801 	add.w	r8, r6, #1
    c14e:	d808      	bhi.n	c162 <mbedtls_mpi_add_abs+0x54>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
    c150:	4641      	mov	r1, r8
    c152:	4638      	mov	r0, r7
    c154:	f7ff fdb3 	bl	bcbe <mbedtls_mpi_grow>
    c158:	2800      	cmp	r0, #0
    c15a:	d12f      	bne.n	c1bc <mbedtls_mpi_add_abs+0xae>
            p = X->p + i;
    c15c:	68bb      	ldr	r3, [r7, #8]
    c15e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
        *p += c; c = ( *p < c ); i++; p++;
    c162:	681a      	ldr	r2, [r3, #0]
    c164:	1955      	adds	r5, r2, r5
    c166:	f843 5b04 	str.w	r5, [r3], #4
    c16a:	4646      	mov	r6, r8
    c16c:	bf2c      	ite	cs
    c16e:	2501      	movcs	r5, #1
    c170:	2500      	movcc	r5, #0
    c172:	e7e7      	b.n	c144 <mbedtls_mpi_add_abs+0x36>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
    c174:	f7ff fdc9 	bl	bd0a <mbedtls_mpi_copy>
    c178:	4604      	mov	r4, r0
    c17a:	2800      	cmp	r0, #0
    c17c:	d0d0      	beq.n	c120 <mbedtls_mpi_add_abs+0x12>
}
    c17e:	4620      	mov	r0, r4
    c180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( B->p[j - 1] != 0 )
    c184:	68ab      	ldr	r3, [r5, #8]
    c186:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    c18a:	f853 3c04 	ldr.w	r3, [r3, #-4]
    c18e:	2b00      	cmp	r3, #0
    c190:	d1cb      	bne.n	c12a <mbedtls_mpi_add_abs+0x1c>
    for( j = B->n; j > 0; j-- )
    c192:	3e01      	subs	r6, #1
    c194:	e7c8      	b.n	c128 <mbedtls_mpi_add_abs+0x1a>
        *p +=  c; c  = ( *p <  c );
    c196:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    c19a:	eb12 0c05 	adds.w	ip, r2, r5
    c19e:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
    c1a2:	bf2c      	ite	cs
    c1a4:	2501      	movcs	r5, #1
    c1a6:	2500      	movcc	r5, #0
        *p += tmp; c += ( *p < tmp );
    c1a8:	eb1c 0202 	adds.w	r2, ip, r2
    c1ac:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    c1b0:	bf2c      	ite	cs
    c1b2:	2201      	movcs	r2, #1
    c1b4:	2200      	movcc	r2, #0
    c1b6:	4415      	add	r5, r2
    for( i = 0; i < j; i++, o++, p++ )
    c1b8:	3001      	adds	r0, #1
    c1ba:	e7bf      	b.n	c13c <mbedtls_mpi_add_abs+0x2e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
    c1bc:	4604      	mov	r4, r0
    return( ret );
    c1be:	e7de      	b.n	c17e <mbedtls_mpi_add_abs+0x70>

0000c1c0 <mbedtls_mpi_sub_abs>:
{
    c1c0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    c1c4:	4617      	mov	r7, r2
    X->n = 0;
    c1c6:	2300      	movs	r3, #0
    c1c8:	2201      	movs	r2, #1
    if( X == B )
    c1ca:	42b8      	cmp	r0, r7
    X->n = 0;
    c1cc:	e9cd 2301 	strd	r2, r3, [sp, #4]
{
    c1d0:	4606      	mov	r6, r0
    c1d2:	4688      	mov	r8, r1
    X->p = NULL;
    c1d4:	9303      	str	r3, [sp, #12]
    if( X == B )
    c1d6:	d106      	bne.n	c1e6 <mbedtls_mpi_sub_abs+0x26>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
    c1d8:	4601      	mov	r1, r0
    c1da:	a801      	add	r0, sp, #4
    c1dc:	f7ff fd95 	bl	bd0a <mbedtls_mpi_copy>
    c1e0:	4604      	mov	r4, r0
    c1e2:	bb28      	cbnz	r0, c230 <mbedtls_mpi_sub_abs+0x70>
        B = &TB;
    c1e4:	af01      	add	r7, sp, #4
    if( X != A )
    c1e6:	4546      	cmp	r6, r8
    c1e8:	d11b      	bne.n	c222 <mbedtls_mpi_sub_abs+0x62>
    X->s = 1;
    c1ea:	e9d7 5201 	ldrd	r5, r2, [r7, #4]
    c1ee:	2301      	movs	r3, #1
    c1f0:	6033      	str	r3, [r6, #0]
    for( n = B->n; n > 0; n-- )
    c1f2:	bb25      	cbnz	r5, c23e <mbedtls_mpi_sub_abs+0x7e>
    carry = mpi_sub_hlp( n, X->p, B->p );
    c1f4:	68b1      	ldr	r1, [r6, #8]
    c1f6:	4628      	mov	r0, r5
    c1f8:	f7ff fa35 	bl	b666 <mpi_sub_hlp>
    if( carry != 0 )
    c1fc:	4604      	mov	r4, r0
    c1fe:	b1b8      	cbz	r0, c230 <mbedtls_mpi_sub_abs+0x70>
            --X->p[n];
    c200:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
        for( ; n < X->n && X->p[n] == 0; n++ )
    c204:	6873      	ldr	r3, [r6, #4]
    c206:	42ab      	cmp	r3, r5
    c208:	d92b      	bls.n	c262 <mbedtls_mpi_sub_abs+0xa2>
    c20a:	68b3      	ldr	r3, [r6, #8]
    c20c:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
    c210:	b31a      	cbz	r2, c25a <mbedtls_mpi_sub_abs+0x9a>
        --X->p[n];
    c212:	68b2      	ldr	r2, [r6, #8]
    c214:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
    c218:	3b01      	subs	r3, #1
    c21a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
    ret = 0;
    c21e:	2400      	movs	r4, #0
    c220:	e006      	b.n	c230 <mbedtls_mpi_sub_abs+0x70>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
    c222:	4641      	mov	r1, r8
    c224:	4630      	mov	r0, r6
    c226:	f7ff fd70 	bl	bd0a <mbedtls_mpi_copy>
    c22a:	4604      	mov	r4, r0
    c22c:	2800      	cmp	r0, #0
    c22e:	d0dc      	beq.n	c1ea <mbedtls_mpi_sub_abs+0x2a>
    mbedtls_mpi_free( &TB );
    c230:	a801      	add	r0, sp, #4
    c232:	f7ff fd32 	bl	bc9a <mbedtls_mpi_free>
}
    c236:	4620      	mov	r0, r4
    c238:	b004      	add	sp, #16
    c23a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( B->p[n - 1] != 0 )
    c23e:	eb02 0385 	add.w	r3, r2, r5, lsl #2
    c242:	f853 3c04 	ldr.w	r3, [r3, #-4]
    c246:	b90b      	cbnz	r3, c24c <mbedtls_mpi_sub_abs+0x8c>
    for( n = B->n; n > 0; n-- )
    c248:	3d01      	subs	r5, #1
    c24a:	e7d2      	b.n	c1f2 <mbedtls_mpi_sub_abs+0x32>
    if( n > A->n )
    c24c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    c250:	42ab      	cmp	r3, r5
    c252:	d2cf      	bcs.n	c1f4 <mbedtls_mpi_sub_abs+0x34>
        ret = MBEDTLS_ERR_MPI_NEGATIVE_VALUE;
    c254:	f06f 0409 	mvn.w	r4, #9
    c258:	e7ea      	b.n	c230 <mbedtls_mpi_sub_abs+0x70>
            --X->p[n];
    c25a:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
        for( ; n < X->n && X->p[n] == 0; n++ )
    c25e:	3501      	adds	r5, #1
    c260:	e7d0      	b.n	c204 <mbedtls_mpi_sub_abs+0x44>
        if( n == X->n )
    c262:	d1d6      	bne.n	c212 <mbedtls_mpi_sub_abs+0x52>
    c264:	e7f6      	b.n	c254 <mbedtls_mpi_sub_abs+0x94>

0000c266 <mbedtls_mpi_add_mpi>:
{
    c266:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    s = A->s;
    c268:	680d      	ldr	r5, [r1, #0]
    if( A->s * B->s < 0 )
    c26a:	6813      	ldr	r3, [r2, #0]
    c26c:	436b      	muls	r3, r5
{
    c26e:	4604      	mov	r4, r0
    c270:	460f      	mov	r7, r1
    c272:	4616      	mov	r6, r2
    if( A->s * B->s < 0 )
    c274:	d516      	bpl.n	c2a4 <mbedtls_mpi_add_mpi+0x3e>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
    c276:	4611      	mov	r1, r2
    c278:	4638      	mov	r0, r7
    c27a:	f7ff febc 	bl	bff6 <mbedtls_mpi_cmp_abs>
    c27e:	2800      	cmp	r0, #0
    c280:	db06      	blt.n	c290 <mbedtls_mpi_add_mpi+0x2a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
    c282:	4632      	mov	r2, r6
    c284:	4639      	mov	r1, r7
    c286:	4620      	mov	r0, r4
    c288:	f7ff ff9a 	bl	c1c0 <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    c28c:	b140      	cbz	r0, c2a0 <mbedtls_mpi_add_mpi+0x3a>
}
    c28e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    c290:	463a      	mov	r2, r7
    c292:	4631      	mov	r1, r6
    c294:	4620      	mov	r0, r4
    c296:	f7ff ff93 	bl	c1c0 <mbedtls_mpi_sub_abs>
    c29a:	2800      	cmp	r0, #0
    c29c:	d1f7      	bne.n	c28e <mbedtls_mpi_add_mpi+0x28>
            X->s = -s;
    c29e:	426d      	negs	r5, r5
        X->s = s;
    c2a0:	6025      	str	r5, [r4, #0]
    return( ret );
    c2a2:	e7f4      	b.n	c28e <mbedtls_mpi_add_mpi+0x28>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    c2a4:	f7ff ff33 	bl	c10e <mbedtls_mpi_add_abs>
    c2a8:	e7f0      	b.n	c28c <mbedtls_mpi_add_mpi+0x26>

0000c2aa <mbedtls_mpi_sub_mpi>:
{
    c2aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    s = A->s;
    c2ac:	680d      	ldr	r5, [r1, #0]
    if( A->s * B->s > 0 )
    c2ae:	6813      	ldr	r3, [r2, #0]
    c2b0:	436b      	muls	r3, r5
    c2b2:	2b00      	cmp	r3, #0
{
    c2b4:	4604      	mov	r4, r0
    c2b6:	460f      	mov	r7, r1
    c2b8:	4616      	mov	r6, r2
    if( A->s * B->s > 0 )
    c2ba:	dd16      	ble.n	c2ea <mbedtls_mpi_sub_mpi+0x40>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
    c2bc:	4611      	mov	r1, r2
    c2be:	4638      	mov	r0, r7
    c2c0:	f7ff fe99 	bl	bff6 <mbedtls_mpi_cmp_abs>
    c2c4:	2800      	cmp	r0, #0
    c2c6:	db06      	blt.n	c2d6 <mbedtls_mpi_sub_mpi+0x2c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
    c2c8:	4632      	mov	r2, r6
    c2ca:	4639      	mov	r1, r7
    c2cc:	4620      	mov	r0, r4
    c2ce:	f7ff ff77 	bl	c1c0 <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    c2d2:	b140      	cbz	r0, c2e6 <mbedtls_mpi_sub_mpi+0x3c>
}
    c2d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    c2d6:	463a      	mov	r2, r7
    c2d8:	4631      	mov	r1, r6
    c2da:	4620      	mov	r0, r4
    c2dc:	f7ff ff70 	bl	c1c0 <mbedtls_mpi_sub_abs>
    c2e0:	2800      	cmp	r0, #0
    c2e2:	d1f7      	bne.n	c2d4 <mbedtls_mpi_sub_mpi+0x2a>
            X->s = -s;
    c2e4:	426d      	negs	r5, r5
        X->s = s;
    c2e6:	6025      	str	r5, [r4, #0]
    return( ret );
    c2e8:	e7f4      	b.n	c2d4 <mbedtls_mpi_sub_mpi+0x2a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    c2ea:	f7ff ff10 	bl	c10e <mbedtls_mpi_add_abs>
    c2ee:	e7f0      	b.n	c2d2 <mbedtls_mpi_sub_mpi+0x28>

0000c2f0 <mbedtls_mpi_mul_mpi>:
{
    c2f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    X->n = 0;
    c2f4:	2300      	movs	r3, #0
{
    c2f6:	b087      	sub	sp, #28
    c2f8:	4615      	mov	r5, r2
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
    c2fa:	4288      	cmp	r0, r1
    X->n = 0;
    c2fc:	f04f 0201 	mov.w	r2, #1
    c300:	e9cd 2300 	strd	r2, r3, [sp]
    X->s = 1;
    c304:	e9cd 3202 	strd	r3, r2, [sp, #8]
    X->p = NULL;
    c308:	e9cd 3304 	strd	r3, r3, [sp, #16]
{
    c30c:	4680      	mov	r8, r0
    c30e:	460e      	mov	r6, r1
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
    c310:	d105      	bne.n	c31e <mbedtls_mpi_mul_mpi+0x2e>
    c312:	4668      	mov	r0, sp
    c314:	f7ff fcf9 	bl	bd0a <mbedtls_mpi_copy>
    c318:	4604      	mov	r4, r0
    c31a:	b9e8      	cbnz	r0, c358 <mbedtls_mpi_mul_mpi+0x68>
    c31c:	466e      	mov	r6, sp
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
    c31e:	45a8      	cmp	r8, r5
    c320:	d106      	bne.n	c330 <mbedtls_mpi_mul_mpi+0x40>
    c322:	4641      	mov	r1, r8
    c324:	a803      	add	r0, sp, #12
    c326:	f7ff fcf0 	bl	bd0a <mbedtls_mpi_copy>
    c32a:	4604      	mov	r4, r0
    c32c:	b9a0      	cbnz	r0, c358 <mbedtls_mpi_mul_mpi+0x68>
    c32e:	ad03      	add	r5, sp, #12
    for( i = A->n; i > 0; i-- )
    c330:	f8d6 9004 	ldr.w	r9, [r6, #4]
    c334:	f1b9 0f00 	cmp.w	r9, #0
    c338:	d118      	bne.n	c36c <mbedtls_mpi_mul_mpi+0x7c>
    for( j = B->n; j > 0; j-- )
    c33a:	686f      	ldr	r7, [r5, #4]
    c33c:	bb07      	cbnz	r7, c380 <mbedtls_mpi_mul_mpi+0x90>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
    c33e:	eb09 0107 	add.w	r1, r9, r7
    c342:	4640      	mov	r0, r8
    c344:	f7ff fcbb 	bl	bcbe <mbedtls_mpi_grow>
    c348:	4604      	mov	r4, r0
    c34a:	b928      	cbnz	r0, c358 <mbedtls_mpi_mul_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
    c34c:	4601      	mov	r1, r0
    c34e:	4640      	mov	r0, r8
    c350:	f7ff fd07 	bl	bd62 <mbedtls_mpi_lset>
    c354:	4604      	mov	r4, r0
    c356:	b338      	cbz	r0, c3a8 <mbedtls_mpi_mul_mpi+0xb8>
    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
    c358:	a803      	add	r0, sp, #12
    c35a:	f7ff fc9e 	bl	bc9a <mbedtls_mpi_free>
    c35e:	4668      	mov	r0, sp
    c360:	f7ff fc9b 	bl	bc9a <mbedtls_mpi_free>
}
    c364:	4620      	mov	r0, r4
    c366:	b007      	add	sp, #28
    c368:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( A->p[i - 1] != 0 )
    c36c:	68b3      	ldr	r3, [r6, #8]
    c36e:	eb03 0389 	add.w	r3, r3, r9, lsl #2
    c372:	f853 3c04 	ldr.w	r3, [r3, #-4]
    c376:	2b00      	cmp	r3, #0
    c378:	d1df      	bne.n	c33a <mbedtls_mpi_mul_mpi+0x4a>
    for( i = A->n; i > 0; i-- )
    c37a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    c37e:	e7d9      	b.n	c334 <mbedtls_mpi_mul_mpi+0x44>
        if( B->p[j - 1] != 0 )
    c380:	68ab      	ldr	r3, [r5, #8]
    c382:	eb03 0387 	add.w	r3, r3, r7, lsl #2
    c386:	f853 3c04 	ldr.w	r3, [r3, #-4]
    c38a:	2b00      	cmp	r3, #0
    c38c:	d1d7      	bne.n	c33e <mbedtls_mpi_mul_mpi+0x4e>
    for( j = B->n; j > 0; j-- )
    c38e:	3f01      	subs	r7, #1
    c390:	e7d4      	b.n	c33c <mbedtls_mpi_mul_mpi+0x4c>
        mpi_mul_hlp( i, A->p, X->p + j - 1, B->p[j - 1] );
    c392:	68ab      	ldr	r3, [r5, #8]
    c394:	f8d8 2008 	ldr.w	r2, [r8, #8]
    c398:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
    c39c:	68b1      	ldr	r1, [r6, #8]
    c39e:	eb02 0287 	add.w	r2, r2, r7, lsl #2
    c3a2:	4648      	mov	r0, r9
    c3a4:	f7ff f97c 	bl	b6a0 <mpi_mul_hlp>
    for( ; j > 0; j-- )
    c3a8:	3f01      	subs	r7, #1
    c3aa:	d2f2      	bcs.n	c392 <mbedtls_mpi_mul_mpi+0xa2>
    X->s = A->s * B->s;
    c3ac:	6832      	ldr	r2, [r6, #0]
    c3ae:	682b      	ldr	r3, [r5, #0]
    c3b0:	4353      	muls	r3, r2
    c3b2:	f8c8 3000 	str.w	r3, [r8]
    c3b6:	e7cf      	b.n	c358 <mbedtls_mpi_mul_mpi+0x68>

0000c3b8 <mbedtls_mpi_mul_int>:
{
    c3b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _B.s = 1;
    c3ba:	2301      	movs	r3, #1
    p[0] = b;
    c3bc:	9200      	str	r2, [sp, #0]
    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
    c3be:	aa01      	add	r2, sp, #4
    _B.n = 1;
    c3c0:	e9cd 3301 	strd	r3, r3, [sp, #4]
    _B.p = p;
    c3c4:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
    c3c8:	f7ff ff92 	bl	c2f0 <mbedtls_mpi_mul_mpi>
}
    c3cc:	b005      	add	sp, #20
    c3ce:	f85d fb04 	ldr.w	pc, [sp], #4

0000c3d2 <mbedtls_mpi_div_mpi>:
{
    c3d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c3d6:	b09b      	sub	sp, #108	; 0x6c
    c3d8:	4688      	mov	r8, r1
    c3da:	9000      	str	r0, [sp, #0]
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
    c3dc:	2100      	movs	r1, #0
    c3de:	4618      	mov	r0, r3
{
    c3e0:	4691      	mov	r9, r2
    c3e2:	9302      	str	r3, [sp, #8]
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
    c3e4:	f7ff fe7d 	bl	c0e2 <mbedtls_mpi_cmp_int>
    c3e8:	2800      	cmp	r0, #0
    c3ea:	f000 818f 	beq.w	c70c <mbedtls_mpi_div_mpi+0x33a>
    T2.n = sizeof( TP2 ) / sizeof( *TP2 );
    c3ee:	2303      	movs	r3, #3
    X->n = 0;
    c3f0:	2400      	movs	r4, #0
    c3f2:	2501      	movs	r5, #1
    T2.n = sizeof( TP2 ) / sizeof( *TP2 );
    c3f4:	9315      	str	r3, [sp, #84]	; 0x54
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    c3f6:	9902      	ldr	r1, [sp, #8]
    T2.s = 1;
    c3f8:	9514      	str	r5, [sp, #80]	; 0x50
    T2.p = TP2;
    c3fa:	ab17      	add	r3, sp, #92	; 0x5c
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    c3fc:	4648      	mov	r0, r9
    X->n = 0;
    c3fe:	e9cd 5408 	strd	r5, r4, [sp, #32]
    X->s = 1;
    c402:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    X->p = NULL;
    c406:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
    X->n = 0;
    c40a:	e9cd 540e 	strd	r5, r4, [sp, #56]	; 0x38
    X->s = 1;
    c40e:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
    X->p = NULL;
    c412:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
    T2.p = TP2;
    c416:	9316      	str	r3, [sp, #88]	; 0x58
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    c418:	f7ff fded 	bl	bff6 <mbedtls_mpi_cmp_abs>
    c41c:	42a0      	cmp	r0, r4
    c41e:	da29      	bge.n	c474 <mbedtls_mpi_div_mpi+0xa2>
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
    c420:	9b00      	ldr	r3, [sp, #0]
    c422:	b93b      	cbnz	r3, c434 <mbedtls_mpi_div_mpi+0x62>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
    c424:	f1b8 0f00 	cmp.w	r8, #0
    c428:	d11c      	bne.n	c464 <mbedtls_mpi_div_mpi+0x92>
        return( 0 );
    c42a:	2400      	movs	r4, #0
}
    c42c:	4620      	mov	r0, r4
    c42e:	b01b      	add	sp, #108	; 0x6c
    c430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
    c434:	4621      	mov	r1, r4
    c436:	9800      	ldr	r0, [sp, #0]
    c438:	f7ff fc93 	bl	bd62 <mbedtls_mpi_lset>
    c43c:	4604      	mov	r4, r0
    c43e:	2800      	cmp	r0, #0
    c440:	d0f0      	beq.n	c424 <mbedtls_mpi_div_mpi+0x52>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
    c442:	a808      	add	r0, sp, #32
    c444:	f7ff fc29 	bl	bc9a <mbedtls_mpi_free>
    c448:	a80b      	add	r0, sp, #44	; 0x2c
    c44a:	f7ff fc26 	bl	bc9a <mbedtls_mpi_free>
    c44e:	a80e      	add	r0, sp, #56	; 0x38
    c450:	f7ff fc23 	bl	bc9a <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 );
    c454:	a811      	add	r0, sp, #68	; 0x44
    c456:	f7ff fc20 	bl	bc9a <mbedtls_mpi_free>
    mbedtls_platform_zeroize( TP2, sizeof( TP2 ) );
    c45a:	210c      	movs	r1, #12
    c45c:	a817      	add	r0, sp, #92	; 0x5c
    c45e:	f7fa ffbb 	bl	73d8 <mbedtls_platform_zeroize>
    return( ret );
    c462:	e7e3      	b.n	c42c <mbedtls_mpi_div_mpi+0x5a>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
    c464:	4649      	mov	r1, r9
    c466:	4640      	mov	r0, r8
    c468:	f7ff fc4f 	bl	bd0a <mbedtls_mpi_copy>
    c46c:	4604      	mov	r4, r0
    c46e:	2800      	cmp	r0, #0
    c470:	d1e7      	bne.n	c442 <mbedtls_mpi_div_mpi+0x70>
    c472:	e7da      	b.n	c42a <mbedtls_mpi_div_mpi+0x58>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
    c474:	4649      	mov	r1, r9
    c476:	a808      	add	r0, sp, #32
    c478:	f7ff fc47 	bl	bd0a <mbedtls_mpi_copy>
    c47c:	4604      	mov	r4, r0
    c47e:	2800      	cmp	r0, #0
    c480:	d1df      	bne.n	c442 <mbedtls_mpi_div_mpi+0x70>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
    c482:	af0b      	add	r7, sp, #44	; 0x2c
    c484:	9902      	ldr	r1, [sp, #8]
    c486:	4638      	mov	r0, r7
    c488:	f7ff fc3f 	bl	bd0a <mbedtls_mpi_copy>
    c48c:	4604      	mov	r4, r0
    c48e:	2800      	cmp	r0, #0
    c490:	d1d7      	bne.n	c442 <mbedtls_mpi_div_mpi+0x70>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
    c492:	f8d9 1004 	ldr.w	r1, [r9, #4]
    X.s = Y.s = 1;
    c496:	950b      	str	r5, [sp, #44]	; 0x2c
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
    c498:	3102      	adds	r1, #2
    c49a:	a80e      	add	r0, sp, #56	; 0x38
    X.s = Y.s = 1;
    c49c:	9508      	str	r5, [sp, #32]
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
    c49e:	f7ff fc0e 	bl	bcbe <mbedtls_mpi_grow>
    c4a2:	4604      	mov	r4, r0
    c4a4:	2800      	cmp	r0, #0
    c4a6:	d1cc      	bne.n	c442 <mbedtls_mpi_div_mpi+0x70>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
    c4a8:	4601      	mov	r1, r0
    c4aa:	a80e      	add	r0, sp, #56	; 0x38
    c4ac:	f7ff fc59 	bl	bd62 <mbedtls_mpi_lset>
    c4b0:	4604      	mov	r4, r0
    c4b2:	2800      	cmp	r0, #0
    c4b4:	d1c5      	bne.n	c442 <mbedtls_mpi_div_mpi+0x70>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
    c4b6:	2102      	movs	r1, #2
    c4b8:	a811      	add	r0, sp, #68	; 0x44
    c4ba:	f7ff fc00 	bl	bcbe <mbedtls_mpi_grow>
    c4be:	4604      	mov	r4, r0
    c4c0:	2800      	cmp	r0, #0
    c4c2:	d1be      	bne.n	c442 <mbedtls_mpi_div_mpi+0x70>
    k = mbedtls_mpi_bitlen( &Y ) % biL;
    c4c4:	4638      	mov	r0, r7
    c4c6:	f7ff fc79 	bl	bdbc <mbedtls_mpi_bitlen>
    c4ca:	f000 001f 	and.w	r0, r0, #31
    if( k < biL - 1 )
    c4ce:	281f      	cmp	r0, #31
    c4d0:	d06d      	beq.n	c5ae <mbedtls_mpi_div_mpi+0x1dc>
        k = biL - 1 - k;
    c4d2:	f1c0 0a1f 	rsb	sl, r0, #31
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
    c4d6:	4651      	mov	r1, sl
    c4d8:	a808      	add	r0, sp, #32
    c4da:	f7ff fd00 	bl	bede <mbedtls_mpi_shift_l>
    c4de:	4604      	mov	r4, r0
    c4e0:	2800      	cmp	r0, #0
    c4e2:	d1ae      	bne.n	c442 <mbedtls_mpi_div_mpi+0x70>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
    c4e4:	4651      	mov	r1, sl
    c4e6:	4638      	mov	r0, r7
    c4e8:	f7ff fcf9 	bl	bede <mbedtls_mpi_shift_l>
    c4ec:	4604      	mov	r4, r0
    c4ee:	2800      	cmp	r0, #0
    c4f0:	d1a7      	bne.n	c442 <mbedtls_mpi_div_mpi+0x70>
    n = X.n - 1;
    c4f2:	9e09      	ldr	r6, [sp, #36]	; 0x24
    t = Y.n - 1;
    c4f4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
    c4f6:	1b73      	subs	r3, r6, r5
    c4f8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
    c4fc:	4659      	mov	r1, fp
    c4fe:	4638      	mov	r0, r7
    c500:	9301      	str	r3, [sp, #4]
    c502:	f7ff fcec 	bl	bede <mbedtls_mpi_shift_l>
    c506:	4604      	mov	r4, r0
    c508:	2800      	cmp	r0, #0
    c50a:	d19a      	bne.n	c442 <mbedtls_mpi_div_mpi+0x70>
        Z.p[n - t]++;
    c50c:	9b01      	ldr	r3, [sp, #4]
    c50e:	009b      	lsls	r3, r3, #2
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
    c510:	4639      	mov	r1, r7
    c512:	a808      	add	r0, sp, #32
    c514:	9301      	str	r3, [sp, #4]
    c516:	f7ff fda1 	bl	c05c <mbedtls_mpi_cmp_mpi>
    c51a:	2800      	cmp	r0, #0
    c51c:	9b01      	ldr	r3, [sp, #4]
    c51e:	da48      	bge.n	c5b2 <mbedtls_mpi_div_mpi+0x1e0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
    c520:	4659      	mov	r1, fp
    c522:	4638      	mov	r0, r7
    c524:	f7ff fd2b 	bl	bf7e <mbedtls_mpi_shift_r>
    c528:	4604      	mov	r4, r0
    c52a:	2800      	cmp	r0, #0
    c52c:	d189      	bne.n	c442 <mbedtls_mpi_div_mpi+0x70>
    t = Y.n - 1;
    c52e:	1e6b      	subs	r3, r5, #1
    c530:	9301      	str	r3, [sp, #4]
        if( X.p[i] >= Y.p[t] )
    c532:	009b      	lsls	r3, r3, #2
    n = X.n - 1;
    c534:	f106 3bff 	add.w	fp, r6, #4294967295	; 0xffffffff
        if( X.p[i] >= Y.p[t] )
    c538:	9303      	str	r3, [sp, #12]
    c53a:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    c53e:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
    c542:	3b02      	subs	r3, #2
    c544:	3e01      	subs	r6, #1
    c546:	009b      	lsls	r3, r3, #2
    c548:	1b75      	subs	r5, r6, r5
    c54a:	9307      	str	r3, [sp, #28]
    c54c:	00ad      	lsls	r5, r5, #2
    for( i = n; i > t ; i-- )
    c54e:	9b01      	ldr	r3, [sp, #4]
    c550:	459b      	cmp	fp, r3
    c552:	d83d      	bhi.n	c5d0 <mbedtls_mpi_div_mpi+0x1fe>
    if( Q != NULL )
    c554:	9b00      	ldr	r3, [sp, #0]
    c556:	b15b      	cbz	r3, c570 <mbedtls_mpi_div_mpi+0x19e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
    c558:	a90e      	add	r1, sp, #56	; 0x38
    c55a:	4618      	mov	r0, r3
    c55c:	f7ff fbd5 	bl	bd0a <mbedtls_mpi_copy>
    c560:	bb18      	cbnz	r0, c5aa <mbedtls_mpi_div_mpi+0x1d8>
        Q->s = A->s * B->s;
    c562:	9b02      	ldr	r3, [sp, #8]
    c564:	f8d9 2000 	ldr.w	r2, [r9]
    c568:	681b      	ldr	r3, [r3, #0]
    c56a:	4353      	muls	r3, r2
    c56c:	9a00      	ldr	r2, [sp, #0]
    c56e:	6013      	str	r3, [r2, #0]
    if( R != NULL )
    c570:	f1b8 0f00 	cmp.w	r8, #0
    c574:	f43f af65 	beq.w	c442 <mbedtls_mpi_div_mpi+0x70>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
    c578:	4651      	mov	r1, sl
    c57a:	a808      	add	r0, sp, #32
    c57c:	f7ff fcff 	bl	bf7e <mbedtls_mpi_shift_r>
    c580:	b998      	cbnz	r0, c5aa <mbedtls_mpi_div_mpi+0x1d8>
        X.s = A->s;
    c582:	f8d9 3000 	ldr.w	r3, [r9]
    c586:	9308      	str	r3, [sp, #32]
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
    c588:	a908      	add	r1, sp, #32
    c58a:	4640      	mov	r0, r8
    c58c:	f7ff fbbd 	bl	bd0a <mbedtls_mpi_copy>
    c590:	4601      	mov	r1, r0
    c592:	2800      	cmp	r0, #0
    c594:	f040 80b8 	bne.w	c708 <mbedtls_mpi_div_mpi+0x336>
        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
    c598:	4640      	mov	r0, r8
    c59a:	f7ff fda2 	bl	c0e2 <mbedtls_mpi_cmp_int>
    c59e:	2800      	cmp	r0, #0
    c5a0:	f47f af4f 	bne.w	c442 <mbedtls_mpi_div_mpi+0x70>
            R->s = 1;
    c5a4:	2301      	movs	r3, #1
    c5a6:	f8c8 3000 	str.w	r3, [r8]
    c5aa:	4604      	mov	r4, r0
    c5ac:	e749      	b.n	c442 <mbedtls_mpi_div_mpi+0x70>
    else k = 0;
    c5ae:	46a2      	mov	sl, r4
    c5b0:	e79f      	b.n	c4f2 <mbedtls_mpi_div_mpi+0x120>
        Z.p[n - t]++;
    c5b2:	9910      	ldr	r1, [sp, #64]	; 0x40
    c5b4:	9301      	str	r3, [sp, #4]
    c5b6:	58ca      	ldr	r2, [r1, r3]
    c5b8:	3201      	adds	r2, #1
    c5ba:	50ca      	str	r2, [r1, r3]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    c5bc:	a908      	add	r1, sp, #32
    c5be:	463a      	mov	r2, r7
    c5c0:	4608      	mov	r0, r1
    c5c2:	f7ff fe72 	bl	c2aa <mbedtls_mpi_sub_mpi>
    c5c6:	9b01      	ldr	r3, [sp, #4]
    c5c8:	4604      	mov	r4, r0
    c5ca:	2800      	cmp	r0, #0
    c5cc:	d0a0      	beq.n	c510 <mbedtls_mpi_div_mpi+0x13e>
    c5ce:	e738      	b.n	c442 <mbedtls_mpi_div_mpi+0x70>
        if( X.p[i] >= Y.p[t] )
    c5d0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    c5d2:	9a03      	ldr	r2, [sp, #12]
    c5d4:	f856 102b 	ldr.w	r1, [r6, fp, lsl #2]
    c5d8:	ea4f 038b 	mov.w	r3, fp, lsl #2
    c5dc:	9304      	str	r3, [sp, #16]
    c5de:	eb06 038b 	add.w	r3, r6, fp, lsl #2
    c5e2:	9306      	str	r3, [sp, #24]
    c5e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c5e6:	589a      	ldr	r2, [r3, r2]
    c5e8:	9b04      	ldr	r3, [sp, #16]
    c5ea:	3b04      	subs	r3, #4
    c5ec:	9305      	str	r3, [sp, #20]
    c5ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c5f0:	4291      	cmp	r1, r2
    c5f2:	eb03 0705 	add.w	r7, r3, r5
    c5f6:	d370      	bcc.n	c6da <mbedtls_mpi_div_mpi+0x308>
            Z.p[i - t - 1] = ~0;
    c5f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    c5fc:	515a      	str	r2, [r3, r5]
        T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
    c5fe:	f1bb 0f01 	cmp.w	fp, #1
    c602:	bf16      	itet	ne
    c604:	9b06      	ldrne	r3, [sp, #24]
    c606:	2300      	moveq	r3, #0
    c608:	f853 3c08 	ldrne.w	r3, [r3, #-8]
    c60c:	9317      	str	r3, [sp, #92]	; 0x5c
        T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
    c60e:	9b05      	ldr	r3, [sp, #20]
    c610:	58f3      	ldr	r3, [r6, r3]
    c612:	9318      	str	r3, [sp, #96]	; 0x60
        T2.p[2] = X.p[i];
    c614:	9b04      	ldr	r3, [sp, #16]
    c616:	58f3      	ldr	r3, [r6, r3]
    c618:	9319      	str	r3, [sp, #100]	; 0x64
        Z.p[i - t - 1]++;
    c61a:	683b      	ldr	r3, [r7, #0]
    c61c:	3301      	adds	r3, #1
    c61e:	603b      	str	r3, [r7, #0]
            Z.p[i - t - 1]--;
    c620:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c622:	5953      	ldr	r3, [r2, r5]
    c624:	3b01      	subs	r3, #1
    c626:	5153      	str	r3, [r2, r5]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
    c628:	2100      	movs	r1, #0
    c62a:	a811      	add	r0, sp, #68	; 0x44
    c62c:	f7ff fb99 	bl	bd62 <mbedtls_mpi_lset>
    c630:	2800      	cmp	r0, #0
    c632:	d1ba      	bne.n	c5aa <mbedtls_mpi_div_mpi+0x1d8>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    c634:	9b01      	ldr	r3, [sp, #4]
    c636:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c638:	2b00      	cmp	r3, #0
    c63a:	d063      	beq.n	c704 <mbedtls_mpi_div_mpi+0x332>
    c63c:	9b07      	ldr	r3, [sp, #28]
    c63e:	58d1      	ldr	r1, [r2, r3]
    c640:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c642:	6019      	str	r1, [r3, #0]
            T1.p[1] = Y.p[t];
    c644:	9903      	ldr	r1, [sp, #12]
    c646:	5852      	ldr	r2, [r2, r1]
    c648:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
    c64a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c64c:	a911      	add	r1, sp, #68	; 0x44
    c64e:	595a      	ldr	r2, [r3, r5]
    c650:	4608      	mov	r0, r1
    c652:	f7ff feb1 	bl	c3b8 <mbedtls_mpi_mul_int>
    c656:	2800      	cmp	r0, #0
    c658:	d1a7      	bne.n	c5aa <mbedtls_mpi_div_mpi+0x1d8>
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
    c65a:	a914      	add	r1, sp, #80	; 0x50
    c65c:	a811      	add	r0, sp, #68	; 0x44
    c65e:	f7ff fcfd 	bl	c05c <mbedtls_mpi_cmp_mpi>
    c662:	2800      	cmp	r0, #0
    c664:	dcdc      	bgt.n	c620 <mbedtls_mpi_div_mpi+0x24e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
    c666:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c668:	a90b      	add	r1, sp, #44	; 0x2c
    c66a:	595a      	ldr	r2, [r3, r5]
    c66c:	a811      	add	r0, sp, #68	; 0x44
    c66e:	f7ff fea3 	bl	c3b8 <mbedtls_mpi_mul_int>
    c672:	2800      	cmp	r0, #0
    c674:	d199      	bne.n	c5aa <mbedtls_mpi_div_mpi+0x1d8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
    c676:	00ee      	lsls	r6, r5, #3
    c678:	4631      	mov	r1, r6
    c67a:	a811      	add	r0, sp, #68	; 0x44
    c67c:	f7ff fc2f 	bl	bede <mbedtls_mpi_shift_l>
    c680:	2800      	cmp	r0, #0
    c682:	d192      	bne.n	c5aa <mbedtls_mpi_div_mpi+0x1d8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
    c684:	a908      	add	r1, sp, #32
    c686:	4608      	mov	r0, r1
    c688:	aa11      	add	r2, sp, #68	; 0x44
    c68a:	f7ff fe0e 	bl	c2aa <mbedtls_mpi_sub_mpi>
    c68e:	4601      	mov	r1, r0
    c690:	2800      	cmp	r0, #0
    c692:	d139      	bne.n	c708 <mbedtls_mpi_div_mpi+0x336>
        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
    c694:	a808      	add	r0, sp, #32
    c696:	f7ff fd24 	bl	c0e2 <mbedtls_mpi_cmp_int>
    c69a:	2800      	cmp	r0, #0
    c69c:	da19      	bge.n	c6d2 <mbedtls_mpi_div_mpi+0x300>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
    c69e:	a90b      	add	r1, sp, #44	; 0x2c
    c6a0:	a811      	add	r0, sp, #68	; 0x44
    c6a2:	f7ff fb32 	bl	bd0a <mbedtls_mpi_copy>
    c6a6:	2800      	cmp	r0, #0
    c6a8:	f47f af7f 	bne.w	c5aa <mbedtls_mpi_div_mpi+0x1d8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
    c6ac:	4631      	mov	r1, r6
    c6ae:	a811      	add	r0, sp, #68	; 0x44
    c6b0:	f7ff fc15 	bl	bede <mbedtls_mpi_shift_l>
    c6b4:	2800      	cmp	r0, #0
    c6b6:	f47f af78 	bne.w	c5aa <mbedtls_mpi_div_mpi+0x1d8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
    c6ba:	a908      	add	r1, sp, #32
    c6bc:	aa11      	add	r2, sp, #68	; 0x44
    c6be:	4608      	mov	r0, r1
    c6c0:	f7ff fdd1 	bl	c266 <mbedtls_mpi_add_mpi>
    c6c4:	2800      	cmp	r0, #0
    c6c6:	f47f af70 	bne.w	c5aa <mbedtls_mpi_div_mpi+0x1d8>
            Z.p[i - t - 1]--;
    c6ca:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c6cc:	5953      	ldr	r3, [r2, r5]
    c6ce:	3b01      	subs	r3, #1
    c6d0:	5153      	str	r3, [r2, r5]
    for( i = n; i > t ; i-- )
    c6d2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    c6d6:	3d04      	subs	r5, #4
    c6d8:	e739      	b.n	c54e <mbedtls_mpi_div_mpi+0x17c>
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
    c6da:	9b05      	ldr	r3, [sp, #20]
    c6dc:	58f0      	ldr	r0, [r6, r3]
    if( 0 == d || u1 >= d )
    c6de:	b172      	cbz	r2, c6fe <mbedtls_mpi_div_mpi+0x32c>
    quotient = dividend / d;
    c6e0:	2300      	movs	r3, #0
    c6e2:	f7f3 fd0d 	bl	100 <__aeabi_uldivmod>
    c6e6:	460b      	mov	r3, r1
    return (mbedtls_mpi_uint) quotient;
    c6e8:	2100      	movs	r1, #0
    quotient = dividend / d;
    c6ea:	4602      	mov	r2, r0
    return (mbedtls_mpi_uint) quotient;
    c6ec:	4299      	cmp	r1, r3
    c6ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c6f2:	bf08      	it	eq
    c6f4:	4290      	cmpeq	r0, r2
    c6f6:	d200      	bcs.n	c6fa <mbedtls_mpi_div_mpi+0x328>
    c6f8:	4602      	mov	r2, r0
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
    c6fa:	603a      	str	r2, [r7, #0]
    c6fc:	e77f      	b.n	c5fe <mbedtls_mpi_div_mpi+0x22c>
        return ( ~0 );
    c6fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    c702:	e7fa      	b.n	c6fa <mbedtls_mpi_div_mpi+0x328>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    c704:	9901      	ldr	r1, [sp, #4]
    c706:	e79b      	b.n	c640 <mbedtls_mpi_div_mpi+0x26e>
    c708:	460c      	mov	r4, r1
    c70a:	e69a      	b.n	c442 <mbedtls_mpi_div_mpi+0x70>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
    c70c:	f06f 040b 	mvn.w	r4, #11
    c710:	e68c      	b.n	c42c <mbedtls_mpi_div_mpi+0x5a>

0000c712 <mbedtls_mpi_mod_mpi>:
{
    c712:	b570      	push	{r4, r5, r6, lr}
    c714:	4604      	mov	r4, r0
    c716:	460d      	mov	r5, r1
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
    c718:	4610      	mov	r0, r2
    c71a:	2100      	movs	r1, #0
{
    c71c:	4616      	mov	r6, r2
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
    c71e:	f7ff fce0 	bl	c0e2 <mbedtls_mpi_cmp_int>
    c722:	2800      	cmp	r0, #0
    c724:	db24      	blt.n	c770 <mbedtls_mpi_mod_mpi+0x5e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
    c726:	462a      	mov	r2, r5
    c728:	4633      	mov	r3, r6
    c72a:	4621      	mov	r1, r4
    c72c:	2000      	movs	r0, #0
    c72e:	f7ff fe50 	bl	c3d2 <mbedtls_mpi_div_mpi>
    c732:	4605      	mov	r5, r0
    c734:	b138      	cbz	r0, c746 <mbedtls_mpi_mod_mpi+0x34>
}
    c736:	4628      	mov	r0, r5
    c738:	bd70      	pop	{r4, r5, r6, pc}
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
    c73a:	4632      	mov	r2, r6
    c73c:	4621      	mov	r1, r4
    c73e:	4620      	mov	r0, r4
    c740:	f7ff fd91 	bl	c266 <mbedtls_mpi_add_mpi>
    c744:	b990      	cbnz	r0, c76c <mbedtls_mpi_mod_mpi+0x5a>
    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
    c746:	2100      	movs	r1, #0
    c748:	4620      	mov	r0, r4
    c74a:	f7ff fcca 	bl	c0e2 <mbedtls_mpi_cmp_int>
    c74e:	2800      	cmp	r0, #0
    c750:	dbf3      	blt.n	c73a <mbedtls_mpi_mod_mpi+0x28>
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
    c752:	4631      	mov	r1, r6
    c754:	4620      	mov	r0, r4
    c756:	f7ff fc81 	bl	c05c <mbedtls_mpi_cmp_mpi>
    c75a:	2800      	cmp	r0, #0
    c75c:	dbeb      	blt.n	c736 <mbedtls_mpi_mod_mpi+0x24>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
    c75e:	4632      	mov	r2, r6
    c760:	4621      	mov	r1, r4
    c762:	4620      	mov	r0, r4
    c764:	f7ff fda1 	bl	c2aa <mbedtls_mpi_sub_mpi>
    c768:	2800      	cmp	r0, #0
    c76a:	d0f2      	beq.n	c752 <mbedtls_mpi_mod_mpi+0x40>
    c76c:	4605      	mov	r5, r0
    c76e:	e7e2      	b.n	c736 <mbedtls_mpi_mod_mpi+0x24>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
    c770:	f06f 0509 	mvn.w	r5, #9
    c774:	e7df      	b.n	c736 <mbedtls_mpi_mod_mpi+0x24>

0000c776 <mbedtls_mpi_exp_mod>:
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A,
                         const mbedtls_mpi *E, const mbedtls_mpi *N,
                         mbedtls_mpi *_RR )
{
    c776:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c77a:	f5ad 7d59 	sub.w	sp, sp, #868	; 0x364
    c77e:	460f      	mov	r7, r1
    c780:	9004      	str	r0, [sp, #16]
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( E != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
    c782:	2100      	movs	r1, #0
    c784:	4618      	mov	r0, r3
{
    c786:	9206      	str	r2, [sp, #24]
    c788:	461d      	mov	r5, r3
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
    c78a:	f7ff fcaa 	bl	c0e2 <mbedtls_mpi_cmp_int>
    c78e:	2800      	cmp	r0, #0
    c790:	f340 81f7 	ble.w	cb82 <mbedtls_mpi_exp_mod+0x40c>
    c794:	68ab      	ldr	r3, [r5, #8]
    c796:	681c      	ldr	r4, [r3, #0]
    c798:	f014 0301 	ands.w	r3, r4, #1
    c79c:	9308      	str	r3, [sp, #32]
    c79e:	f000 81f0 	beq.w	cb82 <mbedtls_mpi_exp_mod+0x40c>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
    c7a2:	9806      	ldr	r0, [sp, #24]
    c7a4:	2100      	movs	r1, #0
    c7a6:	f7ff fc9c 	bl	c0e2 <mbedtls_mpi_cmp_int>
    c7aa:	2800      	cmp	r0, #0
    c7ac:	f2c0 81e9 	blt.w	cb82 <mbedtls_mpi_exp_mod+0x40c>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_bitlen( E ) > MBEDTLS_MPI_MAX_BITS ||
    c7b0:	9806      	ldr	r0, [sp, #24]
    c7b2:	f7ff fb03 	bl	bdbc <mbedtls_mpi_bitlen>
    c7b6:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    c7ba:	f200 81e2 	bhi.w	cb82 <mbedtls_mpi_exp_mod+0x40c>
        mbedtls_mpi_bitlen( N ) > MBEDTLS_MPI_MAX_BITS )
    c7be:	4628      	mov	r0, r5
    c7c0:	f7ff fafc 	bl	bdbc <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_bitlen( E ) > MBEDTLS_MPI_MAX_BITS ||
    c7c4:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    c7c8:	f200 81db 	bhi.w	cb82 <mbedtls_mpi_exp_mod+0x40c>
    x += ( ( m0 + 2 ) & 4 ) << 1;
    c7cc:	1ca6      	adds	r6, r4, #2
    c7ce:	0076      	lsls	r6, r6, #1
    c7d0:	f006 0608 	and.w	r6, r6, #8
    c7d4:	4426      	add	r6, r4
    c7d6:	2103      	movs	r1, #3
        x *= ( 2 - ( m0 * x ) );
    c7d8:	fb06 f304 	mul.w	r3, r6, r4
    c7dc:	f1c3 0302 	rsb	r3, r3, #2
    for( i = biL; i >= 8; i /= 2 )
    c7e0:	3901      	subs	r1, #1
        x *= ( 2 - ( m0 * x ) );
    c7e2:	fb03 f606 	mul.w	r6, r3, r6
    for( i = biL; i >= 8; i /= 2 )
    c7e6:	d1f7      	bne.n	c7d8 <mbedtls_mpi_exp_mod+0x62>
    X->s = 1;
    c7e8:	2301      	movs	r3, #1
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    mbedtls_mpi_init( &Apos );
    memset( W, 0, sizeof( W ) );
    c7ea:	f44f 7240 	mov.w	r2, #768	; 0x300
    c7ee:	a818      	add	r0, sp, #96	; 0x60
    X->n = 0;
    c7f0:	e9cd 310c 	strd	r3, r1, [sp, #48]	; 0x30
    X->s = 1;
    c7f4:	e9cd 130e 	strd	r1, r3, [sp, #56]	; 0x38
    X->p = NULL;
    c7f8:	e9cd 1110 	strd	r1, r1, [sp, #64]	; 0x40
    X->n = 0;
    c7fc:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
    X->p = NULL;
    c800:	9114      	str	r1, [sp, #80]	; 0x50
    memset( W, 0, sizeof( W ) );
    c802:	f7fe fa46 	bl	ac92 <memset>

    i = mbedtls_mpi_bitlen( E );
    c806:	9806      	ldr	r0, [sp, #24]
    c808:	f7ff fad8 	bl	bdbc <mbedtls_mpi_bitlen>

    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    c80c:	f5b0 7f28 	cmp.w	r0, #672	; 0x2a0
    c810:	f080 80ef 	bcs.w	c9f2 <mbedtls_mpi_exp_mod+0x27c>
    c814:	28ef      	cmp	r0, #239	; 0xef
    c816:	f200 80ee 	bhi.w	c9f6 <mbedtls_mpi_exp_mod+0x280>
    c81a:	284f      	cmp	r0, #79	; 0x4f
    c81c:	f200 80ed 	bhi.w	c9fa <mbedtls_mpi_exp_mod+0x284>
    c820:	2817      	cmp	r0, #23
    c822:	9b08      	ldr	r3, [sp, #32]
    c824:	bf88      	it	hi
    c826:	2303      	movhi	r3, #3
#if( MBEDTLS_MPI_WINDOW_SIZE < 6 )
    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;
#endif

    j = N->n + 1;
    c828:	6869      	ldr	r1, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    c82a:	9804      	ldr	r0, [sp, #16]
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    c82c:	9303      	str	r3, [sp, #12]
    j = N->n + 1;
    c82e:	f101 0801 	add.w	r8, r1, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    c832:	4641      	mov	r1, r8
    c834:	f7ff fa43 	bl	bcbe <mbedtls_mpi_grow>
    c838:	4604      	mov	r4, r0
    c83a:	2800      	cmp	r0, #0
    c83c:	f040 80b8 	bne.w	c9b0 <mbedtls_mpi_exp_mod+0x23a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
    c840:	4641      	mov	r1, r8
    c842:	a81b      	add	r0, sp, #108	; 0x6c
    c844:	f7ff fa3b 	bl	bcbe <mbedtls_mpi_grow>
    c848:	4604      	mov	r4, r0
    c84a:	2800      	cmp	r0, #0
    c84c:	f040 80b0 	bne.w	c9b0 <mbedtls_mpi_exp_mod+0x23a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
    c850:	ea4f 0148 	mov.w	r1, r8, lsl #1
    c854:	a80f      	add	r0, sp, #60	; 0x3c
    c856:	f7ff fa32 	bl	bcbe <mbedtls_mpi_grow>
    c85a:	4604      	mov	r4, r0
    c85c:	2800      	cmp	r0, #0
    c85e:	f040 80a7 	bne.w	c9b0 <mbedtls_mpi_exp_mod+0x23a>

    /*
     * Compensate for negative A (and correct at the end)
     */
    neg = ( A->s == -1 );
    c862:	683b      	ldr	r3, [r7, #0]
    c864:	9307      	str	r3, [sp, #28]
    if( neg )
    c866:	3301      	adds	r3, #1
    c868:	d10a      	bne.n	c880 <mbedtls_mpi_exp_mod+0x10a>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
    c86a:	4639      	mov	r1, r7
    c86c:	a812      	add	r0, sp, #72	; 0x48
    c86e:	f7ff fa4c 	bl	bd0a <mbedtls_mpi_copy>
    c872:	4604      	mov	r4, r0
    c874:	2800      	cmp	r0, #0
    c876:	f040 809b 	bne.w	c9b0 <mbedtls_mpi_exp_mod+0x23a>
        Apos.s = 1;
    c87a:	2301      	movs	r3, #1
    c87c:	9312      	str	r3, [sp, #72]	; 0x48
        A = &Apos;
    c87e:	af12      	add	r7, sp, #72	; 0x48
    }

    /*
     * If 1st call, pre-compute R^2 mod N
     */
    if( _RR == NULL || _RR->p == NULL )
    c880:	9be2      	ldr	r3, [sp, #904]	; 0x388
    c882:	b11b      	cbz	r3, c88c <mbedtls_mpi_exp_mod+0x116>
    c884:	689b      	ldr	r3, [r3, #8]
    c886:	2b00      	cmp	r3, #0
    c888:	f040 80b9 	bne.w	c9fe <mbedtls_mpi_exp_mod+0x288>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
    c88c:	2101      	movs	r1, #1
    c88e:	a80c      	add	r0, sp, #48	; 0x30
    c890:	f7ff fa67 	bl	bd62 <mbedtls_mpi_lset>
    c894:	4604      	mov	r4, r0
    c896:	2800      	cmp	r0, #0
    c898:	f040 808a 	bne.w	c9b0 <mbedtls_mpi_exp_mod+0x23a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
    c89c:	6869      	ldr	r1, [r5, #4]
    c89e:	a80c      	add	r0, sp, #48	; 0x30
    c8a0:	0189      	lsls	r1, r1, #6
    c8a2:	f7ff fb1c 	bl	bede <mbedtls_mpi_shift_l>
    c8a6:	4604      	mov	r4, r0
    c8a8:	2800      	cmp	r0, #0
    c8aa:	f040 8081 	bne.w	c9b0 <mbedtls_mpi_exp_mod+0x23a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
    c8ae:	a90c      	add	r1, sp, #48	; 0x30
    c8b0:	462a      	mov	r2, r5
    c8b2:	4608      	mov	r0, r1
    c8b4:	f7ff ff2d 	bl	c712 <mbedtls_mpi_mod_mpi>
    c8b8:	4604      	mov	r4, r0
    c8ba:	2800      	cmp	r0, #0
    c8bc:	d178      	bne.n	c9b0 <mbedtls_mpi_exp_mod+0x23a>

        if( _RR != NULL )
    c8be:	9be2      	ldr	r3, [sp, #904]	; 0x388
    c8c0:	b123      	cbz	r3, c8cc <mbedtls_mpi_exp_mod+0x156>
            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
    c8c2:	220c      	movs	r2, #12
    c8c4:	a90c      	add	r1, sp, #48	; 0x30
    c8c6:	4618      	mov	r0, r3
    }
    else
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
    c8c8:	f7fe f9b8 	bl	ac3c <memcpy>

    /*
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
    c8cc:	4629      	mov	r1, r5
    c8ce:	4638      	mov	r0, r7
    c8d0:	f7ff fbc4 	bl	c05c <mbedtls_mpi_cmp_mpi>
    c8d4:	2800      	cmp	r0, #0
    c8d6:	f2c0 8096 	blt.w	ca06 <mbedtls_mpi_exp_mod+0x290>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
    c8da:	462a      	mov	r2, r5
    c8dc:	4639      	mov	r1, r7
    c8de:	a81b      	add	r0, sp, #108	; 0x6c
    c8e0:	f7ff ff17 	bl	c712 <mbedtls_mpi_mod_mpi>
    c8e4:	4604      	mov	r4, r0
    c8e6:	2800      	cmp	r0, #0
    c8e8:	d162      	bne.n	c9b0 <mbedtls_mpi_exp_mod+0x23a>
    *mm = ~x + 1;
    c8ea:	4276      	negs	r6, r6
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );

    mpi_montmul( &W[1], &RR, N, mm, &T );
    c8ec:	f10d 093c 	add.w	r9, sp, #60	; 0x3c
    c8f0:	4633      	mov	r3, r6
    c8f2:	462a      	mov	r2, r5
    c8f4:	a90c      	add	r1, sp, #48	; 0x30
    c8f6:	a81d      	add	r0, sp, #116	; 0x74
    c8f8:	f8cd 9000 	str.w	r9, [sp]
    c8fc:	f7ff f95d 	bl	bbba <mpi_montmul.isra.0>

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
    c900:	9804      	ldr	r0, [sp, #16]
    c902:	a90c      	add	r1, sp, #48	; 0x30
    c904:	f7ff fa01 	bl	bd0a <mbedtls_mpi_copy>
    c908:	4604      	mov	r4, r0
    c90a:	2800      	cmp	r0, #0
    c90c:	d150      	bne.n	c9b0 <mbedtls_mpi_exp_mod+0x23a>
    mbedtls_mpi_uint z = 1;
    c90e:	ab0b      	add	r3, sp, #44	; 0x2c
    U.p = &z;
    c910:	9317      	str	r3, [sp, #92]	; 0x5c
    c912:	9b04      	ldr	r3, [sp, #16]
    mpi_montmul( A, &U, N, mm, T );
    c914:	f8cd 9000 	str.w	r9, [sp]
    c918:	f103 0808 	add.w	r8, r3, #8
    mbedtls_mpi_uint z = 1;
    c91c:	2701      	movs	r7, #1
    mpi_montmul( A, &U, N, mm, T );
    c91e:	4633      	mov	r3, r6
    c920:	462a      	mov	r2, r5
    c922:	a915      	add	r1, sp, #84	; 0x54
    c924:	4640      	mov	r0, r8
    U.n = U.s = (int) z;
    c926:	e9cd 7715 	strd	r7, r7, [sp, #84]	; 0x54
    mbedtls_mpi_uint z = 1;
    c92a:	970b      	str	r7, [sp, #44]	; 0x2c
    mpi_montmul( A, &U, N, mm, T );
    c92c:	f7ff f945 	bl	bbba <mpi_montmul.isra.0>
    mpi_montred( X, N, mm, &T );

    if( wsize > 1 )
    c930:	9b03      	ldr	r3, [sp, #12]
    c932:	42bb      	cmp	r3, r7
    c934:	d16c      	bne.n	ca10 <mbedtls_mpi_exp_mod+0x29a>

            mpi_montmul( &W[i], &W[1], N, mm, &T );
        }
    }

    nblimbs = E->n;
    c936:	9b06      	ldr	r3, [sp, #24]
    bufsize = 0;
    nbits   = 0;
    wbits   = 0;
    state   = 0;
    c938:	f04f 0a00 	mov.w	sl, #0
    nblimbs = E->n;
    c93c:	685b      	ldr	r3, [r3, #4]
    c93e:	9305      	str	r3, [sp, #20]
    nbits   = 0;
    c940:	46d1      	mov	r9, sl
    bufsize = 0;
    c942:	46d3      	mov	fp, sl
    wbits   = 0;
    c944:	4657      	mov	r7, sl

    while( 1 )
    {
        if( bufsize == 0 )
    c946:	f1bb 0f00 	cmp.w	fp, #0
    c94a:	f040 80b7 	bne.w	cabc <mbedtls_mpi_exp_mod+0x346>
        {
            if( nblimbs == 0 )
    c94e:	9b05      	ldr	r3, [sp, #20]
    c950:	2b00      	cmp	r3, #0
    c952:	f040 80ae 	bne.w	cab2 <mbedtls_mpi_exp_mod+0x33c>
    {
        mpi_montmul( X, X, N, mm, &T );

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
    c956:	9b03      	ldr	r3, [sp, #12]
    c958:	f04f 0b01 	mov.w	fp, #1
    c95c:	fa0b fb03 	lsl.w	fp, fp, r3
    c960:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
    for( i = 0; i < nbits; i++ )
    c964:	9b05      	ldr	r3, [sp, #20]
    c966:	454b      	cmp	r3, r9
    c968:	f040 80ec 	bne.w	cb44 <mbedtls_mpi_exp_mod+0x3ce>
    mbedtls_mpi_uint z = 1;
    c96c:	2301      	movs	r3, #1
    c96e:	aa0b      	add	r2, sp, #44	; 0x2c
    U.n = U.s = (int) z;
    c970:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
    mbedtls_mpi_uint z = 1;
    c974:	930b      	str	r3, [sp, #44]	; 0x2c
    U.p = &z;
    c976:	9217      	str	r2, [sp, #92]	; 0x5c
    mpi_montmul( A, &U, N, mm, T );
    c978:	4633      	mov	r3, r6
    c97a:	f8cd a000 	str.w	sl, [sp]
    c97e:	462a      	mov	r2, r5
    c980:	a915      	add	r1, sp, #84	; 0x54
    c982:	4640      	mov	r0, r8
    c984:	f7ff f919 	bl	bbba <mpi_montmul.isra.0>
    /*
     * X = A^E * R * R^-1 mod N = A^E mod N
     */
    mpi_montred( X, N, mm, &T );

    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
    c988:	9b07      	ldr	r3, [sp, #28]
    c98a:	3301      	adds	r3, #1
    c98c:	d110      	bne.n	c9b0 <mbedtls_mpi_exp_mod+0x23a>
    c98e:	9b06      	ldr	r3, [sp, #24]
    c990:	685b      	ldr	r3, [r3, #4]
    c992:	b16b      	cbz	r3, c9b0 <mbedtls_mpi_exp_mod+0x23a>
    c994:	9b06      	ldr	r3, [sp, #24]
    c996:	689b      	ldr	r3, [r3, #8]
    c998:	681b      	ldr	r3, [r3, #0]
    c99a:	07db      	lsls	r3, r3, #31
    c99c:	d508      	bpl.n	c9b0 <mbedtls_mpi_exp_mod+0x23a>
    {
        X->s = -1;
    c99e:	9b04      	ldr	r3, [sp, #16]
    c9a0:	461a      	mov	r2, r3
    c9a2:	9b07      	ldr	r3, [sp, #28]
    c9a4:	6013      	str	r3, [r2, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    c9a6:	4629      	mov	r1, r5
    c9a8:	4610      	mov	r0, r2
    c9aa:	f7ff fc5c 	bl	c266 <mbedtls_mpi_add_mpi>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
    c9ae:	4604      	mov	r4, r0
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    c9b0:	9b03      	ldr	r3, [sp, #12]
    c9b2:	9a03      	ldr	r2, [sp, #12]
    c9b4:	1e5d      	subs	r5, r3, #1
    c9b6:	2301      	movs	r3, #1
    c9b8:	fa03 f505 	lsl.w	r5, r3, r5
    c9bc:	fa03 f602 	lsl.w	r6, r3, r2
        mbedtls_mpi_free( &W[i] );
    c9c0:	270c      	movs	r7, #12
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    c9c2:	42ae      	cmp	r6, r5
    c9c4:	f200 80d6 	bhi.w	cb74 <mbedtls_mpi_exp_mod+0x3fe>

    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
    c9c8:	a81b      	add	r0, sp, #108	; 0x6c
    c9ca:	f7ff f966 	bl	bc9a <mbedtls_mpi_free>
    c9ce:	a80f      	add	r0, sp, #60	; 0x3c
    c9d0:	f7ff f963 	bl	bc9a <mbedtls_mpi_free>
    c9d4:	a812      	add	r0, sp, #72	; 0x48
    c9d6:	f7ff f960 	bl	bc9a <mbedtls_mpi_free>

    if( _RR == NULL || _RR->p == NULL )
    c9da:	9be2      	ldr	r3, [sp, #904]	; 0x388
    c9dc:	b10b      	cbz	r3, c9e2 <mbedtls_mpi_exp_mod+0x26c>
    c9de:	689b      	ldr	r3, [r3, #8]
    c9e0:	b913      	cbnz	r3, c9e8 <mbedtls_mpi_exp_mod+0x272>
        mbedtls_mpi_free( &RR );
    c9e2:	a80c      	add	r0, sp, #48	; 0x30
    c9e4:	f7ff f959 	bl	bc9a <mbedtls_mpi_free>

    return( ret );
}
    c9e8:	4620      	mov	r0, r4
    c9ea:	f50d 7d59 	add.w	sp, sp, #868	; 0x364
    c9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    c9f2:	2306      	movs	r3, #6
    c9f4:	e718      	b.n	c828 <mbedtls_mpi_exp_mod+0xb2>
    c9f6:	2305      	movs	r3, #5
    c9f8:	e716      	b.n	c828 <mbedtls_mpi_exp_mod+0xb2>
    c9fa:	2304      	movs	r3, #4
    c9fc:	e714      	b.n	c828 <mbedtls_mpi_exp_mod+0xb2>
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
    c9fe:	99e2      	ldr	r1, [sp, #904]	; 0x388
    ca00:	220c      	movs	r2, #12
    ca02:	a80c      	add	r0, sp, #48	; 0x30
    ca04:	e760      	b.n	c8c8 <mbedtls_mpi_exp_mod+0x152>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
    ca06:	4639      	mov	r1, r7
    ca08:	a81b      	add	r0, sp, #108	; 0x6c
    ca0a:	f7ff f97e 	bl	bd0a <mbedtls_mpi_copy>
    ca0e:	e769      	b.n	c8e4 <mbedtls_mpi_exp_mod+0x16e>
    ca10:	9b03      	ldr	r3, [sp, #12]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
    ca12:	6869      	ldr	r1, [r5, #4]
    ca14:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
    ca18:	fa07 f30a 	lsl.w	r3, r7, sl
    ca1c:	270c      	movs	r7, #12
    ca1e:	9305      	str	r3, [sp, #20]
    ca20:	fa07 f70a 	lsl.w	r7, r7, sl
    ca24:	ab18      	add	r3, sp, #96	; 0x60
    ca26:	441f      	add	r7, r3
    ca28:	3101      	adds	r1, #1
    ca2a:	4638      	mov	r0, r7
    ca2c:	f7ff f947 	bl	bcbe <mbedtls_mpi_grow>
    ca30:	2800      	cmp	r0, #0
    ca32:	d1bc      	bne.n	c9ae <mbedtls_mpi_exp_mod+0x238>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
    ca34:	a91b      	add	r1, sp, #108	; 0x6c
    ca36:	4638      	mov	r0, r7
    ca38:	f7ff f967 	bl	bd0a <mbedtls_mpi_copy>
    ca3c:	2800      	cmp	r0, #0
    ca3e:	d1b6      	bne.n	c9ae <mbedtls_mpi_exp_mod+0x238>
        for( i = 0; i < wsize - 1; i++ )
    ca40:	46a3      	mov	fp, r4
            mpi_montmul( &W[j], &W[j], N, mm, &T );
    ca42:	f107 0008 	add.w	r0, r7, #8
    ca46:	f8cd 9000 	str.w	r9, [sp]
    ca4a:	4633      	mov	r3, r6
    ca4c:	462a      	mov	r2, r5
    ca4e:	4639      	mov	r1, r7
        for( i = 0; i < wsize - 1; i++ )
    ca50:	f10b 0b01 	add.w	fp, fp, #1
            mpi_montmul( &W[j], &W[j], N, mm, &T );
    ca54:	9009      	str	r0, [sp, #36]	; 0x24
    ca56:	f7ff f8b0 	bl	bbba <mpi_montmul.isra.0>
        for( i = 0; i < wsize - 1; i++ )
    ca5a:	45d3      	cmp	fp, sl
    ca5c:	9809      	ldr	r0, [sp, #36]	; 0x24
    ca5e:	d3f2      	bcc.n	ca46 <mbedtls_mpi_exp_mod+0x2d0>
        for( i = j + 1; i < ( one << wsize ); i++ )
    ca60:	9b05      	ldr	r3, [sp, #20]
    ca62:	9a03      	ldr	r2, [sp, #12]
    ca64:	f103 0901 	add.w	r9, r3, #1
    ca68:	2301      	movs	r3, #1
    ca6a:	fa03 fb02 	lsl.w	fp, r3, r2
    ca6e:	45cb      	cmp	fp, r9
    ca70:	f67f af61 	bls.w	c936 <mbedtls_mpi_exp_mod+0x1c0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
    ca74:	6869      	ldr	r1, [r5, #4]
    ca76:	f107 0a0c 	add.w	sl, r7, #12
    ca7a:	3101      	adds	r1, #1
    ca7c:	4650      	mov	r0, sl
    ca7e:	f7ff f91e 	bl	bcbe <mbedtls_mpi_grow>
    ca82:	2800      	cmp	r0, #0
    ca84:	d193      	bne.n	c9ae <mbedtls_mpi_exp_mod+0x238>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
    ca86:	4639      	mov	r1, r7
    ca88:	4650      	mov	r0, sl
    ca8a:	f7ff f93e 	bl	bd0a <mbedtls_mpi_copy>
    ca8e:	2800      	cmp	r0, #0
    ca90:	d18d      	bne.n	c9ae <mbedtls_mpi_exp_mod+0x238>
            mpi_montmul( &W[i], &W[1], N, mm, &T );
    ca92:	ab0f      	add	r3, sp, #60	; 0x3c
    ca94:	9300      	str	r3, [sp, #0]
    ca96:	f107 0014 	add.w	r0, r7, #20
    ca9a:	4633      	mov	r3, r6
    ca9c:	462a      	mov	r2, r5
    ca9e:	a91b      	add	r1, sp, #108	; 0x6c
    caa0:	f7ff f88b 	bl	bbba <mpi_montmul.isra.0>
        for( i = j + 1; i < ( one << wsize ); i++ )
    caa4:	f109 0901 	add.w	r9, r9, #1
    caa8:	4657      	mov	r7, sl
    caaa:	e7e0      	b.n	ca6e <mbedtls_mpi_exp_mod+0x2f8>
        state = 2;
    caac:	f04f 0a02 	mov.w	sl, #2
    cab0:	e749      	b.n	c946 <mbedtls_mpi_exp_mod+0x1d0>
            nblimbs--;
    cab2:	9b05      	ldr	r3, [sp, #20]
    cab4:	3b01      	subs	r3, #1
    cab6:	9305      	str	r3, [sp, #20]
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
    cab8:	f04f 0b20 	mov.w	fp, #32
        ei = (E->p[nblimbs] >> bufsize) & 1;
    cabc:	9b06      	ldr	r3, [sp, #24]
    cabe:	9a05      	ldr	r2, [sp, #20]
    cac0:	689b      	ldr	r3, [r3, #8]
    cac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
        bufsize--;
    cac6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
        ei = (E->p[nblimbs] >> bufsize) & 1;
    caca:	fa23 f30b 	lsr.w	r3, r3, fp
        if( ei == 0 && state == 0 )
    cace:	f013 0301 	ands.w	r3, r3, #1
    cad2:	d10f      	bne.n	caf4 <mbedtls_mpi_exp_mod+0x37e>
    cad4:	f1ba 0f00 	cmp.w	sl, #0
    cad8:	f43f af35 	beq.w	c946 <mbedtls_mpi_exp_mod+0x1d0>
        if( ei == 0 && state == 1 )
    cadc:	f1ba 0f01 	cmp.w	sl, #1
    cae0:	d108      	bne.n	caf4 <mbedtls_mpi_exp_mod+0x37e>
            mpi_montmul( X, X, N, mm, &T );
    cae2:	ab0f      	add	r3, sp, #60	; 0x3c
    cae4:	9300      	str	r3, [sp, #0]
    cae6:	9904      	ldr	r1, [sp, #16]
    cae8:	4633      	mov	r3, r6
    caea:	462a      	mov	r2, r5
    caec:	4640      	mov	r0, r8
    caee:	f7ff f864 	bl	bbba <mpi_montmul.isra.0>
            continue;
    caf2:	e728      	b.n	c946 <mbedtls_mpi_exp_mod+0x1d0>
        wbits |= ( ei << ( wsize - nbits ) );
    caf4:	9a03      	ldr	r2, [sp, #12]
        nbits++;
    caf6:	f109 0901 	add.w	r9, r9, #1
        wbits |= ( ei << ( wsize - nbits ) );
    cafa:	eba2 0209 	sub.w	r2, r2, r9
    cafe:	4093      	lsls	r3, r2
    cb00:	431f      	orrs	r7, r3
        if( nbits == wsize )
    cb02:	9b03      	ldr	r3, [sp, #12]
    cb04:	454b      	cmp	r3, r9
    cb06:	d1d1      	bne.n	caac <mbedtls_mpi_exp_mod+0x336>
            for( i = 0; i < wsize; i++ )
    cb08:	f04f 0a00 	mov.w	sl, #0
                mpi_montmul( X, X, N, mm, &T );
    cb0c:	ab0f      	add	r3, sp, #60	; 0x3c
    cb0e:	9300      	str	r3, [sp, #0]
    cb10:	9904      	ldr	r1, [sp, #16]
    cb12:	4633      	mov	r3, r6
    cb14:	462a      	mov	r2, r5
    cb16:	4640      	mov	r0, r8
            for( i = 0; i < wsize; i++ )
    cb18:	f10a 0a01 	add.w	sl, sl, #1
                mpi_montmul( X, X, N, mm, &T );
    cb1c:	f7ff f84d 	bl	bbba <mpi_montmul.isra.0>
            for( i = 0; i < wsize; i++ )
    cb20:	45d1      	cmp	r9, sl
    cb22:	d8f3      	bhi.n	cb0c <mbedtls_mpi_exp_mod+0x396>
            mpi_montmul( X, &W[wbits], N, mm, &T );
    cb24:	ab0f      	add	r3, sp, #60	; 0x3c
    cb26:	a818      	add	r0, sp, #96	; 0x60
    cb28:	210c      	movs	r1, #12
    cb2a:	fb01 0107 	mla	r1, r1, r7, r0
    cb2e:	9300      	str	r3, [sp, #0]
    cb30:	462a      	mov	r2, r5
    cb32:	4633      	mov	r3, r6
    cb34:	4640      	mov	r0, r8
            nbits = 0;
    cb36:	2700      	movs	r7, #0
            mpi_montmul( X, &W[wbits], N, mm, &T );
    cb38:	f7ff f83f 	bl	bbba <mpi_montmul.isra.0>
            wbits = 0;
    cb3c:	46b9      	mov	r9, r7
            state--;
    cb3e:	f8dd a020 	ldr.w	sl, [sp, #32]
    cb42:	e700      	b.n	c946 <mbedtls_mpi_exp_mod+0x1d0>
        mpi_montmul( X, X, N, mm, &T );
    cb44:	9904      	ldr	r1, [sp, #16]
    cb46:	f8cd a000 	str.w	sl, [sp]
    cb4a:	4633      	mov	r3, r6
    cb4c:	462a      	mov	r2, r5
    cb4e:	4640      	mov	r0, r8
        wbits <<= 1;
    cb50:	007f      	lsls	r7, r7, #1
        mpi_montmul( X, X, N, mm, &T );
    cb52:	f7ff f832 	bl	bbba <mpi_montmul.isra.0>
        if( ( wbits & ( one << wsize ) ) != 0 )
    cb56:	ea1b 0f07 	tst.w	fp, r7
    cb5a:	d007      	beq.n	cb6c <mbedtls_mpi_exp_mod+0x3f6>
            mpi_montmul( X, &W[1], N, mm, &T );
    cb5c:	f8cd a000 	str.w	sl, [sp]
    cb60:	4633      	mov	r3, r6
    cb62:	462a      	mov	r2, r5
    cb64:	a91b      	add	r1, sp, #108	; 0x6c
    cb66:	4640      	mov	r0, r8
    cb68:	f7ff f827 	bl	bbba <mpi_montmul.isra.0>
    for( i = 0; i < nbits; i++ )
    cb6c:	9b05      	ldr	r3, [sp, #20]
    cb6e:	3301      	adds	r3, #1
    cb70:	9305      	str	r3, [sp, #20]
    cb72:	e6f7      	b.n	c964 <mbedtls_mpi_exp_mod+0x1ee>
        mbedtls_mpi_free( &W[i] );
    cb74:	ab18      	add	r3, sp, #96	; 0x60
    cb76:	fb07 3005 	mla	r0, r7, r5, r3
    cb7a:	f7ff f88e 	bl	bc9a <mbedtls_mpi_free>
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    cb7e:	3501      	adds	r5, #1
    cb80:	e71f      	b.n	c9c2 <mbedtls_mpi_exp_mod+0x24c>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    cb82:	f06f 0403 	mvn.w	r4, #3
    cb86:	e72f      	b.n	c9e8 <mbedtls_mpi_exp_mod+0x272>

0000cb88 <platform_calloc_uninit>:
}
    cb88:	2000      	movs	r0, #0
    cb8a:	4770      	bx	lr

0000cb8c <platform_exit_uninit>:
 * Make dummy function to prevent NULL pointer dereferences
 */
static void platform_exit_uninit( int status )
{
    ((void) status);
}
    cb8c:	4770      	bx	lr

0000cb8e <platform_free_uninit>:
    cb8e:	4770      	bx	lr

0000cb90 <mbedtls_rsa_import>:
{
    cb90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cb94:	4605      	mov	r5, r0
    cb96:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
    cb9a:	4691      	mov	r9, r2
    cb9c:	4698      	mov	r8, r3
    if( ( N != NULL && ( ret = mbedtls_mpi_copy( &ctx->N, N ) ) != 0 ) ||
    cb9e:	460c      	mov	r4, r1
    cba0:	b979      	cbnz	r1, cbc2 <mbedtls_rsa_import+0x32>
    cba2:	f1b9 0f00 	cmp.w	r9, #0
    cba6:	d115      	bne.n	cbd4 <mbedtls_rsa_import+0x44>
        ( P != NULL && ( ret = mbedtls_mpi_copy( &ctx->P, P ) ) != 0 ) ||
    cba8:	f1b8 0f00 	cmp.w	r8, #0
    cbac:	d11a      	bne.n	cbe4 <mbedtls_rsa_import+0x54>
        ( Q != NULL && ( ret = mbedtls_mpi_copy( &ctx->Q, Q ) ) != 0 ) ||
    cbae:	bb0f      	cbnz	r7, cbf4 <mbedtls_rsa_import+0x64>
        ( D != NULL && ( ret = mbedtls_mpi_copy( &ctx->D, D ) ) != 0 ) ||
    cbb0:	bb46      	cbnz	r6, cc04 <mbedtls_rsa_import+0x74>
    if( N != NULL )
    cbb2:	b37c      	cbz	r4, cc14 <mbedtls_rsa_import+0x84>
        ctx->len = mbedtls_mpi_size( &ctx->N );
    cbb4:	f105 0008 	add.w	r0, r5, #8
    cbb8:	f7ff f91c 	bl	bdf4 <mbedtls_mpi_size>
    cbbc:	6068      	str	r0, [r5, #4]
    return( 0 );
    cbbe:	2000      	movs	r0, #0
    cbc0:	e006      	b.n	cbd0 <mbedtls_rsa_import+0x40>
    if( ( N != NULL && ( ret = mbedtls_mpi_copy( &ctx->N, N ) ) != 0 ) ||
    cbc2:	3008      	adds	r0, #8
    cbc4:	f7ff f8a1 	bl	bd0a <mbedtls_mpi_copy>
    cbc8:	2800      	cmp	r0, #0
    cbca:	d0ea      	beq.n	cba2 <mbedtls_rsa_import+0x12>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
    cbcc:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
}
    cbd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ( P != NULL && ( ret = mbedtls_mpi_copy( &ctx->P, P ) ) != 0 ) ||
    cbd4:	4649      	mov	r1, r9
    cbd6:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    cbda:	f7ff f896 	bl	bd0a <mbedtls_mpi_copy>
    cbde:	2800      	cmp	r0, #0
    cbe0:	d0e2      	beq.n	cba8 <mbedtls_rsa_import+0x18>
    cbe2:	e7f3      	b.n	cbcc <mbedtls_rsa_import+0x3c>
        ( Q != NULL && ( ret = mbedtls_mpi_copy( &ctx->Q, Q ) ) != 0 ) ||
    cbe4:	4641      	mov	r1, r8
    cbe6:	f105 0038 	add.w	r0, r5, #56	; 0x38
    cbea:	f7ff f88e 	bl	bd0a <mbedtls_mpi_copy>
    cbee:	2800      	cmp	r0, #0
    cbf0:	d0dd      	beq.n	cbae <mbedtls_rsa_import+0x1e>
    cbf2:	e7eb      	b.n	cbcc <mbedtls_rsa_import+0x3c>
        ( D != NULL && ( ret = mbedtls_mpi_copy( &ctx->D, D ) ) != 0 ) ||
    cbf4:	4639      	mov	r1, r7
    cbf6:	f105 0020 	add.w	r0, r5, #32
    cbfa:	f7ff f886 	bl	bd0a <mbedtls_mpi_copy>
    cbfe:	2800      	cmp	r0, #0
    cc00:	d0d6      	beq.n	cbb0 <mbedtls_rsa_import+0x20>
    cc02:	e7e3      	b.n	cbcc <mbedtls_rsa_import+0x3c>
        ( E != NULL && ( ret = mbedtls_mpi_copy( &ctx->E, E ) ) != 0 ) )
    cc04:	4631      	mov	r1, r6
    cc06:	f105 0014 	add.w	r0, r5, #20
    cc0a:	f7ff f87e 	bl	bd0a <mbedtls_mpi_copy>
    cc0e:	2800      	cmp	r0, #0
    cc10:	d0cf      	beq.n	cbb2 <mbedtls_rsa_import+0x22>
    cc12:	e7db      	b.n	cbcc <mbedtls_rsa_import+0x3c>
    return( 0 );
    cc14:	4620      	mov	r0, r4
    cc16:	e7db      	b.n	cbd0 <mbedtls_rsa_import+0x40>

0000cc18 <mbedtls_rsa_init>:
{
    cc18:	b570      	push	{r4, r5, r6, lr}
    cc1a:	4604      	mov	r4, r0
    cc1c:	460e      	mov	r6, r1
    cc1e:	4615      	mov	r5, r2
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
    cc20:	2100      	movs	r1, #0
    cc22:	22ac      	movs	r2, #172	; 0xac
    cc24:	f7fe f835 	bl	ac92 <memset>
    ctx->hash_id = hash_id;
    cc28:	e9c4 6529 	strd	r6, r5, [r4, #164]	; 0xa4
}
    cc2c:	bd70      	pop	{r4, r5, r6, pc}

0000cc2e <mbedtls_rsa_free>:

/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
    cc2e:	b510      	push	{r4, lr}
    if( ctx == NULL )
    cc30:	4604      	mov	r4, r0
    cc32:	b3a0      	cbz	r0, cc9e <mbedtls_rsa_free+0x70>
        return;

    mbedtls_mpi_free( &ctx->Vi );
    cc34:	308c      	adds	r0, #140	; 0x8c
    cc36:	f7ff f830 	bl	bc9a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Vf );
    cc3a:	f104 0098 	add.w	r0, r4, #152	; 0x98
    cc3e:	f7ff f82c 	bl	bc9a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RN );
    cc42:	f104 0068 	add.w	r0, r4, #104	; 0x68
    cc46:	f7ff f828 	bl	bc9a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->D  );
    cc4a:	f104 0020 	add.w	r0, r4, #32
    cc4e:	f7ff f824 	bl	bc9a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  );
    cc52:	f104 0038 	add.w	r0, r4, #56	; 0x38
    cc56:	f7ff f820 	bl	bc9a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->P  );
    cc5a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    cc5e:	f7ff f81c 	bl	bc9a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  );
    cc62:	f104 0014 	add.w	r0, r4, #20
    cc66:	f7ff f818 	bl	bc9a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->N  );
    cc6a:	f104 0008 	add.w	r0, r4, #8
    cc6e:	f7ff f814 	bl	bc9a <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ );
    cc72:	f104 0080 	add.w	r0, r4, #128	; 0x80
    cc76:	f7ff f810 	bl	bc9a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RP );
    cc7a:	f104 0074 	add.w	r0, r4, #116	; 0x74
    cc7e:	f7ff f80c 	bl	bc9a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP );
    cc82:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    cc86:	f7ff f808 	bl	bc9a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DQ );
    cc8a:	f104 0050 	add.w	r0, r4, #80	; 0x50
    cc8e:	f7ff f804 	bl	bc9a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DP );
    cc92:	f104 0044 	add.w	r0, r4, #68	; 0x44
    {
        mbedtls_mutex_free( &ctx->mutex );
        ctx->ver = 0;
    }
#endif
}
    cc96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &ctx->DP );
    cc9a:	f7fe bffe 	b.w	bc9a <mbedtls_mpi_free>
}
    cc9e:	bd10      	pop	{r4, pc}

0000cca0 <mbedtls_sha256_init>:
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
    cca0:	226c      	movs	r2, #108	; 0x6c
    cca2:	2100      	movs	r1, #0
    cca4:	f7fd bff5 	b.w	ac92 <memset>

0000cca8 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
    cca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ccac:	4605      	mov	r5, r0
    ccae:	460e      	mov	r6, r1
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
    ccb0:	4614      	mov	r4, r2
    ccb2:	b912      	cbnz	r2, ccba <mbedtls_sha256_update_ret+0x12>
    }

    if( ilen > 0 )
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
    ccb4:	2000      	movs	r0, #0
}
    ccb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    left = ctx->total[0] & 0x3F;
    ccba:	6803      	ldr	r3, [r0, #0]
    ccbc:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    ctx->total[0] += (uint32_t) ilen;
    ccc0:	18d3      	adds	r3, r2, r3
    ccc2:	6003      	str	r3, [r0, #0]
        ctx->total[1]++;
    ccc4:	bf22      	ittt	cs
    ccc6:	6843      	ldrcs	r3, [r0, #4]
    ccc8:	3301      	addcs	r3, #1
    ccca:	6043      	strcs	r3, [r0, #4]
    if( left && ilen >= fill )
    cccc:	b1a7      	cbz	r7, ccf8 <mbedtls_sha256_update_ret+0x50>
    fill = 64 - left;
    ccce:	f1c7 0940 	rsb	r9, r7, #64	; 0x40
    if( left && ilen >= fill )
    ccd2:	454a      	cmp	r2, r9
    ccd4:	d310      	bcc.n	ccf8 <mbedtls_sha256_update_ret+0x50>
        memcpy( (void *) (ctx->buffer + left), input, fill );
    ccd6:	f100 0828 	add.w	r8, r0, #40	; 0x28
    ccda:	464a      	mov	r2, r9
    ccdc:	eb08 0007 	add.w	r0, r8, r7
    cce0:	f7fd ffac 	bl	ac3c <memcpy>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    cce4:	4641      	mov	r1, r8
    cce6:	4628      	mov	r0, r5
    cce8:	f7fa fc90 	bl	760c <mbedtls_internal_sha256_process>
    ccec:	2800      	cmp	r0, #0
    ccee:	d1e2      	bne.n	ccb6 <mbedtls_sha256_update_ret+0xe>
        ilen  -= fill;
    ccf0:	443c      	add	r4, r7
        input += fill;
    ccf2:	444e      	add	r6, r9
        ilen  -= fill;
    ccf4:	3c40      	subs	r4, #64	; 0x40
        left = 0;
    ccf6:	4607      	mov	r7, r0
    ccf8:	4426      	add	r6, r4
    ccfa:	e005      	b.n	cd08 <mbedtls_sha256_update_ret+0x60>
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
    ccfc:	4628      	mov	r0, r5
    ccfe:	f7fa fc85 	bl	760c <mbedtls_internal_sha256_process>
    cd02:	2800      	cmp	r0, #0
    cd04:	d1d7      	bne.n	ccb6 <mbedtls_sha256_update_ret+0xe>
        ilen  -= 64;
    cd06:	3c40      	subs	r4, #64	; 0x40
    while( ilen >= 64 )
    cd08:	2c3f      	cmp	r4, #63	; 0x3f
    cd0a:	eba6 0104 	sub.w	r1, r6, r4
    cd0e:	d8f5      	bhi.n	ccfc <mbedtls_sha256_update_ret+0x54>
    if( ilen > 0 )
    cd10:	2c00      	cmp	r4, #0
    cd12:	d0cf      	beq.n	ccb4 <mbedtls_sha256_update_ret+0xc>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
    cd14:	f105 0028 	add.w	r0, r5, #40	; 0x28
    cd18:	4622      	mov	r2, r4
    cd1a:	4438      	add	r0, r7
    cd1c:	f7fd ff8e 	bl	ac3c <memcpy>
    cd20:	e7c8      	b.n	ccb4 <mbedtls_sha256_update_ret+0xc>

0000cd22 <mbedtls_sha256_finish_ret>:
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
    cd22:	6803      	ldr	r3, [r0, #0]
    cd24:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
    cd28:	1c5a      	adds	r2, r3, #1
    cd2a:	4403      	add	r3, r0
{
    cd2c:	b570      	push	{r4, r5, r6, lr}

    if( used <= 56 )
    cd2e:	2a38      	cmp	r2, #56	; 0x38
{
    cd30:	460d      	mov	r5, r1
    cd32:	f100 0628 	add.w	r6, r0, #40	; 0x28
    ctx->buffer[used++] = 0x80;
    cd36:	f04f 0180 	mov.w	r1, #128	; 0x80
{
    cd3a:	4604      	mov	r4, r0
    ctx->buffer[used++] = 0x80;
    cd3c:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
    if( used <= 56 )
    cd40:	eb06 0002 	add.w	r0, r6, r2
    cd44:	d861      	bhi.n	ce0a <mbedtls_sha256_finish_ret+0xe8>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
    cd46:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
    cd4a:	2100      	movs	r1, #0
        memset( ctx->buffer + used, 0, 64 - used );

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
            return( ret );

        memset( ctx->buffer, 0, 56 );
    cd4c:	f7fd ffa1 	bl	ac92 <memset>

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    cd50:	e9d4 3100 	ldrd	r3, r1, [r4]
    high = ( ctx->total[0] >> 29 )
    cd54:	0f5a      	lsrs	r2, r3, #29
    cd56:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );
    cd5a:	00db      	lsls	r3, r3, #3
    cd5c:	ba12      	rev	r2, r2
    cd5e:	ba1b      	rev	r3, r3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
    cd60:	6622      	str	r2, [r4, #96]	; 0x60
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
    cd62:	6663      	str	r3, [r4, #100]	; 0x64

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    cd64:	4631      	mov	r1, r6
    cd66:	4620      	mov	r0, r4
    cd68:	f7fa fc50 	bl	760c <mbedtls_internal_sha256_process>
    cd6c:	2800      	cmp	r0, #0
    cd6e:	d14b      	bne.n	ce08 <mbedtls_sha256_finish_ret+0xe6>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
    cd70:	7ae3      	ldrb	r3, [r4, #11]
    cd72:	702b      	strb	r3, [r5, #0]
    cd74:	8963      	ldrh	r3, [r4, #10]
    cd76:	706b      	strb	r3, [r5, #1]
    cd78:	68a3      	ldr	r3, [r4, #8]
    cd7a:	0a1b      	lsrs	r3, r3, #8
    cd7c:	70ab      	strb	r3, [r5, #2]
    cd7e:	68a3      	ldr	r3, [r4, #8]
    cd80:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
    cd82:	7be3      	ldrb	r3, [r4, #15]
    cd84:	712b      	strb	r3, [r5, #4]
    cd86:	89e3      	ldrh	r3, [r4, #14]
    cd88:	716b      	strb	r3, [r5, #5]
    cd8a:	68e3      	ldr	r3, [r4, #12]
    cd8c:	0a1b      	lsrs	r3, r3, #8
    cd8e:	71ab      	strb	r3, [r5, #6]
    cd90:	68e3      	ldr	r3, [r4, #12]
    cd92:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
    cd94:	7ce3      	ldrb	r3, [r4, #19]
    cd96:	722b      	strb	r3, [r5, #8]
    cd98:	8a63      	ldrh	r3, [r4, #18]
    cd9a:	726b      	strb	r3, [r5, #9]
    cd9c:	6923      	ldr	r3, [r4, #16]
    cd9e:	0a1b      	lsrs	r3, r3, #8
    cda0:	72ab      	strb	r3, [r5, #10]
    cda2:	6923      	ldr	r3, [r4, #16]
    cda4:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
    cda6:	7de3      	ldrb	r3, [r4, #23]
    cda8:	732b      	strb	r3, [r5, #12]
    cdaa:	8ae3      	ldrh	r3, [r4, #22]
    cdac:	736b      	strb	r3, [r5, #13]
    cdae:	6963      	ldr	r3, [r4, #20]
    cdb0:	0a1b      	lsrs	r3, r3, #8
    cdb2:	73ab      	strb	r3, [r5, #14]
    cdb4:	6963      	ldr	r3, [r4, #20]
    cdb6:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
    cdb8:	7ee3      	ldrb	r3, [r4, #27]
    cdba:	742b      	strb	r3, [r5, #16]
    cdbc:	8b63      	ldrh	r3, [r4, #26]
    cdbe:	746b      	strb	r3, [r5, #17]
    cdc0:	69a3      	ldr	r3, [r4, #24]
    cdc2:	0a1b      	lsrs	r3, r3, #8
    cdc4:	74ab      	strb	r3, [r5, #18]
    cdc6:	69a3      	ldr	r3, [r4, #24]
    cdc8:	74eb      	strb	r3, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
    cdca:	7fe3      	ldrb	r3, [r4, #31]
    cdcc:	752b      	strb	r3, [r5, #20]
    cdce:	8be3      	ldrh	r3, [r4, #30]
    cdd0:	756b      	strb	r3, [r5, #21]
    cdd2:	69e3      	ldr	r3, [r4, #28]
    cdd4:	0a1b      	lsrs	r3, r3, #8
    cdd6:	75ab      	strb	r3, [r5, #22]
    cdd8:	69e3      	ldr	r3, [r4, #28]
    cdda:	75eb      	strb	r3, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
    cddc:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    cde0:	762b      	strb	r3, [r5, #24]
    cde2:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    cde4:	766b      	strb	r3, [r5, #25]
    cde6:	6a23      	ldr	r3, [r4, #32]
    cde8:	0a1b      	lsrs	r3, r3, #8
    cdea:	76ab      	strb	r3, [r5, #26]
    cdec:	6a23      	ldr	r3, [r4, #32]
    cdee:	76eb      	strb	r3, [r5, #27]

    if( ctx->is224 == 0 )
    cdf0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    cdf2:	b94b      	cbnz	r3, ce08 <mbedtls_sha256_finish_ret+0xe6>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
    cdf4:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    cdf8:	772b      	strb	r3, [r5, #28]
    cdfa:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    cdfc:	776b      	strb	r3, [r5, #29]
    cdfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ce00:	0a1b      	lsrs	r3, r3, #8
    ce02:	77ab      	strb	r3, [r5, #30]
    ce04:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ce06:	77eb      	strb	r3, [r5, #31]

    return( 0 );
}
    ce08:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer + used, 0, 64 - used );
    ce0a:	2100      	movs	r1, #0
    ce0c:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    ce10:	f7fd ff3f 	bl	ac92 <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    ce14:	4631      	mov	r1, r6
    ce16:	4620      	mov	r0, r4
    ce18:	f7fa fbf8 	bl	760c <mbedtls_internal_sha256_process>
    ce1c:	2800      	cmp	r0, #0
    ce1e:	d1f3      	bne.n	ce08 <mbedtls_sha256_finish_ret+0xe6>
        memset( ctx->buffer, 0, 56 );
    ce20:	4601      	mov	r1, r0
    ce22:	2238      	movs	r2, #56	; 0x38
    ce24:	4630      	mov	r0, r6
    ce26:	e791      	b.n	cd4c <mbedtls_sha256_finish_ret+0x2a>

0000ce28 <append_to_buffer.isra.0>:
    memcpy(where, &v, sizeof(v));
}

static inline CborError append_to_buffer(CborEncoder *encoder, const void *data, size_t len)
{
    return encoder->writer->write(encoder->writer, data, len);
    ce28:	6803      	ldr	r3, [r0, #0]
    ce2a:	4718      	bx	r3

0000ce2c <encode_number_no_update>:
{
    return append_to_buffer(encoder, &byte, 1);
}

static inline CborError encode_number_no_update(CborEncoder *encoder, uint64_t ui, uint8_t shiftedMajorType)
{
    ce2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ce2e:	461d      	mov	r5, r3
    ce30:	b087      	sub	sp, #28
    v = cbor_htonll(v);
    ce32:	ba13      	rev	r3, r2
{
    ce34:	4614      	mov	r4, r2
    v = cbor_htonll(v);
    ce36:	ba2a      	rev	r2, r5
    ce38:	e9cd 2300 	strd	r2, r3, [sp]
    memcpy(where, &v, sizeof(v));
    ce3c:	4669      	mov	r1, sp
{
    ce3e:	4606      	mov	r6, r0
    memcpy(where, &v, sizeof(v));
    ce40:	2208      	movs	r2, #8
    ce42:	a804      	add	r0, sp, #16
{
    ce44:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
    memcpy(where, &v, sizeof(v));
    ce48:	f7fd fef8 	bl	ac3c <memcpy>
    uint64_t buf[2];
    uint8_t *const bufend = (uint8_t *)buf + sizeof(buf);
    uint8_t *bufstart = bufend - 1;
    put64(buf + 1, ui);     /* we probably have a bunch of zeros in the beginning */

    if (ui < Value8Bit) {
    ce4c:	2d00      	cmp	r5, #0
    ce4e:	bf08      	it	eq
    ce50:	2c18      	cmpeq	r4, #24
    ce52:	f10d 0117 	add.w	r1, sp, #23
    ce56:	d20b      	bcs.n	ce70 <encode_number_no_update+0x44>
        *bufstart += shiftedMajorType;
    ce58:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ce5c:	443b      	add	r3, r7
    ce5e:	f88d 3017 	strb.w	r3, [sp, #23]
            ++more;
        bufstart -= (size_t)1 << more;
        *bufstart = shiftedMajorType + Value8Bit + more;
    }

    return append_to_buffer(encoder, bufstart, bufend - bufstart);
    ce62:	ab06      	add	r3, sp, #24
    ce64:	6830      	ldr	r0, [r6, #0]
    ce66:	1a5a      	subs	r2, r3, r1
    ce68:	f7ff ffde 	bl	ce28 <append_to_buffer.isra.0>
}
    ce6c:	b007      	add	sp, #28
    ce6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (ui > 0xffU)
    ce70:	2d00      	cmp	r5, #0
    ce72:	bf08      	it	eq
    ce74:	f5b4 7f80 	cmpeq.w	r4, #256	; 0x100
            ++more;
    ce78:	bf2c      	ite	cs
    ce7a:	2301      	movcs	r3, #1
    ce7c:	2300      	movcc	r3, #0
        if (ui > 0xffffU)
    ce7e:	2d00      	cmp	r5, #0
    ce80:	bf08      	it	eq
    ce82:	f5b4 3f80 	cmpeq.w	r4, #65536	; 0x10000
            ++more;
    ce86:	bf28      	it	cs
    ce88:	3301      	addcs	r3, #1
        if (ui > 0xffffffffU)
    ce8a:	2d01      	cmp	r5, #1
    ce8c:	bf08      	it	eq
    ce8e:	2c00      	cmpeq	r4, #0
            ++more;
    ce90:	bf24      	itt	cs
    ce92:	3301      	addcs	r3, #1
    ce94:	b2db      	uxtbcs	r3, r3
        bufstart -= (size_t)1 << more;
    ce96:	2201      	movs	r2, #1
    ce98:	409a      	lsls	r2, r3
    ce9a:	1a89      	subs	r1, r1, r2
        *bufstart = shiftedMajorType + Value8Bit + more;
    ce9c:	443b      	add	r3, r7
    ce9e:	3318      	adds	r3, #24
    cea0:	700b      	strb	r3, [r1, #0]
    cea2:	e7de      	b.n	ce62 <encode_number_no_update+0x36>

0000cea4 <encode_number>:

static inline CborError encode_number(CborEncoder *encoder, uint64_t ui, uint8_t shiftedMajorType)
{
    cea4:	b430      	push	{r4, r5}
    ++encoder->added;
    cea6:	6884      	ldr	r4, [r0, #8]
{
    cea8:	f89d 5008 	ldrb.w	r5, [sp, #8]
    ++encoder->added;
    ceac:	3401      	adds	r4, #1
    ceae:	6084      	str	r4, [r0, #8]
    return encode_number_no_update(encoder, ui, shiftedMajorType);
    ceb0:	9502      	str	r5, [sp, #8]
}
    ceb2:	bc30      	pop	{r4, r5}
    return encode_number_no_update(encoder, ui, shiftedMajorType);
    ceb4:	f7ff bfba 	b.w	ce2c <encode_number_no_update>

0000ceb8 <create_container>:

#ifdef __GNUC__
__attribute__((noinline))
#endif
static CborError create_container(CborEncoder *encoder, CborEncoder *container, size_t length, uint8_t shiftedMajorType)
{
    ceb8:	b530      	push	{r4, r5, lr}
    ceba:	4605      	mov	r5, r0
    cebc:	461c      	mov	r4, r3
    CborError err;
    container->writer = encoder->writer;
    ++encoder->added;
    cebe:	68ab      	ldr	r3, [r5, #8]
    container->writer = encoder->writer;
    cec0:	6800      	ldr	r0, [r0, #0]
    cec2:	6008      	str	r0, [r1, #0]
    ++encoder->added;
    cec4:	3301      	adds	r3, #1
    cec6:	60ab      	str	r3, [r5, #8]

    cbor_static_assert(((MapType << MajorTypeShift) & CborIteratorFlag_ContainerIsMap) == CborIteratorFlag_ContainerIsMap);
    cbor_static_assert(((ArrayType << MajorTypeShift) & CborIteratorFlag_ContainerIsMap) == 0);
    container->flags = shiftedMajorType & CborIteratorFlag_ContainerIsMap;

    if (length == CborIndefiniteLength) {
    cec8:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
    container->added = 0;
    cecc:	f04f 0300 	mov.w	r3, #0
    ced0:	f004 0520 	and.w	r5, r4, #32
{
    ced4:	b085      	sub	sp, #20
    container->added = 0;
    ced6:	608b      	str	r3, [r1, #8]
    container->flags = shiftedMajorType & CborIteratorFlag_ContainerIsMap;
    ced8:	60cd      	str	r5, [r1, #12]
    if (length == CborIndefiniteLength) {
    ceda:	d10d      	bne.n	cef8 <create_container+0x40>
        container->flags |= CborIteratorFlag_UnknownLength;
    cedc:	f045 0504 	orr.w	r5, r5, #4
    cee0:	60cd      	str	r5, [r1, #12]
        err = append_byte_to_buffer(container, shiftedMajorType + IndefiniteLength);
    cee2:	341f      	adds	r4, #31
    return append_to_buffer(encoder, &byte, 1);
    cee4:	2201      	movs	r2, #1
    cee6:	f10d 010f 	add.w	r1, sp, #15
    ceea:	f88d 400f 	strb.w	r4, [sp, #15]
    ceee:	f7ff ff9b 	bl	ce28 <append_to_buffer.isra.0>
    }
    if (err && !isOomError(err))
        return err;

    return CborNoError;
}
    cef2:	2000      	movs	r0, #0
    cef4:	b005      	add	sp, #20
    cef6:	bd30      	pop	{r4, r5, pc}
        err = encode_number_no_update(container, length, shiftedMajorType);
    cef8:	9400      	str	r4, [sp, #0]
    cefa:	4608      	mov	r0, r1
    cefc:	f7ff ff96 	bl	ce2c <encode_number_no_update>
    cf00:	e7f7      	b.n	cef2 <create_container+0x3a>

0000cf02 <cbor_encoder_init>:
    encoder->added = 0;
    cf02:	2300      	movs	r3, #0
    encoder->flags = flags;
    cf04:	e9c0 3202 	strd	r3, r2, [r0, #8]
    encoder->writer = writer;
    cf08:	6001      	str	r1, [r0, #0]
}
    cf0a:	4770      	bx	lr

0000cf0c <cbor_encode_uint>:
{
    cf0c:	b507      	push	{r0, r1, r2, lr}
    return encode_number(encoder, value, UnsignedIntegerType << MajorTypeShift);
    cf0e:	2100      	movs	r1, #0
    cf10:	9100      	str	r1, [sp, #0]
    cf12:	f7ff ffc7 	bl	cea4 <encode_number>
}
    cf16:	b003      	add	sp, #12
    cf18:	f85d fb04 	ldr.w	pc, [sp], #4

0000cf1c <cbor_encode_int>:
{
    cf1c:	b507      	push	{r0, r1, r2, lr}
    uint64_t ui = value >> 63;              /* extend sign to whole length */
    cf1e:	17d9      	asrs	r1, r3, #31
    return encode_number(encoder, ui, majorType);
    cf20:	f001 0120 	and.w	r1, r1, #32
    cf24:	ea82 72e3 	eor.w	r2, r2, r3, asr #31
    cf28:	9100      	str	r1, [sp, #0]
    cf2a:	ea83 73e3 	eor.w	r3, r3, r3, asr #31
    cf2e:	f7ff ffb9 	bl	cea4 <encode_number>
}
    cf32:	b003      	add	sp, #12
    cf34:	f85d fb04 	ldr.w	pc, [sp], #4

0000cf38 <cbor_encode_text_string>:
{
    cf38:	b573      	push	{r0, r1, r4, r5, r6, lr}
    CborError err = encode_number(encoder, length, shiftedMajorType);
    cf3a:	2360      	movs	r3, #96	; 0x60
{
    cf3c:	4604      	mov	r4, r0
    CborError err = encode_number(encoder, length, shiftedMajorType);
    cf3e:	9300      	str	r3, [sp, #0]
    cf40:	2300      	movs	r3, #0
{
    cf42:	460d      	mov	r5, r1
    cf44:	4616      	mov	r6, r2
    CborError err = encode_number(encoder, length, shiftedMajorType);
    cf46:	f7ff ffad 	bl	cea4 <encode_number>
    return append_to_buffer(encoder, string, length);
    cf4a:	6820      	ldr	r0, [r4, #0]
    cf4c:	4632      	mov	r2, r6
    cf4e:	4629      	mov	r1, r5
}
    cf50:	b002      	add	sp, #8
    cf52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return append_to_buffer(encoder, string, length);
    cf56:	f7ff bf67 	b.w	ce28 <append_to_buffer.isra.0>

0000cf5a <cbor_encoder_create_array>:
 *
 * \sa cbor_encoder_create_map
 */
CborError cbor_encoder_create_array(CborEncoder *encoder, CborEncoder *arrayEncoder, size_t length)
{
    return create_container(encoder, arrayEncoder, length, ArrayType << MajorTypeShift);
    cf5a:	2380      	movs	r3, #128	; 0x80
    cf5c:	f7ff bfac 	b.w	ceb8 <create_container>

0000cf60 <cbor_encoder_create_map>:
 * value, this function returns error CborErrorDataTooLarge.
 *
 * \sa cbor_encoder_create_array
 */
CborError cbor_encoder_create_map(CborEncoder *encoder, CborEncoder *mapEncoder, size_t length)
{
    cf60:	b410      	push	{r4}
    if (length != CborIndefiniteLength && length > SIZE_MAX / 2)
    cf62:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
    cf66:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    cf6a:	42a3      	cmp	r3, r4
    cf6c:	d303      	bcc.n	cf76 <cbor_encoder_create_map+0x16>
        return CborErrorDataTooLarge;
    return create_container(encoder, mapEncoder, length, MapType << MajorTypeShift);
}
    cf6e:	bc10      	pop	{r4}
    return create_container(encoder, mapEncoder, length, MapType << MajorTypeShift);
    cf70:	23a0      	movs	r3, #160	; 0xa0
    cf72:	f7ff bfa1 	b.w	ceb8 <create_container>
}
    cf76:	f44f 6080 	mov.w	r0, #1024	; 0x400
    cf7a:	bc10      	pop	{r4}
    cf7c:	4770      	bx	lr

0000cf7e <cbor_encoder_close_container>:
 * cbor_encoder_close_container_checked() instead.
 *
 * \sa cbor_encoder_create_array(), cbor_encoder_create_map()
 */
CborError cbor_encoder_close_container(CborEncoder *encoder, const CborEncoder *containerEncoder)
{
    cf7e:	4603      	mov	r3, r0
    cf80:	b507      	push	{r0, r1, r2, lr}
    encoder->writer = containerEncoder->writer;
    cf82:	6808      	ldr	r0, [r1, #0]
    cf84:	6018      	str	r0, [r3, #0]

    if (containerEncoder->flags & CborIteratorFlag_UnknownLength)
    cf86:	68cb      	ldr	r3, [r1, #12]
    cf88:	f013 0304 	ands.w	r3, r3, #4
    cf8c:	d00a      	beq.n	cfa4 <cbor_encoder_close_container+0x26>
        return append_byte_to_buffer(encoder, BreakByte);
    cf8e:	23ff      	movs	r3, #255	; 0xff
    return append_to_buffer(encoder, &byte, 1);
    cf90:	2201      	movs	r2, #1
    cf92:	f10d 0107 	add.w	r1, sp, #7
    cf96:	f88d 3007 	strb.w	r3, [sp, #7]
    cf9a:	f7ff ff45 	bl	ce28 <append_to_buffer.isra.0>
    return CborNoError;
}
    cf9e:	b003      	add	sp, #12
    cfa0:	f85d fb04 	ldr.w	pc, [sp], #4
    return CborNoError;
    cfa4:	4618      	mov	r0, r3
    cfa6:	e7fa      	b.n	cf9e <cbor_encoder_close_container+0x20>

0000cfa8 <z_device_state_init>:
}
    cfa8:	4770      	bx	lr

0000cfaa <z_device_ready>:
	return __device_end - __device_start;
}

bool z_device_ready(const struct device *dev)
{
	return dev->state->initialized && (dev->state->init_res == 0U);
    cfaa:	68c3      	ldr	r3, [r0, #12]
    cfac:	8818      	ldrh	r0, [r3, #0]
    cfae:	f3c0 0008 	ubfx	r0, r0, #0, #9
}
    cfb2:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    cfb6:	4258      	negs	r0, r3
    cfb8:	4158      	adcs	r0, r3
    cfba:	4770      	bx	lr

0000cfbc <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    cfbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cfbe:	4605      	mov	r5, r0
    cfc0:	460e      	mov	r6, r1
	__asm__ volatile(
    cfc2:	f04f 0320 	mov.w	r3, #32
    cfc6:	f3ef 8711 	mrs	r7, BASEPRI
    cfca:	f383 8811 	msr	BASEPRI, r3
    cfce:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    cfd2:	f7fb fe19 	bl	8c08 <z_impl_k_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    cfd6:	4631      	mov	r1, r6
    cfd8:	4604      	mov	r4, r0
    cfda:	4628      	mov	r0, r5
    cfdc:	f7fe f93f 	bl	b25e <k_sys_fatal_error_handler>
	__asm__ volatile(
    cfe0:	f387 8811 	msr	BASEPRI, r7
    cfe4:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    cfe8:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    cfea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    cfee:	f7f7 bed1 	b.w	4d94 <z_impl_k_thread_abort>

0000cff2 <k_mem_slab_init>:
{
    cff2:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    cff4:	2400      	movs	r4, #0
    cff6:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    cff8:	ea41 0402 	orr.w	r4, r1, r2
    cffc:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    d000:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
    d004:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    d006:	d10c      	bne.n	d022 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
    d008:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    d00a:	42a3      	cmp	r3, r4
    d00c:	d103      	bne.n	d016 <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
    d00e:	e9c0 0000 	strd	r0, r0, [r0]
}
    d012:	2000      	movs	r0, #0
}
    d014:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    d016:	6945      	ldr	r5, [r0, #20]
    d018:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    d01a:	3401      	adds	r4, #1
		slab->free_list = p;
    d01c:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    d01e:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    d020:	e7f3      	b.n	d00a <k_mem_slab_init+0x18>
		return -EINVAL;
    d022:	f06f 0015 	mvn.w	r0, #21
	return rc;
    d026:	e7f5      	b.n	d014 <k_mem_slab_init+0x22>

0000d028 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    d028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d02a:	4604      	mov	r4, r0
    d02c:	460d      	mov	r5, r1
	__asm__ volatile(
    d02e:	f04f 0320 	mov.w	r3, #32
    d032:	f3ef 8611 	mrs	r6, BASEPRI
    d036:	f383 8811 	msr	BASEPRI, r3
    d03a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    d03e:	6947      	ldr	r7, [r0, #20]
    d040:	b977      	cbnz	r7, d060 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    d042:	f000 f988 	bl	d356 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    d046:	b158      	cbz	r0, d060 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    d048:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    d04a:	6142      	str	r2, [r0, #20]
    d04c:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    d04e:	f000 f950 	bl	d2f2 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    d052:	4631      	mov	r1, r6
    d054:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    d058:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    d05c:	f7fb bb12 	b.w	8684 <z_reschedule>
	**(char ***) mem = slab->free_list;
    d060:	682b      	ldr	r3, [r5, #0]
    d062:	6962      	ldr	r2, [r4, #20]
    d064:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    d066:	682b      	ldr	r3, [r5, #0]
    d068:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    d06a:	69a3      	ldr	r3, [r4, #24]
    d06c:	3b01      	subs	r3, #1
    d06e:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    d070:	f386 8811 	msr	BASEPRI, r6
    d074:	f3bf 8f6f 	isb	sy
}
    d078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000d07a <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    d07a:	f3ef 8005 	mrs	r0, IPSR
}
    d07e:	3800      	subs	r0, #0
    d080:	bf18      	it	ne
    d082:	2001      	movne	r0, #1
    d084:	4770      	bx	lr

0000d086 <z_impl_k_thread_name_set>:
}
    d086:	f06f 0057 	mvn.w	r0, #87	; 0x57
    d08a:	4770      	bx	lr

0000d08c <z_impl_k_thread_start>:
	z_sched_start(thread);
    d08c:	f7fb bcd2 	b.w	8a34 <z_sched_start>

0000d090 <z_pm_save_idle_exit>:
{
    d090:	b508      	push	{r3, lr}
	pm_system_resume();
    d092:	f7f5 fd37 	bl	2b04 <pm_system_resume>
}
    d096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    d09a:	f7fd bc74 	b.w	a986 <sys_clock_idle_exit>

0000d09e <z_impl_k_mutex_init>:
{
    d09e:	4603      	mov	r3, r0
	mutex->owner = NULL;
    d0a0:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    d0a2:	e9c3 0002 	strd	r0, r0, [r3, #8]
    d0a6:	e9c3 3300 	strd	r3, r3, [r3]
}
    d0aa:	4770      	bx	lr

0000d0ac <queue_insert>:
{
    d0ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d0b0:	4699      	mov	r9, r3
    d0b2:	4604      	mov	r4, r0
    d0b4:	f89d 3020 	ldrb.w	r3, [sp, #32]
    d0b8:	460d      	mov	r5, r1
    d0ba:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    d0bc:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
    d0c0:	f04f 0220 	mov.w	r2, #32
    d0c4:	f3ef 8611 	mrs	r6, BASEPRI
    d0c8:	f382 8811 	msr	BASEPRI, r2
    d0cc:	f3bf 8f6f 	isb	sy
	if (is_append) {
    d0d0:	b103      	cbz	r3, d0d4 <queue_insert+0x28>
		prev = sys_sflist_peek_tail(&queue->data_q);
    d0d2:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
    d0d4:	4638      	mov	r0, r7
    d0d6:	f000 f93e 	bl	d356 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
    d0da:	b158      	cbz	r0, d0f4 <queue_insert+0x48>
    d0dc:	2400      	movs	r4, #0
    d0de:	6784      	str	r4, [r0, #120]	; 0x78
    d0e0:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
    d0e4:	f000 f905 	bl	d2f2 <z_ready_thread>
	z_reschedule(&queue->lock, key);
    d0e8:	4638      	mov	r0, r7
    d0ea:	4631      	mov	r1, r6
    d0ec:	f7fb faca 	bl	8684 <z_reschedule>
	return 0;
    d0f0:	2000      	movs	r0, #0
    d0f2:	e00c      	b.n	d10e <queue_insert+0x62>
	if (alloc) {
    d0f4:	f1b9 0f00 	cmp.w	r9, #0
    d0f8:	d01c      	beq.n	d134 <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
    d0fa:	2108      	movs	r1, #8
    d0fc:	f7fb ff76 	bl	8fec <z_thread_aligned_alloc>
		if (anode == NULL) {
    d100:	b938      	cbnz	r0, d112 <queue_insert+0x66>
	__asm__ volatile(
    d102:	f386 8811 	msr	BASEPRI, r6
    d106:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
    d10a:	f06f 000b 	mvn.w	r0, #11
}
    d10e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
    d112:	2301      	movs	r3, #1
		anode->data = data;
    d114:	f8c0 8004 	str.w	r8, [r0, #4]
    d118:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    d11a:	6803      	ldr	r3, [r0, #0]
    d11c:	f003 0203 	and.w	r2, r3, #3
    d120:	b965      	cbnz	r5, d13c <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
    d122:	6823      	ldr	r3, [r4, #0]
    d124:	4313      	orrs	r3, r2
    d126:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    d128:	6863      	ldr	r3, [r4, #4]
	list->head = node;
    d12a:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    d12c:	2b00      	cmp	r3, #0
    d12e:	d1db      	bne.n	d0e8 <queue_insert+0x3c>
	list->tail = node;
    d130:	6060      	str	r0, [r4, #4]
}
    d132:	e7d9      	b.n	d0e8 <queue_insert+0x3c>
	node->next_and_flags = flags;
    d134:	f8c8 9000 	str.w	r9, [r8]
}
    d138:	4640      	mov	r0, r8
    d13a:	e7ee      	b.n	d11a <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    d13c:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    d13e:	f033 0303 	bics.w	r3, r3, #3
    d142:	d10b      	bne.n	d15c <queue_insert+0xb0>
	parent->next_and_flags = cur_flags | (unative_t)child;
    d144:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
    d146:	6862      	ldr	r2, [r4, #4]
    d148:	b912      	cbnz	r2, d150 <queue_insert+0xa4>
	list->head = node;
    d14a:	e9c4 0000 	strd	r0, r0, [r4]
}
    d14e:	e7cb      	b.n	d0e8 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    d150:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    d152:	f003 0303 	and.w	r3, r3, #3
    d156:	4303      	orrs	r3, r0
    d158:	6013      	str	r3, [r2, #0]
    d15a:	e7e9      	b.n	d130 <queue_insert+0x84>
    d15c:	4313      	orrs	r3, r2
    d15e:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    d160:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    d162:	f003 0303 	and.w	r3, r3, #3
    d166:	4318      	orrs	r0, r3
    d168:	6028      	str	r0, [r5, #0]
}
    d16a:	e7bd      	b.n	d0e8 <queue_insert+0x3c>

0000d16c <z_queue_node_peek>:
{
    d16c:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
    d16e:	4604      	mov	r4, r0
    d170:	b130      	cbz	r0, d180 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    d172:	6802      	ldr	r2, [r0, #0]
    d174:	0793      	lsls	r3, r2, #30
    d176:	d003      	beq.n	d180 <z_queue_node_peek+0x14>
		ret = anode->data;
    d178:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
    d17a:	b109      	cbz	r1, d180 <z_queue_node_peek+0x14>
			k_free(anode);
    d17c:	f000 f9a1 	bl	d4c2 <k_free>
}
    d180:	4620      	mov	r0, r4
    d182:	bd10      	pop	{r4, pc}

0000d184 <k_queue_append>:
{
    d184:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
    d186:	2301      	movs	r3, #1
    d188:	9300      	str	r3, [sp, #0]
    d18a:	2300      	movs	r3, #0
{
    d18c:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
    d18e:	4619      	mov	r1, r3
    d190:	f7ff ff8c 	bl	d0ac <queue_insert>
}
    d194:	b003      	add	sp, #12
    d196:	f85d fb04 	ldr.w	pc, [sp], #4

0000d19a <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    d19a:	b13a      	cbz	r2, d1ac <z_impl_k_sem_init+0x12>
    d19c:	428a      	cmp	r2, r1
    d19e:	d305      	bcc.n	d1ac <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    d1a0:	e9c0 1202 	strd	r1, r2, [r0, #8]
    d1a4:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    d1a8:	2000      	movs	r0, #0
    d1aa:	4770      	bx	lr
		return -EINVAL;
    d1ac:	f06f 0015 	mvn.w	r0, #21
}
    d1b0:	4770      	bx	lr

0000d1b2 <notify_queue_locked>:
	if (queue != NULL) {
    d1b2:	b120      	cbz	r0, d1be <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    d1b4:	2200      	movs	r2, #0
    d1b6:	4611      	mov	r1, r2
    d1b8:	3088      	adds	r0, #136	; 0x88
    d1ba:	f000 b8f4 	b.w	d3a6 <z_sched_wake>
}
    d1be:	4770      	bx	lr

0000d1c0 <k_work_init>:
{
    d1c0:	b538      	push	{r3, r4, r5, lr}
    d1c2:	4604      	mov	r4, r0
    d1c4:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    d1c6:	2210      	movs	r2, #16
    d1c8:	2100      	movs	r1, #0
    d1ca:	f7fd fd62 	bl	ac92 <memset>
    d1ce:	6065      	str	r5, [r4, #4]
}
    d1d0:	bd38      	pop	{r3, r4, r5, pc}

0000d1d2 <k_work_submit_to_queue>:
{
    d1d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d1d4:	9001      	str	r0, [sp, #4]
    d1d6:	4608      	mov	r0, r1
	__asm__ volatile(
    d1d8:	f04f 0320 	mov.w	r3, #32
    d1dc:	f3ef 8511 	mrs	r5, BASEPRI
    d1e0:	f383 8811 	msr	BASEPRI, r3
    d1e4:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    d1e8:	a901      	add	r1, sp, #4
    d1ea:	f7fb f97b 	bl	84e4 <submit_to_queue_locked>
    d1ee:	4604      	mov	r4, r0
	__asm__ volatile(
    d1f0:	f385 8811 	msr	BASEPRI, r5
    d1f4:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
    d1f8:	2800      	cmp	r0, #0
    d1fa:	dd04      	ble.n	d206 <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
    d1fc:	f7fb fd0a 	bl	8c14 <z_impl_k_is_preempt_thread>
    d200:	b108      	cbz	r0, d206 <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
    d202:	f7fb fc8d 	bl	8b20 <z_impl_k_yield>
}
    d206:	4620      	mov	r0, r4
    d208:	b003      	add	sp, #12
    d20a:	bd30      	pop	{r4, r5, pc}

0000d20c <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    d20c:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    d210:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    d212:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    d214:	2300      	movs	r3, #0
	node->prev = NULL;
    d216:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    d21a:	4770      	bx	lr

0000d21c <unpend_thread_no_timeout>:
{
    d21c:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    d21e:	f7ff fff5 	bl	d20c <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    d222:	7b43      	ldrb	r3, [r0, #13]
    d224:	f023 0302 	bic.w	r3, r3, #2
    d228:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    d22a:	2300      	movs	r3, #0
    d22c:	6083      	str	r3, [r0, #8]
}
    d22e:	bd08      	pop	{r3, pc}

0000d230 <z_unpend_thread>:
{
    d230:	b510      	push	{r4, lr}
	__asm__ volatile(
    d232:	f04f 0320 	mov.w	r3, #32
    d236:	f3ef 8411 	mrs	r4, BASEPRI
    d23a:	f383 8811 	msr	BASEPRI, r3
    d23e:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    d242:	f7ff ffeb 	bl	d21c <unpend_thread_no_timeout>
	__asm__ volatile(
    d246:	f384 8811 	msr	BASEPRI, r4
    d24a:	f3bf 8f6f 	isb	sy
}
    d24e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d252:	3018      	adds	r0, #24
    d254:	f000 b8c4 	b.w	d3e0 <z_abort_timeout>

0000d258 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    d258:	4603      	mov	r3, r0
    d25a:	b920      	cbnz	r0, d266 <z_reschedule_irqlock+0xe>
    d25c:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    d260:	b90a      	cbnz	r2, d266 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    d262:	f7f7 badb 	b.w	481c <arch_swap>
    d266:	f383 8811 	msr	BASEPRI, r3
    d26a:	f3bf 8f6f 	isb	sy
}
    d26e:	4770      	bx	lr

0000d270 <z_reschedule_unlocked>:
	__asm__ volatile(
    d270:	f04f 0320 	mov.w	r3, #32
    d274:	f3ef 8011 	mrs	r0, BASEPRI
    d278:	f383 8811 	msr	BASEPRI, r3
    d27c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    d280:	f7ff bfea 	b.w	d258 <z_reschedule_irqlock>

0000d284 <z_priq_dumb_best>:
{
    d284:	4603      	mov	r3, r0
	return list->head == list;
    d286:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d288:	4283      	cmp	r3, r0
    d28a:	d003      	beq.n	d294 <z_priq_dumb_best+0x10>
	if (n != NULL) {
    d28c:	2800      	cmp	r0, #0
    d28e:	bf38      	it	cc
    d290:	2000      	movcc	r0, #0
    d292:	4770      	bx	lr
	struct k_thread *thread = NULL;
    d294:	2000      	movs	r0, #0
}
    d296:	4770      	bx	lr

0000d298 <add_to_waitq_locked>:
{
    d298:	b538      	push	{r3, r4, r5, lr}
    d29a:	4604      	mov	r4, r0
    d29c:	460d      	mov	r5, r1
	unready_thread(thread);
    d29e:	f7fb fa37 	bl	8710 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    d2a2:	7b63      	ldrb	r3, [r4, #13]
    d2a4:	f043 0302 	orr.w	r3, r3, #2
    d2a8:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    d2aa:	b1b5      	cbz	r5, d2da <add_to_waitq_locked+0x42>
	return list->head == list;
    d2ac:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    d2ae:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d2b0:	429d      	cmp	r5, r3
    d2b2:	bf08      	it	eq
    d2b4:	2300      	moveq	r3, #0
    d2b6:	2b00      	cmp	r3, #0
    d2b8:	bf38      	it	cc
    d2ba:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    d2bc:	b19b      	cbz	r3, d2e6 <add_to_waitq_locked+0x4e>
	int32_t b1 = thread_1->base.prio;
    d2be:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    d2c2:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    d2c6:	4291      	cmp	r1, r2
    d2c8:	d008      	beq.n	d2dc <add_to_waitq_locked+0x44>
		return b2 - b1;
    d2ca:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    d2cc:	2a00      	cmp	r2, #0
    d2ce:	dd05      	ble.n	d2dc <add_to_waitq_locked+0x44>
	sys_dnode_t *const prev = successor->prev;
    d2d0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    d2d2:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    d2d6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    d2d8:	605c      	str	r4, [r3, #4]
}
    d2da:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    d2dc:	686a      	ldr	r2, [r5, #4]
    d2de:	4293      	cmp	r3, r2
    d2e0:	d001      	beq.n	d2e6 <add_to_waitq_locked+0x4e>
    d2e2:	681b      	ldr	r3, [r3, #0]
    d2e4:	e7ea      	b.n	d2bc <add_to_waitq_locked+0x24>
	sys_dnode_t *const tail = list->tail;
    d2e6:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    d2e8:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    d2ec:	601c      	str	r4, [r3, #0]
	list->tail = node;
    d2ee:	606c      	str	r4, [r5, #4]
    d2f0:	e7f3      	b.n	d2da <add_to_waitq_locked+0x42>

0000d2f2 <z_ready_thread>:
{
    d2f2:	b510      	push	{r4, lr}
    d2f4:	f04f 0320 	mov.w	r3, #32
    d2f8:	f3ef 8411 	mrs	r4, BASEPRI
    d2fc:	f383 8811 	msr	BASEPRI, r3
    d300:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    d304:	f7fb fb5e 	bl	89c4 <ready_thread>
	__asm__ volatile(
    d308:	f384 8811 	msr	BASEPRI, r4
    d30c:	f3bf 8f6f 	isb	sy
}
    d310:	bd10      	pop	{r4, pc}

0000d312 <z_thread_timeout>:
{
    d312:	b510      	push	{r4, lr}
    d314:	4601      	mov	r1, r0
	__asm__ volatile(
    d316:	f04f 0320 	mov.w	r3, #32
    d31a:	f3ef 8411 	mrs	r4, BASEPRI
    d31e:	f383 8811 	msr	BASEPRI, r3
    d322:	f3bf 8f6f 	isb	sy
		if (!killed) {
    d326:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    d32a:	f013 0f28 	tst.w	r3, #40	; 0x28
    d32e:	d10d      	bne.n	d34c <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    d330:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    d334:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    d336:	b10b      	cbz	r3, d33c <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    d338:	f7ff ff70 	bl	d21c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    d33c:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    d340:	f023 0314 	bic.w	r3, r3, #20
    d344:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    d348:	f7fb fb3c 	bl	89c4 <ready_thread>
	__asm__ volatile(
    d34c:	f384 8811 	msr	BASEPRI, r4
    d350:	f3bf 8f6f 	isb	sy
}
    d354:	bd10      	pop	{r4, pc}

0000d356 <z_unpend_first_thread>:
{
    d356:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    d358:	f04f 0320 	mov.w	r3, #32
    d35c:	f3ef 8511 	mrs	r5, BASEPRI
    d360:	f383 8811 	msr	BASEPRI, r3
    d364:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    d368:	f7ff ff8c 	bl	d284 <z_priq_dumb_best>
		if (thread != NULL) {
    d36c:	4604      	mov	r4, r0
    d36e:	b120      	cbz	r0, d37a <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    d370:	f7ff ff54 	bl	d21c <unpend_thread_no_timeout>
    d374:	3018      	adds	r0, #24
    d376:	f000 f833 	bl	d3e0 <z_abort_timeout>
	__asm__ volatile(
    d37a:	f385 8811 	msr	BASEPRI, r5
    d37e:	f3bf 8f6f 	isb	sy
}
    d382:	4620      	mov	r0, r4
    d384:	bd38      	pop	{r3, r4, r5, pc}

0000d386 <z_unpend_all>:
{
    d386:	b538      	push	{r3, r4, r5, lr}
    d388:	4605      	mov	r5, r0
	int need_sched = 0;
    d38a:	2000      	movs	r0, #0
	return list->head == list;
    d38c:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d38e:	42a5      	cmp	r5, r4
    d390:	d000      	beq.n	d394 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    d392:	b904      	cbnz	r4, d396 <z_unpend_all+0x10>
}
    d394:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
    d396:	4620      	mov	r0, r4
    d398:	f7ff ff4a 	bl	d230 <z_unpend_thread>
		z_ready_thread(thread);
    d39c:	4620      	mov	r0, r4
    d39e:	f7ff ffa8 	bl	d2f2 <z_ready_thread>
		need_sched = 1;
    d3a2:	2001      	movs	r0, #1
    d3a4:	e7f2      	b.n	d38c <z_unpend_all+0x6>

0000d3a6 <z_sched_wake>:
{
    d3a6:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    d3a8:	f04f 0320 	mov.w	r3, #32
    d3ac:	f3ef 8511 	mrs	r5, BASEPRI
    d3b0:	f383 8811 	msr	BASEPRI, r3
    d3b4:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    d3b8:	f7ff ff64 	bl	d284 <z_priq_dumb_best>
		if (thread != NULL) {
    d3bc:	4604      	mov	r4, r0
    d3be:	b150      	cbz	r0, d3d6 <z_sched_wake+0x30>
    d3c0:	6781      	str	r1, [r0, #120]	; 0x78
	thread->base.swap_data = data;
    d3c2:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
    d3c4:	f7ff ff2a 	bl	d21c <unpend_thread_no_timeout>
    d3c8:	3018      	adds	r0, #24
    d3ca:	f000 f809 	bl	d3e0 <z_abort_timeout>
			ready_thread(thread);
    d3ce:	4620      	mov	r0, r4
    d3d0:	f7fb faf8 	bl	89c4 <ready_thread>
			ret = true;
    d3d4:	2001      	movs	r0, #1
	__asm__ volatile(
    d3d6:	f385 8811 	msr	BASEPRI, r5
    d3da:	f3bf 8f6f 	isb	sy
}
    d3de:	bd38      	pop	{r3, r4, r5, pc}

0000d3e0 <z_abort_timeout>:
{
    d3e0:	b510      	push	{r4, lr}
	__asm__ volatile(
    d3e2:	f04f 0220 	mov.w	r2, #32
    d3e6:	f3ef 8411 	mrs	r4, BASEPRI
    d3ea:	f382 8811 	msr	BASEPRI, r2
    d3ee:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    d3f2:	6803      	ldr	r3, [r0, #0]
    d3f4:	b13b      	cbz	r3, d406 <z_abort_timeout+0x26>
			remove_timeout(to);
    d3f6:	f7fb fca5 	bl	8d44 <remove_timeout>
			ret = 0;
    d3fa:	2000      	movs	r0, #0
	__asm__ volatile(
    d3fc:	f384 8811 	msr	BASEPRI, r4
    d400:	f3bf 8f6f 	isb	sy
}
    d404:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    d406:	f06f 0015 	mvn.w	r0, #21
    d40a:	e7f7      	b.n	d3fc <z_abort_timeout+0x1c>

0000d40c <z_get_next_timeout_expiry>:
{
    d40c:	b510      	push	{r4, lr}
	__asm__ volatile(
    d40e:	f04f 0320 	mov.w	r3, #32
    d412:	f3ef 8411 	mrs	r4, BASEPRI
    d416:	f383 8811 	msr	BASEPRI, r3
    d41a:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    d41e:	f7fb fcab 	bl	8d78 <next_timeout>
	__asm__ volatile(
    d422:	f384 8811 	msr	BASEPRI, r4
    d426:	f3bf 8f6f 	isb	sy
}
    d42a:	bd10      	pop	{r4, pc}

0000d42c <z_set_timeout_expiry>:
{
    d42c:	b570      	push	{r4, r5, r6, lr}
    d42e:	4604      	mov	r4, r0
    d430:	460d      	mov	r5, r1
	__asm__ volatile(
    d432:	f04f 0320 	mov.w	r3, #32
    d436:	f3ef 8611 	mrs	r6, BASEPRI
    d43a:	f383 8811 	msr	BASEPRI, r3
    d43e:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    d442:	f7fb fc99 	bl	8d78 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    d446:	2801      	cmp	r0, #1
    d448:	dd05      	ble.n	d456 <z_set_timeout_expiry+0x2a>
    d44a:	42a0      	cmp	r0, r4
    d44c:	db03      	blt.n	d456 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    d44e:	4629      	mov	r1, r5
    d450:	4620      	mov	r0, r4
    d452:	f7f6 fbe9 	bl	3c28 <sys_clock_set_timeout>
	__asm__ volatile(
    d456:	f386 8811 	msr	BASEPRI, r6
    d45a:	f3bf 8f6f 	isb	sy
}
    d45e:	bd70      	pop	{r4, r5, r6, pc}

0000d460 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    d460:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    d462:	f7fb fda9 	bl	8fb8 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    d466:	bd08      	pop	{r3, pc}

0000d468 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    d468:	b108      	cbz	r0, d46e <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    d46a:	f7f7 bd8f 	b.w	4f8c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    d46e:	4770      	bx	lr

0000d470 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
    d470:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    d472:	1c4b      	adds	r3, r1, #1
    d474:	bf08      	it	eq
    d476:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    d47a:	4604      	mov	r4, r0
    d47c:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    d47e:	d013      	beq.n	d4a8 <sys_clock_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    d480:	ea54 0105 	orrs.w	r1, r4, r5
    d484:	d103      	bne.n	d48e <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
    d486:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
    d48a:	f7fb bd95 	b.w	8fb8 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    d48e:	f06f 0101 	mvn.w	r1, #1
    d492:	1a0a      	subs	r2, r1, r0
    d494:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    d498:	eb61 0305 	sbc.w	r3, r1, r5
    d49c:	2a00      	cmp	r2, #0
    d49e:	f173 0100 	sbcs.w	r1, r3, #0
    d4a2:	db02      	blt.n	d4aa <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
    d4a4:	4610      	mov	r0, r2
    d4a6:	4619      	mov	r1, r3
}
    d4a8:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get() + MAX(1, dt);
    d4aa:	f7fb fd85 	bl	8fb8 <sys_clock_tick_get>
    d4ae:	2c01      	cmp	r4, #1
    d4b0:	f175 0300 	sbcs.w	r3, r5, #0
    d4b4:	bfbc      	itt	lt
    d4b6:	2401      	movlt	r4, #1
    d4b8:	2500      	movlt	r5, #0
    d4ba:	1820      	adds	r0, r4, r0
    d4bc:	eb45 0101 	adc.w	r1, r5, r1
    d4c0:	e7f2      	b.n	d4a8 <sys_clock_timeout_end_calc+0x38>

0000d4c2 <k_free>:
	if (ptr != NULL) {
    d4c2:	b120      	cbz	r0, d4ce <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
    d4c4:	1f01      	subs	r1, r0, #4
    d4c6:	f850 0c04 	ldr.w	r0, [r0, #-4]
    d4ca:	f000 b851 	b.w	d570 <k_heap_free>
}
    d4ce:	4770      	bx	lr

0000d4d0 <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    d4d0:	4770      	bx	lr

0000d4d2 <k_heap_init>:
{
    d4d2:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
    d4d4:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    d4d8:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    d4dc:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    d4de:	f7fc be58 	b.w	a192 <sys_heap_init>

0000d4e2 <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    d4e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d4e6:	b087      	sub	sp, #28
    d4e8:	4604      	mov	r4, r0
    d4ea:	460e      	mov	r6, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    d4ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
{
    d4f0:	4617      	mov	r7, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    d4f2:	f7ff ffbd 	bl	d470 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
    d4f6:	f104 0914 	add.w	r9, r4, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    d4fa:	4605      	mov	r5, r0
    d4fc:	4688      	mov	r8, r1
	__asm__ volatile(
    d4fe:	f04f 0320 	mov.w	r3, #32
    d502:	f3ef 8b11 	mrs	fp, BASEPRI
    d506:	f383 8811 	msr	BASEPRI, r3
    d50a:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    d50e:	f104 0a0c 	add.w	sl, r4, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    d512:	463a      	mov	r2, r7
    d514:	4631      	mov	r1, r6
    d516:	4620      	mov	r0, r4
    d518:	f7fc fdc0 	bl	a09c <sys_heap_aligned_alloc>
    d51c:	9005      	str	r0, [sp, #20]
		now = sys_clock_tick_get();
    d51e:	f7fb fd4b 	bl	8fb8 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
    d522:	9b05      	ldr	r3, [sp, #20]
    d524:	b13b      	cbz	r3, d536 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
    d526:	f38b 8811 	msr	BASEPRI, fp
    d52a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
    d52e:	4618      	mov	r0, r3
    d530:	b007      	add	sp, #28
    d532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
    d536:	1a2a      	subs	r2, r5, r0
    d538:	9202      	str	r2, [sp, #8]
    d53a:	eb68 0201 	sbc.w	r2, r8, r1
    d53e:	9203      	str	r2, [sp, #12]
    d540:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
    d544:	2901      	cmp	r1, #1
    d546:	f172 0200 	sbcs.w	r2, r2, #0
    d54a:	dbec      	blt.n	d526 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    d54c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    d550:	4659      	mov	r1, fp
    d552:	e9cd 2300 	strd	r2, r3, [sp]
    d556:	4648      	mov	r0, r9
    d558:	4652      	mov	r2, sl
    d55a:	f7fb f917 	bl	878c <z_pend_curr>
	__asm__ volatile(
    d55e:	f04f 0320 	mov.w	r3, #32
    d562:	f3ef 8b11 	mrs	fp, BASEPRI
    d566:	f383 8811 	msr	BASEPRI, r3
    d56a:	f3bf 8f6f 	isb	sy
    d56e:	e7d0      	b.n	d512 <k_heap_aligned_alloc+0x30>

0000d570 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
    d570:	b538      	push	{r3, r4, r5, lr}
    d572:	4604      	mov	r4, r0
    d574:	f04f 0320 	mov.w	r3, #32
    d578:	f3ef 8511 	mrs	r5, BASEPRI
    d57c:	f383 8811 	msr	BASEPRI, r3
    d580:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
    d584:	f7fc fd3d 	bl	a002 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
    d588:	f104 000c 	add.w	r0, r4, #12
    d58c:	f7ff fefb 	bl	d386 <z_unpend_all>
    d590:	b130      	cbz	r0, d5a0 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
    d592:	4629      	mov	r1, r5
    d594:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
    d598:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
    d59c:	f7fb b872 	b.w	8684 <z_reschedule>
	__asm__ volatile(
    d5a0:	f385 8811 	msr	BASEPRI, r5
    d5a4:	f3bf 8f6f 	isb	sy
}
    d5a8:	bd38      	pop	{r3, r4, r5, pc}

0000d5aa <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    d5aa:	4770      	bx	lr
